
005_TaskDelete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003f8c  08003f8c  00013f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e8  080040e8  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080040e8  080040e8  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040e8  080040e8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080040f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001542c  20000028  08004118  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015454  08004118  00025454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7b3  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b03  00000000  00000000  0002d80b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b18  00000000  00000000  0002f310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  0002fe28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ae0  00000000  00000000  00030868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d0a  00000000  00000000  00033348  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ecf9  00000000  00000000  0003d052  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bbd4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f94  00000000  00000000  000bbdc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000028 	.word	0x20000028
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003f74 	.word	0x08003f74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000002c 	.word	0x2000002c
 800020c:	08003f74 	.word	0x08003f74

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000220:	b480      	push	{r7}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e076      	b.n	800032a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800023c:	2201      	movs	r2, #1
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	fa02 f303 	lsl.w	r3, r2, r3
 8000244:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	4013      	ands	r3, r2
 800024e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	429a      	cmp	r2, r3
 8000256:	d165      	bne.n	8000324 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	2103      	movs	r1, #3
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	43db      	mvns	r3, r3
 8000268:	401a      	ands	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	791b      	ldrb	r3, [r3, #4]
 8000276:	4619      	mov	r1, r3
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	791b      	ldrb	r3, [r3, #4]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d003      	beq.n	8000296 <GPIO_Init+0x76>
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	2b02      	cmp	r3, #2
 8000294:	d12e      	bne.n	80002f4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	2103      	movs	r1, #3
 80002a0:	fa01 f303 	lsl.w	r3, r1, r3
 80002a4:	43db      	mvns	r3, r3
 80002a6:	401a      	ands	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	795b      	ldrb	r3, [r3, #5]
 80002b4:	4619      	mov	r1, r3
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	431a      	orrs	r2, r3
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	685a      	ldr	r2, [r3, #4]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	2301      	movs	r3, #1
 80002d0:	408b      	lsls	r3, r1
 80002d2:	43db      	mvns	r3, r3
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	683a      	ldr	r2, [r7, #0]
 80002e0:	7992      	ldrb	r2, [r2, #6]
 80002e2:	4611      	mov	r1, r2
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	b292      	uxth	r2, r2
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	b292      	uxth	r2, r2
 80002ee:	431a      	orrs	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	68da      	ldr	r2, [r3, #12]
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	2103      	movs	r1, #3
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	43db      	mvns	r3, r3
 8000306:	401a      	ands	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68da      	ldr	r2, [r3, #12]
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	79db      	ldrb	r3, [r3, #7]
 8000314:	4619      	mov	r1, r3
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	431a      	orrs	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	3301      	adds	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	2b0f      	cmp	r3, #15
 800032e:	d985      	bls.n	800023c <GPIO_Init+0x1c>
    }
  }
}
 8000330:	bf00      	nop
 8000332:	371c      	adds	r7, #28
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000348:	2300      	movs	r3, #0
 800034a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	691a      	ldr	r2, [r3, #16]
 8000350:	887b      	ldrh	r3, [r7, #2]
 8000352:	4013      	ands	r3, r2
 8000354:	2b00      	cmp	r3, #0
 8000356:	d002      	beq.n	800035e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000358:	2301      	movs	r3, #1
 800035a:	73fb      	strb	r3, [r7, #15]
 800035c:	e001      	b.n	8000362 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800035e:	2300      	movs	r3, #0
 8000360:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000362:	7bfb      	ldrb	r3, [r7, #15]
}
 8000364:	4618      	mov	r0, r3
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	695a      	ldr	r2, [r3, #20]
 8000380:	887b      	ldrh	r3, [r7, #2]
 8000382:	405a      	eors	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	615a      	str	r2, [r3, #20]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	807b      	strh	r3, [r7, #2]
 80003a0:	4613      	mov	r3, r2
 80003a2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003ac:	787a      	ldrb	r2, [r7, #1]
 80003ae:	887b      	ldrh	r3, [r7, #2]
 80003b0:	f003 0307 	and.w	r3, r3, #7
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ba:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003bc:	887b      	ldrh	r3, [r7, #2]
 80003be:	08db      	lsrs	r3, r3, #3
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3208      	adds	r2, #8
 80003c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003cc:	887b      	ldrh	r3, [r7, #2]
 80003ce:	f003 0307 	and.w	r3, r3, #7
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	210f      	movs	r1, #15
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	43db      	mvns	r3, r3
 80003dc:	8879      	ldrh	r1, [r7, #2]
 80003de:	08c9      	lsrs	r1, r1, #3
 80003e0:	b289      	uxth	r1, r1
 80003e2:	4608      	mov	r0, r1
 80003e4:	ea02 0103 	and.w	r1, r2, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f100 0208 	add.w	r2, r0, #8
 80003ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003f2:	887b      	ldrh	r3, [r7, #2]
 80003f4:	08db      	lsrs	r3, r3, #3
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3208      	adds	r2, #8
 80003fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	4313      	orrs	r3, r2
 8000406:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000408:	887b      	ldrh	r3, [r7, #2]
 800040a:	08db      	lsrs	r3, r3, #3
 800040c:	b29b      	uxth	r3, r3
 800040e:	461a      	mov	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3208      	adds	r2, #8
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
	...

08000428 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800042c:	4b16      	ldr	r3, [pc, #88]	; (8000488 <RCC_DeInit+0x60>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a15      	ldr	r2, [pc, #84]	; (8000488 <RCC_DeInit+0x60>)
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <RCC_DeInit+0x60>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <RCC_DeInit+0x60>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a11      	ldr	r2, [pc, #68]	; (8000488 <RCC_DeInit+0x60>)
 8000444:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000448:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800044c:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <RCC_DeInit+0x60>)
 8000450:	4a0e      	ldr	r2, [pc, #56]	; (800048c <RCC_DeInit+0x64>)
 8000452:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <RCC_DeInit+0x60>)
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <RCC_DeInit+0x68>)
 8000458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <RCC_DeInit+0x60>)
 800045e:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <RCC_DeInit+0x6c>)
 8000460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <RCC_DeInit+0x60>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a07      	ldr	r2, [pc, #28]	; (8000488 <RCC_DeInit+0x60>)
 800046a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800046e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <RCC_DeInit+0x60>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000476:	4b04      	ldr	r3, [pc, #16]	; (8000488 <RCC_DeInit+0x60>)
 8000478:	2200      	movs	r2, #0
 800047a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr
 8000488:	40023800 	.word	0x40023800
 800048c:	24003010 	.word	0x24003010
 8000490:	20003000 	.word	0x20003000
 8000494:	24003000 	.word	0x24003000

08000498 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000498:	b480      	push	{r7}
 800049a:	b08b      	sub	sp, #44	; 0x2c
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
 80004a8:	2300      	movs	r3, #0
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
 80004ac:	2302      	movs	r3, #2
 80004ae:	61bb      	str	r3, [r7, #24]
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	2302      	movs	r3, #2
 80004b6:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 80004b8:	2302      	movs	r3, #2
 80004ba:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004bc:	4b6f      	ldr	r3, [pc, #444]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	f003 030c 	and.w	r3, r3, #12
 80004c4:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80004c6:	6a3b      	ldr	r3, [r7, #32]
 80004c8:	2b0c      	cmp	r3, #12
 80004ca:	f200 8091 	bhi.w	80005f0 <RCC_GetClocksFreq+0x158>
 80004ce:	a201      	add	r2, pc, #4	; (adr r2, 80004d4 <RCC_GetClocksFreq+0x3c>)
 80004d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d4:	08000509 	.word	0x08000509
 80004d8:	080005f1 	.word	0x080005f1
 80004dc:	080005f1 	.word	0x080005f1
 80004e0:	080005f1 	.word	0x080005f1
 80004e4:	08000511 	.word	0x08000511
 80004e8:	080005f1 	.word	0x080005f1
 80004ec:	080005f1 	.word	0x080005f1
 80004f0:	080005f1 	.word	0x080005f1
 80004f4:	08000519 	.word	0x08000519
 80004f8:	080005f1 	.word	0x080005f1
 80004fc:	080005f1 	.word	0x080005f1
 8000500:	080005f1 	.word	0x080005f1
 8000504:	08000585 	.word	0x08000585
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a5d      	ldr	r2, [pc, #372]	; (8000680 <RCC_GetClocksFreq+0x1e8>)
 800050c:	601a      	str	r2, [r3, #0]
    break;
 800050e:	e073      	b.n	80005f8 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a5c      	ldr	r2, [pc, #368]	; (8000684 <RCC_GetClocksFreq+0x1ec>)
 8000514:	601a      	str	r2, [r3, #0]
    break;
 8000516:	e06f      	b.n	80005f8 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000518:	4b58      	ldr	r3, [pc, #352]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	0d9b      	lsrs	r3, r3, #22
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000524:	4b55      	ldr	r3, [pc, #340]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800052c:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d00c      	beq.n	800054e <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000534:	4a53      	ldr	r2, [pc, #332]	; (8000684 <RCC_GetClocksFreq+0x1ec>)
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	fbb2 f3f3 	udiv	r3, r2, r3
 800053c:	4a4f      	ldr	r2, [pc, #316]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 800053e:	6852      	ldr	r2, [r2, #4]
 8000540:	0992      	lsrs	r2, r2, #6
 8000542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000546:	fb02 f303 	mul.w	r3, r2, r3
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
 800054c:	e00b      	b.n	8000566 <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800054e:	4a4c      	ldr	r2, [pc, #304]	; (8000680 <RCC_GetClocksFreq+0x1e8>)
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	fbb2 f3f3 	udiv	r3, r2, r3
 8000556:	4a49      	ldr	r2, [pc, #292]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 8000558:	6852      	ldr	r2, [r2, #4]
 800055a:	0992      	lsrs	r2, r2, #6
 800055c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000560:	fb02 f303 	mul.w	r3, r2, r3
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000566:	4b45      	ldr	r3, [pc, #276]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	f003 0303 	and.w	r3, r3, #3
 8000570:	3301      	adds	r3, #1
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	fbb2 f2f3 	udiv	r2, r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]
    break;
 8000582:	e039      	b.n	80005f8 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000584:	4b3d      	ldr	r3, [pc, #244]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	0d9b      	lsrs	r3, r3, #22
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000590:	4b3a      	ldr	r3, [pc, #232]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000598:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00c      	beq.n	80005ba <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005a0:	4a38      	ldr	r2, [pc, #224]	; (8000684 <RCC_GetClocksFreq+0x1ec>)
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a8:	4a34      	ldr	r2, [pc, #208]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 80005aa:	6852      	ldr	r2, [r2, #4]
 80005ac:	0992      	lsrs	r2, r2, #6
 80005ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005b2:	fb02 f303 	mul.w	r3, r2, r3
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
 80005b8:	e00b      	b.n	80005d2 <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005ba:	4a31      	ldr	r2, [pc, #196]	; (8000680 <RCC_GetClocksFreq+0x1e8>)
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c2:	4a2e      	ldr	r2, [pc, #184]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 80005c4:	6852      	ldr	r2, [r2, #4]
 80005c6:	0992      	lsrs	r2, r2, #6
 80005c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005cc:	fb02 f303 	mul.w	r3, r2, r3
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	0f1b      	lsrs	r3, r3, #28
 80005d8:	f003 0307 	and.w	r3, r3, #7
 80005dc:	3301      	adds	r3, #1
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 80005e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]
    break;
 80005ee:	e003      	b.n	80005f8 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a23      	ldr	r2, [pc, #140]	; (8000680 <RCC_GetClocksFreq+0x1e8>)
 80005f4:	601a      	str	r2, [r3, #0]
    break;
 80005f6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000600:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000602:	6a3b      	ldr	r3, [r7, #32]
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000608:	4a1f      	ldr	r2, [pc, #124]	; (8000688 <RCC_GetClocksFreq+0x1f0>)
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	40da      	lsrs	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000628:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 800062a:	6a3b      	ldr	r3, [r7, #32]
 800062c:	0a9b      	lsrs	r3, r3, #10
 800062e:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000630:	4a15      	ldr	r2, [pc, #84]	; (8000688 <RCC_GetClocksFreq+0x1f0>)
 8000632:	6a3b      	ldr	r3, [r7, #32]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	40da      	lsrs	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <RCC_GetClocksFreq+0x1e4>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000650:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	0b5b      	lsrs	r3, r3, #13
 8000656:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <RCC_GetClocksFreq+0x1f0>)
 800065a:	6a3b      	ldr	r3, [r7, #32]
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	40da      	lsrs	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	60da      	str	r2, [r3, #12]
}
 8000670:	bf00      	nop
 8000672:	372c      	adds	r7, #44	; 0x2c
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	40023800 	.word	0x40023800
 8000680:	00f42400 	.word	0x00f42400
 8000684:	007a1200 	.word	0x007a1200
 8000688:	20000000 	.word	0x20000000

0800068c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d006      	beq.n	80006ac <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006aa:	e006      	b.n	80006ba <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	43db      	mvns	r3, r3
 80006b4:	4904      	ldr	r1, [pc, #16]	; (80006c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006b6:	4013      	ands	r3, r2
 80006b8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <RCC_APB1PeriphClockCmd+0x3c>)
 80006e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006e2:	4909      	ldr	r1, [pc, #36]	; (8000708 <RCC_APB1PeriphClockCmd+0x3c>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006ea:	e006      	b.n	80006fa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <RCC_APB1PeriphClockCmd+0x3c>)
 80006ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	43db      	mvns	r3, r3
 80006f4:	4904      	ldr	r1, [pc, #16]	; (8000708 <RCC_APB1PeriphClockCmd+0x3c>)
 80006f6:	4013      	ands	r3, r2
 80006f8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	8a1b      	ldrh	r3, [r3, #16]
 800072a:	b29b      	uxth	r3, r3
 800072c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000734:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	88db      	ldrh	r3, [r3, #6]
 800073a:	461a      	mov	r2, r3
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	4313      	orrs	r3, r2
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	b29a      	uxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	899b      	ldrh	r3, [r3, #12]
 800074e:	b29b      	uxth	r3, r3
 8000750:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000758:	f023 030c 	bic.w	r3, r3, #12
 800075c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	889a      	ldrh	r2, [r3, #4]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	891b      	ldrh	r3, [r3, #8]
 8000766:	4313      	orrs	r3, r2
 8000768:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800076e:	4313      	orrs	r3, r2
 8000770:	b29b      	uxth	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	4313      	orrs	r3, r2
 8000778:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077c:	b29a      	uxth	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	8a9b      	ldrh	r3, [r3, #20]
 8000786:	b29b      	uxth	r3, r3
 8000788:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000790:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	899b      	ldrh	r3, [r3, #12]
 8000796:	461a      	mov	r2, r3
 8000798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079a:	4313      	orrs	r3, r2
 800079c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe74 	bl	8000498 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a30      	ldr	r2, [pc, #192]	; (8000874 <USART_Init+0x168>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d003      	beq.n	80007c0 <USART_Init+0xb4>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a2f      	ldr	r2, [pc, #188]	; (8000878 <USART_Init+0x16c>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d102      	bne.n	80007c6 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	623b      	str	r3, [r7, #32]
 80007c4:	e001      	b.n	80007ca <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	899b      	ldrh	r3, [r3, #12]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da0c      	bge.n	80007f0 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80007d6:	6a3a      	ldr	r2, [r7, #32]
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	009a      	lsls	r2, r3, #2
 80007e0:	441a      	add	r2, r3
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	e00b      	b.n	8000808 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80007f0:	6a3a      	ldr	r2, [r7, #32]
 80007f2:	4613      	mov	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	009a      	lsls	r2, r3, #2
 80007fa:	441a      	add	r2, r3
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <USART_Init+0x170>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	095b      	lsrs	r3, r3, #5
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	091b      	lsrs	r3, r3, #4
 800081a:	2264      	movs	r2, #100	; 0x64
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	69fa      	ldr	r2, [r7, #28]
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	899b      	ldrh	r3, [r3, #12]
 800082a:	b29b      	uxth	r3, r3
 800082c:	b21b      	sxth	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	da0c      	bge.n	800084c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	3332      	adds	r3, #50	; 0x32
 8000838:	4a10      	ldr	r2, [pc, #64]	; (800087c <USART_Init+0x170>)
 800083a:	fba2 2303 	umull	r2, r3, r2, r3
 800083e:	095b      	lsrs	r3, r3, #5
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000846:	4313      	orrs	r3, r2
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
 800084a:	e00b      	b.n	8000864 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	3332      	adds	r3, #50	; 0x32
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <USART_Init+0x170>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	095b      	lsrs	r3, r3, #5
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000860:	4313      	orrs	r3, r2
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000866:	b29a      	uxth	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	811a      	strh	r2, [r3, #8]
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40011000 	.word	0x40011000
 8000878:	40011400 	.word	0x40011400
 800087c:	51eb851f 	.word	0x51eb851f

08000880 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d008      	beq.n	80008a4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	899b      	ldrh	r3, [r3, #12]
 8000896:	b29b      	uxth	r3, r3
 8000898:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800089c:	b29a      	uxth	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80008a2:	e007      	b.n	80008b4 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	899b      	ldrh	r3, [r3, #12]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	819a      	strh	r2, [r3, #12]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80008cc:	887b      	ldrh	r3, [r7, #2]
 80008ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	809a      	strh	r2, [r3, #4]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	887b      	ldrh	r3, [r7, #2]
 80008fc:	4013      	ands	r3, r2
 80008fe:	b29b      	uxth	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000904:	2301      	movs	r3, #1
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	e001      	b.n	800090e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f103 0208 	add.w	r2, r3, #8
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f04f 32ff 	mov.w	r2, #4294967295
 8000934:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f103 0208 	add.w	r2, r3, #8
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f103 0208 	add.w	r2, r3, #8
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000976:	b480      	push	{r7}
 8000978:	b085      	sub	sp, #20
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009be:	b480      	push	{r7}
 80009c0:	b085      	sub	sp, #20
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d4:	d103      	bne.n	80009de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	691b      	ldr	r3, [r3, #16]
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	e00c      	b.n	80009f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3308      	adds	r3, #8
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	e002      	b.n	80009ec <vListInsert+0x2e>
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d2f6      	bcs.n	80009e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	6892      	ldr	r2, [r2, #8]
 8000a46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	6852      	ldr	r2, [r2, #4]
 8000a50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d103      	bne.n	8000a64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689a      	ldr	r2, [r3, #8]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af04      	add	r7, sp, #16
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	4613      	mov	r3, r2
 8000a92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fff1 	bl	8001a80 <pvPortMalloc>
 8000a9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00e      	beq.n	8000ac4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000aa6:	2058      	movs	r0, #88	; 0x58
 8000aa8:	f000 ffea 	bl	8001a80 <pvPortMalloc>
 8000aac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8000aba:	e005      	b.n	8000ac8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000abc:	6978      	ldr	r0, [r7, #20]
 8000abe:	f001 f8a7 	bl	8001c10 <vPortFree>
 8000ac2:	e001      	b.n	8000ac8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d013      	beq.n	8000af6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000ace:	88fa      	ldrh	r2, [r7, #6]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9303      	str	r3, [sp, #12]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68b9      	ldr	r1, [r7, #8]
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f000 f80e 	bl	8000b06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000aea:	69f8      	ldr	r0, [r7, #28]
 8000aec:	f000 f89a 	bl	8000c24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	e002      	b.n	8000afc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000afc:	69bb      	ldr	r3, [r7, #24]
	}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b088      	sub	sp, #32
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	21a5      	movs	r1, #165	; 0xa5
 8000b20:	f003 fa20 	bl	8003f64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	f023 0307 	bic.w	r3, r3, #7
 8000b3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	f003 0307 	and.w	r3, r3, #7
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d009      	beq.n	8000b5c <prvInitialiseNewTask+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b4c:	f383 8811 	msr	BASEPRI, r3
 8000b50:	f3bf 8f6f 	isb	sy
 8000b54:	f3bf 8f4f 	dsb	sy
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e7fe      	b.n	8000b5a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d01f      	beq.n	8000ba2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	e012      	b.n	8000b8e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	7819      	ldrb	r1, [r3, #0]
 8000b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	4413      	add	r3, r2
 8000b76:	3334      	adds	r3, #52	; 0x34
 8000b78:	460a      	mov	r2, r1
 8000b7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	4413      	add	r3, r2
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d006      	beq.n	8000b96 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	2b09      	cmp	r3, #9
 8000b92:	d9e9      	bls.n	8000b68 <prvInitialiseNewTask+0x62>
 8000b94:	e000      	b.n	8000b98 <prvInitialiseNewTask+0x92>
			{
				break;
 8000b96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000ba0:	e003      	b.n	8000baa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d901      	bls.n	8000bb4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bbe:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc8:	3304      	adds	r3, #4
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fec6 	bl	800095c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd2:	3318      	adds	r3, #24
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fec1 	bl	800095c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be2:	f1c3 0205 	rsb	r2, r3, #5
 8000be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	68f9      	ldr	r1, [r7, #12]
 8000c02:	69b8      	ldr	r0, [r7, #24]
 8000c04:	f000 fcf0 	bl	80015e8 <pxPortInitialiseStack>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000c24:	b5b0      	push	{r4, r5, r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000c2c:	f000 fe06 	bl	800183c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000c30:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <prvAddNewTaskToReadyList+0xfc>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a3a      	ldr	r2, [pc, #232]	; (8000d20 <prvAddNewTaskToReadyList+0xfc>)
 8000c38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <prvAddNewTaskToReadyList+0x100>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d109      	bne.n	8000c56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000c42:	4a38      	ldr	r2, [pc, #224]	; (8000d24 <prvAddNewTaskToReadyList+0x100>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c48:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <prvAddNewTaskToReadyList+0xfc>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d110      	bne.n	8000c72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000c50:	f000 fbb6 	bl	80013c0 <prvInitialiseTaskLists>
 8000c54:	e00d      	b.n	8000c72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <prvAddNewTaskToReadyList+0x104>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d109      	bne.n	8000c72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000c5e:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <prvAddNewTaskToReadyList+0x100>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d802      	bhi.n	8000c72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000c6c:	4a2d      	ldr	r2, [pc, #180]	; (8000d24 <prvAddNewTaskToReadyList+0x100>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <prvAddNewTaskToReadyList+0x108>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	4a2c      	ldr	r2, [pc, #176]	; (8000d2c <prvAddNewTaskToReadyList+0x108>)
 8000c7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <prvAddNewTaskToReadyList+0x108>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d016      	beq.n	8000cb8 <prvAddNewTaskToReadyList+0x94>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fb5d 	bl	800334c <SEGGER_SYSVIEW_OnTaskCreate>
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	461d      	mov	r5, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	461c      	mov	r4, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	1ae3      	subs	r3, r4, r3
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	462b      	mov	r3, r5
 8000cb4:	f001 f970 	bl	8001f98 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fbce 	bl	800345c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <prvAddNewTaskToReadyList+0x10c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <prvAddNewTaskToReadyList+0x10c>)
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <prvAddNewTaskToReadyList+0x110>)
 8000ce0:	441a      	add	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4610      	mov	r0, r2
 8000cea:	f7ff fe44 	bl	8000976 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000cee:	f000 fdd3 	bl	8001898 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <prvAddNewTaskToReadyList+0x104>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00e      	beq.n	8000d18 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <prvAddNewTaskToReadyList+0x100>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <prvAddNewTaskToReadyList+0x114>)
 8000d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	f3bf 8f4f 	dsb	sy
 8000d14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d20:	2000011c 	.word	0x2000011c
 8000d24:	20000044 	.word	0x20000044
 8000d28:	20000128 	.word	0x20000128
 8000d2c:	20000138 	.word	0x20000138
 8000d30:	20000124 	.word	0x20000124
 8000d34:	20000048 	.word	0x20000048
 8000d38:	e000ed04 	.word	0xe000ed04

08000d3c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8000d44:	f000 fd7a 	bl	800183c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <vTaskDelete+0x18>
 8000d4e:	4b45      	ldr	r3, [pc, #276]	; (8000e64 <vTaskDelete+0x128>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	e000      	b.n	8000d56 <vTaskDelete+0x1a>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fe67 	bl	8000a30 <uxListRemove>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d115      	bne.n	8000d94 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d6c:	493e      	ldr	r1, [pc, #248]	; (8000e68 <vTaskDelete+0x12c>)
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	440b      	add	r3, r1
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10a      	bne.n	8000d94 <vTaskDelete+0x58>
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d82:	2201      	movs	r2, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43da      	mvns	r2, r3
 8000d8a:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <vTaskDelete+0x130>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	4a36      	ldr	r2, [pc, #216]	; (8000e6c <vTaskDelete+0x130>)
 8000d92:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d004      	beq.n	8000da6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3318      	adds	r3, #24
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe45 	bl	8000a30 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <vTaskDelete+0x134>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a30      	ldr	r2, [pc, #192]	; (8000e70 <vTaskDelete+0x134>)
 8000dae:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8000db0:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <vTaskDelete+0x128>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d118      	bne.n	8000dec <vTaskDelete+0xb0>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	482c      	ldr	r0, [pc, #176]	; (8000e74 <vTaskDelete+0x138>)
 8000dc2:	f7ff fdd8 	bl	8000976 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <vTaskDelete+0x13c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	4a2a      	ldr	r2, [pc, #168]	; (8000e78 <vTaskDelete+0x13c>)
 8000dce:	6013      	str	r3, [r2, #0]

				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
				traceTASK_DELETE( pxTCB );
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 fbe6 	bl	80035a4 <SEGGER_SYSVIEW_ShrinkId>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4619      	mov	r1, r3
 8000ddc:	2022      	movs	r0, #34	; 0x22
 8000dde:	f001 febf 	bl	8002b60 <SEGGER_SYSVIEW_RecordU32>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 f93f 	bl	8002068 <SYSVIEW_DeleteTask>
 8000dea:	e016      	b.n	8000e1a <vTaskDelete+0xde>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <vTaskDelete+0x140>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <vTaskDelete+0x140>)
 8000df4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 fbd3 	bl	80035a4 <SEGGER_SYSVIEW_ShrinkId>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4619      	mov	r1, r3
 8000e02:	2022      	movs	r0, #34	; 0x22
 8000e04:	f001 feac 	bl	8002b60 <SEGGER_SYSVIEW_RecordU32>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 f92c 	bl	8002068 <SYSVIEW_DeleteTask>
				prvDeleteTCB( pxTCB );
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f000 fb41 	bl	8001498 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8000e16:	f000 fb4f 	bl	80014b8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8000e1a:	f000 fd3d 	bl	8001898 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <vTaskDelete+0x144>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d01a      	beq.n	8000e5c <vTaskDelete+0x120>
		{
			if( pxTCB == pxCurrentTCB )
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <vTaskDelete+0x128>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d115      	bne.n	8000e5c <vTaskDelete+0x120>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <vTaskDelete+0x148>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d009      	beq.n	8000e4c <vTaskDelete+0x110>
 8000e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3c:	f383 8811 	msr	BASEPRI, r3
 8000e40:	f3bf 8f6f 	isb	sy
 8000e44:	f3bf 8f4f 	dsb	sy
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	e7fe      	b.n	8000e4a <vTaskDelete+0x10e>
				portYIELD_WITHIN_API();
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <vTaskDelete+0x14c>)
 8000e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	f3bf 8f4f 	dsb	sy
 8000e58:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000044 	.word	0x20000044
 8000e68:	20000048 	.word	0x20000048
 8000e6c:	20000124 	.word	0x20000124
 8000e70:	20000138 	.word	0x20000138
 8000e74:	200000f0 	.word	0x200000f0
 8000e78:	20000104 	.word	0x20000104
 8000e7c:	2000011c 	.word	0x2000011c
 8000e80:	20000128 	.word	0x20000128
 8000e84:	20000144 	.word	0x20000144
 8000e88:	e000ed04 	.word	0xe000ed04

08000e8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d01a      	beq.n	8000ed4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <vTaskDelay+0x68>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d009      	beq.n	8000eba <vTaskDelay+0x2e>
 8000ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eaa:	f383 8811 	msr	BASEPRI, r3
 8000eae:	f3bf 8f6f 	isb	sy
 8000eb2:	f3bf 8f4f 	dsb	sy
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	e7fe      	b.n	8000eb8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8000eba:	f000 f875 	bl	8000fa8 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	2023      	movs	r0, #35	; 0x23
 8000ec2:	f001 fe4d 	bl	8002b60 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fb15 	bl	80014f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000ece:	f000 f879 	bl	8000fc4 <xTaskResumeAll>
 8000ed2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d107      	bne.n	8000eea <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <vTaskDelay+0x6c>)
 8000edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	f3bf 8f4f 	dsb	sy
 8000ee6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000144 	.word	0x20000144
 8000ef8:	e000ed04 	.word	0xe000ed04

08000efc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <vTaskStartScheduler+0x90>)
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	2300      	movs	r3, #0
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2282      	movs	r2, #130	; 0x82
 8000f0e:	4920      	ldr	r1, [pc, #128]	; (8000f90 <vTaskStartScheduler+0x94>)
 8000f10:	4820      	ldr	r0, [pc, #128]	; (8000f94 <vTaskStartScheduler+0x98>)
 8000f12:	f7ff fdb7 	bl	8000a84 <xTaskCreate>
 8000f16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d123      	bne.n	8000f66 <vTaskStartScheduler+0x6a>
 8000f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f22:	f383 8811 	msr	BASEPRI, r3
 8000f26:	f3bf 8f6f 	isb	sy
 8000f2a:	f3bf 8f4f 	dsb	sy
 8000f2e:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <vTaskStartScheduler+0x9c>)
 8000f32:	f04f 32ff 	mov.w	r2, #4294967295
 8000f36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <vTaskStartScheduler+0xa0>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <vTaskStartScheduler+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <vTaskStartScheduler+0xa8>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <vTaskStartScheduler+0x90>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d102      	bne.n	8000f56 <vTaskStartScheduler+0x5a>
 8000f50:	f002 f9e0 	bl	8003314 <SEGGER_SYSVIEW_OnIdle>
 8000f54:	e004      	b.n	8000f60 <vTaskStartScheduler+0x64>
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <vTaskStartScheduler+0xa8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fa3a 	bl	80033d4 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000f60:	f000 fbce 	bl	8001700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000f64:	e00d      	b.n	8000f82 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d109      	bne.n	8000f82 <vTaskStartScheduler+0x86>
 8000f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f72:	f383 8811 	msr	BASEPRI, r3
 8000f76:	f3bf 8f6f 	isb	sy
 8000f7a:	f3bf 8f4f 	dsb	sy
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	e7fe      	b.n	8000f80 <vTaskStartScheduler+0x84>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000140 	.word	0x20000140
 8000f90:	08003f8c 	.word	0x08003f8c
 8000f94:	08001391 	.word	0x08001391
 8000f98:	2000013c 	.word	0x2000013c
 8000f9c:	20000128 	.word	0x20000128
 8000fa0:	20000120 	.word	0x20000120
 8000fa4:	20000044 	.word	0x20000044

08000fa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <vTaskSuspendAll+0x18>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <vTaskSuspendAll+0x18>)
 8000fb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	20000144 	.word	0x20000144

08000fc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <xTaskResumeAll+0x11c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d109      	bne.n	8000fee <xTaskResumeAll+0x2a>
 8000fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fde:	f383 8811 	msr	BASEPRI, r3
 8000fe2:	f3bf 8f6f 	isb	sy
 8000fe6:	f3bf 8f4f 	dsb	sy
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	e7fe      	b.n	8000fec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000fee:	f000 fc25 	bl	800183c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <xTaskResumeAll+0x11c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <xTaskResumeAll+0x11c>)
 8000ffa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ffc:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <xTaskResumeAll+0x11c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d165      	bne.n	80010d0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001004:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <xTaskResumeAll+0x120>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d061      	beq.n	80010d0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800100c:	e032      	b.n	8001074 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <xTaskResumeAll+0x124>)
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3318      	adds	r3, #24
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fd08 	bl	8000a30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3304      	adds	r3, #4
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fd03 	bl	8000a30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4618      	mov	r0, r3
 800102e:	f002 fa15 	bl	800345c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	2201      	movs	r2, #1
 8001038:	409a      	lsls	r2, r3
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <xTaskResumeAll+0x128>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4313      	orrs	r3, r2
 8001040:	4a2a      	ldr	r2, [pc, #168]	; (80010ec <xTaskResumeAll+0x128>)
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <xTaskResumeAll+0x12c>)
 8001052:	441a      	add	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3304      	adds	r3, #4
 8001058:	4619      	mov	r1, r3
 800105a:	4610      	mov	r0, r2
 800105c:	f7ff fc8b 	bl	8000976 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <xTaskResumeAll+0x130>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	429a      	cmp	r2, r3
 800106c:	d302      	bcc.n	8001074 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <xTaskResumeAll+0x134>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <xTaskResumeAll+0x124>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1c8      	bne.n	800100e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001082:	f000 fa19 	bl	80014b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <xTaskResumeAll+0x138>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d010      	beq.n	80010b4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001092:	f000 f859 	bl	8001148 <xTaskIncrementTick>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <xTaskResumeAll+0x134>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f1      	bne.n	8001092 <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <xTaskResumeAll+0x138>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <xTaskResumeAll+0x134>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d009      	beq.n	80010d0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80010bc:	2301      	movs	r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <xTaskResumeAll+0x13c>)
 80010c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	f3bf 8f4f 	dsb	sy
 80010cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80010d0:	f000 fbe2 	bl	8001898 <vPortExitCritical>

	return xAlreadyYielded;
 80010d4:	68bb      	ldr	r3, [r7, #8]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000144 	.word	0x20000144
 80010e4:	2000011c 	.word	0x2000011c
 80010e8:	200000dc 	.word	0x200000dc
 80010ec:	20000124 	.word	0x20000124
 80010f0:	20000048 	.word	0x20000048
 80010f4:	20000044 	.word	0x20000044
 80010f8:	20000130 	.word	0x20000130
 80010fc:	2000012c 	.word	0x2000012c
 8001100:	e000ed04 	.word	0xe000ed04

08001104 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <xTaskGetTickCount+0x1c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000120 	.word	0x20000120

08001124 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800112a:	f000 fc6b 	bl	8001a04 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <xTaskGetTickCountFromISR+0x20>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001138:	683b      	ldr	r3, [r7, #0]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000120 	.word	0x20000120

08001148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001152:	4b50      	ldr	r3, [pc, #320]	; (8001294 <xTaskIncrementTick+0x14c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f040 8091 	bne.w	800127e <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800115c:	4b4e      	ldr	r3, [pc, #312]	; (8001298 <xTaskIncrementTick+0x150>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001164:	4a4c      	ldr	r2, [pc, #304]	; (8001298 <xTaskIncrementTick+0x150>)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d11f      	bne.n	80011b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001170:	4b4a      	ldr	r3, [pc, #296]	; (800129c <xTaskIncrementTick+0x154>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d009      	beq.n	800118e <xTaskIncrementTick+0x46>
 800117a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800117e:	f383 8811 	msr	BASEPRI, r3
 8001182:	f3bf 8f6f 	isb	sy
 8001186:	f3bf 8f4f 	dsb	sy
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	e7fe      	b.n	800118c <xTaskIncrementTick+0x44>
 800118e:	4b43      	ldr	r3, [pc, #268]	; (800129c <xTaskIncrementTick+0x154>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <xTaskIncrementTick+0x158>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a40      	ldr	r2, [pc, #256]	; (800129c <xTaskIncrementTick+0x154>)
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4a40      	ldr	r2, [pc, #256]	; (80012a0 <xTaskIncrementTick+0x158>)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b40      	ldr	r3, [pc, #256]	; (80012a4 <xTaskIncrementTick+0x15c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	4a3e      	ldr	r2, [pc, #248]	; (80012a4 <xTaskIncrementTick+0x15c>)
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	f000 f984 	bl	80014b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <xTaskIncrementTick+0x160>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d34c      	bcc.n	8001254 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <xTaskIncrementTick+0x154>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011c4:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <xTaskIncrementTick+0x160>)
 80011c6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ca:	601a      	str	r2, [r3, #0]
					break;
 80011cc:	e042      	b.n	8001254 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <xTaskIncrementTick+0x154>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d203      	bcs.n	80011ee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80011e6:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <xTaskIncrementTick+0x160>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80011ec:	e032      	b.n	8001254 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3304      	adds	r3, #4
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fc1c 	bl	8000a30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	3318      	adds	r3, #24
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fc13 	bl	8000a30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	4618      	mov	r0, r3
 800120e:	f002 f925 	bl	800345c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	2201      	movs	r2, #1
 8001218:	409a      	lsls	r2, r3
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <xTaskIncrementTick+0x164>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4313      	orrs	r3, r2
 8001220:	4a22      	ldr	r2, [pc, #136]	; (80012ac <xTaskIncrementTick+0x164>)
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <xTaskIncrementTick+0x168>)
 8001232:	441a      	add	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	3304      	adds	r3, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4610      	mov	r0, r2
 800123c:	f7ff fb9b 	bl	8000976 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <xTaskIncrementTick+0x16c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	429a      	cmp	r2, r3
 800124c:	d3b5      	bcc.n	80011ba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800124e:	2301      	movs	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001252:	e7b2      	b.n	80011ba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <xTaskIncrementTick+0x16c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125a:	4915      	ldr	r1, [pc, #84]	; (80012b0 <xTaskIncrementTick+0x168>)
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d901      	bls.n	8001270 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <xTaskIncrementTick+0x170>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d007      	beq.n	8001288 <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 8001278:	2301      	movs	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e004      	b.n	8001288 <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <xTaskIncrementTick+0x174>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <xTaskIncrementTick+0x174>)
 8001286:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001288:	697b      	ldr	r3, [r7, #20]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000144 	.word	0x20000144
 8001298:	20000120 	.word	0x20000120
 800129c:	200000d4 	.word	0x200000d4
 80012a0:	200000d8 	.word	0x200000d8
 80012a4:	20000134 	.word	0x20000134
 80012a8:	2000013c 	.word	0x2000013c
 80012ac:	20000124 	.word	0x20000124
 80012b0:	20000048 	.word	0x20000048
 80012b4:	20000044 	.word	0x20000044
 80012b8:	20000130 	.word	0x20000130
 80012bc:	2000012c 	.word	0x2000012c

080012c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <vTaskSwitchContext+0xb8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <vTaskSwitchContext+0xbc>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80012d4:	e04c      	b.n	8001370 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <vTaskSwitchContext+0xbc>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <vTaskSwitchContext+0xc0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	f1c3 031f 	rsb	r3, r3, #31
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	4924      	ldr	r1, [pc, #144]	; (8001384 <vTaskSwitchContext+0xc4>)
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <vTaskSwitchContext+0x5a>
	__asm volatile
 8001306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800130a:	f383 8811 	msr	BASEPRI, r3
 800130e:	f3bf 8f6f 	isb	sy
 8001312:	f3bf 8f4f 	dsb	sy
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	e7fe      	b.n	8001318 <vTaskSwitchContext+0x58>
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <vTaskSwitchContext+0xc4>)
 8001326:	4413      	add	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	3308      	adds	r3, #8
 800133c:	429a      	cmp	r2, r3
 800133e:	d104      	bne.n	800134a <vTaskSwitchContext+0x8a>
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <vTaskSwitchContext+0xc8>)
 8001352:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <vTaskSwitchContext+0xc8>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <vTaskSwitchContext+0xcc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d102      	bne.n	8001366 <vTaskSwitchContext+0xa6>
 8001360:	f001 ffd8 	bl	8003314 <SEGGER_SYSVIEW_OnIdle>
}
 8001364:	e004      	b.n	8001370 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <vTaskSwitchContext+0xc8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f002 f832 	bl	80033d4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000144 	.word	0x20000144
 800137c:	20000130 	.word	0x20000130
 8001380:	20000124 	.word	0x20000124
 8001384:	20000048 	.word	0x20000048
 8001388:	20000044 	.word	0x20000044
 800138c:	20000140 	.word	0x20000140

08001390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001398:	f000 f852 	bl	8001440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <prvIdleTask+0x28>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d9f9      	bls.n	8001398 <prvIdleTask+0x8>
			{
				taskYIELD();
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <prvIdleTask+0x2c>)
 80013a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	f3bf 8f4f 	dsb	sy
 80013b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80013b4:	e7f0      	b.n	8001398 <prvIdleTask+0x8>
 80013b6:	bf00      	nop
 80013b8:	20000048 	.word	0x20000048
 80013bc:	e000ed04 	.word	0xe000ed04

080013c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	e00c      	b.n	80013e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <prvInitialiseTaskLists+0x60>)
 80013d8:	4413      	add	r3, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fa9e 	bl	800091c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3301      	adds	r3, #1
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d9ef      	bls.n	80013cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <prvInitialiseTaskLists+0x64>)
 80013ee:	f7ff fa95 	bl	800091c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <prvInitialiseTaskLists+0x68>)
 80013f4:	f7ff fa92 	bl	800091c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <prvInitialiseTaskLists+0x6c>)
 80013fa:	f7ff fa8f 	bl	800091c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <prvInitialiseTaskLists+0x70>)
 8001400:	f7ff fa8c 	bl	800091c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <prvInitialiseTaskLists+0x74>)
 8001406:	f7ff fa89 	bl	800091c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <prvInitialiseTaskLists+0x78>)
 800140c:	4a05      	ldr	r2, [pc, #20]	; (8001424 <prvInitialiseTaskLists+0x64>)
 800140e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <prvInitialiseTaskLists+0x7c>)
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <prvInitialiseTaskLists+0x68>)
 8001414:	601a      	str	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000048 	.word	0x20000048
 8001424:	200000ac 	.word	0x200000ac
 8001428:	200000c0 	.word	0x200000c0
 800142c:	200000dc 	.word	0x200000dc
 8001430:	200000f0 	.word	0x200000f0
 8001434:	20000108 	.word	0x20000108
 8001438:	200000d4 	.word	0x200000d4
 800143c:	200000d8 	.word	0x200000d8

08001440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001446:	e019      	b.n	800147c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001448:	f000 f9f8 	bl	800183c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <prvCheckTasksWaitingTermination+0x4c>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3304      	adds	r3, #4
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fae9 	bl	8000a30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <prvCheckTasksWaitingTermination+0x50>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <prvCheckTasksWaitingTermination+0x50>)
 8001466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <prvCheckTasksWaitingTermination+0x54>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3b01      	subs	r3, #1
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <prvCheckTasksWaitingTermination+0x54>)
 8001470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001472:	f000 fa11 	bl	8001898 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f80e 	bl	8001498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <prvCheckTasksWaitingTermination+0x54>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1e1      	bne.n	8001448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000f0 	.word	0x200000f0
 8001490:	2000011c 	.word	0x2000011c
 8001494:	20000104 	.word	0x20000104

08001498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fbb3 	bl	8001c10 <vPortFree>
			vPortFree( pxTCB );
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fbb0 	bl	8001c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <prvResetNextTaskUnblockTime+0x38>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d104      	bne.n	80014d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <prvResetNextTaskUnblockTime+0x3c>)
 80014ca:	f04f 32ff 	mov.w	r2, #4294967295
 80014ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80014d0:	e008      	b.n	80014e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <prvResetNextTaskUnblockTime+0x38>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <prvResetNextTaskUnblockTime+0x3c>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	200000d4 	.word	0x200000d4
 80014f4:	2000013c 	.word	0x2000013c

080014f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001502:	4b32      	ldr	r3, [pc, #200]	; (80015cc <prvAddCurrentTaskToDelayedList+0xd4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3304      	adds	r3, #4
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fa8e 	bl	8000a30 <uxListRemove>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10b      	bne.n	8001532 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	2201      	movs	r2, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4013      	ands	r3, r2
 800152e:	4a29      	ldr	r2, [pc, #164]	; (80015d4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001530:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d110      	bne.n	800155c <prvAddCurrentTaskToDelayedList+0x64>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00d      	beq.n	800155c <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	211b      	movs	r1, #27
 8001546:	4618      	mov	r0, r3
 8001548:	f001 ffcc 	bl	80034e4 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3304      	adds	r3, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4820      	ldr	r0, [pc, #128]	; (80015d8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001556:	f7ff fa0e 	bl	8000976 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800155a:	e032      	b.n	80015c2 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d20f      	bcs.n	8001594 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2104      	movs	r1, #4
 800157a:	4618      	mov	r0, r3
 800157c:	f001 ffb2 	bl	80034e4 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <prvAddCurrentTaskToDelayedList+0xe4>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3304      	adds	r3, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4610      	mov	r0, r2
 800158e:	f7ff fa16 	bl	80009be <vListInsert>
}
 8001592:	e016      	b.n	80015c2 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2104      	movs	r1, #4
 800159a:	4618      	mov	r0, r3
 800159c:	f001 ffa2 	bl	80034e4 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3304      	adds	r3, #4
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f7ff fa06 	bl	80009be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <prvAddCurrentTaskToDelayedList+0xec>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d202      	bcs.n	80015c2 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80015bc:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <prvAddCurrentTaskToDelayedList+0xec>)
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000120 	.word	0x20000120
 80015d0:	20000044 	.word	0x20000044
 80015d4:	20000124 	.word	0x20000124
 80015d8:	20000108 	.word	0x20000108
 80015dc:	200000d8 	.word	0x200000d8
 80015e0:	200000d4 	.word	0x200000d4
 80015e4:	2000013c 	.word	0x2000013c

080015e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3b04      	subs	r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3b04      	subs	r3, #4
 8001606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f023 0201 	bic.w	r2, r3, #1
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3b04      	subs	r3, #4
 8001616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001618:	4a0c      	ldr	r2, [pc, #48]	; (800164c <pxPortInitialiseStack+0x64>)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3b14      	subs	r3, #20
 8001622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3b04      	subs	r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f06f 0202 	mvn.w	r2, #2
 8001636:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3b20      	subs	r3, #32
 800163c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	08001651 	.word	0x08001651

08001650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <prvTaskExitError+0x50>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001662:	d009      	beq.n	8001678 <prvTaskExitError+0x28>
 8001664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001668:	f383 8811 	msr	BASEPRI, r3
 800166c:	f3bf 8f6f 	isb	sy
 8001670:	f3bf 8f4f 	dsb	sy
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e7fe      	b.n	8001676 <prvTaskExitError+0x26>
 8001678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167c:	f383 8811 	msr	BASEPRI, r3
 8001680:	f3bf 8f6f 	isb	sy
 8001684:	f3bf 8f4f 	dsb	sy
 8001688:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800168a:	bf00      	nop
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0fc      	beq.n	800168c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000010 	.word	0x20000010
	...

080016b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <pxCurrentTCBConst2>)
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	6808      	ldr	r0, [r1, #0]
 80016b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ba:	f380 8809 	msr	PSP, r0
 80016be:	f3bf 8f6f 	isb	sy
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	f380 8811 	msr	BASEPRI, r0
 80016ca:	4770      	bx	lr
 80016cc:	f3af 8000 	nop.w

080016d0 <pxCurrentTCBConst2>:
 80016d0:	20000044 	.word	0x20000044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop

080016d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80016d8:	4808      	ldr	r0, [pc, #32]	; (80016fc <prvPortStartFirstTask+0x24>)
 80016da:	6800      	ldr	r0, [r0, #0]
 80016dc:	6800      	ldr	r0, [r0, #0]
 80016de:	f380 8808 	msr	MSP, r0
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f380 8814 	msr	CONTROL, r0
 80016ea:	b662      	cpsie	i
 80016ec:	b661      	cpsie	f
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	f3bf 8f6f 	isb	sy
 80016f6:	df00      	svc	0
 80016f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80016fa:	bf00      	nop
 80016fc:	e000ed08 	.word	0xe000ed08

08001700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001706:	4b44      	ldr	r3, [pc, #272]	; (8001818 <xPortStartScheduler+0x118>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a44      	ldr	r2, [pc, #272]	; (800181c <xPortStartScheduler+0x11c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d109      	bne.n	8001724 <xPortStartScheduler+0x24>
 8001710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001714:	f383 8811 	msr	BASEPRI, r3
 8001718:	f3bf 8f6f 	isb	sy
 800171c:	f3bf 8f4f 	dsb	sy
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	e7fe      	b.n	8001722 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001724:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <xPortStartScheduler+0x118>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a3d      	ldr	r2, [pc, #244]	; (8001820 <xPortStartScheduler+0x120>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d109      	bne.n	8001742 <xPortStartScheduler+0x42>
 800172e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001732:	f383 8811 	msr	BASEPRI, r3
 8001736:	f3bf 8f6f 	isb	sy
 800173a:	f3bf 8f4f 	dsb	sy
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e7fe      	b.n	8001740 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <xPortStartScheduler+0x124>)
 8001744:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	22ff      	movs	r2, #255	; 0xff
 8001752:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <xPortStartScheduler+0x128>)
 8001768:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <xPortStartScheduler+0x12c>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001770:	e009      	b.n	8001786 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <xPortStartScheduler+0x12c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3b01      	subs	r3, #1
 8001778:	4a2c      	ldr	r2, [pc, #176]	; (800182c <xPortStartScheduler+0x12c>)
 800177a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178e:	2b80      	cmp	r3, #128	; 0x80
 8001790:	d0ef      	beq.n	8001772 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <xPortStartScheduler+0x12c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	d009      	beq.n	80017b2 <xPortStartScheduler+0xb2>
 800179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	e7fe      	b.n	80017b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <xPortStartScheduler+0x12c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	4a1c      	ldr	r2, [pc, #112]	; (800182c <xPortStartScheduler+0x12c>)
 80017ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <xPortStartScheduler+0x12c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017c4:	4a19      	ldr	r2, [pc, #100]	; (800182c <xPortStartScheduler+0x12c>)
 80017c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <xPortStartScheduler+0x130>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a16      	ldr	r2, [pc, #88]	; (8001830 <xPortStartScheduler+0x130>)
 80017d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <xPortStartScheduler+0x130>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a13      	ldr	r2, [pc, #76]	; (8001830 <xPortStartScheduler+0x130>)
 80017e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80017e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80017e8:	f000 f8de 	bl	80019a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <xPortStartScheduler+0x134>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80017f2:	f000 f8fd 	bl	80019f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <xPortStartScheduler+0x138>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <xPortStartScheduler+0x138>)
 80017fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001800:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001802:	f7ff ff69 	bl	80016d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001806:	f7ff fd5b 	bl	80012c0 <vTaskSwitchContext>
	prvTaskExitError();
 800180a:	f7ff ff21 	bl	8001650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	e000ed00 	.word	0xe000ed00
 800181c:	410fc271 	.word	0x410fc271
 8001820:	410fc270 	.word	0x410fc270
 8001824:	e000e400 	.word	0xe000e400
 8001828:	20000148 	.word	0x20000148
 800182c:	2000014c 	.word	0x2000014c
 8001830:	e000ed20 	.word	0xe000ed20
 8001834:	20000010 	.word	0x20000010
 8001838:	e000ef34 	.word	0xe000ef34

0800183c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001846:	f383 8811 	msr	BASEPRI, r3
 800184a:	f3bf 8f6f 	isb	sy
 800184e:	f3bf 8f4f 	dsb	sy
 8001852:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <vPortEnterCritical+0x54>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <vPortEnterCritical+0x54>)
 800185c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <vPortEnterCritical+0x54>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d10e      	bne.n	8001884 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <vPortEnterCritical+0x58>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <vPortEnterCritical+0x48>
 8001870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001874:	f383 8811 	msr	BASEPRI, r3
 8001878:	f3bf 8f6f 	isb	sy
 800187c:	f3bf 8f4f 	dsb	sy
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	e7fe      	b.n	8001882 <vPortEnterCritical+0x46>
	}
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	20000010 	.word	0x20000010
 8001894:	e000ed04 	.word	0xe000ed04

08001898 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <vPortExitCritical+0x4c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <vPortExitCritical+0x22>
 80018a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	e7fe      	b.n	80018b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <vPortExitCritical+0x4c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3b01      	subs	r3, #1
 80018c0:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <vPortExitCritical+0x4c>)
 80018c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <vPortExitCritical+0x4c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d104      	bne.n	80018d6 <vPortExitCritical+0x3e>
 80018cc:	2300      	movs	r3, #0
 80018ce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000010 	.word	0x20000010
	...

080018f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80018f0:	f3ef 8009 	mrs	r0, PSP
 80018f4:	f3bf 8f6f 	isb	sy
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <pxCurrentTCBConst>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f01e 0f10 	tst.w	lr, #16
 8001900:	bf08      	it	eq
 8001902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800190a:	6010      	str	r0, [r2, #0]
 800190c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001914:	f380 8811 	msr	BASEPRI, r0
 8001918:	f3bf 8f4f 	dsb	sy
 800191c:	f3bf 8f6f 	isb	sy
 8001920:	f7ff fcce 	bl	80012c0 <vTaskSwitchContext>
 8001924:	f04f 0000 	mov.w	r0, #0
 8001928:	f380 8811 	msr	BASEPRI, r0
 800192c:	bc09      	pop	{r0, r3}
 800192e:	6819      	ldr	r1, [r3, #0]
 8001930:	6808      	ldr	r0, [r1, #0]
 8001932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001936:	f01e 0f10 	tst.w	lr, #16
 800193a:	bf08      	it	eq
 800193c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001940:	f380 8809 	msr	PSP, r0
 8001944:	f3bf 8f6f 	isb	sy
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	f3af 8000 	nop.w

08001950 <pxCurrentTCBConst>:
 8001950:	20000044 	.word	0x20000044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop

08001958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
	__asm volatile
 800195e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	f3bf 8f6f 	isb	sy
 800196a:	f3bf 8f4f 	dsb	sy
 800196e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8001970:	f001 fc56 	bl	8003220 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001974:	f7ff fbe8 	bl	8001148 <xTaskIncrementTick>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800197e:	f001 fcad 	bl	80032dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <SysTick_Handler+0x4c>)
 8001984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e001      	b.n	8001990 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800198c:	f001 fc8a 	bl	80032a4 <SEGGER_SYSVIEW_RecordExitISR>
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000ed04 	.word	0xe000ed04

080019a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <vPortSetupTimerInterrupt+0x34>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <vPortSetupTimerInterrupt+0x38>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <vPortSetupTimerInterrupt+0x3c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <vPortSetupTimerInterrupt+0x40>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	4a09      	ldr	r2, [pc, #36]	; (80019ec <vPortSetupTimerInterrupt+0x44>)
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <vPortSetupTimerInterrupt+0x34>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010
 80019e0:	e000e018 	.word	0xe000e018
 80019e4:	20000014 	.word	0x20000014
 80019e8:	10624dd3 	.word	0x10624dd3
 80019ec:	e000e014 	.word	0xe000e014

080019f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80019f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001a00 <vPortEnableVFP+0x10>
 80019f4:	6801      	ldr	r1, [r0, #0]
 80019f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80019fa:	6001      	str	r1, [r0, #0]
 80019fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80019fe:	bf00      	nop
 8001a00:	e000ed88 	.word	0xe000ed88

08001a04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001a0a:	f3ef 8305 	mrs	r3, IPSR
 8001a0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b0f      	cmp	r3, #15
 8001a14:	d913      	bls.n	8001a3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001a16:	4a16      	ldr	r2, [pc, #88]	; (8001a70 <vPortValidateInterruptPriority+0x6c>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <vPortValidateInterruptPriority+0x70>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	7afa      	ldrb	r2, [r7, #11]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d209      	bcs.n	8001a3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2e:	f383 8811 	msr	BASEPRI, r3
 8001a32:	f3bf 8f6f 	isb	sy
 8001a36:	f3bf 8f4f 	dsb	sy
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	e7fe      	b.n	8001a3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <vPortValidateInterruptPriority+0x74>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <vPortValidateInterruptPriority+0x78>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d909      	bls.n	8001a62 <vPortValidateInterruptPriority+0x5e>
 8001a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a52:	f383 8811 	msr	BASEPRI, r3
 8001a56:	f3bf 8f6f 	isb	sy
 8001a5a:	f3bf 8f4f 	dsb	sy
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	e7fe      	b.n	8001a60 <vPortValidateInterruptPriority+0x5c>
	}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e3f0 	.word	0xe000e3f0
 8001a74:	20000148 	.word	0x20000148
 8001a78:	e000ed0c 	.word	0xe000ed0c
 8001a7c:	2000014c 	.word	0x2000014c

08001a80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001a8c:	f7ff fa8c 	bl	8000fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <pvPortMalloc+0x178>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001a98:	f000 f91a 	bl	8001cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001a9c:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <pvPortMalloc+0x17c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f040 8091 	bne.w	8001bcc <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01c      	beq.n	8001aea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d013      	beq.n	8001aea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f023 0307 	bic.w	r3, r3, #7
 8001ac8:	3308      	adds	r3, #8
 8001aca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d009      	beq.n	8001aea <pvPortMalloc+0x6a>
 8001ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ada:	f383 8811 	msr	BASEPRI, r3
 8001ade:	f3bf 8f6f 	isb	sy
 8001ae2:	f3bf 8f4f 	dsb	sy
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e7fe      	b.n	8001ae8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d06d      	beq.n	8001bcc <pvPortMalloc+0x14c>
 8001af0:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <pvPortMalloc+0x180>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d868      	bhi.n	8001bcc <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001afa:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <pvPortMalloc+0x184>)
 8001afc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <pvPortMalloc+0x184>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b04:	e004      	b.n	8001b10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d903      	bls.n	8001b22 <pvPortMalloc+0xa2>
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f1      	bne.n	8001b06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001b22:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <pvPortMalloc+0x178>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d04f      	beq.n	8001bcc <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2208      	movs	r2, #8
 8001b32:	4413      	add	r3, r2
 8001b34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	1ad2      	subs	r2, r2, r3
 8001b46:	2308      	movs	r3, #8
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d91e      	bls.n	8001b8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <pvPortMalloc+0xf4>
 8001b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b64:	f383 8811 	msr	BASEPRI, r3
 8001b68:	f3bf 8f6f 	isb	sy
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	e7fe      	b.n	8001b72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	1ad2      	subs	r2, r2, r3
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001b86:	69b8      	ldr	r0, [r7, #24]
 8001b88:	f000 f904 	bl	8001d94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <pvPortMalloc+0x180>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	4a1a      	ldr	r2, [pc, #104]	; (8001c00 <pvPortMalloc+0x180>)
 8001b98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <pvPortMalloc+0x180>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <pvPortMalloc+0x188>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d203      	bcs.n	8001bae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <pvPortMalloc+0x180>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <pvPortMalloc+0x188>)
 8001bac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <pvPortMalloc+0x17c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <pvPortMalloc+0x18c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <pvPortMalloc+0x18c>)
 8001bca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001bcc:	f7ff f9fa 	bl	8000fc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <pvPortMalloc+0x16e>
 8001bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bde:	f383 8811 	msr	BASEPRI, r3
 8001be2:	f3bf 8f6f 	isb	sy
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e7fe      	b.n	8001bec <pvPortMalloc+0x16c>
	return pvReturn;
 8001bee:	69fb      	ldr	r3, [r7, #28]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20012d58 	.word	0x20012d58
 8001bfc:	20012d6c 	.word	0x20012d6c
 8001c00:	20012d5c 	.word	0x20012d5c
 8001c04:	20012d50 	.word	0x20012d50
 8001c08:	20012d60 	.word	0x20012d60
 8001c0c:	20012d64 	.word	0x20012d64

08001c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d04b      	beq.n	8001cba <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001c22:	2308      	movs	r3, #8
 8001c24:	425b      	negs	r3, r3
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4413      	add	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <vPortFree+0xb4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <vPortFree+0x42>
 8001c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c42:	f383 8811 	msr	BASEPRI, r3
 8001c46:	f3bf 8f6f 	isb	sy
 8001c4a:	f3bf 8f4f 	dsb	sy
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e7fe      	b.n	8001c50 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <vPortFree+0x5e>
 8001c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5e:	f383 8811 	msr	BASEPRI, r3
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	f3bf 8f4f 	dsb	sy
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	e7fe      	b.n	8001c6c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <vPortFree+0xb4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01e      	beq.n	8001cba <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d11a      	bne.n	8001cba <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <vPortFree+0xb4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	401a      	ands	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001c94:	f7ff f988 	bl	8000fa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <vPortFree+0xb8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <vPortFree+0xb8>)
 8001ca4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ca6:	6938      	ldr	r0, [r7, #16]
 8001ca8:	f000 f874 	bl	8001d94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <vPortFree+0xbc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <vPortFree+0xbc>)
 8001cb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8001cb6:	f7ff f985 	bl	8000fc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20012d6c 	.word	0x20012d6c
 8001cc8:	20012d5c 	.word	0x20012d5c
 8001ccc:	20012d68 	.word	0x20012d68

08001cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001cd6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001cda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <prvHeapInit+0xac>)
 8001cde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3307      	adds	r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 0307 	bic.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <prvHeapInit+0xac>)
 8001d00:	4413      	add	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d08:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <prvHeapInit+0xb0>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <prvHeapInit+0xb0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4413      	add	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f023 0307 	bic.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <prvHeapInit+0xb4>)
 8001d30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <prvHeapInit+0xb4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2200      	movs	r2, #0
 8001d38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <prvHeapInit+0xb4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	1ad2      	subs	r2, r2, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <prvHeapInit+0xb4>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <prvHeapInit+0xb8>)
 8001d5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <prvHeapInit+0xbc>)
 8001d66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <prvHeapInit+0xc0>)
 8001d6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d6e:	601a      	str	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	20000150 	.word	0x20000150
 8001d80:	20012d50 	.word	0x20012d50
 8001d84:	20012d58 	.word	0x20012d58
 8001d88:	20012d60 	.word	0x20012d60
 8001d8c:	20012d5c 	.word	0x20012d5c
 8001d90:	20012d6c 	.word	0x20012d6c

08001d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <prvInsertBlockIntoFreeList+0xac>)
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e002      	b.n	8001da8 <prvInsertBlockIntoFreeList+0x14>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d8f7      	bhi.n	8001da2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d108      	bne.n	8001dd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	441a      	add	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	441a      	add	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d118      	bne.n	8001e1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <prvInsertBlockIntoFreeList+0xb0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d00d      	beq.n	8001e12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	441a      	add	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e008      	b.n	8001e24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <prvInsertBlockIntoFreeList+0xb0>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e003      	b.n	8001e24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d002      	beq.n	8001e32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20012d50 	.word	0x20012d50
 8001e44:	20012d58 	.word	0x20012d58

08001e48 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <_cbSendSystemDesc+0x14>)
 8001e4e:	f001 f993 	bl	8003178 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001e52:	4803      	ldr	r0, [pc, #12]	; (8001e60 <_cbSendSystemDesc+0x18>)
 8001e54:	f001 f990 	bl	8003178 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	08003f94 	.word	0x08003f94
 8001e60:	08003fd0 	.word	0x08003fd0

08001e64 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <SEGGER_SYSVIEW_Conf+0x20>)
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <SEGGER_SYSVIEW_Conf+0x20>)
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SEGGER_SYSVIEW_Conf+0x24>)
 8001e72:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <SEGGER_SYSVIEW_Conf+0x28>)
 8001e74:	f000 fe08 	bl	8002a88 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001e78:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001e7c:	f000 fe42 	bl	8002b04 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000014 	.word	0x20000014
 8001e88:	08001e49 	.word	0x08001e49
 8001e8c:	080040d4 	.word	0x080040d4

08001e90 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e034      	b.n	8001f06 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001e9c:	491e      	ldr	r1, [pc, #120]	; (8001f18 <_cbSendTaskList+0x88>)
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	491a      	ldr	r1, [pc, #104]	; (8001f18 <_cbSendTaskList+0x88>)
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3304      	adds	r3, #4
 8001ebc:	681c      	ldr	r4, [r3, #0]
 8001ebe:	4916      	ldr	r1, [pc, #88]	; (8001f18 <_cbSendTaskList+0x88>)
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	3308      	adds	r3, #8
 8001ece:	681d      	ldr	r5, [r3, #0]
 8001ed0:	4911      	ldr	r1, [pc, #68]	; (8001f18 <_cbSendTaskList+0x88>)
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	330c      	adds	r3, #12
 8001ee0:	681e      	ldr	r6, [r3, #0]
 8001ee2:	490d      	ldr	r1, [pc, #52]	; (8001f18 <_cbSendTaskList+0x88>)
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	3310      	adds	r3, #16
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	4633      	mov	r3, r6
 8001ef8:	462a      	mov	r2, r5
 8001efa:	4621      	mov	r1, r4
 8001efc:	f000 f970 	bl	80021e0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3301      	adds	r3, #1
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <_cbSendTaskList+0x8c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d3c5      	bcc.n	8001e9c <_cbSendTaskList+0xc>
  }
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f18:	20012d70 	.word	0x20012d70
 8001f1c:	20012e10 	.word	0x20012e10

08001f20 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001f26:	f7ff f8fd 	bl	8001124 <xTaskGetTickCountFromISR>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f04f 0400 	mov.w	r4, #0
 8001f30:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001f34:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001f38:	462b      	mov	r3, r5
 8001f3a:	4634      	mov	r4, r6
 8001f3c:	f04f 0100 	mov.w	r1, #0
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	0162      	lsls	r2, r4, #5
 8001f46:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001f4a:	0159      	lsls	r1, r3, #5
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4614      	mov	r4, r2
 8001f50:	1b5b      	subs	r3, r3, r5
 8001f52:	eb64 0406 	sbc.w	r4, r4, r6
 8001f56:	f04f 0100 	mov.w	r1, #0
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	00a2      	lsls	r2, r4, #2
 8001f60:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001f64:	0099      	lsls	r1, r3, #2
 8001f66:	460b      	mov	r3, r1
 8001f68:	4614      	mov	r4, r2
 8001f6a:	195b      	adds	r3, r3, r5
 8001f6c:	eb44 0406 	adc.w	r4, r4, r6
 8001f70:	f04f 0100 	mov.w	r1, #0
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	00e2      	lsls	r2, r4, #3
 8001f7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f7e:	00d9      	lsls	r1, r3, #3
 8001f80:	460b      	mov	r3, r1
 8001f82:	4614      	mov	r4, r2
 8001f84:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8001f88:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	4621      	mov	r1, r4
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f98 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001fa6:	2205      	movs	r2, #5
 8001fa8:	492b      	ldr	r1, [pc, #172]	; (8002058 <SYSVIEW_AddTask+0xc0>)
 8001faa:	68b8      	ldr	r0, [r7, #8]
 8001fac:	f001 ffc0 	bl	8003f30 <memcmp>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d04b      	beq.n	800204e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001fb6:	4b29      	ldr	r3, [pc, #164]	; (800205c <SYSVIEW_AddTask+0xc4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b07      	cmp	r3, #7
 8001fbc:	d903      	bls.n	8001fc6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001fbe:	4828      	ldr	r0, [pc, #160]	; (8002060 <SYSVIEW_AddTask+0xc8>)
 8001fc0:	f001 fbde 	bl	8003780 <SEGGER_SYSVIEW_Warn>
    return;
 8001fc4:	e044      	b.n	8002050 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001fc6:	4b25      	ldr	r3, [pc, #148]	; (800205c <SYSVIEW_AddTask+0xc4>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4926      	ldr	r1, [pc, #152]	; (8002064 <SYSVIEW_AddTask+0xcc>)
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <SYSVIEW_AddTask+0xc4>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4921      	ldr	r1, [pc, #132]	; (8002064 <SYSVIEW_AddTask+0xcc>)
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3304      	adds	r3, #4
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <SYSVIEW_AddTask+0xc4>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	491b      	ldr	r1, [pc, #108]	; (8002064 <SYSVIEW_AddTask+0xcc>)
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3308      	adds	r3, #8
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <SYSVIEW_AddTask+0xc4>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4916      	ldr	r1, [pc, #88]	; (8002064 <SYSVIEW_AddTask+0xcc>)
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	330c      	adds	r3, #12
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <SYSVIEW_AddTask+0xc4>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4910      	ldr	r1, [pc, #64]	; (8002064 <SYSVIEW_AddTask+0xcc>)
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3310      	adds	r3, #16
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <SYSVIEW_AddTask+0xc4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3301      	adds	r3, #1
 8002038:	4a08      	ldr	r2, [pc, #32]	; (800205c <SYSVIEW_AddTask+0xc4>)
 800203a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f8ca 	bl	80021e0 <SYSVIEW_SendTaskInfo>
 800204c:	e000      	b.n	8002050 <SYSVIEW_AddTask+0xb8>
    return;
 800204e:	bf00      	nop

}
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	08003fe0 	.word	0x08003fe0
 800205c:	20012e10 	.word	0x20012e10
 8002060:	08003fe8 	.word	0x08003fe8
 8002064:	20012d70 	.word	0x20012d70

08002068 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8002070:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80ab 	beq.w	80021d0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	e00d      	b.n	800209c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8002080:	4956      	ldr	r1, [pc, #344]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	d008      	beq.n	80020a8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3301      	adds	r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	4b4e      	ldr	r3, [pc, #312]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d3ec      	bcc.n	8002080 <SYSVIEW_DeleteTask+0x18>
 80020a6:	e000      	b.n	80020aa <SYSVIEW_DeleteTask+0x42>
      break;
 80020a8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80020aa:	4b4b      	ldr	r3, [pc, #300]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d111      	bne.n	80020da <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4a46      	ldr	r2, [pc, #280]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 80020c2:	4413      	add	r3, r2
 80020c4:	2214      	movs	r2, #20
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f001 ff4b 	bl	8003f64 <memset>
    _NumTasks--;
 80020ce:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	4a40      	ldr	r2, [pc, #256]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e07b      	b.n	80021d2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80020da:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d276      	bcs.n	80021d2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80020e4:	4b3c      	ldr	r3, [pc, #240]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	493c      	ldr	r1, [pc, #240]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	4838      	ldr	r0, [pc, #224]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4403      	add	r3, r0
 8002106:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8002108:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	1e5a      	subs	r2, r3, #1
 800210e:	4933      	ldr	r1, [pc, #204]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	3304      	adds	r3, #4
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	482f      	ldr	r0, [pc, #188]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4403      	add	r3, r0
 800212c:	3304      	adds	r3, #4
 800212e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1e5a      	subs	r2, r3, #1
 8002136:	4929      	ldr	r1, [pc, #164]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	3308      	adds	r3, #8
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	4825      	ldr	r0, [pc, #148]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4403      	add	r3, r0
 8002154:	3308      	adds	r3, #8
 8002156:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1e5a      	subs	r2, r3, #1
 800215e:	491f      	ldr	r1, [pc, #124]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	330c      	adds	r3, #12
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	481b      	ldr	r0, [pc, #108]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4403      	add	r3, r0
 800217c:	330c      	adds	r3, #12
 800217e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	1e5a      	subs	r2, r3, #1
 8002186:	4915      	ldr	r1, [pc, #84]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	3310      	adds	r3, #16
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	4811      	ldr	r0, [pc, #68]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4403      	add	r3, r0
 80021a4:	3310      	adds	r3, #16
 80021a6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1e5a      	subs	r2, r3, #1
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <SYSVIEW_DeleteTask+0x174>)
 80021b8:	4413      	add	r3, r2
 80021ba:	2214      	movs	r2, #20
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f001 fed0 	bl	8003f64 <memset>
    _NumTasks--;
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	4a03      	ldr	r2, [pc, #12]	; (80021d8 <SYSVIEW_DeleteTask+0x170>)
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e000      	b.n	80021d2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80021d0:	bf00      	nop
  }
}
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20012e10 	.word	0x20012e10
 80021dc:	20012d70 	.word	0x20012d70

080021e0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	2214      	movs	r2, #20
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f001 feb4 	bl	8003f64 <memset>
  TaskInfo.TaskID     = TaskID;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4618      	mov	r0, r3
 8002216:	f000 feb5 	bl	8002f84 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	; 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800222a:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <_DoInit+0x8c>)
 800222c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2203      	movs	r2, #3
 8002232:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2203      	movs	r2, #3
 8002238:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <_DoInit+0x90>)
 800223e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <_DoInit+0x94>)
 8002244:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800224c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <_DoInit+0x90>)
 8002264:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <_DoInit+0x98>)
 800226a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2210      	movs	r2, #16
 8002270:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3307      	adds	r3, #7
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <_DoInit+0x9c>)
 800228a:	6810      	ldr	r0, [r2, #0]
 800228c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <_DoInit+0xa0>)
 8002292:	6810      	ldr	r0, [r2, #0]
 8002294:	6018      	str	r0, [r3, #0]
 8002296:	8891      	ldrh	r1, [r2, #4]
 8002298:	7992      	ldrb	r2, [r2, #6]
 800229a:	8099      	strh	r1, [r3, #4]
 800229c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2220      	movs	r2, #32
 80022a2:	719a      	strb	r2, [r3, #6]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	20015348 	.word	0x20015348
 80022b4:	08004038 	.word	0x08004038
 80022b8:	20012e14 	.word	0x20012e14
 80022bc:	20013214 	.word	0x20013214
 80022c0:	08004044 	.word	0x08004044
 80022c4:	08004048 	.word	0x08004048

080022c8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80022d4:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <SEGGER_RTT_ReadNoLock+0x100>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <SEGGER_RTT_ReadNoLock+0x18>
 80022dc:	f7ff ffa2 	bl	8002224 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	3360      	adds	r3, #96	; 0x60
 80022ec:	4a36      	ldr	r2, [pc, #216]	; (80023c8 <SEGGER_RTT_ReadNoLock+0x100>)
 80022ee:	4413      	add	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002306:	6a3a      	ldr	r2, [r7, #32]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	429a      	cmp	r2, r3
 800230c:	d92a      	bls.n	8002364 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4293      	cmp	r3, r2
 800231e:	bf28      	it	cs
 8002320:	4613      	movcs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	4413      	add	r3, r2
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4619      	mov	r1, r3
 8002330:	69f8      	ldr	r0, [r7, #28]
 8002332:	f001 fe0c 	bl	8003f4e <memcpy>
    NumBytesRead += NumBytesRem;
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800234e:	6a3a      	ldr	r2, [r7, #32]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	6a3a      	ldr	r2, [r7, #32]
 800235c:	429a      	cmp	r2, r3
 800235e:	d101      	bne.n	8002364 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002360:	2300      	movs	r3, #0
 8002362:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4293      	cmp	r3, r2
 8002372:	bf28      	it	cs
 8002374:	4613      	movcs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d018      	beq.n	80023b0 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	4413      	add	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4619      	mov	r1, r3
 800238a:	69f8      	ldr	r0, [r7, #28]
 800238c:	f001 fddf 	bl	8003f4e <memcpy>
    NumBytesRead += NumBytesRem;
 8002390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4413      	add	r3, r2
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80023a8:	6a3a      	ldr	r2, [r7, #32]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	6a3a      	ldr	r2, [r7, #32]
 80023ba:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20015348 	.word	0x20015348

080023cc <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4a3f      	ldr	r2, [pc, #252]	; (80024e8 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 80023ea:	4413      	add	r3, r2
 80023ec:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d854      	bhi.n	80024ac <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d30f      	bcc.n	8002436 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4413      	add	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002422:	4618      	mov	r0, r3
 8002424:	f001 fd93 	bl	8003f4e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	441a      	add	r2, r3
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002432:	2301      	movs	r3, #1
 8002434:	e054      	b.n	80024e0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4413      	add	r3, r2
 800243c:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	d34b      	bcc.n	80024de <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d90e      	bls.n	8002476 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4413      	add	r3, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002464:	4618      	mov	r0, r3
 8002466:	f001 fd72 	bl	8003f4e <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	441a      	add	r2, r3
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	e018      	b.n	80024a8 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4413      	add	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002482:	4618      	mov	r0, r3
 8002484:	f001 fd63 	bl	8003f4e <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	6858      	ldr	r0, [r3, #4]
 800248c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	18d1      	adds	r1, r2, r3
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	461a      	mov	r2, r3
 800249a:	f001 fd58 	bl	8003f4e <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad2      	subs	r2, r2, r3
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e019      	b.n	80024e0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d30f      	bcc.n	80024de <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 fd3f 	bl	8003f4e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	441a      	add	r2, r3
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20015348 	.word	0x20015348

080024ec <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80024fa:	4b30      	ldr	r3, [pc, #192]	; (80025bc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8002502:	f7ff fe8f 	bl	8002224 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4293      	cmp	r3, r2
 8002510:	d24c      	bcs.n	80025ac <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8002512:	f3ef 8311 	mrs	r3, BASEPRI
 8002516:	f04f 0120 	mov.w	r1, #32
 800251a:	f381 8811 	msr	BASEPRI, r1
 800251e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d032      	beq.n	800258c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002526:	4925      	ldr	r1, [pc, #148]	; (80025bc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800253a:	4920      	ldr	r1, [pc, #128]	; (80025bc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	3304      	adds	r3, #4
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002550:	491a      	ldr	r1, [pc, #104]	; (80025bc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	3320      	adds	r3, #32
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002564:	4915      	ldr	r1, [pc, #84]	; (80025bc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3328      	adds	r3, #40	; 0x28
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002578:	4910      	ldr	r1, [pc, #64]	; (80025bc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	3324      	adds	r3, #36	; 0x24
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800258c:	490b      	ldr	r1, [pc, #44]	; (80025bc <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	332c      	adds	r3, #44	; 0x2c
 800259c:	6a3a      	ldr	r2, [r7, #32]
 800259e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e002      	b.n	80025b2 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
 80025b0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80025b2:	697b      	ldr	r3, [r7, #20]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20015348 	.word	0x20015348

080025c0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80025ce:	4b30      	ldr	r3, [pc, #192]	; (8002690 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80025d6:	f7ff fe25 	bl	8002224 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d24b      	bcs.n	800267e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80025e6:	f3ef 8311 	mrs	r3, BASEPRI
 80025ea:	f04f 0120 	mov.w	r1, #32
 80025ee:	f381 8811 	msr	BASEPRI, r1
 80025f2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d031      	beq.n	800265e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80025fa:	4925      	ldr	r1, [pc, #148]	; (8002690 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	3360      	adds	r3, #96	; 0x60
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800260e:	4920      	ldr	r1, [pc, #128]	; (8002690 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	3364      	adds	r3, #100	; 0x64
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002622:	491b      	ldr	r1, [pc, #108]	; (8002690 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	3368      	adds	r3, #104	; 0x68
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002636:	4916      	ldr	r1, [pc, #88]	; (8002690 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	440b      	add	r3, r1
 8002644:	3370      	adds	r3, #112	; 0x70
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800264a:	4911      	ldr	r1, [pc, #68]	; (8002690 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	336c      	adds	r3, #108	; 0x6c
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800265e:	490c      	ldr	r1, [pc, #48]	; (8002690 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	3374      	adds	r3, #116	; 0x74
 800266e:	6a3a      	ldr	r2, [r7, #32]
 8002670:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	e002      	b.n	8002684 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002684:	697b      	ldr	r3, [r7, #20]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20015348 	.word	0x20015348

08002694 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80026a4:	e002      	b.n	80026ac <_EncodeStr+0x18>
    Len++;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	3301      	adds	r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f6      	bne.n	80026a6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d901      	bls.n	80026c4 <_EncodeStr+0x30>
    Len = Limit;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2bfe      	cmp	r3, #254	; 0xfe
 80026c8:	d806      	bhi.n	80026d8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	60fa      	str	r2, [r7, #12]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	e011      	b.n	80026fc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	60fa      	str	r2, [r7, #12]
 80026de:	22ff      	movs	r2, #255	; 0xff
 80026e0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	60fa      	str	r2, [r7, #12]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	0a19      	lsrs	r1, r3, #8
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	60fa      	str	r2, [r7, #12]
 80026f8:	b2ca      	uxtb	r2, r1
 80026fa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002700:	e00a      	b.n	8002718 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	1c53      	adds	r3, r2, #1
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1c59      	adds	r1, r3, #1
 800270c:	60f9      	str	r1, [r7, #12]
 800270e:	7812      	ldrb	r2, [r2, #0]
 8002710:	701a      	strb	r2, [r3, #0]
    n++;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	429a      	cmp	r2, r3
 800271e:	d3f0      	bcc.n	8002702 <_EncodeStr+0x6e>
  }
  return pPayload;
 8002720:	68fb      	ldr	r3, [r7, #12]
}
 8002722:	4618      	mov	r0, r3
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800274c:	1cfb      	adds	r3, r7, #3
 800274e:	2201      	movs	r2, #1
 8002750:	4619      	mov	r1, r3
 8002752:	2001      	movs	r0, #1
 8002754:	f7ff fdb8 	bl	80022c8 <SEGGER_RTT_ReadNoLock>
 8002758:	4603      	mov	r3, r0
 800275a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	dd44      	ble.n	80027ec <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d01a      	beq.n	800279e <_HandleIncomingPacket+0x58>
 8002768:	2b04      	cmp	r3, #4
 800276a:	dc06      	bgt.n	800277a <_HandleIncomingPacket+0x34>
 800276c:	2b02      	cmp	r3, #2
 800276e:	d010      	beq.n	8002792 <_HandleIncomingPacket+0x4c>
 8002770:	2b02      	cmp	r3, #2
 8002772:	dc11      	bgt.n	8002798 <_HandleIncomingPacket+0x52>
 8002774:	2b01      	cmp	r3, #1
 8002776:	d009      	beq.n	800278c <_HandleIncomingPacket+0x46>
 8002778:	e02d      	b.n	80027d6 <_HandleIncomingPacket+0x90>
 800277a:	2b06      	cmp	r3, #6
 800277c:	d015      	beq.n	80027aa <_HandleIncomingPacket+0x64>
 800277e:	2b06      	cmp	r3, #6
 8002780:	db10      	blt.n	80027a4 <_HandleIncomingPacket+0x5e>
 8002782:	2b07      	cmp	r3, #7
 8002784:	d014      	beq.n	80027b0 <_HandleIncomingPacket+0x6a>
 8002786:	2b80      	cmp	r3, #128	; 0x80
 8002788:	d015      	beq.n	80027b6 <_HandleIncomingPacket+0x70>
 800278a:	e024      	b.n	80027d6 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800278c:	f000 fa7e 	bl	8002c8c <SEGGER_SYSVIEW_Start>
      break;
 8002790:	e031      	b.n	80027f6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002792:	f000 fb37 	bl	8002e04 <SEGGER_SYSVIEW_Stop>
      break;
 8002796:	e02e      	b.n	80027f6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002798:	f000 fd12 	bl	80031c0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800279c:	e02b      	b.n	80027f6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800279e:	f000 fcd7 	bl	8003150 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80027a2:	e028      	b.n	80027f6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80027a4:	f000 fb54 	bl	8002e50 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80027a8:	e025      	b.n	80027f6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80027aa:	f000 ffab 	bl	8003704 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80027ae:	e022      	b.n	80027f6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80027b0:	f000 ff8a 	bl	80036c8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80027b4:	e01f      	b.n	80027f6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80027b6:	1cfb      	adds	r3, r7, #3
 80027b8:	2201      	movs	r2, #1
 80027ba:	4619      	mov	r1, r3
 80027bc:	2001      	movs	r0, #1
 80027be:	f7ff fd83 	bl	80022c8 <SEGGER_RTT_ReadNoLock>
 80027c2:	4603      	mov	r3, r0
 80027c4:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	dd11      	ble.n	80027f0 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fefa 	bl	80035c8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80027d4:	e00c      	b.n	80027f0 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da0a      	bge.n	80027f4 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80027de:	1cfb      	adds	r3, r7, #3
 80027e0:	2201      	movs	r2, #1
 80027e2:	4619      	mov	r1, r3
 80027e4:	2001      	movs	r0, #1
 80027e6:	f7ff fd6f 	bl	80022c8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80027ea:	e003      	b.n	80027f4 <_HandleIncomingPacket+0xae>
    }
  }
 80027ec:	bf00      	nop
 80027ee:	e002      	b.n	80027f6 <_HandleIncomingPacket+0xb0>
      break;
 80027f0:	bf00      	nop
 80027f2:	e000      	b.n	80027f6 <_HandleIncomingPacket+0xb0>
      break;
 80027f4:	bf00      	nop
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	; 0x30
 8002804:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002806:	2301      	movs	r3, #1
 8002808:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	3301      	adds	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002814:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <_TrySendOverflowPacket+0xd8>)
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
 800281a:	e00b      	b.n	8002834 <_TrySendOverflowPacket+0x34>
 800281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281e:	b2da      	uxtb	r2, r3
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	1c59      	adds	r1, r3, #1
 8002824:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002826:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	09db      	lsrs	r3, r3, #7
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	2b7f      	cmp	r3, #127	; 0x7f
 8002838:	d8f0      	bhi.n	800281c <_TrySendOverflowPacket+0x1c>
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <_TrySendOverflowPacket+0xdc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002850:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <_TrySendOverflowPacket+0xd8>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	623b      	str	r3, [r7, #32]
 8002862:	e00b      	b.n	800287c <_TrySendOverflowPacket+0x7c>
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	1c59      	adds	r1, r3, #1
 800286c:	6279      	str	r1, [r7, #36]	; 0x24
 800286e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	09db      	lsrs	r3, r3, #7
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	2b7f      	cmp	r3, #127	; 0x7f
 8002880:	d8f0      	bhi.n	8002864 <_TrySendOverflowPacket+0x64>
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	627a      	str	r2, [r7, #36]	; 0x24
 8002888:	6a3a      	ldr	r2, [r7, #32]
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	461a      	mov	r2, r3
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	4619      	mov	r1, r3
 800289e:	2001      	movs	r0, #1
 80028a0:	f7ff fd94 	bl	80023cc <SEGGER_RTT_WriteSkipNoLock>
 80028a4:	4603      	mov	r3, r0
 80028a6:	613b      	str	r3, [r7, #16]
  if (Status) {
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80028ae:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <_TrySendOverflowPacket+0xd8>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <_TrySendOverflowPacket+0xd8>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <_TrySendOverflowPacket+0xd8>)
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e004      	b.n	80028cc <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <_TrySendOverflowPacket+0xd8>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	3301      	adds	r3, #1
 80028c8:	4a03      	ldr	r2, [pc, #12]	; (80028d8 <_TrySendOverflowPacket+0xd8>)
 80028ca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80028cc:	693b      	ldr	r3, [r7, #16]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3730      	adds	r7, #48	; 0x30
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2001522c 	.word	0x2001522c
 80028dc:	e0001004 	.word	0xe0001004

080028e0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80028ec:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <_SendPacket+0x19c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d010      	beq.n	8002916 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80028f4:	4b61      	ldr	r3, [pc, #388]	; (8002a7c <_SendPacket+0x19c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a1 	beq.w	8002a40 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80028fe:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <_SendPacket+0x19c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d109      	bne.n	800291a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002906:	f7ff ff7b 	bl	8002800 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800290a:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <_SendPacket+0x19c>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b01      	cmp	r3, #1
 8002910:	f040 8098 	bne.w	8002a44 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8002914:	e001      	b.n	800291a <_SendPacket+0x3a>
    goto Send;
 8002916:	bf00      	nop
 8002918:	e000      	b.n	800291c <_SendPacket+0x3c>
Send:
 800291a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b1f      	cmp	r3, #31
 8002920:	d809      	bhi.n	8002936 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002922:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <_SendPacket+0x19c>)
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 8089 	bne.w	8002a48 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b17      	cmp	r3, #23
 800293a:	d807      	bhi.n	800294c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3b01      	subs	r3, #1
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e03d      	b.n	80029c8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b7f      	cmp	r3, #127	; 0x7f
 8002958:	d912      	bls.n	8002980 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	09da      	lsrs	r2, r3, #7
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3b01      	subs	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	3a01      	subs	r2, #1
 8002972:	60fa      	str	r2, [r7, #12]
 8002974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e006      	b.n	800298e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3b01      	subs	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b7f      	cmp	r3, #127	; 0x7f
 8002992:	d912      	bls.n	80029ba <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	09da      	lsrs	r2, r3, #7
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3b01      	subs	r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	3a01      	subs	r2, #1
 80029ac:	60fa      	str	r2, [r7, #12]
 80029ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e006      	b.n	80029c8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3b01      	subs	r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80029c8:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <_SendPacket+0x1a0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <_SendPacket+0x19c>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	e00b      	b.n	80029fa <_SendPacket+0x11a>
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1c59      	adds	r1, r3, #1
 80029ea:	6279      	str	r1, [r7, #36]	; 0x24
 80029ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	09db      	lsrs	r3, r3, #7
 80029f8:	623b      	str	r3, [r7, #32]
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	2b7f      	cmp	r3, #127	; 0x7f
 80029fe:	d8f0      	bhi.n	80029e2 <_SendPacket+0x102>
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	627a      	str	r2, [r7, #36]	; 0x24
 8002a06:	6a3a      	ldr	r2, [r7, #32]
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	68f9      	ldr	r1, [r7, #12]
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f7ff fcd6 	bl	80023cc <SEGGER_RTT_WriteSkipNoLock>
 8002a20:	4603      	mov	r3, r0
 8002a22:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002a2a:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <_SendPacket+0x19c>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	60d3      	str	r3, [r2, #12]
 8002a30:	e00b      	b.n	8002a4a <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <_SendPacket+0x19c>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <_SendPacket+0x19c>)
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e004      	b.n	8002a4a <_SendPacket+0x16a>
    goto SendDone;
 8002a40:	bf00      	nop
 8002a42:	e002      	b.n	8002a4a <_SendPacket+0x16a>
      goto SendDone;
 8002a44:	bf00      	nop
 8002a46:	e000      	b.n	8002a4a <_SendPacket+0x16a>
      goto SendDone;
 8002a48:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <_SendPacket+0x1a4>)
 8002a4c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <_SendPacket+0x1a4>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d00b      	beq.n	8002a72 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <_SendPacket+0x19c>)
 8002a5c:	789b      	ldrb	r3, [r3, #2]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d107      	bne.n	8002a72 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <_SendPacket+0x19c>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002a68:	f7ff fe6d 	bl	8002746 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <_SendPacket+0x19c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002a72:	bf00      	nop
 8002a74:	3728      	adds	r7, #40	; 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2001522c 	.word	0x2001522c
 8002a80:	e0001004 	.word	0xe0001004
 8002a84:	20015348 	.word	0x20015348

08002a88 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002a96:	2300      	movs	r3, #0
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a9e:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <SEGGER_SYSVIEW_Init+0x68>)
 8002aa0:	4914      	ldr	r1, [pc, #80]	; (8002af4 <SEGGER_SYSVIEW_Init+0x6c>)
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f7ff fd22 	bl	80024ec <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2308      	movs	r3, #8
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <SEGGER_SYSVIEW_Init+0x70>)
 8002ab0:	4910      	ldr	r1, [pc, #64]	; (8002af4 <SEGGER_SYSVIEW_Init+0x6c>)
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f7ff fd84 	bl	80025c0 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <SEGGER_SYSVIEW_Init+0x74>)
 8002aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002abe:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <SEGGER_SYSVIEW_Init+0x78>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <SEGGER_SYSVIEW_Init+0x74>)
 8002ac6:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002ac8:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <SEGGER_SYSVIEW_Init+0x74>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002ace:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <SEGGER_SYSVIEW_Init+0x74>)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002ad4:	4a09      	ldr	r2, [pc, #36]	; (8002afc <SEGGER_SYSVIEW_Init+0x74>)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002ada:	4a08      	ldr	r2, [pc, #32]	; (8002afc <SEGGER_SYSVIEW_Init+0x74>)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <SEGGER_SYSVIEW_Init+0x74>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20013224 	.word	0x20013224
 8002af4:	08004050 	.word	0x08004050
 8002af8:	20015224 	.word	0x20015224
 8002afc:	2001522c 	.word	0x2001522c
 8002b00:	e0001004 	.word	0xe0001004

08002b04 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6113      	str	r3, [r2, #16]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	2001522c 	.word	0x2001522c

08002b24 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8002b30:	f04f 0120 	mov.w	r1, #32
 8002b34:	f381 8811 	msr	BASEPRI, r1
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4808      	ldr	r0, [pc, #32]	; (8002b5c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002b3c:	f7ff fdf7 	bl	800272e <_PreparePacket>
 8002b40:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68b8      	ldr	r0, [r7, #8]
 8002b48:	f7ff feca 	bl	80028e0 <_SendPacket>
  RECORD_END();
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f383 8811 	msr	BASEPRI, r3
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	2001525c 	.word	0x2001525c

08002b60 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002b6a:	f3ef 8311 	mrs	r3, BASEPRI
 8002b6e:	f04f 0120 	mov.w	r1, #32
 8002b72:	f381 8811 	msr	BASEPRI, r1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	4816      	ldr	r0, [pc, #88]	; (8002bd4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002b7a:	f7ff fdd8 	bl	800272e <_PreparePacket>
 8002b7e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	61bb      	str	r3, [r7, #24]
 8002b8c:	e00b      	b.n	8002ba6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	1c59      	adds	r1, r3, #1
 8002b96:	61f9      	str	r1, [r7, #28]
 8002b98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	09db      	lsrs	r3, r3, #7
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8002baa:	d8f0      	bhi.n	8002b8e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	61fa      	str	r2, [r7, #28]
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68f9      	ldr	r1, [r7, #12]
 8002bc0:	6938      	ldr	r0, [r7, #16]
 8002bc2:	f7ff fe8d 	bl	80028e0 <_SendPacket>
  RECORD_END();
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f383 8811 	msr	BASEPRI, r3
}
 8002bcc:	bf00      	nop
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	2001525c 	.word	0x2001525c

08002bd8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08c      	sub	sp, #48	; 0x30
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002be4:	f3ef 8311 	mrs	r3, BASEPRI
 8002be8:	f04f 0120 	mov.w	r1, #32
 8002bec:	f381 8811 	msr	BASEPRI, r1
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	4825      	ldr	r0, [pc, #148]	; (8002c88 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002bf4:	f7ff fd9b 	bl	800272e <_PreparePacket>
 8002bf8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c06:	e00b      	b.n	8002c20 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	1c59      	adds	r1, r3, #1
 8002c10:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	09db      	lsrs	r3, r3, #7
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	2b7f      	cmp	r3, #127	; 0x7f
 8002c24:	d8f0      	bhi.n	8002c08 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	e00b      	b.n	8002c58 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	1c59      	adds	r1, r3, #1
 8002c48:	6279      	str	r1, [r7, #36]	; 0x24
 8002c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	09db      	lsrs	r3, r3, #7
 8002c56:	623b      	str	r3, [r7, #32]
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c5c:	d8f0      	bhi.n	8002c40 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	627a      	str	r2, [r7, #36]	; 0x24
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6979      	ldr	r1, [r7, #20]
 8002c72:	69b8      	ldr	r0, [r7, #24]
 8002c74:	f7ff fe34 	bl	80028e0 <_SendPacket>
  RECORD_END();
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f383 8811 	msr	BASEPRI, r3
}
 8002c7e:	bf00      	nop
 8002c80:	3730      	adds	r7, #48	; 0x30
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	2001525c 	.word	0x2001525c

08002c8c <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002c92:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <SEGGER_SYSVIEW_Start+0x16c>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 80aa 	bne.w	8002df0 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002c9c:	4b56      	ldr	r3, [pc, #344]	; (8002df8 <SEGGER_SYSVIEW_Start+0x16c>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002ca2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ca6:	f04f 0120 	mov.w	r1, #32
 8002caa:	f381 8811 	msr	BASEPRI, r1
 8002cae:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002cb0:	220a      	movs	r2, #10
 8002cb2:	4952      	ldr	r1, [pc, #328]	; (8002dfc <SEGGER_SYSVIEW_Start+0x170>)
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f7ff fb89 	bl	80023cc <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002cc0:	200a      	movs	r0, #10
 8002cc2:	f7ff ff2f 	bl	8002b24 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8002cca:	f04f 0120 	mov.w	r1, #32
 8002cce:	f381 8811 	msr	BASEPRI, r1
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	484a      	ldr	r0, [pc, #296]	; (8002e00 <SEGGER_SYSVIEW_Start+0x174>)
 8002cd6:	f7ff fd2a 	bl	800272e <_PreparePacket>
 8002cda:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce4:	4b44      	ldr	r3, [pc, #272]	; (8002df8 <SEGGER_SYSVIEW_Start+0x16c>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cea:	e00b      	b.n	8002d04 <SEGGER_SYSVIEW_Start+0x78>
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	1c59      	adds	r1, r3, #1
 8002cf4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002cf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	09db      	lsrs	r3, r3, #7
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	2b7f      	cmp	r3, #127	; 0x7f
 8002d08:	d8f0      	bhi.n	8002cec <SEGGER_SYSVIEW_Start+0x60>
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	e00b      	b.n	8002d3e <SEGGER_SYSVIEW_Start+0xb2>
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	1c59      	adds	r1, r3, #1
 8002d2e:	6279      	str	r1, [r7, #36]	; 0x24
 8002d30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	09db      	lsrs	r3, r3, #7
 8002d3c:	623b      	str	r3, [r7, #32]
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	2b7f      	cmp	r3, #127	; 0x7f
 8002d42:	d8f0      	bhi.n	8002d26 <SEGGER_SYSVIEW_Start+0x9a>
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	627a      	str	r2, [r7, #36]	; 0x24
 8002d4a:	6a3a      	ldr	r2, [r7, #32]
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	e00b      	b.n	8002d78 <SEGGER_SYSVIEW_Start+0xec>
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	1c59      	adds	r1, r3, #1
 8002d68:	61f9      	str	r1, [r7, #28]
 8002d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	09db      	lsrs	r3, r3, #7
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8002d7c:	d8f0      	bhi.n	8002d60 <SEGGER_SYSVIEW_Start+0xd4>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	61fa      	str	r2, [r7, #28]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	2302      	movs	r3, #2
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	e00b      	b.n	8002db0 <SEGGER_SYSVIEW_Start+0x124>
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	1c59      	adds	r1, r3, #1
 8002da0:	6179      	str	r1, [r7, #20]
 8002da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	09db      	lsrs	r3, r3, #7
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b7f      	cmp	r3, #127	; 0x7f
 8002db4:	d8f0      	bhi.n	8002d98 <SEGGER_SYSVIEW_Start+0x10c>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	617a      	str	r2, [r7, #20]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002dc6:	2218      	movs	r2, #24
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff fd88 	bl	80028e0 <_SendPacket>
      RECORD_END();
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <SEGGER_SYSVIEW_Start+0x16c>)
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <SEGGER_SYSVIEW_Start+0x16c>)
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002de4:	f000 f9ec 	bl	80031c0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002de8:	f000 f9b2 	bl	8003150 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002dec:	f000 fc8a 	bl	8003704 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002df0:	bf00      	nop
 8002df2:	3730      	adds	r7, #48	; 0x30
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	2001522c 	.word	0x2001522c
 8002dfc:	080040dc 	.word	0x080040dc
 8002e00:	2001525c 	.word	0x2001525c

08002e04 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8002e0e:	f04f 0120 	mov.w	r1, #32
 8002e12:	f381 8811 	msr	BASEPRI, r1
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	480b      	ldr	r0, [pc, #44]	; (8002e48 <SEGGER_SYSVIEW_Stop+0x44>)
 8002e1a:	f7ff fc88 	bl	800272e <_PreparePacket>
 8002e1e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <SEGGER_SYSVIEW_Stop+0x48>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002e28:	220b      	movs	r2, #11
 8002e2a:	6839      	ldr	r1, [r7, #0]
 8002e2c:	6838      	ldr	r0, [r7, #0]
 8002e2e:	f7ff fd57 	bl	80028e0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <SEGGER_SYSVIEW_Stop+0x48>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f383 8811 	msr	BASEPRI, r3
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	2001525c 	.word	0x2001525c
 8002e4c:	2001522c 	.word	0x2001522c

08002e50 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	; 0x30
 8002e54:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002e56:	f3ef 8311 	mrs	r3, BASEPRI
 8002e5a:	f04f 0120 	mov.w	r1, #32
 8002e5e:	f381 8811 	msr	BASEPRI, r1
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	4845      	ldr	r0, [pc, #276]	; (8002f7c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002e66:	f7ff fc62 	bl	800272e <_PreparePacket>
 8002e6a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e74:	4b42      	ldr	r3, [pc, #264]	; (8002f80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7a:	e00b      	b.n	8002e94 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	1c59      	adds	r1, r3, #1
 8002e84:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	09db      	lsrs	r3, r3, #7
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	2b7f      	cmp	r3, #127	; 0x7f
 8002e98:	d8f0      	bhi.n	8002e7c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	4b34      	ldr	r3, [pc, #208]	; (8002f80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	623b      	str	r3, [r7, #32]
 8002eb4:	e00b      	b.n	8002ece <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	1c59      	adds	r1, r3, #1
 8002ebe:	6279      	str	r1, [r7, #36]	; 0x24
 8002ec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	09db      	lsrs	r3, r3, #7
 8002ecc:	623b      	str	r3, [r7, #32]
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ed2:	d8f0      	bhi.n	8002eb6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	627a      	str	r2, [r7, #36]	; 0x24
 8002eda:	6a3a      	ldr	r2, [r7, #32]
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	e00b      	b.n	8002f08 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	1c59      	adds	r1, r3, #1
 8002ef8:	61f9      	str	r1, [r7, #28]
 8002efa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	09db      	lsrs	r3, r3, #7
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f0c:	d8f0      	bhi.n	8002ef0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	61fa      	str	r2, [r7, #28]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	2302      	movs	r3, #2
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	e00b      	b.n	8002f40 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	1c59      	adds	r1, r3, #1
 8002f30:	6179      	str	r1, [r7, #20]
 8002f32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	09db      	lsrs	r3, r3, #7
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b7f      	cmp	r3, #127	; 0x7f
 8002f44:	d8f0      	bhi.n	8002f28 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	617a      	str	r2, [r7, #20]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002f56:	2218      	movs	r2, #24
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	68b8      	ldr	r0, [r7, #8]
 8002f5c:	f7ff fcc0 	bl	80028e0 <_SendPacket>
  RECORD_END();
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	4798      	blx	r3
  }
}
 8002f74:	bf00      	nop
 8002f76:	3730      	adds	r7, #48	; 0x30
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	2001525c 	.word	0x2001525c
 8002f80:	2001522c 	.word	0x2001522c

08002f84 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b092      	sub	sp, #72	; 0x48
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002f8c:	f3ef 8311 	mrs	r3, BASEPRI
 8002f90:	f04f 0120 	mov.w	r1, #32
 8002f94:	f381 8811 	msr	BASEPRI, r1
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	486b      	ldr	r0, [pc, #428]	; (8003148 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002f9c:	f7ff fbc7 	bl	800272e <_PreparePacket>
 8002fa0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4b67      	ldr	r3, [pc, #412]	; (800314c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8002fb8:	e00b      	b.n	8002fd2 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc0:	1c59      	adds	r1, r3, #1
 8002fc2:	6479      	str	r1, [r7, #68]	; 0x44
 8002fc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fce:	09db      	lsrs	r3, r3, #7
 8002fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8002fd6:	d8f0      	bhi.n	8002fba <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	647a      	str	r2, [r7, #68]	; 0x44
 8002fde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff2:	e00b      	b.n	800300c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffa:	1c59      	adds	r1, r3, #1
 8002ffc:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002ffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003008:	09db      	lsrs	r3, r3, #7
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
 800300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300e:	2b7f      	cmp	r3, #127	; 0x7f
 8003010:	d8f0      	bhi.n	8002ff4 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003020:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	4619      	mov	r1, r3
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f7ff fb32 	bl	8002694 <_EncodeStr>
 8003030:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003032:	2209      	movs	r2, #9
 8003034:	68f9      	ldr	r1, [r7, #12]
 8003036:	6938      	ldr	r0, [r7, #16]
 8003038:	f7ff fc52 	bl	80028e0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b40      	ldr	r3, [pc, #256]	; (800314c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	633b      	str	r3, [r7, #48]	; 0x30
 8003052:	e00b      	b.n	800306c <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	b2da      	uxtb	r2, r3
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	1c59      	adds	r1, r3, #1
 800305c:	6379      	str	r1, [r7, #52]	; 0x34
 800305e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	09db      	lsrs	r3, r3, #7
 800306a:	633b      	str	r3, [r7, #48]	; 0x30
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	2b7f      	cmp	r3, #127	; 0x7f
 8003070:	d8f0      	bhi.n	8003054 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	637a      	str	r2, [r7, #52]	; 0x34
 8003078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003080:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
 800308c:	e00b      	b.n	80030a6 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	b2da      	uxtb	r2, r3
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	1c59      	adds	r1, r3, #1
 8003096:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	09db      	lsrs	r3, r3, #7
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	2b7f      	cmp	r3, #127	; 0x7f
 80030aa:	d8f0      	bhi.n	800308e <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80030ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	623b      	str	r3, [r7, #32]
 80030c6:	e00b      	b.n	80030e0 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	1c59      	adds	r1, r3, #1
 80030d0:	6279      	str	r1, [r7, #36]	; 0x24
 80030d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	09db      	lsrs	r3, r3, #7
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	2b7f      	cmp	r3, #127	; 0x7f
 80030e4:	d8f0      	bhi.n	80030c8 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	627a      	str	r2, [r7, #36]	; 0x24
 80030ec:	6a3a      	ldr	r2, [r7, #32]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	e00b      	b.n	8003118 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	61f9      	str	r1, [r7, #28]
 800310a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	09db      	lsrs	r3, r3, #7
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2b7f      	cmp	r3, #127	; 0x7f
 800311c:	d8f0      	bhi.n	8003100 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	61fa      	str	r2, [r7, #28]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800312e:	2215      	movs	r2, #21
 8003130:	68f9      	ldr	r1, [r7, #12]
 8003132:	6938      	ldr	r0, [r7, #16]
 8003134:	f7ff fbd4 	bl	80028e0 <_SendPacket>
  RECORD_END();
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f383 8811 	msr	BASEPRI, r3
}
 800313e:	bf00      	nop
 8003140:	3748      	adds	r7, #72	; 0x48
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2001525c 	.word	0x2001525c
 800314c:	2001522c 	.word	0x2001522c

08003150 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003154:	4b07      	ldr	r3, [pc, #28]	; (8003174 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003166:	4b03      	ldr	r3, [pc, #12]	; (8003174 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4798      	blx	r3
  }
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	2001522c 	.word	0x2001522c

08003178 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003180:	f3ef 8311 	mrs	r3, BASEPRI
 8003184:	f04f 0120 	mov.w	r1, #32
 8003188:	f381 8811 	msr	BASEPRI, r1
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	480b      	ldr	r0, [pc, #44]	; (80031bc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003190:	f7ff facd 	bl	800272e <_PreparePacket>
 8003194:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	6938      	ldr	r0, [r7, #16]
 800319c:	f7ff fa7a 	bl	8002694 <_EncodeStr>
 80031a0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80031a2:	220e      	movs	r2, #14
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	6938      	ldr	r0, [r7, #16]
 80031a8:	f7ff fb9a 	bl	80028e0 <_SendPacket>
  RECORD_END();
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f383 8811 	msr	BASEPRI, r3
}
 80031b2:	bf00      	nop
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	2001525c 	.word	0x2001525c

080031c0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80031c6:	4b14      	ldr	r3, [pc, #80]	; (8003218 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d019      	beq.n	8003202 <SEGGER_SYSVIEW_RecordSystime+0x42>
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d014      	beq.n	8003202 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4798      	blx	r3
 80031e0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80031e4:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80031e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	f04f 0400 	mov.w	r4, #0
 80031f2:	0013      	movs	r3, r2
 80031f4:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80031f6:	461a      	mov	r2, r3
 80031f8:	4601      	mov	r1, r0
 80031fa:	200d      	movs	r0, #13
 80031fc:	f7ff fcec 	bl	8002bd8 <SEGGER_SYSVIEW_RecordU32x2>
 8003200:	e005      	b.n	800320e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4619      	mov	r1, r3
 8003208:	200c      	movs	r0, #12
 800320a:	f7ff fca9 	bl	8002b60 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bd90      	pop	{r4, r7, pc}
 8003216:	bf00      	nop
 8003218:	2001522c 	.word	0x2001522c
 800321c:	e0001004 	.word	0xe0001004

08003220 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003226:	f3ef 8311 	mrs	r3, BASEPRI
 800322a:	f04f 0120 	mov.w	r1, #32
 800322e:	f381 8811 	msr	BASEPRI, r1
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	4819      	ldr	r0, [pc, #100]	; (800329c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003236:	f7ff fa7a 	bl	800272e <_PreparePacket>
 800323a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003240:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003248:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e00b      	b.n	800326c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	1c59      	adds	r1, r3, #1
 800325c:	6179      	str	r1, [r7, #20]
 800325e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	09db      	lsrs	r3, r3, #7
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b7f      	cmp	r3, #127	; 0x7f
 8003270:	d8f0      	bhi.n	8003254 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	617a      	str	r2, [r7, #20]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003282:	2202      	movs	r2, #2
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	68b8      	ldr	r0, [r7, #8]
 8003288:	f7ff fb2a 	bl	80028e0 <_SendPacket>
  RECORD_END();
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f383 8811 	msr	BASEPRI, r3
}
 8003292:	bf00      	nop
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	2001525c 	.word	0x2001525c
 80032a0:	e000ed04 	.word	0xe000ed04

080032a4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80032aa:	f3ef 8311 	mrs	r3, BASEPRI
 80032ae:	f04f 0120 	mov.w	r1, #32
 80032b2:	f381 8811 	msr	BASEPRI, r1
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	4807      	ldr	r0, [pc, #28]	; (80032d8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80032ba:	f7ff fa38 	bl	800272e <_PreparePacket>
 80032be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80032c0:	2203      	movs	r2, #3
 80032c2:	6839      	ldr	r1, [r7, #0]
 80032c4:	6838      	ldr	r0, [r7, #0]
 80032c6:	f7ff fb0b 	bl	80028e0 <_SendPacket>
  RECORD_END();
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f383 8811 	msr	BASEPRI, r3
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	2001525c 	.word	0x2001525c

080032dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80032e2:	f3ef 8311 	mrs	r3, BASEPRI
 80032e6:	f04f 0120 	mov.w	r1, #32
 80032ea:	f381 8811 	msr	BASEPRI, r1
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	4807      	ldr	r0, [pc, #28]	; (8003310 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80032f2:	f7ff fa1c 	bl	800272e <_PreparePacket>
 80032f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80032f8:	2212      	movs	r2, #18
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	6838      	ldr	r0, [r7, #0]
 80032fe:	f7ff faef 	bl	80028e0 <_SendPacket>
  RECORD_END();
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f383 8811 	msr	BASEPRI, r3
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	2001525c 	.word	0x2001525c

08003314 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800331a:	f3ef 8311 	mrs	r3, BASEPRI
 800331e:	f04f 0120 	mov.w	r1, #32
 8003322:	f381 8811 	msr	BASEPRI, r1
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	4807      	ldr	r0, [pc, #28]	; (8003348 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800332a:	f7ff fa00 	bl	800272e <_PreparePacket>
 800332e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003330:	2211      	movs	r2, #17
 8003332:	6839      	ldr	r1, [r7, #0]
 8003334:	6838      	ldr	r0, [r7, #0]
 8003336:	f7ff fad3 	bl	80028e0 <_SendPacket>
  RECORD_END();
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f383 8811 	msr	BASEPRI, r3
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	2001525c 	.word	0x2001525c

0800334c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003354:	f3ef 8311 	mrs	r3, BASEPRI
 8003358:	f04f 0120 	mov.w	r1, #32
 800335c:	f381 8811 	msr	BASEPRI, r1
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	481a      	ldr	r0, [pc, #104]	; (80033cc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003364:	f7ff f9e3 	bl	800272e <_PreparePacket>
 8003368:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800336e:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	e00b      	b.n	800339c <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	1c59      	adds	r1, r3, #1
 800338c:	61f9      	str	r1, [r7, #28]
 800338e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	09db      	lsrs	r3, r3, #7
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b7f      	cmp	r3, #127	; 0x7f
 80033a0:	d8f0      	bhi.n	8003384 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	61fa      	str	r2, [r7, #28]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80033b2:	2208      	movs	r2, #8
 80033b4:	68f9      	ldr	r1, [r7, #12]
 80033b6:	6938      	ldr	r0, [r7, #16]
 80033b8:	f7ff fa92 	bl	80028e0 <_SendPacket>
  RECORD_END();
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f383 8811 	msr	BASEPRI, r3
}
 80033c2:	bf00      	nop
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	2001525c 	.word	0x2001525c
 80033d0:	2001522c 	.word	0x2001522c

080033d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80033dc:	f3ef 8311 	mrs	r3, BASEPRI
 80033e0:	f04f 0120 	mov.w	r1, #32
 80033e4:	f381 8811 	msr	BASEPRI, r1
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	481a      	ldr	r0, [pc, #104]	; (8003454 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80033ec:	f7ff f99f 	bl	800272e <_PreparePacket>
 80033f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	089b      	lsrs	r3, r3, #2
 8003400:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	e00b      	b.n	8003424 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	1c59      	adds	r1, r3, #1
 8003414:	61f9      	str	r1, [r7, #28]
 8003416:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	09db      	lsrs	r3, r3, #7
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b7f      	cmp	r3, #127	; 0x7f
 8003428:	d8f0      	bhi.n	800340c <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	61fa      	str	r2, [r7, #28]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800343a:	2204      	movs	r2, #4
 800343c:	68f9      	ldr	r1, [r7, #12]
 800343e:	6938      	ldr	r0, [r7, #16]
 8003440:	f7ff fa4e 	bl	80028e0 <_SendPacket>
  RECORD_END();
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f383 8811 	msr	BASEPRI, r3
}
 800344a:	bf00      	nop
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	2001525c 	.word	0x2001525c
 8003458:	2001522c 	.word	0x2001522c

0800345c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003464:	f3ef 8311 	mrs	r3, BASEPRI
 8003468:	f04f 0120 	mov.w	r1, #32
 800346c:	f381 8811 	msr	BASEPRI, r1
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	481a      	ldr	r0, [pc, #104]	; (80034dc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003474:	f7ff f95b 	bl	800272e <_PreparePacket>
 8003478:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	e00b      	b.n	80034ac <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	1c59      	adds	r1, r3, #1
 800349c:	61f9      	str	r1, [r7, #28]
 800349e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	09db      	lsrs	r3, r3, #7
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b7f      	cmp	r3, #127	; 0x7f
 80034b0:	d8f0      	bhi.n	8003494 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	61fa      	str	r2, [r7, #28]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80034c2:	2206      	movs	r2, #6
 80034c4:	68f9      	ldr	r1, [r7, #12]
 80034c6:	6938      	ldr	r0, [r7, #16]
 80034c8:	f7ff fa0a 	bl	80028e0 <_SendPacket>
  RECORD_END();
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f383 8811 	msr	BASEPRI, r3
}
 80034d2:	bf00      	nop
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	2001525c 	.word	0x2001525c
 80034e0:	2001522c 	.word	0x2001522c

080034e4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80034ee:	f3ef 8311 	mrs	r3, BASEPRI
 80034f2:	f04f 0120 	mov.w	r1, #32
 80034f6:	f381 8811 	msr	BASEPRI, r1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	4827      	ldr	r0, [pc, #156]	; (800359c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80034fe:	f7ff f916 	bl	800272e <_PreparePacket>
 8003502:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003508:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	e00b      	b.n	8003536 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	1c59      	adds	r1, r3, #1
 8003526:	6279      	str	r1, [r7, #36]	; 0x24
 8003528:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	09db      	lsrs	r3, r3, #7
 8003534:	623b      	str	r3, [r7, #32]
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	2b7f      	cmp	r3, #127	; 0x7f
 800353a:	d8f0      	bhi.n	800351e <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	627a      	str	r2, [r7, #36]	; 0x24
 8003542:	6a3a      	ldr	r2, [r7, #32]
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	e00b      	b.n	800356e <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	1c59      	adds	r1, r3, #1
 800355e:	61f9      	str	r1, [r7, #28]
 8003560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	09db      	lsrs	r3, r3, #7
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b7f      	cmp	r3, #127	; 0x7f
 8003572:	d8f0      	bhi.n	8003556 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	61fa      	str	r2, [r7, #28]
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8003584:	2207      	movs	r2, #7
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	6938      	ldr	r0, [r7, #16]
 800358a:	f7ff f9a9 	bl	80028e0 <_SendPacket>
  RECORD_END();
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f383 8811 	msr	BASEPRI, r3
}
 8003594:	bf00      	nop
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	2001525c 	.word	0x2001525c
 80035a0:	2001522c 	.word	0x2001522c

080035a4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	089b      	lsrs	r3, r3, #2
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	2001522c 	.word	0x2001522c

080035c8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08c      	sub	sp, #48	; 0x30
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80035d2:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d06d      	beq.n	80036b6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80035da:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80035e0:	2300      	movs	r3, #0
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e4:	e008      	b.n	80035f8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	3301      	adds	r3, #1
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d3f2      	bcc.n	80035e6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8003600:	e000      	b.n	8003604 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003602:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d055      	beq.n	80036b6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800360a:	f3ef 8311 	mrs	r3, BASEPRI
 800360e:	f04f 0120 	mov.w	r1, #32
 8003612:	f381 8811 	msr	BASEPRI, r1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	482a      	ldr	r0, [pc, #168]	; (80036c4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800361a:	f7ff f888 	bl	800272e <_PreparePacket>
 800361e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	623b      	str	r3, [r7, #32]
 800362c:	e00b      	b.n	8003646 <SEGGER_SYSVIEW_SendModule+0x7e>
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	1c59      	adds	r1, r3, #1
 8003636:	6279      	str	r1, [r7, #36]	; 0x24
 8003638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	09db      	lsrs	r3, r3, #7
 8003644:	623b      	str	r3, [r7, #32]
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2b7f      	cmp	r3, #127	; 0x7f
 800364a:	d8f0      	bhi.n	800362e <SEGGER_SYSVIEW_SendModule+0x66>
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	627a      	str	r2, [r7, #36]	; 0x24
 8003652:	6a3a      	ldr	r2, [r7, #32]
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e00b      	b.n	8003680 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	61f9      	str	r1, [r7, #28]
 8003672:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	09db      	lsrs	r3, r3, #7
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b7f      	cmp	r3, #127	; 0x7f
 8003684:	d8f0      	bhi.n	8003668 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	61fa      	str	r2, [r7, #28]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2280      	movs	r2, #128	; 0x80
 800369c:	4619      	mov	r1, r3
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7fe fff8 	bl	8002694 <_EncodeStr>
 80036a4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80036a6:	2216      	movs	r2, #22
 80036a8:	68f9      	ldr	r1, [r7, #12]
 80036aa:	6938      	ldr	r0, [r7, #16]
 80036ac:	f7ff f918 	bl	80028e0 <_SendPacket>
      RECORD_END();
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80036b6:	bf00      	nop
 80036b8:	3730      	adds	r7, #48	; 0x30
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20015254 	.word	0x20015254
 80036c4:	2001525c 	.word	0x2001525c

080036c8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00f      	beq.n	80036f6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f2      	bne.n	80036dc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20015254 	.word	0x20015254

08003704 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800370a:	f3ef 8311 	mrs	r3, BASEPRI
 800370e:	f04f 0120 	mov.w	r1, #32
 8003712:	f381 8811 	msr	BASEPRI, r1
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	4817      	ldr	r0, [pc, #92]	; (8003778 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800371a:	f7ff f808 	bl	800272e <_PreparePacket>
 800371e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	4b14      	ldr	r3, [pc, #80]	; (800377c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	e00b      	b.n	8003748 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	1c59      	adds	r1, r3, #1
 8003738:	6179      	str	r1, [r7, #20]
 800373a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	09db      	lsrs	r3, r3, #7
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b7f      	cmp	r3, #127	; 0x7f
 800374c:	d8f0      	bhi.n	8003730 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	617a      	str	r2, [r7, #20]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800375e:	221b      	movs	r2, #27
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	68b8      	ldr	r0, [r7, #8]
 8003764:	f7ff f8bc 	bl	80028e0 <_SendPacket>
  RECORD_END();
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f383 8811 	msr	BASEPRI, r3
}
 800376e:	bf00      	nop
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	2001525c 	.word	0x2001525c
 800377c:	20015258 	.word	0x20015258

08003780 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003788:	f3ef 8311 	mrs	r3, BASEPRI
 800378c:	f04f 0120 	mov.w	r1, #32
 8003790:	f381 8811 	msr	BASEPRI, r1
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	4827      	ldr	r0, [pc, #156]	; (8003834 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003798:	f7fe ffc9 	bl	800272e <_PreparePacket>
 800379c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800379e:	2280      	movs	r2, #128	; 0x80
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	6938      	ldr	r0, [r7, #16]
 80037a4:	f7fe ff76 	bl	8002694 <_EncodeStr>
 80037a8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
 80037ae:	2301      	movs	r3, #1
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	e00b      	b.n	80037cc <SEGGER_SYSVIEW_Warn+0x4c>
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	1c59      	adds	r1, r3, #1
 80037bc:	6279      	str	r1, [r7, #36]	; 0x24
 80037be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	09db      	lsrs	r3, r3, #7
 80037ca:	623b      	str	r3, [r7, #32]
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	2b7f      	cmp	r3, #127	; 0x7f
 80037d0:	d8f0      	bhi.n	80037b4 <SEGGER_SYSVIEW_Warn+0x34>
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	627a      	str	r2, [r7, #36]	; 0x24
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	e00b      	b.n	8003804 <SEGGER_SYSVIEW_Warn+0x84>
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	1c59      	adds	r1, r3, #1
 80037f4:	61f9      	str	r1, [r7, #28]
 80037f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	09db      	lsrs	r3, r3, #7
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b7f      	cmp	r3, #127	; 0x7f
 8003808:	d8f0      	bhi.n	80037ec <SEGGER_SYSVIEW_Warn+0x6c>
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	61fa      	str	r2, [r7, #28]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800381a:	221a      	movs	r2, #26
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	6938      	ldr	r0, [r7, #16]
 8003820:	f7ff f85e 	bl	80028e0 <_SendPacket>
  RECORD_END();
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f383 8811 	msr	BASEPRI, r3
}
 800382a:	bf00      	nop
 800382c:	3728      	adds	r7, #40	; 0x28
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	2001525c 	.word	0x2001525c

08003838 <main>:
#ifdef USE_SEMIHOSTING
extern void initialise_monitor_handles();
#endif

int main(void)
{
 8003838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383a:	b083      	sub	sp, #12
 800383c:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
    printf("Its a hello world application\r\n");
#endif

    DWT->CTRL |= (1<<0);//Data watch point trace->cyccnt(cycle count) in arm technical rm,it keeps time stamp
 800383e:	4b23      	ldr	r3, [pc, #140]	; (80038cc <main+0x94>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a22      	ldr	r2, [pc, #136]	; (80038cc <main+0x94>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6013      	str	r3, [r2, #0]

    //reset the RCC clock cconfiguration to default reset state
	//reset state is hsi=on,pll=off,hse=off, sysclk=16MHz

    RCC_DeInit();
 800384a:	f7fc fded 	bl	8000428 <RCC_DeInit>

    //update the system core clock variable
    SystemCoreClockUpdate();
 800384e:	f000 f9bd 	bl	8003bcc <SystemCoreClockUpdate>

    pvtHardwareSetup();
 8003852:	f000 f8af 	bl	80039b4 <pvtHardwareSetup>

    sprintf(user_msg,"\rthis is demo of task delete project\r\n");
 8003856:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <main+0x98>)
 8003858:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <main+0x9c>)
 800385a:	4614      	mov	r4, r2
 800385c:	469c      	mov	ip, r3
 800385e:	f104 0e20 	add.w	lr, r4, #32
 8003862:	4665      	mov	r5, ip
 8003864:	4626      	mov	r6, r4
 8003866:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003868:	6028      	str	r0, [r5, #0]
 800386a:	6069      	str	r1, [r5, #4]
 800386c:	60aa      	str	r2, [r5, #8]
 800386e:	60eb      	str	r3, [r5, #12]
 8003870:	3410      	adds	r4, #16
 8003872:	f10c 0c10 	add.w	ip, ip, #16
 8003876:	4574      	cmp	r4, lr
 8003878:	d1f3      	bne.n	8003862 <main+0x2a>
 800387a:	4663      	mov	r3, ip
 800387c:	4622      	mov	r2, r4
 800387e:	6810      	ldr	r0, [r2, #0]
 8003880:	6018      	str	r0, [r3, #0]
 8003882:	8891      	ldrh	r1, [r2, #4]
 8003884:	7992      	ldrb	r2, [r2, #6]
 8003886:	8099      	strh	r1, [r3, #4]
 8003888:	719a      	strb	r2, [r3, #6]
    printmsg(user_msg);
 800388a:	4811      	ldr	r0, [pc, #68]	; (80038d0 <main+0x98>)
 800388c:	f000 f920 	bl	8003ad0 <printmsg>

    //Start recording
    SEGGER_SYSVIEW_Conf();
 8003890:	f7fe fae8 	bl	8001e64 <SEGGER_SYSVIEW_Conf>
    SEGGER_SYSVIEW_Start();
 8003894:	f7ff f9fa 	bl	8002c8c <SEGGER_SYSVIEW_Start>

    //create two tasks:LED-TASK and BUTTON-TASK
    xTaskCreate(vTask1_handler, "TASK-1", 500, NULL, 1, &xTask1Handle);//stack size:500*4=~2kb
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <main+0xa0>)
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	2301      	movs	r3, #1
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038a6:	490d      	ldr	r1, [pc, #52]	; (80038dc <main+0xa4>)
 80038a8:	480d      	ldr	r0, [pc, #52]	; (80038e0 <main+0xa8>)
 80038aa:	f7fd f8eb 	bl	8000a84 <xTaskCreate>
    xTaskCreate(vTask2_handler, "TASK-2", 500, NULL, 2, &xTask2Handle);
 80038ae:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <main+0xac>)
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	2302      	movs	r3, #2
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038bc:	490a      	ldr	r1, [pc, #40]	; (80038e8 <main+0xb0>)
 80038be:	480b      	ldr	r0, [pc, #44]	; (80038ec <main+0xb4>)
 80038c0:	f7fd f8e0 	bl	8000a84 <xTaskCreate>
    //start the scheduler
    vTaskStartScheduler();
 80038c4:	f7fd fb1a 	bl	8000efc <vTaskStartScheduler>
	for(;;);
 80038c8:	e7fe      	b.n	80038c8 <main+0x90>
 80038ca:	bf00      	nop
 80038cc:	e0001000 	.word	0xe0001000
 80038d0:	200153f0 	.word	0x200153f0
 80038d4:	08004058 	.word	0x08004058
 80038d8:	20015340 	.word	0x20015340
 80038dc:	08004080 	.word	0x08004080
 80038e0:	080038f1 	.word	0x080038f1
 80038e4:	20015344 	.word	0x20015344
 80038e8:	08004088 	.word	0x08004088
 80038ec:	08003931 	.word	0x08003931

080038f0 <vTask1_handler>:
}

void vTask1_handler(void* params){
 80038f0:	b5b0      	push	{r4, r5, r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

	sprintf(user_msg,"task 1 is running\r\n");
 80038f8:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <vTask1_handler+0x34>)
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <vTask1_handler+0x38>)
 80038fc:	4615      	mov	r5, r2
 80038fe:	461c      	mov	r4, r3
 8003900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003902:	6028      	str	r0, [r5, #0]
 8003904:	6069      	str	r1, [r5, #4]
 8003906:	60aa      	str	r2, [r5, #8]
 8003908:	60eb      	str	r3, [r5, #12]
 800390a:	6820      	ldr	r0, [r4, #0]
 800390c:	6128      	str	r0, [r5, #16]
	printmsg(user_msg);
 800390e:	4805      	ldr	r0, [pc, #20]	; (8003924 <vTask1_handler+0x34>)
 8003910:	f000 f8de 	bl	8003ad0 <printmsg>
	while(1){
		//rtos_delay(200);
		vTaskDelay(200);
 8003914:	20c8      	movs	r0, #200	; 0xc8
 8003916:	f7fd fab9 	bl	8000e8c <vTaskDelay>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 800391a:	2120      	movs	r1, #32
 800391c:	4803      	ldr	r0, [pc, #12]	; (800392c <vTask1_handler+0x3c>)
 800391e:	f7fc fd27 	bl	8000370 <GPIO_ToggleBits>
		vTaskDelay(200);
 8003922:	e7f7      	b.n	8003914 <vTask1_handler+0x24>
 8003924:	200153f0 	.word	0x200153f0
 8003928:	08004090 	.word	0x08004090
 800392c:	40020000 	.word	0x40020000

08003930 <vTask2_handler>:
		}

	}


void vTask2_handler(void* params){
 8003930:	b5b0      	push	{r4, r5, r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

	sprintf(user_msg,"task 2 is running\r\n");
 8003938:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <vTask2_handler+0x70>)
 800393a:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <vTask2_handler+0x74>)
 800393c:	4615      	mov	r5, r2
 800393e:	461c      	mov	r4, r3
 8003940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003942:	6028      	str	r0, [r5, #0]
 8003944:	6069      	str	r1, [r5, #4]
 8003946:	60aa      	str	r2, [r5, #8]
 8003948:	60eb      	str	r3, [r5, #12]
 800394a:	6820      	ldr	r0, [r4, #0]
 800394c:	6128      	str	r0, [r5, #16]
	printmsg(user_msg);
 800394e:	4814      	ldr	r0, [pc, #80]	; (80039a0 <vTask2_handler+0x70>)
 8003950:	f000 f8be 	bl	8003ad0 <printmsg>


	while(1){
		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)){
 8003954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003958:	4813      	ldr	r0, [pc, #76]	; (80039a8 <vTask2_handler+0x78>)
 800395a:	f7fc fcef 	bl	800033c <GPIO_ReadInputDataBit>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <vTask2_handler+0x46>
			//button is not pressed
			//1 s delay for led toggling

			rtos_delay(1000);
 8003964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003968:	f000 f8da 	bl	8003b20 <rtos_delay>
			//toggle led
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 800396c:	2120      	movs	r1, #32
 800396e:	480f      	ldr	r0, [pc, #60]	; (80039ac <vTask2_handler+0x7c>)
 8003970:	f7fc fcfe 	bl	8000370 <GPIO_ToggleBits>
 8003974:	e7ee      	b.n	8003954 <vTask2_handler+0x24>



		}else{
			//button is pressed
			sprintf(user_msg,"task 2 is getting deleted\r\n");
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <vTask2_handler+0x70>)
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <vTask2_handler+0x80>)
 800397a:	4615      	mov	r5, r2
 800397c:	461c      	mov	r4, r3
 800397e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003980:	6028      	str	r0, [r5, #0]
 8003982:	6069      	str	r1, [r5, #4]
 8003984:	60aa      	str	r2, [r5, #8]
 8003986:	60eb      	str	r3, [r5, #12]
 8003988:	cc07      	ldmia	r4!, {r0, r1, r2}
 800398a:	6128      	str	r0, [r5, #16]
 800398c:	6169      	str	r1, [r5, #20]
 800398e:	61aa      	str	r2, [r5, #24]
			printmsg(user_msg);
 8003990:	4803      	ldr	r0, [pc, #12]	; (80039a0 <vTask2_handler+0x70>)
 8003992:	f000 f89d 	bl	8003ad0 <printmsg>

			//delete the high priority task
			vTaskDelete(NULL);
 8003996:	2000      	movs	r0, #0
 8003998:	f7fd f9d0 	bl	8000d3c <vTaskDelete>
		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)){
 800399c:	e7da      	b.n	8003954 <vTask2_handler+0x24>
 800399e:	bf00      	nop
 80039a0:	200153f0 	.word	0x200153f0
 80039a4:	080040a4 	.word	0x080040a4
 80039a8:	40020800 	.word	0x40020800
 80039ac:	40020000 	.word	0x40020000
 80039b0:	080040b8 	.word	0x080040b8

080039b4 <pvtHardwareSetup>:

		}
		}
	}

static void pvtHardwareSetup(void){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
	UART2_Setup();
 80039b8:	f000 f83c 	bl	8003a34 <UART2_Setup>
	//Configure button PC13 and LED PA5
	GPIO_Setup();
 80039bc:	f000 f802 	bl	80039c4 <GPIO_Setup>


}
 80039c0:	bf00      	nop
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <GPIO_Setup>:



static void GPIO_Setup(void){
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef buttonGPIO,LED_GPIO;
	memset(&buttonGPIO,0,sizeof(buttonGPIO));
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	2208      	movs	r2, #8
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fac6 	bl	8003f64 <memset>
	memset(&LED_GPIO,0,sizeof(LED_GPIO));
 80039d8:	463b      	mov	r3, r7
 80039da:	2208      	movs	r2, #8
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fac0 	bl	8003f64 <memset>

	//enable clock for gpioa and gpioc
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80039e4:	2101      	movs	r1, #1
 80039e6:	2001      	movs	r0, #1
 80039e8:	f7fc fe50 	bl	800068c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80039ec:	2101      	movs	r1, #1
 80039ee:	2004      	movs	r0, #4
 80039f0:	f7fc fe4c 	bl	800068c <RCC_AHB1PeriphClockCmd>

	//configure led pin pa5 as output
	LED_GPIO.GPIO_Pin=GPIO_Pin_5;
 80039f4:	2320      	movs	r3, #32
 80039f6:	603b      	str	r3, [r7, #0]
	LED_GPIO.GPIO_Mode=GPIO_Mode_OUT;
 80039f8:	2301      	movs	r3, #1
 80039fa:	713b      	strb	r3, [r7, #4]
	LED_GPIO.GPIO_OType=GPIO_OType_PP;
 80039fc:	2300      	movs	r3, #0
 80039fe:	71bb      	strb	r3, [r7, #6]
	LED_GPIO.GPIO_PuPd=GPIO_PuPd_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOA, &LED_GPIO);
 8003a04:	463b      	mov	r3, r7
 8003a06:	4619      	mov	r1, r3
 8003a08:	4808      	ldr	r0, [pc, #32]	; (8003a2c <GPIO_Setup+0x68>)
 8003a0a:	f7fc fc09 	bl	8000220 <GPIO_Init>

	//configure button gpio pc13 as input
	buttonGPIO.GPIO_Pin=GPIO_Pin_13;
 8003a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a12:	60bb      	str	r3, [r7, #8]
	buttonGPIO.GPIO_Mode=GPIO_Mode_IN;
 8003a14:	2300      	movs	r3, #0
 8003a16:	733b      	strb	r3, [r7, #12]

	GPIO_Init(GPIOC, &buttonGPIO);
 8003a18:	f107 0308 	add.w	r3, r7, #8
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4804      	ldr	r0, [pc, #16]	; (8003a30 <GPIO_Setup+0x6c>)
 8003a20:	f7fc fbfe 	bl	8000220 <GPIO_Init>

}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40020000 	.word	0x40020000
 8003a30:	40020800 	.word	0x40020800

08003a34 <UART2_Setup>:

static void UART2_Setup(void){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
	    GPIO_InitTypeDef UART_Gpio;
		memset(&UART_Gpio,0,sizeof(UART_Gpio));
 8003a3a:	f107 0310 	add.w	r3, r7, #16
 8003a3e:	2208      	movs	r2, #8
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fa8e 	bl	8003f64 <memset>
		USART_InitTypeDef UART_Handle;
		memset(&UART_Handle,0,sizeof(UART_Handle));
 8003a48:	463b      	mov	r3, r7
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fa88 	bl	8003f64 <memset>

	//enable clock for uart peripheral and gpioa peripheral
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8003a54:	2101      	movs	r1, #1
 8003a56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003a5a:	f7fc fe37 	bl	80006cc <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003a5e:	2101      	movs	r1, #1
 8003a60:	2001      	movs	r0, #1
 8003a62:	f7fc fe13 	bl	800068c <RCC_AHB1PeriphClockCmd>

		//configure pa2 as uart_tx and pa3 as uart_rx

		UART_Gpio.GPIO_Pin=GPIO_Pin_2 | GPIO_Pin_3;
 8003a66:	230c      	movs	r3, #12
 8003a68:	613b      	str	r3, [r7, #16]
		UART_Gpio.GPIO_Mode=GPIO_Mode_AF;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	753b      	strb	r3, [r7, #20]
		UART_Gpio.GPIO_PuPd=GPIO_PuPd_UP;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
		GPIO_Init(GPIOA, &UART_Gpio);
 8003a72:	f107 0310 	add.w	r3, r7, #16
 8003a76:	4619      	mov	r1, r3
 8003a78:	4813      	ldr	r0, [pc, #76]	; (8003ac8 <UART2_Setup+0x94>)
 8003a7a:	f7fc fbd1 	bl	8000220 <GPIO_Init>

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);//PA2 CONFIG AF7
 8003a7e:	2207      	movs	r2, #7
 8003a80:	2102      	movs	r1, #2
 8003a82:	4811      	ldr	r0, [pc, #68]	; (8003ac8 <UART2_Setup+0x94>)
 8003a84:	f7fc fc86 	bl	8000394 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);//PA3 CONFIG AF7
 8003a88:	2207      	movs	r2, #7
 8003a8a:	2103      	movs	r1, #3
 8003a8c:	480e      	ldr	r0, [pc, #56]	; (8003ac8 <UART2_Setup+0x94>)
 8003a8e:	f7fc fc81 	bl	8000394 <GPIO_PinAFConfig>

		//UART PERIPHERAL CONFIGURATION
		UART_Handle.USART_BaudRate=115200;
 8003a92:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003a96:	603b      	str	r3, [r7, #0]
		UART_Handle.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	81bb      	strh	r3, [r7, #12]
		UART_Handle.USART_Mode=USART_Mode_Tx | USART_Mode_Rx;
 8003a9c:	230c      	movs	r3, #12
 8003a9e:	817b      	strh	r3, [r7, #10]
		UART_Handle.USART_Parity=USART_Parity_No;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	813b      	strh	r3, [r7, #8]
		UART_Handle.USART_StopBits=USART_StopBits_1;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	80fb      	strh	r3, [r7, #6]
		UART_Handle.USART_WordLength=USART_WordLength_8b;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	80bb      	strh	r3, [r7, #4]

		USART_Init(USART2, &UART_Handle);
 8003aac:	463b      	mov	r3, r7
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4806      	ldr	r0, [pc, #24]	; (8003acc <UART2_Setup+0x98>)
 8003ab2:	f7fc fe2b 	bl	800070c <USART_Init>
		USART_Cmd(USART2, ENABLE);
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	4804      	ldr	r0, [pc, #16]	; (8003acc <UART2_Setup+0x98>)
 8003aba:	f7fc fee1 	bl	8000880 <USART_Cmd>

}
 8003abe:	bf00      	nop
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40020000 	.word	0x40020000
 8003acc:	40004400 	.word	0x40004400

08003ad0 <printmsg>:


void printmsg(char* msg){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

	for(uint32_t i=0;i<strlen(msg);i++){
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e013      	b.n	8003b06 <printmsg+0x36>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)==RESET);
 8003ade:	bf00      	nop
 8003ae0:	2180      	movs	r1, #128	; 0x80
 8003ae2:	480e      	ldr	r0, [pc, #56]	; (8003b1c <printmsg+0x4c>)
 8003ae4:	f7fc fefe 	bl	80008e4 <USART_GetFlagStatus>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f8      	beq.n	8003ae0 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	4619      	mov	r1, r3
 8003afa:	4808      	ldr	r0, [pc, #32]	; (8003b1c <printmsg+0x4c>)
 8003afc:	f7fc fee0 	bl	80008c0 <USART_SendData>
	for(uint32_t i=0;i<strlen(msg);i++){
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fc fb82 	bl	8000210 <strlen>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d3e4      	bcc.n	8003ade <printmsg+0xe>
	}

}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40004400 	.word	0x40004400

08003b20 <rtos_delay>:

void rtos_delay(uint32_t Delay_In_Ms){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	uint32_t currect_tick_count=xTaskGetTickCount();
 8003b28:	f7fd faec 	bl	8001104 <xTaskGetTickCount>
 8003b2c:	60f8      	str	r0, [r7, #12]
	//convert from ms to number of ticks
	uint32_t Delay_In_Ticks=(Delay_In_Ms*configTICK_RATE_HZ)/1000;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b34:	fb02 f303 	mul.w	r3, r2, r3
 8003b38:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <rtos_delay+0x3c>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	099b      	lsrs	r3, r3, #6
 8003b40:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount()<(currect_tick_count+Delay_In_Ticks));
 8003b42:	bf00      	nop
 8003b44:	f7fd fade 	bl	8001104 <xTaskGetTickCount>
 8003b48:	4601      	mov	r1, r0
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4299      	cmp	r1, r3
 8003b52:	d3f7      	bcc.n	8003b44 <rtos_delay+0x24>

}
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	10624dd3 	.word	0x10624dd3

08003b60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <SystemInit+0x60>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <SystemInit+0x60>)
 8003b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <SystemInit+0x64>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <SystemInit+0x64>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b80:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <SystemInit+0x64>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <SystemInit+0x64>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <SystemInit+0x64>)
 8003b8c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <SystemInit+0x64>)
 8003b98:	4a0b      	ldr	r2, [pc, #44]	; (8003bc8 <SystemInit+0x68>)
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <SystemInit+0x64>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <SystemInit+0x64>)
 8003ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003ba8:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <SystemInit+0x64>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003bae:	f000 f8db 	bl	8003d68 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bb2:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <SystemInit+0x60>)
 8003bb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bb8:	609a      	str	r2, [r3, #8]
#endif
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	e000ed00 	.word	0xe000ed00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	24003010 	.word	0x24003010

08003bcc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	2302      	movs	r3, #2
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	2302      	movs	r3, #2
 8003be4:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8003be6:	2302      	movs	r3, #2
 8003be8:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003bea:	4b5a      	ldr	r3, [pc, #360]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	f200 8092 	bhi.w	8003d20 <SystemCoreClockUpdate+0x154>
 8003bfc:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <SystemCoreClockUpdate+0x38>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d21 	.word	0x08003d21
 8003c0c:	08003d21 	.word	0x08003d21
 8003c10:	08003d21 	.word	0x08003d21
 8003c14:	08003c41 	.word	0x08003c41
 8003c18:	08003d21 	.word	0x08003d21
 8003c1c:	08003d21 	.word	0x08003d21
 8003c20:	08003d21 	.word	0x08003d21
 8003c24:	08003c49 	.word	0x08003c49
 8003c28:	08003d21 	.word	0x08003d21
 8003c2c:	08003d21 	.word	0x08003d21
 8003c30:	08003d21 	.word	0x08003d21
 8003c34:	08003cb5 	.word	0x08003cb5
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003c38:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <SystemCoreClockUpdate+0x18c>)
 8003c3a:	4a48      	ldr	r2, [pc, #288]	; (8003d5c <SystemCoreClockUpdate+0x190>)
 8003c3c:	601a      	str	r2, [r3, #0]
      break;
 8003c3e:	e073      	b.n	8003d28 <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003c40:	4b45      	ldr	r3, [pc, #276]	; (8003d58 <SystemCoreClockUpdate+0x18c>)
 8003c42:	4a47      	ldr	r2, [pc, #284]	; (8003d60 <SystemCoreClockUpdate+0x194>)
 8003c44:	601a      	str	r2, [r3, #0]
      break;
 8003c46:	e06f      	b.n	8003d28 <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003c48:	4b42      	ldr	r3, [pc, #264]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	0d9b      	lsrs	r3, r3, #22
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c54:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c5c:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00c      	beq.n	8003c7e <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003c64:	4a3e      	ldr	r2, [pc, #248]	; (8003d60 <SystemCoreClockUpdate+0x194>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	4a39      	ldr	r2, [pc, #228]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003c6e:	6852      	ldr	r2, [r2, #4]
 8003c70:	0992      	lsrs	r2, r2, #6
 8003c72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e00b      	b.n	8003c96 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003c7e:	4a37      	ldr	r2, [pc, #220]	; (8003d5c <SystemCoreClockUpdate+0x190>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	4a33      	ldr	r2, [pc, #204]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003c88:	6852      	ldr	r2, [r2, #4]
 8003c8a:	0992      	lsrs	r2, r2, #6
 8003c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c90:	fb02 f303 	mul.w	r3, r2, r3
 8003c94:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cae:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <SystemCoreClockUpdate+0x18c>)
 8003cb0:	6013      	str	r3, [r2, #0]
      break;
 8003cb2:	e039      	b.n	8003d28 <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	0d9b      	lsrs	r3, r3, #22
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc0:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc8:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00c      	beq.n	8003cea <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003cd0:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <SystemCoreClockUpdate+0x194>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003cda:	6852      	ldr	r2, [r2, #4]
 8003cdc:	0992      	lsrs	r2, r2, #6
 8003cde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e00b      	b.n	8003d02 <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003cea:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <SystemCoreClockUpdate+0x190>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003cf4:	6852      	ldr	r2, [r2, #4]
 8003cf6:	0992      	lsrs	r2, r2, #6
 8003cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	0f1b      	lsrs	r3, r3, #28
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	4a0f      	ldr	r2, [pc, #60]	; (8003d58 <SystemCoreClockUpdate+0x18c>)
 8003d1c:	6013      	str	r3, [r2, #0]
      break;
 8003d1e:	e003      	b.n	8003d28 <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8003d20:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <SystemCoreClockUpdate+0x18c>)
 8003d22:	4a0e      	ldr	r2, [pc, #56]	; (8003d5c <SystemCoreClockUpdate+0x190>)
 8003d24:	601a      	str	r2, [r3, #0]
      break;
 8003d26:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <SystemCoreClockUpdate+0x188>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	4a0c      	ldr	r2, [pc, #48]	; (8003d64 <SystemCoreClockUpdate+0x198>)
 8003d34:	5cd3      	ldrb	r3, [r2, r3]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <SystemCoreClockUpdate+0x18c>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <SystemCoreClockUpdate+0x18c>)
 8003d46:	6013      	str	r3, [r2, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40023800 	.word	0x40023800
 8003d58:	20000014 	.word	0x20000014
 8003d5c:	00f42400 	.word	0x00f42400
 8003d60:	007a1200 	.word	0x007a1200
 8003d64:	20000018 	.word	0x20000018

08003d68 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	2300      	movs	r3, #0
 8003d74:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003d76:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <SetSysClock+0x11c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a42      	ldr	r2, [pc, #264]	; (8003e84 <SetSysClock+0x11c>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003d82:	4b40      	ldr	r3, [pc, #256]	; (8003e84 <SetSysClock+0x11c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <SetSysClock+0x38>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d9e:	d1f0      	bne.n	8003d82 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003da0:	4b38      	ldr	r3, [pc, #224]	; (8003e84 <SetSysClock+0x11c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003dac:	2301      	movs	r3, #1
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	e001      	b.n	8003db6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003db2:	2300      	movs	r3, #0
 8003db4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d15c      	bne.n	8003e76 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003dbc:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <SetSysClock+0x11c>)
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	4a30      	ldr	r2, [pc, #192]	; (8003e84 <SetSysClock+0x11c>)
 8003dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003dc8:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <SetSysClock+0x120>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2e      	ldr	r2, [pc, #184]	; (8003e88 <SetSysClock+0x120>)
 8003dce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003dd4:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <SetSysClock+0x11c>)
 8003dd6:	4a2b      	ldr	r2, [pc, #172]	; (8003e84 <SetSysClock+0x11c>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003ddc:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <SetSysClock+0x11c>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <SetSysClock+0x11c>)
 8003de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003de8:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <SetSysClock+0x11c>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <SetSysClock+0x11c>)
 8003dee:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003df2:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003df4:	4b23      	ldr	r3, [pc, #140]	; (8003e84 <SetSysClock+0x11c>)
 8003df6:	4a25      	ldr	r2, [pc, #148]	; (8003e8c <SetSysClock+0x124>)
 8003df8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003dfa:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <SetSysClock+0x11c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a21      	ldr	r2, [pc, #132]	; (8003e84 <SetSysClock+0x11c>)
 8003e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e04:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003e06:	bf00      	nop
 8003e08:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <SetSysClock+0x11c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f9      	beq.n	8003e08 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8003e14:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <SetSysClock+0x120>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <SetSysClock+0x120>)
 8003e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8003e20:	bf00      	nop
 8003e22:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <SetSysClock+0x120>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f9      	beq.n	8003e22 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <SetSysClock+0x120>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <SetSysClock+0x120>)
 8003e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e38:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8003e3a:	bf00      	nop
 8003e3c:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <SetSysClock+0x120>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f9      	beq.n	8003e3c <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <SetSysClock+0x128>)
 8003e4a:	f240 7205 	movw	r2, #1797	; 0x705
 8003e4e:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <SetSysClock+0x11c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a0b      	ldr	r2, [pc, #44]	; (8003e84 <SetSysClock+0x11c>)
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003e5c:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <SetSysClock+0x11c>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <SetSysClock+0x11c>)
 8003e62:	f043 0302 	orr.w	r3, r3, #2
 8003e66:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003e68:	bf00      	nop
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <SetSysClock+0x11c>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d1f9      	bne.n	8003e6a <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	77405a08 	.word	0x77405a08
 8003e90:	40023c00 	.word	0x40023c00

08003e94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e94:	480d      	ldr	r0, [pc, #52]	; (8003ecc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e98:	480d      	ldr	r0, [pc, #52]	; (8003ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e9a:	490e      	ldr	r1, [pc, #56]	; (8003ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <LoopForever+0xe>)
  movs r3, #0
 8003e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea0:	e002      	b.n	8003ea8 <LoopCopyDataInit>

08003ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ea6:	3304      	adds	r3, #4

08003ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eac:	d3f9      	bcc.n	8003ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eae:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003eb0:	4c0b      	ldr	r4, [pc, #44]	; (8003ee0 <LoopForever+0x16>)
  movs r3, #0
 8003eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eb4:	e001      	b.n	8003eba <LoopFillZerobss>

08003eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eb8:	3204      	adds	r2, #4

08003eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ebc:	d3fb      	bcc.n	8003eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ebe:	f7ff fe4f 	bl	8003b60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003ec2:	f000 f811 	bl	8003ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ec6:	f7ff fcb7 	bl	8003838 <main>

08003eca <LoopForever>:

LoopForever:
    b LoopForever
 8003eca:	e7fe      	b.n	8003eca <LoopForever>
  ldr   r0, =_estack
 8003ecc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ed4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8003ed8:	080040f0 	.word	0x080040f0
  ldr r2, =_sbss
 8003edc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8003ee0:	20015454 	.word	0x20015454

08003ee4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ee4:	e7fe      	b.n	8003ee4 <ADC_IRQHandler>
	...

08003ee8 <__libc_init_array>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	4e0d      	ldr	r6, [pc, #52]	; (8003f20 <__libc_init_array+0x38>)
 8003eec:	4c0d      	ldr	r4, [pc, #52]	; (8003f24 <__libc_init_array+0x3c>)
 8003eee:	1ba4      	subs	r4, r4, r6
 8003ef0:	10a4      	asrs	r4, r4, #2
 8003ef2:	2500      	movs	r5, #0
 8003ef4:	42a5      	cmp	r5, r4
 8003ef6:	d109      	bne.n	8003f0c <__libc_init_array+0x24>
 8003ef8:	4e0b      	ldr	r6, [pc, #44]	; (8003f28 <__libc_init_array+0x40>)
 8003efa:	4c0c      	ldr	r4, [pc, #48]	; (8003f2c <__libc_init_array+0x44>)
 8003efc:	f000 f83a 	bl	8003f74 <_init>
 8003f00:	1ba4      	subs	r4, r4, r6
 8003f02:	10a4      	asrs	r4, r4, #2
 8003f04:	2500      	movs	r5, #0
 8003f06:	42a5      	cmp	r5, r4
 8003f08:	d105      	bne.n	8003f16 <__libc_init_array+0x2e>
 8003f0a:	bd70      	pop	{r4, r5, r6, pc}
 8003f0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f10:	4798      	blx	r3
 8003f12:	3501      	adds	r5, #1
 8003f14:	e7ee      	b.n	8003ef4 <__libc_init_array+0xc>
 8003f16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f1a:	4798      	blx	r3
 8003f1c:	3501      	adds	r5, #1
 8003f1e:	e7f2      	b.n	8003f06 <__libc_init_array+0x1e>
 8003f20:	080040e8 	.word	0x080040e8
 8003f24:	080040e8 	.word	0x080040e8
 8003f28:	080040e8 	.word	0x080040e8
 8003f2c:	080040ec 	.word	0x080040ec

08003f30 <memcmp>:
 8003f30:	b530      	push	{r4, r5, lr}
 8003f32:	2400      	movs	r4, #0
 8003f34:	42a2      	cmp	r2, r4
 8003f36:	d101      	bne.n	8003f3c <memcmp+0xc>
 8003f38:	2000      	movs	r0, #0
 8003f3a:	e007      	b.n	8003f4c <memcmp+0x1c>
 8003f3c:	5d03      	ldrb	r3, [r0, r4]
 8003f3e:	3401      	adds	r4, #1
 8003f40:	190d      	adds	r5, r1, r4
 8003f42:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003f46:	42ab      	cmp	r3, r5
 8003f48:	d0f4      	beq.n	8003f34 <memcmp+0x4>
 8003f4a:	1b58      	subs	r0, r3, r5
 8003f4c:	bd30      	pop	{r4, r5, pc}

08003f4e <memcpy>:
 8003f4e:	b510      	push	{r4, lr}
 8003f50:	1e43      	subs	r3, r0, #1
 8003f52:	440a      	add	r2, r1
 8003f54:	4291      	cmp	r1, r2
 8003f56:	d100      	bne.n	8003f5a <memcpy+0xc>
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f62:	e7f7      	b.n	8003f54 <memcpy+0x6>

08003f64 <memset>:
 8003f64:	4402      	add	r2, r0
 8003f66:	4603      	mov	r3, r0
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d100      	bne.n	8003f6e <memset+0xa>
 8003f6c:	4770      	bx	lr
 8003f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f72:	e7f9      	b.n	8003f68 <memset+0x4>

08003f74 <_init>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	bf00      	nop
 8003f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7a:	bc08      	pop	{r3}
 8003f7c:	469e      	mov	lr, r3
 8003f7e:	4770      	bx	lr

08003f80 <_fini>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	bf00      	nop
 8003f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f86:	bc08      	pop	{r3}
 8003f88:	469e      	mov	lr, r3
 8003f8a:	4770      	bx	lr
