
009_QueueProcessing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006524  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080066f4  080066f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006970  08006970  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  08006970  08006970  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006970  08006970  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006970  08006970  00016970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006974  08006974  00016974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08006978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000154e4  2000018c  08006b04  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015670  08006b04  00025670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001271d  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023e6  00000000  00000000  000328d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  00034cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  00035c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000038c9  00000000  00000000  00036ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000caef  00000000  00000000  0003a391  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081417  00000000  00000000  00046e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c8297  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b58  00000000  00000000  000c8314  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000018c 	.word	0x2000018c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080066dc 	.word	0x080066dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000190 	.word	0x20000190
 800020c:	080066dc 	.word	0x080066dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	e076      	b.n	80003ca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002dc:	2201      	movs	r2, #1
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	693a      	ldr	r2, [r7, #16]
 80002ec:	4013      	ands	r3, r2
 80002ee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d165      	bne.n	80003c4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43db      	mvns	r3, r3
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	4619      	mov	r1, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d003      	beq.n	8000336 <GPIO_Init+0x76>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d12e      	bne.n	8000394 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689a      	ldr	r2, [r3, #8]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	2103      	movs	r1, #3
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	4619      	mov	r1, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	b29b      	uxth	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	2301      	movs	r3, #1
 8000370:	408b      	lsls	r3, r1
 8000372:	43db      	mvns	r3, r3
 8000374:	401a      	ands	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	7992      	ldrb	r2, [r2, #6]
 8000382:	4611      	mov	r1, r2
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	b292      	uxth	r2, r2
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	b292      	uxth	r2, r2
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	b29b      	uxth	r3, r3
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	401a      	ands	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	79db      	ldrb	r3, [r3, #7]
 80003b4:	4619      	mov	r1, r3
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2b0f      	cmp	r3, #15
 80003ce:	d985      	bls.n	80002dc <GPIO_Init+0x1c>
    }
  }
}
 80003d0:	bf00      	nop
 80003d2:	371c      	adds	r7, #28
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003e8:	2300      	movs	r3, #0
 80003ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	887b      	ldrh	r3, [r7, #2]
 80003f2:	4013      	ands	r3, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003f8:	2301      	movs	r3, #1
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e001      	b.n	8000402 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000402:	7bfb      	ldrb	r3, [r7, #15]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	807b      	strh	r3, [r7, #2]
 800041c:	4613      	mov	r3, r2
 800041e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000420:	787b      	ldrb	r3, [r7, #1]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d003      	beq.n	800042e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	887a      	ldrh	r2, [r7, #2]
 800042a:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 800042c:	e002      	b.n	8000434 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	887a      	ldrh	r2, [r7, #2]
 8000432:	835a      	strh	r2, [r3, #26]
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	887b      	ldrh	r3, [r7, #2]
 8000452:	405a      	eors	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	615a      	str	r2, [r3, #20]
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	460b      	mov	r3, r1
 800046e:	807b      	strh	r3, [r7, #2]
 8000470:	4613      	mov	r3, r2
 8000472:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000478:	2300      	movs	r3, #0
 800047a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800047c:	787a      	ldrb	r2, [r7, #1]
 800047e:	887b      	ldrh	r3, [r7, #2]
 8000480:	f003 0307 	and.w	r3, r3, #7
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	fa02 f303 	lsl.w	r3, r2, r3
 800048a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800048c:	887b      	ldrh	r3, [r7, #2]
 800048e:	08db      	lsrs	r3, r3, #3
 8000490:	b29b      	uxth	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3208      	adds	r2, #8
 8000498:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800049c:	887b      	ldrh	r3, [r7, #2]
 800049e:	f003 0307 	and.w	r3, r3, #7
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	210f      	movs	r1, #15
 80004a6:	fa01 f303 	lsl.w	r3, r1, r3
 80004aa:	43db      	mvns	r3, r3
 80004ac:	8879      	ldrh	r1, [r7, #2]
 80004ae:	08c9      	lsrs	r1, r1, #3
 80004b0:	b289      	uxth	r1, r1
 80004b2:	4608      	mov	r0, r1
 80004b4:	ea02 0103 	and.w	r1, r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f100 0208 	add.w	r2, r0, #8
 80004be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80004c2:	887b      	ldrh	r3, [r7, #2]
 80004c4:	08db      	lsrs	r3, r3, #3
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	461a      	mov	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3208      	adds	r2, #8
 80004ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004d8:	887b      	ldrh	r3, [r7, #2]
 80004da:	08db      	lsrs	r3, r3, #3
 80004dc:	b29b      	uxth	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3208      	adds	r2, #8
 80004e4:	68b9      	ldr	r1, [r7, #8]
 80004e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <RCC_DeInit+0x60>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a15      	ldr	r2, [pc, #84]	; (8000558 <RCC_DeInit+0x60>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <RCC_DeInit+0x60>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <RCC_DeInit+0x60>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <RCC_DeInit+0x60>)
 8000514:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000518:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800051c:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <RCC_DeInit+0x60>)
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <RCC_DeInit+0x64>)
 8000522:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <RCC_DeInit+0x60>)
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <RCC_DeInit+0x68>)
 8000528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <RCC_DeInit+0x60>)
 800052e:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <RCC_DeInit+0x6c>)
 8000530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <RCC_DeInit+0x60>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <RCC_DeInit+0x60>)
 800053a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <RCC_DeInit+0x60>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <RCC_DeInit+0x60>)
 8000548:	2200      	movs	r2, #0
 800054a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40023800 	.word	0x40023800
 800055c:	24003010 	.word	0x24003010
 8000560:	20003000 	.word	0x20003000
 8000564:	24003000 	.word	0x24003000

08000568 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000568:	b480      	push	{r7}
 800056a:	b08b      	sub	sp, #44	; 0x2c
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
 8000578:	2300      	movs	r3, #0
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
 800057c:	2302      	movs	r3, #2
 800057e:	61bb      	str	r3, [r7, #24]
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	2302      	movs	r3, #2
 8000586:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000588:	2302      	movs	r3, #2
 800058a:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800058c:	4b6f      	ldr	r3, [pc, #444]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f003 030c 	and.w	r3, r3, #12
 8000594:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000596:	6a3b      	ldr	r3, [r7, #32]
 8000598:	2b0c      	cmp	r3, #12
 800059a:	f200 8091 	bhi.w	80006c0 <RCC_GetClocksFreq+0x158>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <RCC_GetClocksFreq+0x3c>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005d9 	.word	0x080005d9
 80005a8:	080006c1 	.word	0x080006c1
 80005ac:	080006c1 	.word	0x080006c1
 80005b0:	080006c1 	.word	0x080006c1
 80005b4:	080005e1 	.word	0x080005e1
 80005b8:	080006c1 	.word	0x080006c1
 80005bc:	080006c1 	.word	0x080006c1
 80005c0:	080006c1 	.word	0x080006c1
 80005c4:	080005e9 	.word	0x080005e9
 80005c8:	080006c1 	.word	0x080006c1
 80005cc:	080006c1 	.word	0x080006c1
 80005d0:	080006c1 	.word	0x080006c1
 80005d4:	08000655 	.word	0x08000655
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a5d      	ldr	r2, [pc, #372]	; (8000750 <RCC_GetClocksFreq+0x1e8>)
 80005dc:	601a      	str	r2, [r3, #0]
    break;
 80005de:	e073      	b.n	80006c8 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a5c      	ldr	r2, [pc, #368]	; (8000754 <RCC_GetClocksFreq+0x1ec>)
 80005e4:	601a      	str	r2, [r3, #0]
    break;
 80005e6:	e06f      	b.n	80006c8 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005e8:	4b58      	ldr	r3, [pc, #352]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	0d9b      	lsrs	r3, r3, #22
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005f4:	4b55      	ldr	r3, [pc, #340]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005fc:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00c      	beq.n	800061e <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000604:	4a53      	ldr	r2, [pc, #332]	; (8000754 <RCC_GetClocksFreq+0x1ec>)
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	fbb2 f3f3 	udiv	r3, r2, r3
 800060c:	4a4f      	ldr	r2, [pc, #316]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 800060e:	6852      	ldr	r2, [r2, #4]
 8000610:	0992      	lsrs	r2, r2, #6
 8000612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
 800061c:	e00b      	b.n	8000636 <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800061e:	4a4c      	ldr	r2, [pc, #304]	; (8000750 <RCC_GetClocksFreq+0x1e8>)
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	4a49      	ldr	r2, [pc, #292]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 8000628:	6852      	ldr	r2, [r2, #4]
 800062a:	0992      	lsrs	r2, r2, #6
 800062c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000630:	fb02 f303 	mul.w	r3, r2, r3
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000636:	4b45      	ldr	r3, [pc, #276]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	f003 0303 	and.w	r3, r3, #3
 8000640:	3301      	adds	r3, #1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	fbb2 f2f3 	udiv	r2, r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	601a      	str	r2, [r3, #0]
    break;
 8000652:	e039      	b.n	80006c8 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000654:	4b3d      	ldr	r3, [pc, #244]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	0d9b      	lsrs	r3, r3, #22
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000660:	4b3a      	ldr	r3, [pc, #232]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000668:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00c      	beq.n	800068a <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000670:	4a38      	ldr	r2, [pc, #224]	; (8000754 <RCC_GetClocksFreq+0x1ec>)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	fbb2 f3f3 	udiv	r3, r2, r3
 8000678:	4a34      	ldr	r2, [pc, #208]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 800067a:	6852      	ldr	r2, [r2, #4]
 800067c:	0992      	lsrs	r2, r2, #6
 800067e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000682:	fb02 f303 	mul.w	r3, r2, r3
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
 8000688:	e00b      	b.n	80006a2 <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800068a:	4a31      	ldr	r2, [pc, #196]	; (8000750 <RCC_GetClocksFreq+0x1e8>)
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	4a2e      	ldr	r2, [pc, #184]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 8000694:	6852      	ldr	r2, [r2, #4]
 8000696:	0992      	lsrs	r2, r2, #6
 8000698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800069c:	fb02 f303 	mul.w	r3, r2, r3
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	0f1b      	lsrs	r3, r3, #28
 80006a8:	f003 0307 	and.w	r3, r3, #7
 80006ac:	3301      	adds	r3, #1
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 80006b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]
    break;
 80006be:	e003      	b.n	80006c8 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a23      	ldr	r2, [pc, #140]	; (8000750 <RCC_GetClocksFreq+0x1e8>)
 80006c4:	601a      	str	r2, [r3, #0]
    break;
 80006c6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006d0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	091b      	lsrs	r3, r3, #4
 80006d6:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006d8:	4a1f      	ldr	r2, [pc, #124]	; (8000758 <RCC_GetClocksFreq+0x1f0>)
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	40da      	lsrs	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80006f8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	0a9b      	lsrs	r3, r3, #10
 80006fe:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000700:	4a15      	ldr	r2, [pc, #84]	; (8000758 <RCC_GetClocksFreq+0x1f0>)
 8000702:	6a3b      	ldr	r3, [r7, #32]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	40da      	lsrs	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000720:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	0b5b      	lsrs	r3, r3, #13
 8000726:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000728:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <RCC_GetClocksFreq+0x1f0>)
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	40da      	lsrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	60da      	str	r2, [r3, #12]
}
 8000740:	bf00      	nop
 8000742:	372c      	adds	r7, #44	; 0x2c
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	40023800 	.word	0x40023800
 8000750:	00f42400 	.word	0x00f42400
 8000754:	007a1200 	.word	0x007a1200
 8000758:	20000000 	.word	0x20000000

0800075c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d006      	beq.n	800077c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000772:	4909      	ldr	r1, [pc, #36]	; (8000798 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4313      	orrs	r3, r2
 8000778:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800077a:	e006      	b.n	800078a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <RCC_AHB1PeriphClockCmd+0x3c>)
 800077e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	43db      	mvns	r3, r3
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000786:	4013      	ands	r3, r2
 8000788:	630b      	str	r3, [r1, #48]	; 0x30
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d006      	beq.n	80007bc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80007b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80007ba:	e006      	b.n	80007ca <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80007be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	43db      	mvns	r3, r3
 80007c4:	4904      	ldr	r1, [pc, #16]	; (80007d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80007c6:	4013      	ands	r3, r2
 80007c8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d006      	beq.n	80007fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <RCC_APB2PeriphClockCmd+0x3c>)
 80007f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007f2:	4909      	ldr	r1, [pc, #36]	; (8000818 <RCC_APB2PeriphClockCmd+0x3c>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007fa:	e006      	b.n	800080a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <RCC_APB2PeriphClockCmd+0x3c>)
 80007fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	43db      	mvns	r3, r3
 8000804:	4904      	ldr	r1, [pc, #16]	; (8000818 <RCC_APB2PeriphClockCmd+0x3c>)
 8000806:	4013      	ands	r3, r2
 8000808:	644b      	str	r3, [r1, #68]	; 0x44
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <RTC_GetTime+0xa0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8000832:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000836:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	0c1b      	lsrs	r3, r3, #16
 800083c:	b2db      	uxtb	r3, r3
 800083e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000842:	b2da      	uxtb	r2, r3
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	0a1b      	lsrs	r3, r3, #8
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000852:	b2da      	uxtb	r2, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000860:	b2da      	uxtb	r2, r3
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	0c1b      	lsrs	r3, r3, #16
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000870:	b2da      	uxtb	r2, r3
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d11a      	bne.n	80008b2 <RTC_GetTime+0x96>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f86b 	bl	800095c <RTC_Bcd2ToByte>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	785b      	ldrb	r3, [r3, #1]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f862 	bl	800095c <RTC_Bcd2ToByte>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	789b      	ldrb	r3, [r3, #2]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 f859 	bl	800095c <RTC_Bcd2ToByte>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	709a      	strb	r2, [r3, #2]
  }
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40002800 	.word	0x40002800

080008c0 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <RTC_GetDate+0x98>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80008da:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	0c1b      	lsrs	r3, r3, #16
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	0b5b      	lsrs	r3, r3, #13
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	b2da      	uxtb	r2, r3
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d11a      	bne.n	8000950 <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	78db      	ldrb	r3, [r3, #3]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f81c 	bl	800095c <RTC_Bcd2ToByte>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	785b      	ldrb	r3, [r3, #1]
 8000930:	4618      	mov	r0, r3
 8000932:	f000 f813 	bl	800095c <RTC_Bcd2ToByte>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f80a 	bl	800095c <RTC_Bcd2ToByte>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	709a      	strb	r2, [r3, #2]
  }
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40002800 	.word	0x40002800

0800095c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	091b      	lsrs	r3, r3, #4
 800096e:	b2db      	uxtb	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	0092      	lsls	r2, r2, #2
 8000974:	4413      	add	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 030f 	and.w	r3, r3, #15
 8000980:	b2da      	uxtb	r2, r3
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	4413      	add	r3, r2
 8000986:	b2db      	uxtb	r3, r3
}
 8000988:	4618      	mov	r0, r3
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	8a1b      	ldrh	r3, [r3, #16]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	88db      	ldrh	r3, [r3, #6]
 80009c2:	461a      	mov	r2, r3
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	4313      	orrs	r3, r2
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	899b      	ldrh	r3, [r3, #12]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80009e0:	f023 030c 	bic.w	r3, r3, #12
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	889a      	ldrh	r2, [r3, #4]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	891b      	ldrh	r3, [r3, #8]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	4313      	orrs	r3, r2
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	8a9b      	ldrh	r3, [r3, #20]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	899b      	ldrh	r3, [r3, #12]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	4313      	orrs	r3, r2
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fd98 	bl	8000568 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a30      	ldr	r2, [pc, #192]	; (8000afc <USART_Init+0x168>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d003      	beq.n	8000a48 <USART_Init+0xb4>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a2f      	ldr	r2, [pc, #188]	; (8000b00 <USART_Init+0x16c>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d102      	bne.n	8000a4e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	623b      	str	r3, [r7, #32]
 8000a4c:	e001      	b.n	8000a52 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	899b      	ldrh	r3, [r3, #12]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	da0c      	bge.n	8000a78 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000a5e:	6a3a      	ldr	r2, [r7, #32]
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	009a      	lsls	r2, r3, #2
 8000a68:	441a      	add	r2, r3
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a74:	61fb      	str	r3, [r7, #28]
 8000a76:	e00b      	b.n	8000a90 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000a78:	6a3a      	ldr	r2, [r7, #32]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	009a      	lsls	r2, r3, #2
 8000a82:	441a      	add	r2, r3
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <USART_Init+0x170>)
 8000a94:	fba2 2303 	umull	r2, r3, r2, r3
 8000a98:	095b      	lsrs	r3, r3, #5
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	2264      	movs	r2, #100	; 0x64
 8000aa4:	fb02 f303 	mul.w	r3, r2, r3
 8000aa8:	69fa      	ldr	r2, [r7, #28]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	899b      	ldrh	r3, [r3, #12]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	b21b      	sxth	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da0c      	bge.n	8000ad4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	3332      	adds	r3, #50	; 0x32
 8000ac0:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <USART_Init+0x170>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad2:	e00b      	b.n	8000aec <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	3332      	adds	r3, #50	; 0x32
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <USART_Init+0x170>)
 8000adc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae0:	095b      	lsrs	r3, r3, #5
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	811a      	strh	r2, [r3, #8]
}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40011000 	.word	0x40011000
 8000b00:	40011400 	.word	0x40011400
 8000b04:	51eb851f 	.word	0x51eb851f

08000b08 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d008      	beq.n	8000b2c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	899b      	ldrh	r3, [r3, #12]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000b2a:	e007      	b.n	8000b3c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	899b      	ldrh	r3, [r3, #12]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	819a      	strh	r2, [r3, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	809a      	strh	r2, [r3, #4]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	889b      	ldrh	r3, [r3, #4]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b7e:	b29b      	uxth	r3, r3
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b087      	sub	sp, #28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	095b      	lsrs	r3, r3, #5
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	f003 031f 	and.w	r3, r3, #31
 8000bc0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d103      	bne.n	8000bda <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	330c      	adds	r3, #12
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e009      	b.n	8000bee <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d103      	bne.n	8000be8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3310      	adds	r3, #16
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	e002      	b.n	8000bee <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	3314      	adds	r3, #20
 8000bec:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000bee:	787b      	ldrb	r3, [r7, #1]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	6819      	ldr	r1, [r3, #0]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000c00:	e006      	b.n	8000c10 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	6819      	ldr	r1, [r3, #0]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	43da      	mvns	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	bf00      	nop
 8000c12:	371c      	adds	r7, #28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	4013      	ands	r3, r2
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e001      	b.n	8000c46 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f103 0208 	add.w	r2, r3, #8
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f103 0208 	add.w	r2, r3, #8
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f103 0208 	add.w	r2, r3, #8
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b085      	sub	sp, #20
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d103      	bne.n	8000d16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	e00c      	b.n	8000d30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3308      	adds	r3, #8
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	e002      	b.n	8000d24 <vListInsert+0x2e>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d2f6      	bcs.n	8000d1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	601a      	str	r2, [r3, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	6892      	ldr	r2, [r2, #8]
 8000d7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	6852      	ldr	r2, [r2, #4]
 8000d88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d103      	bne.n	8000d9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d109      	bne.n	8000de4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd4:	f383 8811 	msr	BASEPRI, r3
 8000dd8:	f3bf 8f6f 	isb	sy
 8000ddc:	f3bf 8f4f 	dsb	sy
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	e7fe      	b.n	8000de2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000de4:	f002 f9a2 	bl	800312c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000df4:	fb01 f303 	mul.w	r3, r1, r3
 8000df8:	441a      	add	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2200      	movs	r2, #0
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e14:	3b01      	subs	r3, #1
 8000e16:	68f9      	ldr	r1, [r7, #12]
 8000e18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000e1a:	fb01 f303 	mul.w	r3, r1, r3
 8000e1e:	441a      	add	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d114      	bne.n	8000e64 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d01a      	beq.n	8000e78 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	3310      	adds	r3, #16
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 f8d2 	bl	8001ff0 <xTaskRemoveFromEventList>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d012      	beq.n	8000e78 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <xQueueGenericReset+0xcc>)
 8000e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	f3bf 8f4f 	dsb	sy
 8000e5e:	f3bf 8f6f 	isb	sy
 8000e62:	e009      	b.n	8000e78 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	3310      	adds	r3, #16
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fef3 	bl	8000c54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3324      	adds	r3, #36	; 0x24
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff feee 	bl	8000c54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000e78:	f002 f986 	bl	8003188 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000e7c:	2301      	movs	r3, #1
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000ed04 	.word	0xe000ed04

08000e8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af02      	add	r7, sp, #8
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	4613      	mov	r3, r2
 8000e98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d109      	bne.n	8000eb4 <xQueueGenericCreate+0x28>
 8000ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea4:	f383 8811 	msr	BASEPRI, r3
 8000ea8:	f3bf 8f6f 	isb	sy
 8000eac:	f3bf 8f4f 	dsb	sy
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	e7fe      	b.n	8000eb2 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3350      	adds	r3, #80	; 0x50
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 fa54 	bl	8003370 <pvPortMalloc>
 8000ec8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00d      	beq.n	8000eec <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3350      	adds	r3, #80	; 0x50
 8000ed8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f000 f805 	bl	8000ef6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000eec:	69bb      	ldr	r3, [r7, #24]
	}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d103      	bne.n	8000f12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e002      	b.n	8000f18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000f24:	2101      	movs	r1, #1
 8000f26:	69b8      	ldr	r0, [r7, #24]
 8000f28:	f7ff ff48 	bl	8000dbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	78fa      	ldrb	r2, [r7, #3]
 8000f30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	68f9      	ldr	r1, [r7, #12]
 8000f3a:	2073      	movs	r0, #115	; 0x73
 8000f3c:	f003 fa62 	bl	8004404 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b090      	sub	sp, #64	; 0x40
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000f56:	2300      	movs	r3, #0
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d109      	bne.n	8000f78 <xQueueGenericSend+0x30>
 8000f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f68:	f383 8811 	msr	BASEPRI, r3
 8000f6c:	f3bf 8f6f 	isb	sy
 8000f70:	f3bf 8f4f 	dsb	sy
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f76:	e7fe      	b.n	8000f76 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <xQueueGenericSend+0x3e>
 8000f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <xQueueGenericSend+0x42>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <xQueueGenericSend+0x44>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d109      	bne.n	8000fa4 <xQueueGenericSend+0x5c>
 8000f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f94:	f383 8811 	msr	BASEPRI, r3
 8000f98:	f3bf 8f6f 	isb	sy
 8000f9c:	f3bf 8f4f 	dsb	sy
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa2:	e7fe      	b.n	8000fa2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d103      	bne.n	8000fb2 <xQueueGenericSend+0x6a>
 8000faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <xQueueGenericSend+0x6e>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <xQueueGenericSend+0x70>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d109      	bne.n	8000fd0 <xQueueGenericSend+0x88>
 8000fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc0:	f383 8811 	msr	BASEPRI, r3
 8000fc4:	f3bf 8f6f 	isb	sy
 8000fc8:	f3bf 8f4f 	dsb	sy
 8000fcc:	623b      	str	r3, [r7, #32]
 8000fce:	e7fe      	b.n	8000fce <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000fd0:	f001 f9ac 	bl	800232c <xTaskGetSchedulerState>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <xQueueGenericSend+0x98>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <xQueueGenericSend+0x9c>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <xQueueGenericSend+0x9e>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d109      	bne.n	8000ffe <xQueueGenericSend+0xb6>
 8000fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fee:	f383 8811 	msr	BASEPRI, r3
 8000ff2:	f3bf 8f6f 	isb	sy
 8000ff6:	f3bf 8f4f 	dsb	sy
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	e7fe      	b.n	8000ffc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000ffe:	f002 f895 	bl	800312c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100a:	429a      	cmp	r2, r3
 800100c:	d302      	bcc.n	8001014 <xQueueGenericSend+0xcc>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d136      	bne.n	8001082 <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8001014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001016:	4618      	mov	r0, r3
 8001018:	f004 f836 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	460b      	mov	r3, r1
 8001026:	4601      	mov	r1, r0
 8001028:	205a      	movs	r0, #90	; 0x5a
 800102a:	f003 fa61 	bl	80044f0 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001034:	f000 fa6a 	bl	800150c <prvCopyDataToQueue>
 8001038:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800103a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	2b00      	cmp	r3, #0
 8001040:	d010      	beq.n	8001064 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001044:	3324      	adds	r3, #36	; 0x24
 8001046:	4618      	mov	r0, r3
 8001048:	f000 ffd2 	bl	8001ff0 <xTaskRemoveFromEventList>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d013      	beq.n	800107a <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001052:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <xQueueGenericSend+0x240>)
 8001054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	f3bf 8f4f 	dsb	sy
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	e00a      	b.n	800107a <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <xQueueGenericSend+0x240>)
 800106c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	f3bf 8f4f 	dsb	sy
 8001076:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800107a:	f002 f885 	bl	8003188 <vPortExitCritical>
				return pdPASS;
 800107e:	2301      	movs	r3, #1
 8001080:	e07d      	b.n	800117e <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d110      	bne.n	80010aa <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001088:	f002 f87e 	bl	8003188 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fffa 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	460b      	mov	r3, r1
 800109e:	4601      	mov	r1, r0
 80010a0:	205a      	movs	r0, #90	; 0x5a
 80010a2:	f003 fa25 	bl	80044f0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e069      	b.n	800117e <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d106      	bne.n	80010be <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f801 	bl	80020bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80010ba:	2301      	movs	r3, #1
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80010be:	f002 f863 	bl	8003188 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80010c2:	f000 fd4f 	bl	8001b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80010c6:	f002 f831 	bl	800312c <vPortEnterCritical>
 80010ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d6:	d103      	bne.n	80010e0 <xQueueGenericSend+0x198>
 80010d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d103      	bne.n	80010f6 <xQueueGenericSend+0x1ae>
 80010ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010f6:	f002 f847 	bl	8003188 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010fa:	1d3a      	adds	r2, r7, #4
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fff0 	bl	80020e8 <xTaskCheckForTimeOut>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d124      	bne.n	8001158 <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800110e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001110:	f000 faf4 	bl	80016fc <prvIsQueueFull>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d018      	beq.n	800114c <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800111a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800111c:	3310      	adds	r3, #16
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f000 ff12 	bl	8001f4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800112a:	f000 fa7f 	bl	800162c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800112e:	f000 fd27 	bl	8001b80 <xTaskResumeAll>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	f47f af62 	bne.w	8000ffe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <xQueueGenericSend+0x240>)
 800113c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	f3bf 8f4f 	dsb	sy
 8001146:	f3bf 8f6f 	isb	sy
 800114a:	e758      	b.n	8000ffe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800114c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800114e:	f000 fa6d 	bl	800162c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001152:	f000 fd15 	bl	8001b80 <xTaskResumeAll>
 8001156:	e752      	b.n	8000ffe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800115a:	f000 fa67 	bl	800162c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800115e:	f000 fd0f 	bl	8001b80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8001162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001164:	4618      	mov	r0, r3
 8001166:	f003 ff8f 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	460b      	mov	r3, r1
 8001174:	4601      	mov	r1, r0
 8001176:	205a      	movs	r0, #90	; 0x5a
 8001178:	f003 f9ba 	bl	80044f0 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800117c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800117e:	4618      	mov	r0, r3
 8001180:	3738      	adds	r7, #56	; 0x38
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000ed04 	.word	0xe000ed04

0800118c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b090      	sub	sp, #64	; 0x40
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800119e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d109      	bne.n	80011b8 <xQueueGenericSendFromISR+0x2c>
 80011a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011b6:	e7fe      	b.n	80011b6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d103      	bne.n	80011c6 <xQueueGenericSendFromISR+0x3a>
 80011be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <xQueueGenericSendFromISR+0x3e>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <xQueueGenericSendFromISR+0x40>
 80011ca:	2300      	movs	r3, #0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d109      	bne.n	80011e4 <xQueueGenericSendFromISR+0x58>
 80011d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d4:	f383 8811 	msr	BASEPRI, r3
 80011d8:	f3bf 8f6f 	isb	sy
 80011dc:	f3bf 8f4f 	dsb	sy
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
 80011e2:	e7fe      	b.n	80011e2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d103      	bne.n	80011f2 <xQueueGenericSendFromISR+0x66>
 80011ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d101      	bne.n	80011f6 <xQueueGenericSendFromISR+0x6a>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <xQueueGenericSendFromISR+0x6c>
 80011f6:	2300      	movs	r3, #0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d109      	bne.n	8001210 <xQueueGenericSendFromISR+0x84>
 80011fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001200:	f383 8811 	msr	BASEPRI, r3
 8001204:	f3bf 8f6f 	isb	sy
 8001208:	f3bf 8f4f 	dsb	sy
 800120c:	623b      	str	r3, [r7, #32]
 800120e:	e7fe      	b.n	800120e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001210:	f002 f870 	bl	80032f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001214:	f3ef 8211 	mrs	r2, BASEPRI
 8001218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800121c:	f383 8811 	msr	BASEPRI, r3
 8001220:	f3bf 8f6f 	isb	sy
 8001224:	f3bf 8f4f 	dsb	sy
 8001228:	61fa      	str	r2, [r7, #28]
 800122a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800122c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001238:	429a      	cmp	r2, r3
 800123a:	d302      	bcc.n	8001242 <xQueueGenericSendFromISR+0xb6>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d139      	bne.n	80012b6 <xQueueGenericSendFromISR+0x12a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001248:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800124c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800124e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001254:	4618      	mov	r0, r3
 8001256:	f003 ff17 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 800125a:	4601      	mov	r1, r0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	461a      	mov	r2, r3
 8001260:	2060      	movs	r0, #96	; 0x60
 8001262:	f003 f875 	bl	8004350 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800126c:	f000 f94e 	bl	800150c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001270:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d112      	bne.n	80012a0 <xQueueGenericSendFromISR+0x114>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800127a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	2b00      	cmp	r3, #0
 8001280:	d016      	beq.n	80012b0 <xQueueGenericSendFromISR+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001284:	3324      	adds	r3, #36	; 0x24
 8001286:	4618      	mov	r0, r3
 8001288:	f000 feb2 	bl	8001ff0 <xTaskRemoveFromEventList>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00e      	beq.n	80012b0 <xQueueGenericSendFromISR+0x124>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00b      	beq.n	80012b0 <xQueueGenericSendFromISR+0x124>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e007      	b.n	80012b0 <xQueueGenericSendFromISR+0x124>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80012a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012a4:	3301      	adds	r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	b25a      	sxtb	r2, r3
 80012aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80012b0:	2301      	movs	r3, #1
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80012b4:	e00b      	b.n	80012ce <xQueueGenericSendFromISR+0x142>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80012b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 fee5 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 80012be:	4601      	mov	r1, r0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	461a      	mov	r2, r3
 80012c4:	2060      	movs	r0, #96	; 0x60
 80012c6:	f003 f843 	bl	8004350 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80012d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3740      	adds	r7, #64	; 0x40
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b08f      	sub	sp, #60	; 0x3c
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80012f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <xQueueReceive+0x2e>
	__asm volatile
 80012fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001302:	f383 8811 	msr	BASEPRI, r3
 8001306:	f3bf 8f6f 	isb	sy
 800130a:	f3bf 8f4f 	dsb	sy
 800130e:	623b      	str	r3, [r7, #32]
 8001310:	e7fe      	b.n	8001310 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d103      	bne.n	8001320 <xQueueReceive+0x3c>
 8001318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <xQueueReceive+0x40>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <xQueueReceive+0x42>
 8001324:	2300      	movs	r3, #0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d109      	bne.n	800133e <xQueueReceive+0x5a>
 800132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800132e:	f383 8811 	msr	BASEPRI, r3
 8001332:	f3bf 8f6f 	isb	sy
 8001336:	f3bf 8f4f 	dsb	sy
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	e7fe      	b.n	800133c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800133e:	f000 fff5 	bl	800232c <xTaskGetSchedulerState>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <xQueueReceive+0x6a>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <xQueueReceive+0x6e>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <xQueueReceive+0x70>
 8001352:	2300      	movs	r3, #0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d109      	bne.n	800136c <xQueueReceive+0x88>
 8001358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135c:	f383 8811 	msr	BASEPRI, r3
 8001360:	f3bf 8f6f 	isb	sy
 8001364:	f3bf 8f4f 	dsb	sy
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	e7fe      	b.n	800136a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800136c:	f001 fede 	bl	800312c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001374:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	2b00      	cmp	r3, #0
 800137a:	d031      	beq.n	80013e0 <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001380:	f000 f92e 	bl	80015e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8001384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001386:	4618      	mov	r0, r3
 8001388:	f003 fe7e 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 800138c:	4604      	mov	r4, r0
 800138e:	2000      	movs	r0, #0
 8001390:	f003 fe7a 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 8001394:	4601      	mov	r1, r0
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	2301      	movs	r3, #1
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	4613      	mov	r3, r2
 800139e:	460a      	mov	r2, r1
 80013a0:	4621      	mov	r1, r4
 80013a2:	205c      	movs	r0, #92	; 0x5c
 80013a4:	f003 f8a4 	bl	80044f0 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	1e5a      	subs	r2, r3, #1
 80013ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00f      	beq.n	80013d8 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ba:	3310      	adds	r3, #16
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fe17 	bl	8001ff0 <xTaskRemoveFromEventList>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d007      	beq.n	80013d8 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80013c8:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <xQueueReceive+0x224>)
 80013ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f3bf 8f4f 	dsb	sy
 80013d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80013d8:	f001 fed6 	bl	8003188 <vPortExitCritical>
				return pdPASS;
 80013dc:	2301      	movs	r3, #1
 80013de:	e08e      	b.n	80014fe <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d115      	bne.n	8001412 <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80013e6:	f001 fecf 	bl	8003188 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80013ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fe4b 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 80013f2:	4604      	mov	r4, r0
 80013f4:	2000      	movs	r0, #0
 80013f6:	f003 fe47 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 80013fa:	4601      	mov	r1, r0
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	2301      	movs	r3, #1
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4613      	mov	r3, r2
 8001404:	460a      	mov	r2, r1
 8001406:	4621      	mov	r1, r4
 8001408:	205c      	movs	r0, #92	; 0x5c
 800140a:	f003 f871 	bl	80044f0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800140e:	2300      	movs	r3, #0
 8001410:	e075      	b.n	80014fe <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d106      	bne.n	8001426 <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fe4d 	bl	80020bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001422:	2301      	movs	r3, #1
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001426:	f001 feaf 	bl	8003188 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800142a:	f000 fb9b 	bl	8001b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800142e:	f001 fe7d 	bl	800312c <vPortEnterCritical>
 8001432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001438:	b25b      	sxtb	r3, r3
 800143a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143e:	d103      	bne.n	8001448 <xQueueReceive+0x164>
 8001440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800144e:	b25b      	sxtb	r3, r3
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d103      	bne.n	800145e <xQueueReceive+0x17a>
 8001456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800145e:	f001 fe93 	bl	8003188 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001462:	1d3a      	adds	r2, r7, #4
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fe3c 	bl	80020e8 <xTaskCheckForTimeOut>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d124      	bne.n	80014c0 <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001478:	f000 f92a 	bl	80016d0 <prvIsQueueEmpty>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d018      	beq.n	80014b4 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001484:	3324      	adds	r3, #36	; 0x24
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fd5e 	bl	8001f4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001492:	f000 f8cb 	bl	800162c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001496:	f000 fb73 	bl	8001b80 <xTaskResumeAll>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	f47f af65 	bne.w	800136c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <xQueueReceive+0x224>)
 80014a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	f3bf 8f4f 	dsb	sy
 80014ae:	f3bf 8f6f 	isb	sy
 80014b2:	e75b      	b.n	800136c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80014b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014b6:	f000 f8b9 	bl	800162c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80014ba:	f000 fb61 	bl	8001b80 <xTaskResumeAll>
 80014be:	e755      	b.n	800136c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80014c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014c2:	f000 f8b3 	bl	800162c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80014c6:	f000 fb5b 	bl	8001b80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80014ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014cc:	f000 f900 	bl	80016d0 <prvIsQueueEmpty>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f43f af4a 	beq.w	800136c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fdd4 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 80014e0:	4604      	mov	r4, r0
 80014e2:	2000      	movs	r0, #0
 80014e4:	f003 fdd0 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 80014e8:	4601      	mov	r1, r0
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	2301      	movs	r3, #1
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	460a      	mov	r2, r1
 80014f4:	4621      	mov	r1, r4
 80014f6:	205c      	movs	r0, #92	; 0x5c
 80014f8:	f002 fffa 	bl	80044f0 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80014fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3734      	adds	r7, #52	; 0x34
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	e000ed04 	.word	0xe000ed04

0800150c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001520:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10d      	bne.n	8001546 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d14d      	bne.n	80015ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 ff16 	bl	8002368 <xTaskPriorityDisinherit>
 800153c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	e043      	b.n	80015ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d119      	bne.n	8001580 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6858      	ldr	r0, [r3, #4]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	461a      	mov	r2, r3
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	f004 fc87 	bl	8005e6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	441a      	add	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	d32b      	bcc.n	80015ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	e026      	b.n	80015ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	68d8      	ldr	r0, [r3, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	461a      	mov	r2, r3
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	f004 fc6d 	bl	8005e6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	425b      	negs	r3, r3
 800159a:	441a      	add	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	425b      	negs	r3, r3
 80015b6:	441a      	add	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d105      	bne.n	80015ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80015d6:	697b      	ldr	r3, [r7, #20]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d018      	beq.n	8001624 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	441a      	add	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	429a      	cmp	r2, r3
 800160a:	d303      	bcc.n	8001614 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68d9      	ldr	r1, [r3, #12]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	461a      	mov	r2, r3
 800161e:	6838      	ldr	r0, [r7, #0]
 8001620:	f004 fc23 	bl	8005e6a <memcpy>
	}
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001634:	f001 fd7a 	bl	800312c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800163e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001640:	e011      	b.n	8001666 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	2b00      	cmp	r3, #0
 8001648:	d012      	beq.n	8001670 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3324      	adds	r3, #36	; 0x24
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fcce 	bl	8001ff0 <xTaskRemoveFromEventList>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800165a:	f000 fda5 	bl	80021a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	3b01      	subs	r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	2b00      	cmp	r3, #0
 800166c:	dce9      	bgt.n	8001642 <prvUnlockQueue+0x16>
 800166e:	e000      	b.n	8001672 <prvUnlockQueue+0x46>
					break;
 8001670:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	22ff      	movs	r2, #255	; 0xff
 8001676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800167a:	f001 fd85 	bl	8003188 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800167e:	f001 fd55 	bl	800312c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001688:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800168a:	e011      	b.n	80016b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d012      	beq.n	80016ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3310      	adds	r3, #16
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fca9 	bl	8001ff0 <xTaskRemoveFromEventList>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80016a4:	f000 fd80 	bl	80021a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80016b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	dce9      	bgt.n	800168c <prvUnlockQueue+0x60>
 80016b8:	e000      	b.n	80016bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80016ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	22ff      	movs	r2, #255	; 0xff
 80016c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80016c4:	f001 fd60 	bl	8003188 <vPortExitCritical>
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80016d8:	f001 fd28 	bl	800312c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e001      	b.n	80016ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80016ee:	f001 fd4b 	bl	8003188 <vPortExitCritical>

	return xReturn;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001704:	f001 fd12 	bl	800312c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001710:	429a      	cmp	r2, r3
 8001712:	d102      	bne.n	800171a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001714:	2301      	movs	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e001      	b.n	800171e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800171e:	f001 fd33 	bl	8003188 <vPortExitCritical>

	return xReturn;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e01e      	b.n	800177a <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <vQueueAddToRegistry+0x5c>)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d115      	bne.n	8001774 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001748:	490f      	ldr	r1, [pc, #60]	; (8001788 <vQueueAddToRegistry+0x5c>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001752:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <vQueueAddToRegistry+0x5c>)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fc91 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 8001766:	4601      	mov	r1, r0
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	2071      	movs	r0, #113	; 0x71
 800176e:	f002 fdef 	bl	8004350 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8001772:	e005      	b.n	8001780 <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b07      	cmp	r3, #7
 800177e:	d9dd      	bls.n	800173c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2001550c 	.word	0x2001550c

0800178c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800179c:	f001 fcc6 	bl	800312c <vPortEnterCritical>
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d103      	bne.n	80017b6 <vQueueWaitForMessageRestricted+0x2a>
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c2:	d103      	bne.n	80017cc <vQueueWaitForMessageRestricted+0x40>
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017cc:	f001 fcdc 	bl	8003188 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d106      	bne.n	80017e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3324      	adds	r3, #36	; 0x24
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	68b9      	ldr	r1, [r7, #8]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fbd7 	bl	8001f94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff20 	bl	800162c <prvUnlockQueue>
	}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af04      	add	r7, sp, #16
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fdb1 	bl	8003370 <pvPortMalloc>
 800180e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00e      	beq.n	8001834 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001816:	2058      	movs	r0, #88	; 0x58
 8001818:	f001 fdaa 	bl	8003370 <pvPortMalloc>
 800181c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
 800182a:	e005      	b.n	8001838 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800182c:	6978      	ldr	r0, [r7, #20]
 800182e:	f001 fe67 	bl	8003500 <vPortFree>
 8001832:	e001      	b.n	8001838 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d013      	beq.n	8001866 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800183e:	88fa      	ldrh	r2, [r7, #6]
 8001840:	2300      	movs	r3, #0
 8001842:	9303      	str	r3, [sp, #12]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68b9      	ldr	r1, [r7, #8]
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 f80e 	bl	8001876 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800185a:	69f8      	ldr	r0, [r7, #28]
 800185c:	f000 f89a 	bl	8001994 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001860:	2301      	movs	r3, #1
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	e002      	b.n	800186c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800186c:	69bb      	ldr	r3, [r7, #24]
	}
 800186e:	4618      	mov	r0, r3
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b088      	sub	sp, #32
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001886:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	461a      	mov	r2, r3
 800188e:	21a5      	movs	r1, #165	; 0xa5
 8001890:	f004 faf6 	bl	8005e80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800189e:	3b01      	subs	r3, #1
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f023 0307 	bic.w	r3, r3, #7
 80018ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d009      	beq.n	80018cc <prvInitialiseNewTask+0x56>
 80018b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018bc:	f383 8811 	msr	BASEPRI, r3
 80018c0:	f3bf 8f6f 	isb	sy
 80018c4:	f3bf 8f4f 	dsb	sy
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e7fe      	b.n	80018ca <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01f      	beq.n	8001912 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e012      	b.n	80018fe <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	4413      	add	r3, r2
 80018de:	7819      	ldrb	r1, [r3, #0]
 80018e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	3334      	adds	r3, #52	; 0x34
 80018e8:	460a      	mov	r2, r1
 80018ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	3301      	adds	r3, #1
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	2b09      	cmp	r3, #9
 8001902:	d9e9      	bls.n	80018d8 <prvInitialiseNewTask+0x62>
 8001904:	e000      	b.n	8001908 <prvInitialiseNewTask+0x92>
			{
				break;
 8001906:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001910:	e003      	b.n	800191a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191c:	2b04      	cmp	r3, #4
 800191e:	d901      	bls.n	8001924 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001920:	2304      	movs	r3, #4
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001928:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800192e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8001930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001932:	2200      	movs	r2, #0
 8001934:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001938:	3304      	adds	r3, #4
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f9aa 	bl	8000c94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001942:	3318      	adds	r3, #24
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff f9a5 	bl	8000c94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800194a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800194e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	f1c3 0205 	rsb	r2, r3, #5
 8001956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001958:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	2200      	movs	r2, #0
 8001964:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	68f9      	ldr	r1, [r7, #12]
 8001972:	69b8      	ldr	r0, [r7, #24]
 8001974:	f001 fab0 	bl	8002ed8 <pxPortInitialiseStack>
 8001978:	4602      	mov	r2, r0
 800197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001988:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800198a:	bf00      	nop
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af02      	add	r7, sp, #8
 800199a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800199c:	f001 fbc6 	bl	800312c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80019a0:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <prvAddNewTaskToReadyList+0xfc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4a3a      	ldr	r2, [pc, #232]	; (8001a90 <prvAddNewTaskToReadyList+0xfc>)
 80019a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80019aa:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <prvAddNewTaskToReadyList+0x100>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80019b2:	4a38      	ldr	r2, [pc, #224]	; (8001a94 <prvAddNewTaskToReadyList+0x100>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <prvAddNewTaskToReadyList+0xfc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d110      	bne.n	80019e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80019c0:	f000 fc18 	bl	80021f4 <prvInitialiseTaskLists>
 80019c4:	e00d      	b.n	80019e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <prvAddNewTaskToReadyList+0x104>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <prvAddNewTaskToReadyList+0x100>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	429a      	cmp	r2, r3
 80019da:	d802      	bhi.n	80019e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80019dc:	4a2d      	ldr	r2, [pc, #180]	; (8001a94 <prvAddNewTaskToReadyList+0x100>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80019e2:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <prvAddNewTaskToReadyList+0x108>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a2c      	ldr	r2, [pc, #176]	; (8001a9c <prvAddNewTaskToReadyList+0x108>)
 80019ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <prvAddNewTaskToReadyList+0x108>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d016      	beq.n	8001a28 <prvAddNewTaskToReadyList+0x94>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fa17 	bl	8004e30 <SEGGER_SYSVIEW_OnTaskCreate>
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	461d      	mov	r5, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461c      	mov	r4, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	1ae3      	subs	r3, r4, r3
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	462b      	mov	r3, r5
 8001a24:	f001 ff30 	bl	8003888 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fa88 	bl	8004f40 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	2201      	movs	r2, #1
 8001a36:	409a      	lsls	r2, r3
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <prvAddNewTaskToReadyList+0x10c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	4a18      	ldr	r2, [pc, #96]	; (8001aa0 <prvAddNewTaskToReadyList+0x10c>)
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <prvAddNewTaskToReadyList+0x110>)
 8001a50:	441a      	add	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3304      	adds	r3, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f7ff f928 	bl	8000cae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001a5e:	f001 fb93 	bl	8003188 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <prvAddNewTaskToReadyList+0x104>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00e      	beq.n	8001a88 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <prvAddNewTaskToReadyList+0x100>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <prvAddNewTaskToReadyList+0x114>)
 8001a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f3bf 8f4f 	dsb	sy
 8001a84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a90:	20000280 	.word	0x20000280
 8001a94:	200001a8 	.word	0x200001a8
 8001a98:	2000028c 	.word	0x2000028c
 8001a9c:	2000029c 	.word	0x2000029c
 8001aa0:	20000288 	.word	0x20000288
 8001aa4:	200001ac 	.word	0x200001ac
 8001aa8:	e000ed04 	.word	0xe000ed04

08001aac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <vTaskStartScheduler+0x9c>)
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2300      	movs	r3, #0
 8001abc:	2282      	movs	r2, #130	; 0x82
 8001abe:	4923      	ldr	r1, [pc, #140]	; (8001b4c <vTaskStartScheduler+0xa0>)
 8001ac0:	4823      	ldr	r0, [pc, #140]	; (8001b50 <vTaskStartScheduler+0xa4>)
 8001ac2:	f7ff fe97 	bl	80017f4 <xTaskCreate>
 8001ac6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d102      	bne.n	8001ad4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001ace:	f000 fe99 	bl	8002804 <xTimerCreateTimerTask>
 8001ad2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d123      	bne.n	8001b22 <vTaskStartScheduler+0x76>
 8001ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ade:	f383 8811 	msr	BASEPRI, r3
 8001ae2:	f3bf 8f6f 	isb	sy
 8001ae6:	f3bf 8f4f 	dsb	sy
 8001aea:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <vTaskStartScheduler+0xa8>)
 8001aee:	f04f 32ff 	mov.w	r2, #4294967295
 8001af2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <vTaskStartScheduler+0xac>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <vTaskStartScheduler+0xb0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <vTaskStartScheduler+0xb4>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <vTaskStartScheduler+0x9c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d102      	bne.n	8001b12 <vTaskStartScheduler+0x66>
 8001b0c:	f003 f974 	bl	8004df8 <SEGGER_SYSVIEW_OnIdle>
 8001b10:	e004      	b.n	8001b1c <vTaskStartScheduler+0x70>
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <vTaskStartScheduler+0xb4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 f9ce 	bl	8004eb8 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001b1c:	f001 fa68 	bl	8002ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001b20:	e00d      	b.n	8001b3e <vTaskStartScheduler+0x92>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d109      	bne.n	8001b3e <vTaskStartScheduler+0x92>
 8001b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2e:	f383 8811 	msr	BASEPRI, r3
 8001b32:	f3bf 8f6f 	isb	sy
 8001b36:	f3bf 8f4f 	dsb	sy
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	e7fe      	b.n	8001b3c <vTaskStartScheduler+0x90>
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200002a4 	.word	0x200002a4
 8001b4c:	080066f4 	.word	0x080066f4
 8001b50:	080021c1 	.word	0x080021c1
 8001b54:	200002a0 	.word	0x200002a0
 8001b58:	2000028c 	.word	0x2000028c
 8001b5c:	20000284 	.word	0x20000284
 8001b60:	200001a8 	.word	0x200001a8

08001b64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <vTaskSuspendAll+0x18>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	4a03      	ldr	r2, [pc, #12]	; (8001b7c <vTaskSuspendAll+0x18>)
 8001b70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	200002a8 	.word	0x200002a8

08001b80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001b8e:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <xTaskResumeAll+0x11c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <xTaskResumeAll+0x2a>
 8001b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9a:	f383 8811 	msr	BASEPRI, r3
 8001b9e:	f3bf 8f6f 	isb	sy
 8001ba2:	f3bf 8f4f 	dsb	sy
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	e7fe      	b.n	8001ba8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001baa:	f001 fabf 	bl	800312c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <xTaskResumeAll+0x11c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <xTaskResumeAll+0x11c>)
 8001bb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <xTaskResumeAll+0x11c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d165      	bne.n	8001c8c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001bc0:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <xTaskResumeAll+0x120>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d061      	beq.n	8001c8c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bc8:	e032      	b.n	8001c30 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bca:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <xTaskResumeAll+0x124>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f8c6 	bl	8000d68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3304      	adds	r3, #4
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f8c1 	bl	8000d68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 f9a9 	bl	8004f40 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <xTaskResumeAll+0x128>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <xTaskResumeAll+0x128>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4a27      	ldr	r2, [pc, #156]	; (8001cac <xTaskResumeAll+0x12c>)
 8001c0e:	441a      	add	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3304      	adds	r3, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	4610      	mov	r0, r2
 8001c18:	f7ff f849 	bl	8000cae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <xTaskResumeAll+0x130>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <xTaskResumeAll+0x134>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <xTaskResumeAll+0x124>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1c8      	bne.n	8001bca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001c3e:	f000 fb55 	bl	80022ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <xTaskResumeAll+0x138>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001c4e:	f000 f859 	bl	8001d04 <xTaskIncrementTick>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <xTaskResumeAll+0x134>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f1      	bne.n	8001c4e <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <xTaskResumeAll+0x138>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <xTaskResumeAll+0x134>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d009      	beq.n	8001c8c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <xTaskResumeAll+0x13c>)
 8001c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f3bf 8f4f 	dsb	sy
 8001c88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001c8c:	f001 fa7c 	bl	8003188 <vPortExitCritical>

	return xAlreadyYielded;
 8001c90:	68bb      	ldr	r3, [r7, #8]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200002a8 	.word	0x200002a8
 8001ca0:	20000280 	.word	0x20000280
 8001ca4:	20000240 	.word	0x20000240
 8001ca8:	20000288 	.word	0x20000288
 8001cac:	200001ac 	.word	0x200001ac
 8001cb0:	200001a8 	.word	0x200001a8
 8001cb4:	20000294 	.word	0x20000294
 8001cb8:	20000290 	.word	0x20000290
 8001cbc:	e000ed04 	.word	0xe000ed04

08001cc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <xTaskGetTickCount+0x1c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001ccc:	687b      	ldr	r3, [r7, #4]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000284 	.word	0x20000284

08001ce0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001ce6:	f001 fb05 	bl	80032f4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <xTaskGetTickCountFromISR+0x20>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001cf4:	683b      	ldr	r3, [r7, #0]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000284 	.word	0x20000284

08001d04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d0e:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <xTaskIncrementTick+0x14c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 8091 	bne.w	8001e3a <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d18:	4b4e      	ldr	r3, [pc, #312]	; (8001e54 <xTaskIncrementTick+0x150>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001d20:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <xTaskIncrementTick+0x150>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d11f      	bne.n	8001d6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001d2c:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <xTaskIncrementTick+0x154>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <xTaskIncrementTick+0x46>
 8001d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3a:	f383 8811 	msr	BASEPRI, r3
 8001d3e:	f3bf 8f6f 	isb	sy
 8001d42:	f3bf 8f4f 	dsb	sy
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	e7fe      	b.n	8001d48 <xTaskIncrementTick+0x44>
 8001d4a:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <xTaskIncrementTick+0x154>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <xTaskIncrementTick+0x158>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a40      	ldr	r2, [pc, #256]	; (8001e58 <xTaskIncrementTick+0x154>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4a40      	ldr	r2, [pc, #256]	; (8001e5c <xTaskIncrementTick+0x158>)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <xTaskIncrementTick+0x15c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4a3e      	ldr	r2, [pc, #248]	; (8001e60 <xTaskIncrementTick+0x15c>)
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	f000 fac0 	bl	80022ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <xTaskIncrementTick+0x160>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d34c      	bcc.n	8001e10 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <xTaskIncrementTick+0x154>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d104      	bne.n	8001d8a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d80:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <xTaskIncrementTick+0x160>)
 8001d82:	f04f 32ff 	mov.w	r2, #4294967295
 8001d86:	601a      	str	r2, [r3, #0]
					break;
 8001d88:	e042      	b.n	8001e10 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d8a:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <xTaskIncrementTick+0x154>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d203      	bcs.n	8001daa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001da2:	4a30      	ldr	r2, [pc, #192]	; (8001e64 <xTaskIncrementTick+0x160>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001da8:	e032      	b.n	8001e10 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3304      	adds	r3, #4
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe ffda 	bl	8000d68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	3318      	adds	r3, #24
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe ffd1 	bl	8000d68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 f8b9 	bl	8004f40 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <xTaskIncrementTick+0x164>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	4a22      	ldr	r2, [pc, #136]	; (8001e68 <xTaskIncrementTick+0x164>)
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <xTaskIncrementTick+0x168>)
 8001dee:	441a      	add	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	3304      	adds	r3, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f7fe ff59 	bl	8000cae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <xTaskIncrementTick+0x16c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3b5      	bcc.n	8001d76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e0e:	e7b2      	b.n	8001d76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <xTaskIncrementTick+0x16c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e16:	4915      	ldr	r1, [pc, #84]	; (8001e6c <xTaskIncrementTick+0x168>)
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d901      	bls.n	8001e2c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <xTaskIncrementTick+0x170>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 8001e34:	2301      	movs	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e004      	b.n	8001e44 <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <xTaskIncrementTick+0x174>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <xTaskIncrementTick+0x174>)
 8001e42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001e44:	697b      	ldr	r3, [r7, #20]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200002a8 	.word	0x200002a8
 8001e54:	20000284 	.word	0x20000284
 8001e58:	20000238 	.word	0x20000238
 8001e5c:	2000023c 	.word	0x2000023c
 8001e60:	20000298 	.word	0x20000298
 8001e64:	200002a0 	.word	0x200002a0
 8001e68:	20000288 	.word	0x20000288
 8001e6c:	200001ac 	.word	0x200001ac
 8001e70:	200001a8 	.word	0x200001a8
 8001e74:	20000294 	.word	0x20000294
 8001e78:	20000290 	.word	0x20000290

08001e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e82:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <vTaskSwitchContext+0xb8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <vTaskSwitchContext+0xbc>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001e90:	e04c      	b.n	8001f2c <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8001e92:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <vTaskSwitchContext+0xbc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e98:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <vTaskSwitchContext+0xc0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	f1c3 031f 	rsb	r3, r3, #31
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	4924      	ldr	r1, [pc, #144]	; (8001f40 <vTaskSwitchContext+0xc4>)
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8001ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec6:	f383 8811 	msr	BASEPRI, r3
 8001eca:	f3bf 8f6f 	isb	sy
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	e7fe      	b.n	8001ed4 <vTaskSwitchContext+0x58>
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <vTaskSwitchContext+0xc4>)
 8001ee2:	4413      	add	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	3308      	adds	r3, #8
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d104      	bne.n	8001f06 <vTaskSwitchContext+0x8a>
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <vTaskSwitchContext+0xc8>)
 8001f0e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <vTaskSwitchContext+0xc8>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <vTaskSwitchContext+0xcc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d102      	bne.n	8001f22 <vTaskSwitchContext+0xa6>
 8001f1c:	f002 ff6c 	bl	8004df8 <SEGGER_SYSVIEW_OnIdle>
}
 8001f20:	e004      	b.n	8001f2c <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <vTaskSwitchContext+0xc8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 ffc6 	bl	8004eb8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001f2c:	bf00      	nop
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200002a8 	.word	0x200002a8
 8001f38:	20000294 	.word	0x20000294
 8001f3c:	20000288 	.word	0x20000288
 8001f40:	200001ac 	.word	0x200001ac
 8001f44:	200001a8 	.word	0x200001a8
 8001f48:	200002a4 	.word	0x200002a4

08001f4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <vTaskPlaceOnEventList+0x24>
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	e7fe      	b.n	8001f6e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <vTaskPlaceOnEventList+0x44>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3318      	adds	r3, #24
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe febc 	bl	8000cf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f7e:	2101      	movs	r1, #1
 8001f80:	6838      	ldr	r0, [r7, #0]
 8001f82:	f000 fbc7 	bl	8002714 <prvAddCurrentTaskToDelayedList>
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200001a8 	.word	0x200001a8

08001f94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <vTaskPlaceOnEventListRestricted+0x26>
 8001fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001faa:	f383 8811 	msr	BASEPRI, r3
 8001fae:	f3bf 8f6f 	isb	sy
 8001fb2:	f3bf 8f4f 	dsb	sy
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	e7fe      	b.n	8001fb8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <vTaskPlaceOnEventListRestricted+0x58>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	3318      	adds	r3, #24
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7fe fe73 	bl	8000cae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001fd4:	2024      	movs	r0, #36	; 0x24
 8001fd6:	f002 f961 	bl	800429c <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	68b8      	ldr	r0, [r7, #8]
 8001fde:	f000 fb99 	bl	8002714 <prvAddCurrentTaskToDelayedList>
	}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200001a8 	.word	0x200001a8

08001ff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <xTaskRemoveFromEventList+0x2a>
 8002006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e7fe      	b.n	8002018 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	3318      	adds	r3, #24
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fea2 	bl	8000d68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <xTaskRemoveFromEventList+0xb4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d120      	bne.n	800206e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	3304      	adds	r3, #4
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fe99 	bl	8000d68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4618      	mov	r0, r3
 800203a:	f002 ff81 	bl	8004f40 <SEGGER_SYSVIEW_OnTaskStartReady>
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	2201      	movs	r2, #1
 8002044:	409a      	lsls	r2, r3
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <xTaskRemoveFromEventList+0xb8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4313      	orrs	r3, r2
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <xTaskRemoveFromEventList+0xb8>)
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4a13      	ldr	r2, [pc, #76]	; (80020ac <xTaskRemoveFromEventList+0xbc>)
 800205e:	441a      	add	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	3304      	adds	r3, #4
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f7fe fe21 	bl	8000cae <vListInsertEnd>
 800206c:	e005      	b.n	800207a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	3318      	adds	r3, #24
 8002072:	4619      	mov	r1, r3
 8002074:	480e      	ldr	r0, [pc, #56]	; (80020b0 <xTaskRemoveFromEventList+0xc0>)
 8002076:	f7fe fe1a 	bl	8000cae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <xTaskRemoveFromEventList+0xc4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	429a      	cmp	r2, r3
 8002086:	d905      	bls.n	8002094 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002088:	2301      	movs	r3, #1
 800208a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <xTaskRemoveFromEventList+0xc8>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e001      	b.n	8002098 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002098:	697b      	ldr	r3, [r7, #20]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200002a8 	.word	0x200002a8
 80020a8:	20000288 	.word	0x20000288
 80020ac:	200001ac 	.word	0x200001ac
 80020b0:	20000240 	.word	0x20000240
 80020b4:	200001a8 	.word	0x200001a8
 80020b8:	20000294 	.word	0x20000294

080020bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <vTaskInternalSetTimeOutState+0x24>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <vTaskInternalSetTimeOutState+0x28>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	605a      	str	r2, [r3, #4]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	20000298 	.word	0x20000298
 80020e4:	20000284 	.word	0x20000284

080020e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d109      	bne.n	800210c <xTaskCheckForTimeOut+0x24>
 80020f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fc:	f383 8811 	msr	BASEPRI, r3
 8002100:	f3bf 8f6f 	isb	sy
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	e7fe      	b.n	800210a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <xTaskCheckForTimeOut+0x3e>
 8002112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002116:	f383 8811 	msr	BASEPRI, r3
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e7fe      	b.n	8002124 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002126:	f001 f801 	bl	800312c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <xTaskCheckForTimeOut+0xb8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002142:	d102      	bne.n	800214a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	e023      	b.n	8002192 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <xTaskCheckForTimeOut+0xbc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d007      	beq.n	8002166 <xTaskCheckForTimeOut+0x7e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	429a      	cmp	r2, r3
 800215e:	d302      	bcc.n	8002166 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002160:	2301      	movs	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	e015      	b.n	8002192 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	d20b      	bcs.n	8002188 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	1ad2      	subs	r2, r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff9d 	bl	80020bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e004      	b.n	8002192 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800218e:	2301      	movs	r3, #1
 8002190:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002192:	f000 fff9 	bl	8003188 <vPortExitCritical>

	return xReturn;
 8002196:	69fb      	ldr	r3, [r7, #28]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000284 	.word	0x20000284
 80021a4:	20000298 	.word	0x20000298

080021a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <vTaskMissedYield+0x14>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	20000294 	.word	0x20000294

080021c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80021c8:	f000 f854 	bl	8002274 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <prvIdleTask+0x2c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d907      	bls.n	80021e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <prvIdleTask+0x30>)
 80021d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80021e4:	f003 fb0a 	bl	80057fc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80021e8:	e7ee      	b.n	80021c8 <prvIdleTask+0x8>
 80021ea:	bf00      	nop
 80021ec:	200001ac 	.word	0x200001ac
 80021f0:	e000ed04 	.word	0xe000ed04

080021f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	e00c      	b.n	800221a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <prvInitialiseTaskLists+0x60>)
 800220c:	4413      	add	r3, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fd20 	bl	8000c54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3301      	adds	r3, #1
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d9ef      	bls.n	8002200 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002220:	480d      	ldr	r0, [pc, #52]	; (8002258 <prvInitialiseTaskLists+0x64>)
 8002222:	f7fe fd17 	bl	8000c54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002226:	480d      	ldr	r0, [pc, #52]	; (800225c <prvInitialiseTaskLists+0x68>)
 8002228:	f7fe fd14 	bl	8000c54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <prvInitialiseTaskLists+0x6c>)
 800222e:	f7fe fd11 	bl	8000c54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002232:	480c      	ldr	r0, [pc, #48]	; (8002264 <prvInitialiseTaskLists+0x70>)
 8002234:	f7fe fd0e 	bl	8000c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002238:	480b      	ldr	r0, [pc, #44]	; (8002268 <prvInitialiseTaskLists+0x74>)
 800223a:	f7fe fd0b 	bl	8000c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <prvInitialiseTaskLists+0x78>)
 8002240:	4a05      	ldr	r2, [pc, #20]	; (8002258 <prvInitialiseTaskLists+0x64>)
 8002242:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <prvInitialiseTaskLists+0x7c>)
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <prvInitialiseTaskLists+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200001ac 	.word	0x200001ac
 8002258:	20000210 	.word	0x20000210
 800225c:	20000224 	.word	0x20000224
 8002260:	20000240 	.word	0x20000240
 8002264:	20000254 	.word	0x20000254
 8002268:	2000026c 	.word	0x2000026c
 800226c:	20000238 	.word	0x20000238
 8002270:	2000023c 	.word	0x2000023c

08002274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800227a:	e019      	b.n	80022b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800227c:	f000 ff56 	bl	800312c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <prvCheckTasksWaitingTermination+0x4c>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fd6b 	bl	8000d68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <prvCheckTasksWaitingTermination+0x50>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3b01      	subs	r3, #1
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <prvCheckTasksWaitingTermination+0x50>)
 800229a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <prvCheckTasksWaitingTermination+0x54>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <prvCheckTasksWaitingTermination+0x54>)
 80022a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80022a6:	f000 ff6f 	bl	8003188 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f80e 	bl	80022cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <prvCheckTasksWaitingTermination+0x54>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e1      	bne.n	800227c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000254 	.word	0x20000254
 80022c4:	20000280 	.word	0x20000280
 80022c8:	20000268 	.word	0x20000268

080022cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	4618      	mov	r0, r3
 80022da:	f001 f911 	bl	8003500 <vPortFree>
			vPortFree( pxTCB );
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f001 f90e 	bl	8003500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <prvResetNextTaskUnblockTime+0x38>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d104      	bne.n	8002306 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <prvResetNextTaskUnblockTime+0x3c>)
 80022fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002302:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002304:	e008      	b.n	8002318 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <prvResetNextTaskUnblockTime+0x38>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <prvResetNextTaskUnblockTime+0x3c>)
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	20000238 	.word	0x20000238
 8002328:	200002a0 	.word	0x200002a0

0800232c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <xTaskGetSchedulerState+0x34>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800233a:	2301      	movs	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	e008      	b.n	8002352 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <xTaskGetSchedulerState+0x38>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002348:	2302      	movs	r3, #2
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	e001      	b.n	8002352 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002352:	687b      	ldr	r3, [r7, #4]
	}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	2000028c 	.word	0x2000028c
 8002364:	200002a8 	.word	0x200002a8

08002368 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d071      	beq.n	8002462 <xTaskPriorityDisinherit+0xfa>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <xTaskPriorityDisinherit+0x104>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	429a      	cmp	r2, r3
 8002386:	d009      	beq.n	800239c <xTaskPriorityDisinherit+0x34>
 8002388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238c:	f383 8811 	msr	BASEPRI, r3
 8002390:	f3bf 8f6f 	isb	sy
 8002394:	f3bf 8f4f 	dsb	sy
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e7fe      	b.n	800239a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <xTaskPriorityDisinherit+0x50>
 80023a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a8:	f383 8811 	msr	BASEPRI, r3
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f3bf 8f4f 	dsb	sy
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	e7fe      	b.n	80023b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d049      	beq.n	8002462 <xTaskPriorityDisinherit+0xfa>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d145      	bne.n	8002462 <xTaskPriorityDisinherit+0xfa>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	3304      	adds	r3, #4
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fcc4 	bl	8000d68 <uxListRemove>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d115      	bne.n	8002412 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ea:	4921      	ldr	r1, [pc, #132]	; (8002470 <xTaskPriorityDisinherit+0x108>)
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <xTaskPriorityDisinherit+0xaa>
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2201      	movs	r2, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <xTaskPriorityDisinherit+0x10c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4013      	ands	r3, r2
 800240e:	4a19      	ldr	r2, [pc, #100]	; (8002474 <xTaskPriorityDisinherit+0x10c>)
 8002410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4619      	mov	r1, r3
 8002416:	204a      	movs	r0, #74	; 0x4a
 8002418:	f001 ff5e 	bl	80042d8 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	f1c3 0205 	rsb	r2, r3, #5
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	2201      	movs	r2, #1
 8002436:	409a      	lsls	r2, r3
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <xTaskPriorityDisinherit+0x10c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <xTaskPriorityDisinherit+0x10c>)
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4a08      	ldr	r2, [pc, #32]	; (8002470 <xTaskPriorityDisinherit+0x108>)
 8002450:	441a      	add	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	3304      	adds	r3, #4
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f7fe fc28 	bl	8000cae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800245e:	2301      	movs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002462:	697b      	ldr	r3, [r7, #20]
	}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200001a8 	.word	0x200001a8
 8002470:	200001ac 	.word	0x200001ac
 8002474:	20000288 	.word	0x20000288

08002478 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8002486:	f000 fe51 	bl	800312c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800248a:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <xTaskNotifyWait+0xc0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d01a      	beq.n	80024ce <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <xTaskNotifyWait+0xc0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	43d2      	mvns	r2, r2
 80024a2:	400a      	ands	r2, r1
 80024a4:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80024a6:	4b24      	ldr	r3, [pc, #144]	; (8002538 <xTaskNotifyWait+0xc0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00b      	beq.n	80024ce <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80024b6:	2101      	movs	r1, #1
 80024b8:	6838      	ldr	r0, [r7, #0]
 80024ba:	f000 f92b 	bl	8002714 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80024be:	4b1f      	ldr	r3, [pc, #124]	; (800253c <xTaskNotifyWait+0xc4>)
 80024c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80024ce:	f000 fe5b 	bl	8003188 <vPortExitCritical>

		taskENTER_CRITICAL();
 80024d2:	f000 fe2b 	bl	800312c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	2040      	movs	r0, #64	; 0x40
 80024e4:	f002 f804 	bl	80044f0 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d004      	beq.n	80024f8 <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <xTaskNotifyWait+0xc0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <xTaskNotifyWait+0xc0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d002      	beq.n	800250c <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e008      	b.n	800251e <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <xTaskNotifyWait+0xc0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	43d2      	mvns	r2, r2
 8002516:	400a      	ands	r2, r1
 8002518:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 800251a:	2301      	movs	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <xTaskNotifyWait+0xc0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8002528:	f000 fe2e 	bl	8003188 <vPortExitCritical>

		return xReturn;
 800252c:	697b      	ldr	r3, [r7, #20]
	}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200001a8 	.word	0x200001a8
 800253c:	e000ed04 	.word	0xe000ed04

08002540 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002540:	b580      	push	{r7, lr}
 8002542:	b090      	sub	sp, #64	; 0x40
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8002550:	2301      	movs	r3, #1
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <xTaskGenericNotifyFromISR+0x2e>
 800255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
 800256c:	e7fe      	b.n	800256c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800256e:	f000 fec1 	bl	80032f4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8002576:	f3ef 8211 	mrs	r2, BASEPRI
 800257a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	623a      	str	r2, [r7, #32]
 800258c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800258e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80025a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d829      	bhi.n	800260c <xTaskGenericNotifyFromISR+0xcc>
 80025b8:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <xTaskGenericNotifyFromISR+0x80>)
 80025ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025be:	bf00      	nop
 80025c0:	0800262b 	.word	0x0800262b
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025e3 	.word	0x080025e3
 80025cc:	080025ef 	.word	0x080025ef
 80025d0:	080025f7 	.word	0x080025f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	431a      	orrs	r2, r3
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80025e0:	e026      	b.n	8002630 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80025ec:	e020      	b.n	8002630 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80025f4:	e01c      	b.n	8002630 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80025f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d003      	beq.n	8002606 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002604:	e014      	b.n	8002630 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800260a:	e011      	b.n	8002630 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d00b      	beq.n	800262e <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8002616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e7fe      	b.n	8002628 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800262e:	bf00      	nop
			}

			traceTASK_NOTIFY_FROM_ISR();
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	4618      	mov	r0, r3
 8002634:	f002 fd28 	bl	8005088 <SEGGER_SYSVIEW_ShrinkId>
 8002638:	79f9      	ldrb	r1, [r7, #7]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800263e:	9201      	str	r2, [sp, #4]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	460b      	mov	r3, r1
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	4601      	mov	r1, r0
 8002648:	203f      	movs	r0, #63	; 0x3f
 800264a:	f001 ffe3 	bl	8004614 <SEGGER_SYSVIEW_RecordU32x5>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800264e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002652:	2b01      	cmp	r3, #1
 8002654:	d148      	bne.n	80026e8 <xTaskGenericNotifyFromISR+0x1a8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <xTaskGenericNotifyFromISR+0x132>
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e7fe      	b.n	8002670 <xTaskGenericNotifyFromISR+0x130>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <xTaskGenericNotifyFromISR+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d120      	bne.n	80026bc <xTaskGenericNotifyFromISR+0x17c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	3304      	adds	r3, #4
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fb72 	bl	8000d68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fc5a 	bl	8004f40 <SEGGER_SYSVIEW_OnTaskStartReady>
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	2201      	movs	r2, #1
 8002692:	409a      	lsls	r2, r3
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <xTaskGenericNotifyFromISR+0x1c0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4313      	orrs	r3, r2
 800269a:	4a19      	ldr	r2, [pc, #100]	; (8002700 <xTaskGenericNotifyFromISR+0x1c0>)
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4a16      	ldr	r2, [pc, #88]	; (8002704 <xTaskGenericNotifyFromISR+0x1c4>)
 80026ac:	441a      	add	r2, r3
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	3304      	adds	r3, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f7fe fafa 	bl	8000cae <vListInsertEnd>
 80026ba:	e005      	b.n	80026c8 <xTaskGenericNotifyFromISR+0x188>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80026bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026be:	3318      	adds	r3, #24
 80026c0:	4619      	mov	r1, r3
 80026c2:	4811      	ldr	r0, [pc, #68]	; (8002708 <xTaskGenericNotifyFromISR+0x1c8>)
 80026c4:	f7fe faf3 	bl	8000cae <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <xTaskGenericNotifyFromISR+0x1cc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d908      	bls.n	80026e8 <xTaskGenericNotifyFromISR+0x1a8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80026d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <xTaskGenericNotifyFromISR+0x1a2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80026dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <xTaskGenericNotifyFromISR+0x1d0>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	613b      	str	r3, [r7, #16]
	__asm volatile
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80026f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3738      	adds	r7, #56	; 0x38
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200002a8 	.word	0x200002a8
 8002700:	20000288 	.word	0x20000288
 8002704:	200001ac 	.word	0x200001ac
 8002708:	20000240 	.word	0x20000240
 800270c:	200001a8 	.word	0x200001a8
 8002710:	20000294 	.word	0x20000294

08002714 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800271e:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <prvAddCurrentTaskToDelayedList+0xd8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3304      	adds	r3, #4
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fb1c 	bl	8000d68 <uxListRemove>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <prvAddCurrentTaskToDelayedList+0xd8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	2201      	movs	r2, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4013      	ands	r3, r2
 800274a:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800274c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d110      	bne.n	8002778 <prvAddCurrentTaskToDelayedList+0x64>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00d      	beq.n	8002778 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800275c:	4b23      	ldr	r3, [pc, #140]	; (80027ec <prvAddCurrentTaskToDelayedList+0xd8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	211b      	movs	r1, #27
 8002762:	4618      	mov	r0, r3
 8002764:	f002 fc30 	bl	8004fc8 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <prvAddCurrentTaskToDelayedList+0xd8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3304      	adds	r3, #4
 800276e:	4619      	mov	r1, r3
 8002770:	4820      	ldr	r0, [pc, #128]	; (80027f4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002772:	f7fe fa9c 	bl	8000cae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002776:	e032      	b.n	80027de <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <prvAddCurrentTaskToDelayedList+0xd8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	429a      	cmp	r2, r3
 800278e:	d20f      	bcs.n	80027b0 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <prvAddCurrentTaskToDelayedList+0xd8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2104      	movs	r1, #4
 8002796:	4618      	mov	r0, r3
 8002798:	f002 fc16 	bl	8004fc8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <prvAddCurrentTaskToDelayedList+0xd8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3304      	adds	r3, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4610      	mov	r0, r2
 80027aa:	f7fe faa4 	bl	8000cf6 <vListInsert>
}
 80027ae:	e016      	b.n	80027de <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <prvAddCurrentTaskToDelayedList+0xd8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2104      	movs	r1, #4
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 fc06 	bl	8004fc8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <prvAddCurrentTaskToDelayedList+0xe8>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <prvAddCurrentTaskToDelayedList+0xd8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3304      	adds	r3, #4
 80027c6:	4619      	mov	r1, r3
 80027c8:	4610      	mov	r0, r2
 80027ca:	f7fe fa94 	bl	8000cf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <prvAddCurrentTaskToDelayedList+0xec>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d202      	bcs.n	80027de <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80027d8:	4a09      	ldr	r2, [pc, #36]	; (8002800 <prvAddCurrentTaskToDelayedList+0xec>)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	6013      	str	r3, [r2, #0]
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000284 	.word	0x20000284
 80027ec:	200001a8 	.word	0x200001a8
 80027f0:	20000288 	.word	0x20000288
 80027f4:	2000026c 	.word	0x2000026c
 80027f8:	2000023c 	.word	0x2000023c
 80027fc:	20000238 	.word	0x20000238
 8002800:	200002a0 	.word	0x200002a0

08002804 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800280a:	2300      	movs	r3, #0
 800280c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800280e:	f000 fb2d 	bl	8002e6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <xTimerCreateTimerTask+0x54>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <xTimerCreateTimerTask+0x58>)
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	2302      	movs	r3, #2
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	2300      	movs	r3, #0
 8002824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002828:	490d      	ldr	r1, [pc, #52]	; (8002860 <xTimerCreateTimerTask+0x5c>)
 800282a:	480e      	ldr	r0, [pc, #56]	; (8002864 <xTimerCreateTimerTask+0x60>)
 800282c:	f7fe ffe2 	bl	80017f4 <xTaskCreate>
 8002830:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <xTimerCreateTimerTask+0x48>
	__asm volatile
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	e7fe      	b.n	800284a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800284c:	687b      	ldr	r3, [r7, #4]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200002dc 	.word	0x200002dc
 800285c:	200002e0 	.word	0x200002e0
 8002860:	080066fc 	.word	0x080066fc
 8002864:	08002a51 	.word	0x08002a51

08002868 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8002876:	202c      	movs	r0, #44	; 0x2c
 8002878:	f000 fd7a 	bl	8003370 <pvPortMalloc>
 800287c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f805 	bl	80028aa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80028a0:	697b      	ldr	r3, [r7, #20]
	}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <prvInitialiseNewTimer+0x28>
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e7fe      	b.n	80028d0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01e      	beq.n	8002916 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80028d8:	f000 fac8 	bl	8002e6c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	6a3a      	ldr	r2, [r7, #32]
 80028f2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	3304      	adds	r3, #4
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe f9cb 	bl	8000c94 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	b2da      	uxtb	r2, r3
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8002916:	bf00      	nop
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <xTimerGenericCommand+0x2c>
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	e7fe      	b.n	800294a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <xTimerGenericCommand+0x94>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d02a      	beq.n	80029aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b05      	cmp	r3, #5
 8002964:	dc18      	bgt.n	8002998 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002966:	f7ff fce1 	bl	800232c <xTaskGetSchedulerState>
 800296a:	4603      	mov	r3, r0
 800296c:	2b02      	cmp	r3, #2
 800296e:	d109      	bne.n	8002984 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002970:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <xTimerGenericCommand+0x94>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	f107 0114 	add.w	r1, r7, #20
 8002978:	2300      	movs	r3, #0
 800297a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800297c:	f7fe fae4 	bl	8000f48 <xQueueGenericSend>
 8002980:	6278      	str	r0, [r7, #36]	; 0x24
 8002982:	e012      	b.n	80029aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <xTimerGenericCommand+0x94>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	f107 0114 	add.w	r1, r7, #20
 800298c:	2300      	movs	r3, #0
 800298e:	2200      	movs	r2, #0
 8002990:	f7fe fada 	bl	8000f48 <xQueueGenericSend>
 8002994:	6278      	str	r0, [r7, #36]	; 0x24
 8002996:	e008      	b.n	80029aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <xTimerGenericCommand+0x94>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	f107 0114 	add.w	r1, r7, #20
 80029a0:	2300      	movs	r3, #0
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	f7fe fbf2 	bl	800118c <xQueueGenericSendFromISR>
 80029a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3728      	adds	r7, #40	; 0x28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200002dc 	.word	0x200002dc

080029b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <prvProcessExpiredTimer+0x94>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3304      	adds	r3, #4
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe f9c9 	bl	8000d68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d021      	beq.n	8002a28 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	18d1      	adds	r1, r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	6978      	ldr	r0, [r7, #20]
 80029f2:	f000 f8d1 	bl	8002b98 <prvInsertTimerInActiveList>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01e      	beq.n	8002a3a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80029fc:	2300      	movs	r3, #0
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2300      	movs	r3, #0
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	2100      	movs	r1, #0
 8002a06:	6978      	ldr	r0, [r7, #20]
 8002a08:	f7ff ff8a 	bl	8002920 <xTimerGenericCommand>
 8002a0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d112      	bne.n	8002a3a <prvProcessExpiredTimer+0x82>
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	e7fe      	b.n	8002a26 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	4798      	blx	r3
}
 8002a42:	bf00      	nop
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200002d4 	.word	0x200002d4

08002a50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a58:	f107 0308 	add.w	r3, r7, #8
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 f857 	bl	8002b10 <prvGetNextExpireTime>
 8002a62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4619      	mov	r1, r3
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f803 	bl	8002a74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002a6e:	f000 f8d5 	bl	8002c1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a72:	e7f1      	b.n	8002a58 <prvTimerTask+0x8>

08002a74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002a7e:	f7ff f871 	bl	8001b64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a82:	f107 0308 	add.w	r3, r7, #8
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f866 	bl	8002b58 <prvSampleTimeNow>
 8002a8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d130      	bne.n	8002af6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <prvProcessTimerOrBlockTask+0x3c>
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d806      	bhi.n	8002ab0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002aa2:	f7ff f86d 	bl	8001b80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002aa6:	68f9      	ldr	r1, [r7, #12]
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff85 	bl	80029b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002aae:	e024      	b.n	8002afa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002ab6:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <prvProcessTimerOrBlockTask+0x90>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <prvProcessTimerOrBlockTask+0x50>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <prvProcessTimerOrBlockTask+0x52>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <prvProcessTimerOrBlockTask+0x94>)
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7fe fe59 	bl	800178c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002ada:	f7ff f851 	bl	8001b80 <xTaskResumeAll>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <prvProcessTimerOrBlockTask+0x98>)
 8002ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	f3bf 8f6f 	isb	sy
}
 8002af4:	e001      	b.n	8002afa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002af6:	f7ff f843 	bl	8001b80 <xTaskResumeAll>
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200002d8 	.word	0x200002d8
 8002b08:	200002dc 	.word	0x200002dc
 8002b0c:	e000ed04 	.word	0xe000ed04

08002b10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <prvGetNextExpireTime+0x44>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <prvGetNextExpireTime+0x16>
 8002b22:	2201      	movs	r2, #1
 8002b24:	e000      	b.n	8002b28 <prvGetNextExpireTime+0x18>
 8002b26:	2200      	movs	r2, #0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b34:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <prvGetNextExpireTime+0x44>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e001      	b.n	8002b44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002b44:	68fb      	ldr	r3, [r7, #12]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	200002d4 	.word	0x200002d4

08002b58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002b60:	f7ff f8ae 	bl	8001cc0 <xTaskGetTickCount>
 8002b64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002b66:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <prvSampleTimeNow+0x3c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d205      	bcs.n	8002b7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002b70:	f000 f918 	bl	8002da4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e002      	b.n	8002b82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002b82:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <prvSampleTimeNow+0x3c>)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002b88:	68fb      	ldr	r3, [r7, #12]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200002e4 	.word	0x200002e4

08002b98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d812      	bhi.n	8002be4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	1ad2      	subs	r2, r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	e01b      	b.n	8002c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <prvInsertTimerInActiveList+0x7c>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4610      	mov	r0, r2
 8002bde:	f7fe f88a 	bl	8000cf6 <vListInsert>
 8002be2:	e012      	b.n	8002c0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d206      	bcs.n	8002bfa <prvInsertTimerInActiveList+0x62>
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d302      	bcc.n	8002bfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	e007      	b.n	8002c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <prvInsertTimerInActiveList+0x80>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3304      	adds	r3, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	4610      	mov	r0, r2
 8002c06:	f7fe f876 	bl	8000cf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002c0a:	697b      	ldr	r3, [r7, #20]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	200002d8 	.word	0x200002d8
 8002c18:	200002d4 	.word	0x200002d4

08002c1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	; 0x30
 8002c20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c22:	e0ac      	b.n	8002d7e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f2c0 80a8 	blt.w	8002d7c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d004      	beq.n	8002c42 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe f893 	bl	8000d68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff87 	bl	8002b58 <prvSampleTimeNow>
 8002c4a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b09      	cmp	r3, #9
 8002c50:	f200 8095 	bhi.w	8002d7e <prvProcessReceivedCommands+0x162>
 8002c54:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <prvProcessReceivedCommands+0x40>)
 8002c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5a:	bf00      	nop
 8002c5c:	08002c85 	.word	0x08002c85
 8002c60:	08002c85 	.word	0x08002c85
 8002c64:	08002c85 	.word	0x08002c85
 8002c68:	08002cf7 	.word	0x08002cf7
 8002c6c:	08002d0b 	.word	0x08002d0b
 8002c70:	08002d53 	.word	0x08002d53
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c85 	.word	0x08002c85
 8002c7c:	08002cf7 	.word	0x08002cf7
 8002c80:	08002d0b 	.word	0x08002d0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	18d1      	adds	r1, r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ca4:	f7ff ff78 	bl	8002b98 <prvInsertTimerInActiveList>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d067      	beq.n	8002d7e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d05c      	beq.n	8002d7e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	441a      	add	r2, r3
 8002ccc:	2300      	movs	r3, #0
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cd6:	f7ff fe23 	bl	8002920 <xTimerGenericCommand>
 8002cda:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d14d      	bne.n	8002d7e <prvProcessReceivedCommands+0x162>
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	e7fe      	b.n	8002cf4 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8002d08:	e039      	b.n	8002d7e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <prvProcessReceivedCommands+0x122>
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e7fe      	b.n	8002d3c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	18d1      	adds	r1, r2, r3
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	6a3a      	ldr	r2, [r7, #32]
 8002d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d4c:	f7ff ff24 	bl	8002b98 <prvInsertTimerInActiveList>
					break;
 8002d50:	e015      	b.n	8002d7e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8002d60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d62:	f000 fbcd 	bl	8003500 <vPortFree>
 8002d66:	e00a      	b.n	8002d7e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002d7a:	e000      	b.n	8002d7e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002d7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <prvProcessReceivedCommands+0x184>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f107 0108 	add.w	r1, r7, #8
 8002d86:	2200      	movs	r2, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe faab 	bl	80012e4 <xQueueReceive>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f47f af47 	bne.w	8002c24 <prvProcessReceivedCommands+0x8>
	}
}
 8002d96:	bf00      	nop
 8002d98:	3728      	adds	r7, #40	; 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200002dc 	.word	0x200002dc

08002da4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002daa:	e047      	b.n	8002e3c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002dac:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <prvSwitchTimerLists+0xc0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <prvSwitchTimerLists+0xc0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd ffcf 	bl	8000d68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02d      	beq.n	8002e3c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d90e      	bls.n	8002e10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002dfe:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <prvSwitchTimerLists+0xc0>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3304      	adds	r3, #4
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f7fd ff74 	bl	8000cf6 <vListInsert>
 8002e0e:	e015      	b.n	8002e3c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002e10:	2300      	movs	r3, #0
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2300      	movs	r3, #0
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	2100      	movs	r1, #0
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff fd80 	bl	8002920 <xTimerGenericCommand>
 8002e20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <prvSwitchTimerLists+0x98>
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	e7fe      	b.n	8002e3a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <prvSwitchTimerLists+0xc0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1b2      	bne.n	8002dac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <prvSwitchTimerLists+0xc0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <prvSwitchTimerLists+0xc4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <prvSwitchTimerLists+0xc0>)
 8002e52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <prvSwitchTimerLists+0xc4>)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	6013      	str	r3, [r2, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200002d4 	.word	0x200002d4
 8002e68:	200002d8 	.word	0x200002d8

08002e6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002e70:	f000 f95c 	bl	800312c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11d      	bne.n	8002eb8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002e7c:	4811      	ldr	r0, [pc, #68]	; (8002ec4 <prvCheckForValidListAndQueue+0x58>)
 8002e7e:	f7fd fee9 	bl	8000c54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002e82:	4811      	ldr	r0, [pc, #68]	; (8002ec8 <prvCheckForValidListAndQueue+0x5c>)
 8002e84:	f7fd fee6 	bl	8000c54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002e88:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <prvCheckForValidListAndQueue+0x60>)
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <prvCheckForValidListAndQueue+0x58>)
 8002e8c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <prvCheckForValidListAndQueue+0x64>)
 8002e90:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <prvCheckForValidListAndQueue+0x5c>)
 8002e92:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e94:	2200      	movs	r2, #0
 8002e96:	210c      	movs	r1, #12
 8002e98:	200a      	movs	r0, #10
 8002e9a:	f7fd fff7 	bl	8000e8c <xQueueGenericCreate>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002ea2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <prvCheckForValidListAndQueue+0x68>)
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fc3a 	bl	800172c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002eb8:	f000 f966 	bl	8003188 <vPortExitCritical>
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	200002dc 	.word	0x200002dc
 8002ec4:	200002ac 	.word	0x200002ac
 8002ec8:	200002c0 	.word	0x200002c0
 8002ecc:	200002d4 	.word	0x200002d4
 8002ed0:	200002d8 	.word	0x200002d8
 8002ed4:	08006704 	.word	0x08006704

08002ed8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3b04      	subs	r3, #4
 8002ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f023 0201 	bic.w	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b04      	subs	r3, #4
 8002f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002f08:	4a0c      	ldr	r2, [pc, #48]	; (8002f3c <pxPortInitialiseStack+0x64>)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3b14      	subs	r3, #20
 8002f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3b04      	subs	r3, #4
 8002f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f06f 0202 	mvn.w	r2, #2
 8002f26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3b20      	subs	r3, #32
 8002f2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	08002f41 	.word	0x08002f41

08002f40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <prvTaskExitError+0x50>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d009      	beq.n	8002f68 <prvTaskExitError+0x28>
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	e7fe      	b.n	8002f66 <prvTaskExitError+0x26>
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002f7a:	bf00      	nop
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0fc      	beq.n	8002f7c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000010 	.word	0x20000010
	...

08002fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <pxCurrentTCBConst2>)
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	6808      	ldr	r0, [r1, #0]
 8002fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002faa:	f380 8809 	msr	PSP, r0
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f380 8811 	msr	BASEPRI, r0
 8002fba:	4770      	bx	lr
 8002fbc:	f3af 8000 	nop.w

08002fc0 <pxCurrentTCBConst2>:
 8002fc0:	200001a8 	.word	0x200001a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop

08002fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002fc8:	4808      	ldr	r0, [pc, #32]	; (8002fec <prvPortStartFirstTask+0x24>)
 8002fca:	6800      	ldr	r0, [r0, #0]
 8002fcc:	6800      	ldr	r0, [r0, #0]
 8002fce:	f380 8808 	msr	MSP, r0
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f380 8814 	msr	CONTROL, r0
 8002fda:	b662      	cpsie	i
 8002fdc:	b661      	cpsie	f
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	df00      	svc	0
 8002fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002fea:	bf00      	nop
 8002fec:	e000ed08 	.word	0xe000ed08

08002ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ff6:	4b44      	ldr	r3, [pc, #272]	; (8003108 <xPortStartScheduler+0x118>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a44      	ldr	r2, [pc, #272]	; (800310c <xPortStartScheduler+0x11c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d109      	bne.n	8003014 <xPortStartScheduler+0x24>
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	e7fe      	b.n	8003012 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003014:	4b3c      	ldr	r3, [pc, #240]	; (8003108 <xPortStartScheduler+0x118>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3d      	ldr	r2, [pc, #244]	; (8003110 <xPortStartScheduler+0x120>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d109      	bne.n	8003032 <xPortStartScheduler+0x42>
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e7fe      	b.n	8003030 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003032:	4b38      	ldr	r3, [pc, #224]	; (8003114 <xPortStartScheduler+0x124>)
 8003034:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	22ff      	movs	r2, #255	; 0xff
 8003042:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4b30      	ldr	r3, [pc, #192]	; (8003118 <xPortStartScheduler+0x128>)
 8003058:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800305a:	4b30      	ldr	r3, [pc, #192]	; (800311c <xPortStartScheduler+0x12c>)
 800305c:	2207      	movs	r2, #7
 800305e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003060:	e009      	b.n	8003076 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003062:	4b2e      	ldr	r3, [pc, #184]	; (800311c <xPortStartScheduler+0x12c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3b01      	subs	r3, #1
 8003068:	4a2c      	ldr	r2, [pc, #176]	; (800311c <xPortStartScheduler+0x12c>)
 800306a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	2b80      	cmp	r3, #128	; 0x80
 8003080:	d0ef      	beq.n	8003062 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003082:	4b26      	ldr	r3, [pc, #152]	; (800311c <xPortStartScheduler+0x12c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	d009      	beq.n	80030a2 <xPortStartScheduler+0xb2>
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	e7fe      	b.n	80030a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <xPortStartScheduler+0x12c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	4a1c      	ldr	r2, [pc, #112]	; (800311c <xPortStartScheduler+0x12c>)
 80030aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <xPortStartScheduler+0x12c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030b4:	4a19      	ldr	r2, [pc, #100]	; (800311c <xPortStartScheduler+0x12c>)
 80030b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <xPortStartScheduler+0x130>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a16      	ldr	r2, [pc, #88]	; (8003120 <xPortStartScheduler+0x130>)
 80030c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <xPortStartScheduler+0x130>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a13      	ldr	r2, [pc, #76]	; (8003120 <xPortStartScheduler+0x130>)
 80030d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80030d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80030d8:	f000 f8de 	bl	8003298 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <xPortStartScheduler+0x134>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80030e2:	f000 f8fd 	bl	80032e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <xPortStartScheduler+0x138>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <xPortStartScheduler+0x138>)
 80030ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80030f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80030f2:	f7ff ff69 	bl	8002fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80030f6:	f7fe fec1 	bl	8001e7c <vTaskSwitchContext>
	prvTaskExitError();
 80030fa:	f7ff ff21 	bl	8002f40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	e000ed00 	.word	0xe000ed00
 800310c:	410fc271 	.word	0x410fc271
 8003110:	410fc270 	.word	0x410fc270
 8003114:	e000e400 	.word	0xe000e400
 8003118:	200002e8 	.word	0x200002e8
 800311c:	200002ec 	.word	0x200002ec
 8003120:	e000ed20 	.word	0xe000ed20
 8003124:	20000010 	.word	0x20000010
 8003128:	e000ef34 	.word	0xe000ef34

0800312c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <vPortEnterCritical+0x54>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <vPortEnterCritical+0x54>)
 800314c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <vPortEnterCritical+0x54>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d10e      	bne.n	8003174 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <vPortEnterCritical+0x58>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <vPortEnterCritical+0x48>
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	e7fe      	b.n	8003172 <vPortEnterCritical+0x46>
	}
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	20000010 	.word	0x20000010
 8003184:	e000ed04 	.word	0xe000ed04

08003188 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <vPortExitCritical+0x4c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <vPortExitCritical+0x22>
 8003196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	e7fe      	b.n	80031a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80031aa:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <vPortExitCritical+0x4c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <vPortExitCritical+0x4c>)
 80031b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <vPortExitCritical+0x4c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <vPortExitCritical+0x3e>
 80031bc:	2300      	movs	r3, #0
 80031be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000010 	.word	0x20000010
	...

080031e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80031e0:	f3ef 8009 	mrs	r0, PSP
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <pxCurrentTCBConst>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	f01e 0f10 	tst.w	lr, #16
 80031f0:	bf08      	it	eq
 80031f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80031f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fa:	6010      	str	r0, [r2, #0]
 80031fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003204:	f380 8811 	msr	BASEPRI, r0
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f7fe fe34 	bl	8001e7c <vTaskSwitchContext>
 8003214:	f04f 0000 	mov.w	r0, #0
 8003218:	f380 8811 	msr	BASEPRI, r0
 800321c:	bc09      	pop	{r0, r3}
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	6808      	ldr	r0, [r1, #0]
 8003222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003226:	f01e 0f10 	tst.w	lr, #16
 800322a:	bf08      	it	eq
 800322c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003230:	f380 8809 	msr	PSP, r0
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	f3af 8000 	nop.w

08003240 <pxCurrentTCBConst>:
 8003240:	200001a8 	.word	0x200001a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop

08003248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
	__asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8003260:	f001 fd50 	bl	8004d04 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003264:	f7fe fd4e 	bl	8001d04 <xTaskIncrementTick>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800326e:	f001 fda7 	bl	8004dc0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <SysTick_Handler+0x4c>)
 8003274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e001      	b.n	8003280 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800327c:	f001 fd84 	bl	8004d88 <SEGGER_SYSVIEW_RecordExitISR>
 8003280:	2300      	movs	r3, #0
 8003282:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	e000ed04 	.word	0xe000ed04

08003298 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <vPortSetupTimerInterrupt+0x34>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <vPortSetupTimerInterrupt+0x38>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <vPortSetupTimerInterrupt+0x3c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <vPortSetupTimerInterrupt+0x40>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	099b      	lsrs	r3, r3, #6
 80032b4:	4a09      	ldr	r2, [pc, #36]	; (80032dc <vPortSetupTimerInterrupt+0x44>)
 80032b6:	3b01      	subs	r3, #1
 80032b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <vPortSetupTimerInterrupt+0x34>)
 80032bc:	2207      	movs	r2, #7
 80032be:	601a      	str	r2, [r3, #0]
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e010 	.word	0xe000e010
 80032d0:	e000e018 	.word	0xe000e018
 80032d4:	20000110 	.word	0x20000110
 80032d8:	10624dd3 	.word	0x10624dd3
 80032dc:	e000e014 	.word	0xe000e014

080032e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80032e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80032f0 <vPortEnableVFP+0x10>
 80032e4:	6801      	ldr	r1, [r0, #0]
 80032e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80032ea:	6001      	str	r1, [r0, #0]
 80032ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80032ee:	bf00      	nop
 80032f0:	e000ed88 	.word	0xe000ed88

080032f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80032fa:	f3ef 8305 	mrs	r3, IPSR
 80032fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	d913      	bls.n	800332e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003306:	4a16      	ldr	r2, [pc, #88]	; (8003360 <vPortValidateInterruptPriority+0x6c>)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <vPortValidateInterruptPriority+0x70>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	7afa      	ldrb	r2, [r7, #11]
 8003316:	429a      	cmp	r2, r3
 8003318:	d209      	bcs.n	800332e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	e7fe      	b.n	800332c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <vPortValidateInterruptPriority+0x74>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <vPortValidateInterruptPriority+0x78>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d909      	bls.n	8003352 <vPortValidateInterruptPriority+0x5e>
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	e7fe      	b.n	8003350 <vPortValidateInterruptPriority+0x5c>
	}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e3f0 	.word	0xe000e3f0
 8003364:	200002e8 	.word	0x200002e8
 8003368:	e000ed0c 	.word	0xe000ed0c
 800336c:	200002ec 	.word	0x200002ec

08003370 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800337c:	f7fe fbf2 	bl	8001b64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <pvPortMalloc+0x178>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003388:	f000 f91a 	bl	80035c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800338c:	4b57      	ldr	r3, [pc, #348]	; (80034ec <pvPortMalloc+0x17c>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 8091 	bne.w	80034bc <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01c      	beq.n	80033da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80033a0:	2208      	movs	r2, #8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4413      	add	r3, r2
 80033a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d013      	beq.n	80033da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f023 0307 	bic.w	r3, r3, #7
 80033b8:	3308      	adds	r3, #8
 80033ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <pvPortMalloc+0x6a>
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e7fe      	b.n	80033d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d06d      	beq.n	80034bc <pvPortMalloc+0x14c>
 80033e0:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <pvPortMalloc+0x180>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d868      	bhi.n	80034bc <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80033ea:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <pvPortMalloc+0x184>)
 80033ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80033ee:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <pvPortMalloc+0x184>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033f4:	e004      	b.n	8003400 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d903      	bls.n	8003412 <pvPortMalloc+0xa2>
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f1      	bne.n	80033f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003412:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <pvPortMalloc+0x178>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	429a      	cmp	r2, r3
 800341a:	d04f      	beq.n	80034bc <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2208      	movs	r2, #8
 8003422:	4413      	add	r3, r2
 8003424:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	1ad2      	subs	r2, r2, r3
 8003436:	2308      	movs	r3, #8
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	429a      	cmp	r2, r3
 800343c:	d91e      	bls.n	800347c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <pvPortMalloc+0xf4>
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	e7fe      	b.n	8003462 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1ad2      	subs	r2, r2, r3
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003476:	69b8      	ldr	r0, [r7, #24]
 8003478:	f000 f904 	bl	8003684 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800347c:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <pvPortMalloc+0x180>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	4a1a      	ldr	r2, [pc, #104]	; (80034f0 <pvPortMalloc+0x180>)
 8003488:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800348a:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <pvPortMalloc+0x180>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <pvPortMalloc+0x188>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d203      	bcs.n	800349e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003496:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <pvPortMalloc+0x180>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <pvPortMalloc+0x188>)
 800349c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <pvPortMalloc+0x17c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <pvPortMalloc+0x18c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	4a10      	ldr	r2, [pc, #64]	; (80034fc <pvPortMalloc+0x18c>)
 80034ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80034bc:	f7fe fb60 	bl	8001b80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <pvPortMalloc+0x16e>
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e7fe      	b.n	80034dc <pvPortMalloc+0x16c>
	return pvReturn;
 80034de:	69fb      	ldr	r3, [r7, #28]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3728      	adds	r7, #40	; 0x28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20012ef8 	.word	0x20012ef8
 80034ec:	20012f0c 	.word	0x20012f0c
 80034f0:	20012efc 	.word	0x20012efc
 80034f4:	20012ef0 	.word	0x20012ef0
 80034f8:	20012f00 	.word	0x20012f00
 80034fc:	20012f04 	.word	0x20012f04

08003500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d04b      	beq.n	80035aa <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003512:	2308      	movs	r3, #8
 8003514:	425b      	negs	r3, r3
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4413      	add	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <vPortFree+0xb4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <vPortFree+0x42>
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e7fe      	b.n	8003540 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <vPortFree+0x5e>
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	e7fe      	b.n	800355c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <vPortFree+0xb4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01e      	beq.n	80035aa <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d11a      	bne.n	80035aa <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <vPortFree+0xb4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	43db      	mvns	r3, r3
 800357e:	401a      	ands	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003584:	f7fe faee 	bl	8001b64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <vPortFree+0xb8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4413      	add	r3, r2
 8003592:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <vPortFree+0xb8>)
 8003594:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003596:	6938      	ldr	r0, [r7, #16]
 8003598:	f000 f874 	bl	8003684 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800359c:	4b07      	ldr	r3, [pc, #28]	; (80035bc <vPortFree+0xbc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	4a06      	ldr	r2, [pc, #24]	; (80035bc <vPortFree+0xbc>)
 80035a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80035a6:	f7fe faeb 	bl	8001b80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80035aa:	bf00      	nop
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20012f0c 	.word	0x20012f0c
 80035b8:	20012efc 	.word	0x20012efc
 80035bc:	20012f08 	.word	0x20012f08

080035c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80035c6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80035ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80035cc:	4b27      	ldr	r3, [pc, #156]	; (800366c <prvHeapInit+0xac>)
 80035ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00c      	beq.n	80035f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3307      	adds	r3, #7
 80035de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0307 	bic.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	4a1f      	ldr	r2, [pc, #124]	; (800366c <prvHeapInit+0xac>)
 80035f0:	4413      	add	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035f8:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <prvHeapInit+0xb0>)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <prvHeapInit+0xb0>)
 8003600:	2200      	movs	r2, #0
 8003602:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4413      	add	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800360c:	2208      	movs	r2, #8
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0307 	bic.w	r3, r3, #7
 800361a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a15      	ldr	r2, [pc, #84]	; (8003674 <prvHeapInit+0xb4>)
 8003620:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003622:	4b14      	ldr	r3, [pc, #80]	; (8003674 <prvHeapInit+0xb4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2200      	movs	r2, #0
 8003628:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <prvHeapInit+0xb4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	1ad2      	subs	r2, r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <prvHeapInit+0xb4>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <prvHeapInit+0xb8>)
 800364e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a09      	ldr	r2, [pc, #36]	; (800367c <prvHeapInit+0xbc>)
 8003656:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <prvHeapInit+0xc0>)
 800365a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800365e:	601a      	str	r2, [r3, #0]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	200002f0 	.word	0x200002f0
 8003670:	20012ef0 	.word	0x20012ef0
 8003674:	20012ef8 	.word	0x20012ef8
 8003678:	20012f00 	.word	0x20012f00
 800367c:	20012efc 	.word	0x20012efc
 8003680:	20012f0c 	.word	0x20012f0c

08003684 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800368c:	4b28      	ldr	r3, [pc, #160]	; (8003730 <prvInsertBlockIntoFreeList+0xac>)
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e002      	b.n	8003698 <prvInsertBlockIntoFreeList+0x14>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d8f7      	bhi.n	8003692 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4413      	add	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d108      	bne.n	80036c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	441a      	add	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	441a      	add	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d118      	bne.n	800370c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <prvInsertBlockIntoFreeList+0xb0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d00d      	beq.n	8003702 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	441a      	add	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	e008      	b.n	8003714 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <prvInsertBlockIntoFreeList+0xb0>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	e003      	b.n	8003714 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	d002      	beq.n	8003722 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20012ef0 	.word	0x20012ef0
 8003734:	20012ef8 	.word	0x20012ef8

08003738 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800373c:	4803      	ldr	r0, [pc, #12]	; (800374c <_cbSendSystemDesc+0x14>)
 800373e:	f001 fa8d 	bl	8004c5c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003742:	4803      	ldr	r0, [pc, #12]	; (8003750 <_cbSendSystemDesc+0x18>)
 8003744:	f001 fa8a 	bl	8004c5c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003748:	bf00      	nop
 800374a:	bd80      	pop	{r7, pc}
 800374c:	0800670c 	.word	0x0800670c
 8003750:	08006748 	.word	0x08006748

08003754 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <SEGGER_SYSVIEW_Conf+0x20>)
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <SEGGER_SYSVIEW_Conf+0x20>)
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <SEGGER_SYSVIEW_Conf+0x24>)
 8003762:	4a06      	ldr	r2, [pc, #24]	; (800377c <SEGGER_SYSVIEW_Conf+0x28>)
 8003764:	f000 fd4c 	bl	8004200 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003768:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800376c:	f000 fd86 	bl	800427c <SEGGER_SYSVIEW_SetRAMBase>
}
 8003770:	bf00      	nop
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000110 	.word	0x20000110
 8003778:	08003739 	.word	0x08003739
 800377c:	080068c8 	.word	0x080068c8

08003780 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003782:	b085      	sub	sp, #20
 8003784:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	e034      	b.n	80037f6 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800378c:	491e      	ldr	r1, [pc, #120]	; (8003808 <_cbSendTaskList+0x88>)
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	491a      	ldr	r1, [pc, #104]	; (8003808 <_cbSendTaskList+0x88>)
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	3304      	adds	r3, #4
 80037ac:	681c      	ldr	r4, [r3, #0]
 80037ae:	4916      	ldr	r1, [pc, #88]	; (8003808 <_cbSendTaskList+0x88>)
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	3308      	adds	r3, #8
 80037be:	681d      	ldr	r5, [r3, #0]
 80037c0:	4911      	ldr	r1, [pc, #68]	; (8003808 <_cbSendTaskList+0x88>)
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	330c      	adds	r3, #12
 80037d0:	681e      	ldr	r6, [r3, #0]
 80037d2:	490d      	ldr	r1, [pc, #52]	; (8003808 <_cbSendTaskList+0x88>)
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3310      	adds	r3, #16
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4633      	mov	r3, r6
 80037e8:	462a      	mov	r2, r5
 80037ea:	4621      	mov	r1, r4
 80037ec:	f000 f8b4 	bl	8003958 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3301      	adds	r3, #1
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <_cbSendTaskList+0x8c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3c5      	bcc.n	800378c <_cbSendTaskList+0xc>
  }
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003808:	20012f10 	.word	0x20012f10
 800380c:	20012fb0 	.word	0x20012fb0

08003810 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003816:	f7fe fa63 	bl	8001ce0 <xTaskGetTickCountFromISR>
 800381a:	4603      	mov	r3, r0
 800381c:	f04f 0400 	mov.w	r4, #0
 8003820:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003824:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003828:	462b      	mov	r3, r5
 800382a:	4634      	mov	r4, r6
 800382c:	f04f 0100 	mov.w	r1, #0
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	0162      	lsls	r2, r4, #5
 8003836:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800383a:	0159      	lsls	r1, r3, #5
 800383c:	460b      	mov	r3, r1
 800383e:	4614      	mov	r4, r2
 8003840:	1b5b      	subs	r3, r3, r5
 8003842:	eb64 0406 	sbc.w	r4, r4, r6
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	00a2      	lsls	r2, r4, #2
 8003850:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003854:	0099      	lsls	r1, r3, #2
 8003856:	460b      	mov	r3, r1
 8003858:	4614      	mov	r4, r2
 800385a:	195b      	adds	r3, r3, r5
 800385c:	eb44 0406 	adc.w	r4, r4, r6
 8003860:	f04f 0100 	mov.w	r1, #0
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	00e2      	lsls	r2, r4, #3
 800386a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800386e:	00d9      	lsls	r1, r3, #3
 8003870:	460b      	mov	r3, r1
 8003872:	4614      	mov	r4, r2
 8003874:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8003878:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 800387c:	4618      	mov	r0, r3
 800387e:	4621      	mov	r1, r4
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003888 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003896:	2205      	movs	r2, #5
 8003898:	492b      	ldr	r1, [pc, #172]	; (8003948 <SYSVIEW_AddTask+0xc0>)
 800389a:	68b8      	ldr	r0, [r7, #8]
 800389c:	f002 fad6 	bl	8005e4c <memcmp>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d04b      	beq.n	800393e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80038a6:	4b29      	ldr	r3, [pc, #164]	; (800394c <SYSVIEW_AddTask+0xc4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b07      	cmp	r3, #7
 80038ac:	d903      	bls.n	80038b6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80038ae:	4828      	ldr	r0, [pc, #160]	; (8003950 <SYSVIEW_AddTask+0xc8>)
 80038b0:	f001 fcd8 	bl	8005264 <SEGGER_SYSVIEW_Warn>
    return;
 80038b4:	e044      	b.n	8003940 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80038b6:	4b25      	ldr	r3, [pc, #148]	; (800394c <SYSVIEW_AddTask+0xc4>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4926      	ldr	r1, [pc, #152]	; (8003954 <SYSVIEW_AddTask+0xcc>)
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <SYSVIEW_AddTask+0xc4>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4921      	ldr	r1, [pc, #132]	; (8003954 <SYSVIEW_AddTask+0xcc>)
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3304      	adds	r3, #4
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <SYSVIEW_AddTask+0xc4>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	491b      	ldr	r1, [pc, #108]	; (8003954 <SYSVIEW_AddTask+0xcc>)
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	3308      	adds	r3, #8
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <SYSVIEW_AddTask+0xc4>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4916      	ldr	r1, [pc, #88]	; (8003954 <SYSVIEW_AddTask+0xcc>)
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	330c      	adds	r3, #12
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <SYSVIEW_AddTask+0xc4>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4910      	ldr	r1, [pc, #64]	; (8003954 <SYSVIEW_AddTask+0xcc>)
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	3310      	adds	r3, #16
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <SYSVIEW_AddTask+0xc4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	4a08      	ldr	r2, [pc, #32]	; (800394c <SYSVIEW_AddTask+0xc4>)
 800392a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f80e 	bl	8003958 <SYSVIEW_SendTaskInfo>
 800393c:	e000      	b.n	8003940 <SYSVIEW_AddTask+0xb8>
    return;
 800393e:	bf00      	nop

}
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	08006758 	.word	0x08006758
 800394c:	20012fb0 	.word	0x20012fb0
 8003950:	08006760 	.word	0x08006760
 8003954:	20012f10 	.word	0x20012f10

08003958 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003966:	f107 0314 	add.w	r3, r7, #20
 800396a:	2214      	movs	r2, #20
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f002 fa86 	bl	8005e80 <memset>
  TaskInfo.TaskID     = TaskID;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4618      	mov	r0, r3
 800398e:	f001 f86b 	bl	8004a68 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003992:	bf00      	nop
 8003994:	3728      	adds	r7, #40	; 0x28
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80039a2:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <_DoInit+0x8c>)
 80039a4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2203      	movs	r2, #3
 80039aa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2203      	movs	r2, #3
 80039b0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <_DoInit+0x90>)
 80039b6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <_DoInit+0x94>)
 80039bc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a14      	ldr	r2, [pc, #80]	; (8003a2c <_DoInit+0x90>)
 80039dc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <_DoInit+0x98>)
 80039e2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2210      	movs	r2, #16
 80039e8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3307      	adds	r3, #7
 8003a00:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <_DoInit+0x9c>)
 8003a02:	6810      	ldr	r0, [r2, #0]
 8003a04:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <_DoInit+0xa0>)
 8003a0a:	6810      	ldr	r0, [r2, #0]
 8003a0c:	6018      	str	r0, [r3, #0]
 8003a0e:	8891      	ldrh	r1, [r2, #4]
 8003a10:	7992      	ldrb	r2, [r2, #6]
 8003a12:	8099      	strh	r1, [r3, #4]
 8003a14:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	719a      	strb	r2, [r3, #6]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	2001554c 	.word	0x2001554c
 8003a2c:	080067b0 	.word	0x080067b0
 8003a30:	20012fb4 	.word	0x20012fb4
 8003a34:	200133b4 	.word	0x200133b4
 8003a38:	080067bc 	.word	0x080067bc
 8003a3c:	080067c0 	.word	0x080067c0

08003a40 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8003a4c:	4b3c      	ldr	r3, [pc, #240]	; (8003b40 <SEGGER_RTT_ReadNoLock+0x100>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <SEGGER_RTT_ReadNoLock+0x18>
 8003a54:	f7ff ffa2 	bl	800399c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	3360      	adds	r3, #96	; 0x60
 8003a64:	4a36      	ldr	r2, [pc, #216]	; (8003b40 <SEGGER_RTT_ReadNoLock+0x100>)
 8003a66:	4413      	add	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003a7e:	6a3a      	ldr	r2, [r7, #32]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d92a      	bls.n	8003adc <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bf28      	it	cs
 8003a98:	4613      	movcs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	69f8      	ldr	r0, [r7, #28]
 8003aaa:	f002 f9de 	bl	8005e6a <memcpy>
    NumBytesRead += NumBytesRem;
 8003aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4413      	add	r3, r2
 8003abc:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ac6:	6a3a      	ldr	r2, [r7, #32]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	6a3a      	ldr	r2, [r7, #32]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d101      	bne.n	8003adc <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	bf28      	it	cs
 8003aec:	4613      	movcs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d018      	beq.n	8003b28 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	4413      	add	r3, r2
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4619      	mov	r1, r3
 8003b02:	69f8      	ldr	r0, [r7, #28]
 8003b04:	f002 f9b1 	bl	8005e6a <memcpy>
    NumBytesRead += NumBytesRem;
 8003b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4413      	add	r3, r2
 8003b16:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b20:	6a3a      	ldr	r2, [r7, #32]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4413      	add	r3, r2
 8003b26:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3728      	adds	r7, #40	; 0x28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	2001554c 	.word	0x2001554c

08003b44 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	; 0x28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4a3f      	ldr	r2, [pc, #252]	; (8003c60 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8003b62:	4413      	add	r3, r2
 8003b64:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d854      	bhi.n	8003c24 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d30f      	bcc.n	8003bae <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	4413      	add	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f002 f965 	bl	8005e6a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	441a      	add	r2, r3
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e054      	b.n	8003c58 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d34b      	bcc.n	8003c56 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d90e      	bls.n	8003bee <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f002 f944 	bl	8005e6a <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	441a      	add	r2, r3
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	60da      	str	r2, [r3, #12]
 8003bec:	e018      	b.n	8003c20 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f002 f935 	bl	8005e6a <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	6858      	ldr	r0, [r3, #4]
 8003c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	18d1      	adds	r1, r2, r3
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	f002 f92a 	bl	8005e6a <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad2      	subs	r2, r2, r3
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e019      	b.n	8003c58 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d30f      	bcc.n	8003c56 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c42:	4618      	mov	r0, r3
 8003c44:	f002 f911 	bl	8005e6a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	441a      	add	r2, r3
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3728      	adds	r7, #40	; 0x28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	2001554c 	.word	0x2001554c

08003c64 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003c72:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8003c7a:	f7ff fe8f 	bl	800399c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	; (8003d34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d24c      	bcs.n	8003d24 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8003c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8003c8e:	f04f 0120 	mov.w	r1, #32
 8003c92:	f381 8811 	msr	BASEPRI, r1
 8003c96:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d032      	beq.n	8003d04 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003c9e:	4925      	ldr	r1, [pc, #148]	; (8003d34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	440b      	add	r3, r1
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003cb2:	4920      	ldr	r1, [pc, #128]	; (8003d34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003cc8:	491a      	ldr	r1, [pc, #104]	; (8003d34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3320      	adds	r3, #32
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003cdc:	4915      	ldr	r1, [pc, #84]	; (8003d34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	440b      	add	r3, r1
 8003cea:	3328      	adds	r3, #40	; 0x28
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003cf0:	4910      	ldr	r1, [pc, #64]	; (8003d34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3324      	adds	r3, #36	; 0x24
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8003d04:	490b      	ldr	r1, [pc, #44]	; (8003d34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	440b      	add	r3, r1
 8003d12:	332c      	adds	r3, #44	; 0x2c
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	e002      	b.n	8003d2a <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295
 8003d28:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003d2a:	697b      	ldr	r3, [r7, #20]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2001554c 	.word	0x2001554c

08003d38 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003d46:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003d4e:	f7ff fe25 	bl	800399c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8003d52:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d24b      	bcs.n	8003df6 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8003d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d62:	f04f 0120 	mov.w	r1, #32
 8003d66:	f381 8811 	msr	BASEPRI, r1
 8003d6a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d031      	beq.n	8003dd6 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8003d72:	4925      	ldr	r1, [pc, #148]	; (8003e08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	440b      	add	r3, r1
 8003d80:	3360      	adds	r3, #96	; 0x60
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003d86:	4920      	ldr	r1, [pc, #128]	; (8003e08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	440b      	add	r3, r1
 8003d94:	3364      	adds	r3, #100	; 0x64
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003d9a:	491b      	ldr	r1, [pc, #108]	; (8003e08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	440b      	add	r3, r1
 8003da8:	3368      	adds	r3, #104	; 0x68
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003dae:	4916      	ldr	r1, [pc, #88]	; (8003e08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4613      	mov	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	3370      	adds	r3, #112	; 0x70
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8003dc2:	4911      	ldr	r1, [pc, #68]	; (8003e08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	440b      	add	r3, r1
 8003dd0:	336c      	adds	r3, #108	; 0x6c
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8003dd6:	490c      	ldr	r1, [pc, #48]	; (8003e08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	440b      	add	r3, r1
 8003de4:	3374      	adds	r3, #116	; 0x74
 8003de6:	6a3a      	ldr	r2, [r7, #32]
 8003de8:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	e002      	b.n	8003dfc <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfa:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003dfc:	697b      	ldr	r3, [r7, #20]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	2001554c 	.word	0x2001554c

08003e0c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003e1c:	e002      	b.n	8003e24 <_EncodeStr+0x18>
    Len++;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	3301      	adds	r3, #1
 8003e22:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f6      	bne.n	8003e1e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d901      	bls.n	8003e3c <_EncodeStr+0x30>
    Len = Limit;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2bfe      	cmp	r3, #254	; 0xfe
 8003e40:	d806      	bhi.n	8003e50 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	60fa      	str	r2, [r7, #12]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	e011      	b.n	8003e74 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	60fa      	str	r2, [r7, #12]
 8003e56:	22ff      	movs	r2, #255	; 0xff
 8003e58:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	60fa      	str	r2, [r7, #12]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	0a19      	lsrs	r1, r3, #8
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	60fa      	str	r2, [r7, #12]
 8003e70:	b2ca      	uxtb	r2, r1
 8003e72:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003e78:	e00a      	b.n	8003e90 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	1c53      	adds	r3, r2, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1c59      	adds	r1, r3, #1
 8003e84:	60f9      	str	r1, [r7, #12]
 8003e86:	7812      	ldrb	r2, [r2, #0]
 8003e88:	701a      	strb	r2, [r3, #0]
    n++;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d3f0      	bcc.n	8003e7a <_EncodeStr+0x6e>
  }
  return pPayload;
 8003e98:	68fb      	ldr	r3, [r7, #12]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ec4:	1cfb      	adds	r3, r7, #3
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	4619      	mov	r1, r3
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f7ff fdb8 	bl	8003a40 <SEGGER_RTT_ReadNoLock>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	dd44      	ble.n	8003f64 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d01a      	beq.n	8003f16 <_HandleIncomingPacket+0x58>
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	dc06      	bgt.n	8003ef2 <_HandleIncomingPacket+0x34>
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d010      	beq.n	8003f0a <_HandleIncomingPacket+0x4c>
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	dc11      	bgt.n	8003f10 <_HandleIncomingPacket+0x52>
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d009      	beq.n	8003f04 <_HandleIncomingPacket+0x46>
 8003ef0:	e02d      	b.n	8003f4e <_HandleIncomingPacket+0x90>
 8003ef2:	2b06      	cmp	r3, #6
 8003ef4:	d015      	beq.n	8003f22 <_HandleIncomingPacket+0x64>
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	db10      	blt.n	8003f1c <_HandleIncomingPacket+0x5e>
 8003efa:	2b07      	cmp	r3, #7
 8003efc:	d014      	beq.n	8003f28 <_HandleIncomingPacket+0x6a>
 8003efe:	2b80      	cmp	r3, #128	; 0x80
 8003f00:	d015      	beq.n	8003f2e <_HandleIncomingPacket+0x70>
 8003f02:	e024      	b.n	8003f4e <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003f04:	f000 fc34 	bl	8004770 <SEGGER_SYSVIEW_Start>
      break;
 8003f08:	e031      	b.n	8003f6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003f0a:	f000 fced 	bl	80048e8 <SEGGER_SYSVIEW_Stop>
      break;
 8003f0e:	e02e      	b.n	8003f6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003f10:	f000 fec8 	bl	8004ca4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003f14:	e02b      	b.n	8003f6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003f16:	f000 fe8d 	bl	8004c34 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003f1a:	e028      	b.n	8003f6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003f1c:	f000 fd0a 	bl	8004934 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003f20:	e025      	b.n	8003f6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003f22:	f001 f961 	bl	80051e8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003f26:	e022      	b.n	8003f6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003f28:	f001 f940 	bl	80051ac <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003f2c:	e01f      	b.n	8003f6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f2e:	1cfb      	adds	r3, r7, #3
 8003f30:	2201      	movs	r2, #1
 8003f32:	4619      	mov	r1, r3
 8003f34:	2001      	movs	r0, #1
 8003f36:	f7ff fd83 	bl	8003a40 <SEGGER_RTT_ReadNoLock>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	dd11      	ble.n	8003f68 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 f8b0 	bl	80050ac <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003f4c:	e00c      	b.n	8003f68 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	da0a      	bge.n	8003f6c <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f56:	1cfb      	adds	r3, r7, #3
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	f7ff fd6f 	bl	8003a40 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003f62:	e003      	b.n	8003f6c <_HandleIncomingPacket+0xae>
    }
  }
 8003f64:	bf00      	nop
 8003f66:	e002      	b.n	8003f6e <_HandleIncomingPacket+0xb0>
      break;
 8003f68:	bf00      	nop
 8003f6a:	e000      	b.n	8003f6e <_HandleIncomingPacket+0xb0>
      break;
 8003f6c:	bf00      	nop
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	; 0x30
 8003f7c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003f7e:	2301      	movs	r3, #1
 8003f80:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	3301      	adds	r3, #1
 8003f86:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f8c:	4b30      	ldr	r3, [pc, #192]	; (8004050 <_TrySendOverflowPacket+0xd8>)
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f92:	e00b      	b.n	8003fac <_TrySendOverflowPacket+0x34>
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	1c59      	adds	r1, r3, #1
 8003f9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	09db      	lsrs	r3, r3, #7
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	2b7f      	cmp	r3, #127	; 0x7f
 8003fb0:	d8f0      	bhi.n	8003f94 <_TrySendOverflowPacket+0x1c>
 8003fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <_TrySendOverflowPacket+0xdc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003fc8:	4b21      	ldr	r3, [pc, #132]	; (8004050 <_TrySendOverflowPacket+0xd8>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	623b      	str	r3, [r7, #32]
 8003fda:	e00b      	b.n	8003ff4 <_TrySendOverflowPacket+0x7c>
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	1c59      	adds	r1, r3, #1
 8003fe4:	6279      	str	r1, [r7, #36]	; 0x24
 8003fe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	09db      	lsrs	r3, r3, #7
 8003ff2:	623b      	str	r3, [r7, #32]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ff8:	d8f0      	bhi.n	8003fdc <_TrySendOverflowPacket+0x64>
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	627a      	str	r2, [r7, #36]	; 0x24
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	461a      	mov	r2, r3
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	4619      	mov	r1, r3
 8004016:	2001      	movs	r0, #1
 8004018:	f7ff fd94 	bl	8003b44 <SEGGER_RTT_WriteSkipNoLock>
 800401c:	4603      	mov	r3, r0
 800401e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004026:	4a0a      	ldr	r2, [pc, #40]	; (8004050 <_TrySendOverflowPacket+0xd8>)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <_TrySendOverflowPacket+0xd8>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	3b01      	subs	r3, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <_TrySendOverflowPacket+0xd8>)
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e004      	b.n	8004044 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <_TrySendOverflowPacket+0xd8>)
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	3301      	adds	r3, #1
 8004040:	4a03      	ldr	r2, [pc, #12]	; (8004050 <_TrySendOverflowPacket+0xd8>)
 8004042:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004044:	693b      	ldr	r3, [r7, #16]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3730      	adds	r7, #48	; 0x30
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200153cc 	.word	0x200153cc
 8004054:	e0001004 	.word	0xe0001004

08004058 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004064:	4b63      	ldr	r3, [pc, #396]	; (80041f4 <_SendPacket+0x19c>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d010      	beq.n	800408e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800406c:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <_SendPacket+0x19c>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80a1 	beq.w	80041b8 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004076:	4b5f      	ldr	r3, [pc, #380]	; (80041f4 <_SendPacket+0x19c>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d109      	bne.n	8004092 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800407e:	f7ff ff7b 	bl	8003f78 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004082:	4b5c      	ldr	r3, [pc, #368]	; (80041f4 <_SendPacket+0x19c>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	f040 8098 	bne.w	80041bc <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800408c:	e001      	b.n	8004092 <_SendPacket+0x3a>
    goto Send;
 800408e:	bf00      	nop
 8004090:	e000      	b.n	8004094 <_SendPacket+0x3c>
Send:
 8004092:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b1f      	cmp	r3, #31
 8004098:	d809      	bhi.n	80040ae <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800409a:	4b56      	ldr	r3, [pc, #344]	; (80041f4 <_SendPacket+0x19c>)
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f040 8089 	bne.w	80041c0 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b17      	cmp	r3, #23
 80040b2:	d807      	bhi.n	80040c4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e03d      	b.n	8004140 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b7f      	cmp	r3, #127	; 0x7f
 80040d0:	d912      	bls.n	80040f8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	09da      	lsrs	r2, r3, #7
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	3a01      	subs	r2, #1
 80040ea:	60fa      	str	r2, [r7, #12]
 80040ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e006      	b.n	8004106 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	b2da      	uxtb	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b7f      	cmp	r3, #127	; 0x7f
 800410a:	d912      	bls.n	8004132 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	09da      	lsrs	r2, r3, #7
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3b01      	subs	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	3a01      	subs	r2, #1
 8004124:	60fa      	str	r2, [r7, #12]
 8004126:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800412a:	b2da      	uxtb	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e006      	b.n	8004140 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b01      	subs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004140:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <_SendPacket+0x1a0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004146:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <_SendPacket+0x19c>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	e00b      	b.n	8004172 <_SendPacket+0x11a>
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	1c59      	adds	r1, r3, #1
 8004162:	6279      	str	r1, [r7, #36]	; 0x24
 8004164:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	09db      	lsrs	r3, r3, #7
 8004170:	623b      	str	r3, [r7, #32]
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	2b7f      	cmp	r3, #127	; 0x7f
 8004176:	d8f0      	bhi.n	800415a <_SendPacket+0x102>
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	627a      	str	r2, [r7, #36]	; 0x24
 800417e:	6a3a      	ldr	r2, [r7, #32]
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	461a      	mov	r2, r3
 8004190:	68f9      	ldr	r1, [r7, #12]
 8004192:	2001      	movs	r0, #1
 8004194:	f7ff fcd6 	bl	8003b44 <SEGGER_RTT_WriteSkipNoLock>
 8004198:	4603      	mov	r3, r0
 800419a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80041a2:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <_SendPacket+0x19c>)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	60d3      	str	r3, [r2, #12]
 80041a8:	e00b      	b.n	80041c2 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80041aa:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <_SendPacket+0x19c>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <_SendPacket+0x19c>)
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e004      	b.n	80041c2 <_SendPacket+0x16a>
    goto SendDone;
 80041b8:	bf00      	nop
 80041ba:	e002      	b.n	80041c2 <_SendPacket+0x16a>
      goto SendDone;
 80041bc:	bf00      	nop
 80041be:	e000      	b.n	80041c2 <_SendPacket+0x16a>
      goto SendDone;
 80041c0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <_SendPacket+0x1a4>)
 80041c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <_SendPacket+0x1a4>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d00b      	beq.n	80041ea <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80041d2:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <_SendPacket+0x19c>)
 80041d4:	789b      	ldrb	r3, [r3, #2]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d107      	bne.n	80041ea <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <_SendPacket+0x19c>)
 80041dc:	2201      	movs	r2, #1
 80041de:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80041e0:	f7ff fe6d 	bl	8003ebe <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <_SendPacket+0x19c>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80041ea:	bf00      	nop
 80041ec:	3728      	adds	r7, #40	; 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200153cc 	.word	0x200153cc
 80041f8:	e0001004 	.word	0xe0001004
 80041fc:	2001554c 	.word	0x2001554c

08004200 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800420e:	2300      	movs	r3, #0
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004216:	4a14      	ldr	r2, [pc, #80]	; (8004268 <SEGGER_SYSVIEW_Init+0x68>)
 8004218:	4914      	ldr	r1, [pc, #80]	; (800426c <SEGGER_SYSVIEW_Init+0x6c>)
 800421a:	2001      	movs	r0, #1
 800421c:	f7ff fd22 	bl	8003c64 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004220:	2300      	movs	r3, #0
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2308      	movs	r3, #8
 8004226:	4a12      	ldr	r2, [pc, #72]	; (8004270 <SEGGER_SYSVIEW_Init+0x70>)
 8004228:	4910      	ldr	r1, [pc, #64]	; (800426c <SEGGER_SYSVIEW_Init+0x6c>)
 800422a:	2001      	movs	r0, #1
 800422c:	f7ff fd84 	bl	8003d38 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004230:	4b10      	ldr	r3, [pc, #64]	; (8004274 <SEGGER_SYSVIEW_Init+0x74>)
 8004232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004236:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <SEGGER_SYSVIEW_Init+0x78>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <SEGGER_SYSVIEW_Init+0x74>)
 800423e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004240:	4a0c      	ldr	r2, [pc, #48]	; (8004274 <SEGGER_SYSVIEW_Init+0x74>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004246:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <SEGGER_SYSVIEW_Init+0x74>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800424c:	4a09      	ldr	r2, [pc, #36]	; (8004274 <SEGGER_SYSVIEW_Init+0x74>)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004252:	4a08      	ldr	r2, [pc, #32]	; (8004274 <SEGGER_SYSVIEW_Init+0x74>)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <SEGGER_SYSVIEW_Init+0x74>)
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	200133c4 	.word	0x200133c4
 800426c:	080067c8 	.word	0x080067c8
 8004270:	200153c4 	.word	0x200153c4
 8004274:	200153cc 	.word	0x200153cc
 8004278:	e0001004 	.word	0xe0001004

0800427c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004284:	4a04      	ldr	r2, [pc, #16]	; (8004298 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6113      	str	r3, [r2, #16]
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	200153cc 	.word	0x200153cc

0800429c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80042a4:	f3ef 8311 	mrs	r3, BASEPRI
 80042a8:	f04f 0120 	mov.w	r1, #32
 80042ac:	f381 8811 	msr	BASEPRI, r1
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	4808      	ldr	r0, [pc, #32]	; (80042d4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80042b4:	f7ff fdf7 	bl	8003ea6 <_PreparePacket>
 80042b8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	68b8      	ldr	r0, [r7, #8]
 80042c0:	f7ff feca 	bl	8004058 <_SendPacket>
  RECORD_END();
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f383 8811 	msr	BASEPRI, r3
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	200153fc 	.word	0x200153fc

080042d8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042e2:	f3ef 8311 	mrs	r3, BASEPRI
 80042e6:	f04f 0120 	mov.w	r1, #32
 80042ea:	f381 8811 	msr	BASEPRI, r1
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	4816      	ldr	r0, [pc, #88]	; (800434c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80042f2:	f7ff fdd8 	bl	8003ea6 <_PreparePacket>
 80042f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	e00b      	b.n	800431e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	1c59      	adds	r1, r3, #1
 800430e:	61f9      	str	r1, [r7, #28]
 8004310:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	09db      	lsrs	r3, r3, #7
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b7f      	cmp	r3, #127	; 0x7f
 8004322:	d8f0      	bhi.n	8004306 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	61fa      	str	r2, [r7, #28]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68f9      	ldr	r1, [r7, #12]
 8004338:	6938      	ldr	r0, [r7, #16]
 800433a:	f7ff fe8d 	bl	8004058 <_SendPacket>
  RECORD_END();
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f383 8811 	msr	BASEPRI, r3
}
 8004344:	bf00      	nop
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	200153fc 	.word	0x200153fc

08004350 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b08c      	sub	sp, #48	; 0x30
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800435c:	f3ef 8311 	mrs	r3, BASEPRI
 8004360:	f04f 0120 	mov.w	r1, #32
 8004364:	f381 8811 	msr	BASEPRI, r1
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	4825      	ldr	r0, [pc, #148]	; (8004400 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800436c:	f7ff fd9b 	bl	8003ea6 <_PreparePacket>
 8004370:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
 800437e:	e00b      	b.n	8004398 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	b2da      	uxtb	r2, r3
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	1c59      	adds	r1, r3, #1
 8004388:	62f9      	str	r1, [r7, #44]	; 0x2c
 800438a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	09db      	lsrs	r3, r3, #7
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2b7f      	cmp	r3, #127	; 0x7f
 800439c:	d8f0      	bhi.n	8004380 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	623b      	str	r3, [r7, #32]
 80043b6:	e00b      	b.n	80043d0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	1c59      	adds	r1, r3, #1
 80043c0:	6279      	str	r1, [r7, #36]	; 0x24
 80043c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	09db      	lsrs	r3, r3, #7
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	2b7f      	cmp	r3, #127	; 0x7f
 80043d4:	d8f0      	bhi.n	80043b8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	627a      	str	r2, [r7, #36]	; 0x24
 80043dc:	6a3a      	ldr	r2, [r7, #32]
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	6979      	ldr	r1, [r7, #20]
 80043ea:	69b8      	ldr	r0, [r7, #24]
 80043ec:	f7ff fe34 	bl	8004058 <_SendPacket>
  RECORD_END();
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f383 8811 	msr	BASEPRI, r3
}
 80043f6:	bf00      	nop
 80043f8:	3730      	adds	r7, #48	; 0x30
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	200153fc 	.word	0x200153fc

08004404 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b08e      	sub	sp, #56	; 0x38
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004412:	f3ef 8311 	mrs	r3, BASEPRI
 8004416:	f04f 0120 	mov.w	r1, #32
 800441a:	f381 8811 	msr	BASEPRI, r1
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	4832      	ldr	r0, [pc, #200]	; (80044ec <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004422:	f7ff fd40 	bl	8003ea6 <_PreparePacket>
 8004426:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	637b      	str	r3, [r7, #52]	; 0x34
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	633b      	str	r3, [r7, #48]	; 0x30
 8004434:	e00b      	b.n	800444e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	b2da      	uxtb	r2, r3
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	1c59      	adds	r1, r3, #1
 800443e:	6379      	str	r1, [r7, #52]	; 0x34
 8004440:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	09db      	lsrs	r3, r3, #7
 800444c:	633b      	str	r3, [r7, #48]	; 0x30
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	2b7f      	cmp	r3, #127	; 0x7f
 8004452:	d8f0      	bhi.n	8004436 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	637a      	str	r2, [r7, #52]	; 0x34
 800445a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004462:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
 800446c:	e00b      	b.n	8004486 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	b2da      	uxtb	r2, r3
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	1c59      	adds	r1, r3, #1
 8004476:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	09db      	lsrs	r3, r3, #7
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	2b7f      	cmp	r3, #127	; 0x7f
 800448a:	d8f0      	bhi.n	800446e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	623b      	str	r3, [r7, #32]
 80044a4:	e00b      	b.n	80044be <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	1c59      	adds	r1, r3, #1
 80044ae:	6279      	str	r1, [r7, #36]	; 0x24
 80044b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	09db      	lsrs	r3, r3, #7
 80044bc:	623b      	str	r3, [r7, #32]
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	2b7f      	cmp	r3, #127	; 0x7f
 80044c2:	d8f0      	bhi.n	80044a6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	627a      	str	r2, [r7, #36]	; 0x24
 80044ca:	6a3a      	ldr	r2, [r7, #32]
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	6979      	ldr	r1, [r7, #20]
 80044d8:	69b8      	ldr	r0, [r7, #24]
 80044da:	f7ff fdbd 	bl	8004058 <_SendPacket>
  RECORD_END();
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f383 8811 	msr	BASEPRI, r3
}
 80044e4:	bf00      	nop
 80044e6:	3738      	adds	r7, #56	; 0x38
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	200153fc 	.word	0x200153fc

080044f0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b090      	sub	sp, #64	; 0x40
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80044fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004502:	f04f 0120 	mov.w	r1, #32
 8004506:	f381 8811 	msr	BASEPRI, r1
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	4840      	ldr	r0, [pc, #256]	; (8004610 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800450e:	f7ff fcca 	bl	8003ea6 <_PreparePacket>
 8004512:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004520:	e00b      	b.n	800453a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	b2da      	uxtb	r2, r3
 8004526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004528:	1c59      	adds	r1, r3, #1
 800452a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800452c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004536:	09db      	lsrs	r3, r3, #7
 8004538:	63bb      	str	r3, [r7, #56]	; 0x38
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	2b7f      	cmp	r3, #127	; 0x7f
 800453e:	d8f0      	bhi.n	8004522 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
 8004558:	e00b      	b.n	8004572 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	b2da      	uxtb	r2, r3
 800455e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004560:	1c59      	adds	r1, r3, #1
 8004562:	6379      	str	r1, [r7, #52]	; 0x34
 8004564:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	09db      	lsrs	r3, r3, #7
 8004570:	633b      	str	r3, [r7, #48]	; 0x30
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	2b7f      	cmp	r3, #127	; 0x7f
 8004576:	d8f0      	bhi.n	800455a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	637a      	str	r2, [r7, #52]	; 0x34
 800457e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004586:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004590:	e00b      	b.n	80045aa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	b2da      	uxtb	r2, r3
 8004596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004598:	1c59      	adds	r1, r3, #1
 800459a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800459c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	09db      	lsrs	r3, r3, #7
 80045a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	2b7f      	cmp	r3, #127	; 0x7f
 80045ae:	d8f0      	bhi.n	8004592 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
 80045c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c6:	623b      	str	r3, [r7, #32]
 80045c8:	e00b      	b.n	80045e2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	1c59      	adds	r1, r3, #1
 80045d2:	6279      	str	r1, [r7, #36]	; 0x24
 80045d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	09db      	lsrs	r3, r3, #7
 80045e0:	623b      	str	r3, [r7, #32]
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	2b7f      	cmp	r3, #127	; 0x7f
 80045e6:	d8f0      	bhi.n	80045ca <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	627a      	str	r2, [r7, #36]	; 0x24
 80045ee:	6a3a      	ldr	r2, [r7, #32]
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	6979      	ldr	r1, [r7, #20]
 80045fc:	69b8      	ldr	r0, [r7, #24]
 80045fe:	f7ff fd2b 	bl	8004058 <_SendPacket>
  RECORD_END();
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f383 8811 	msr	BASEPRI, r3
}
 8004608:	bf00      	nop
 800460a:	3740      	adds	r7, #64	; 0x40
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	200153fc 	.word	0x200153fc

08004614 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b092      	sub	sp, #72	; 0x48
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8004622:	f3ef 8311 	mrs	r3, BASEPRI
 8004626:	f04f 0120 	mov.w	r1, #32
 800462a:	f381 8811 	msr	BASEPRI, r1
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	484e      	ldr	r0, [pc, #312]	; (800476c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8004632:	f7ff fc38 	bl	8003ea6 <_PreparePacket>
 8004636:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	647b      	str	r3, [r7, #68]	; 0x44
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	643b      	str	r3, [r7, #64]	; 0x40
 8004644:	e00b      	b.n	800465e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8004646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004648:	b2da      	uxtb	r2, r3
 800464a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800464c:	1c59      	adds	r1, r3, #1
 800464e:	6479      	str	r1, [r7, #68]	; 0x44
 8004650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800465a:	09db      	lsrs	r3, r3, #7
 800465c:	643b      	str	r3, [r7, #64]	; 0x40
 800465e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004660:	2b7f      	cmp	r3, #127	; 0x7f
 8004662:	d8f0      	bhi.n	8004646 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8004664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	647a      	str	r2, [r7, #68]	; 0x44
 800466a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004672:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	63bb      	str	r3, [r7, #56]	; 0x38
 800467c:	e00b      	b.n	8004696 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	b2da      	uxtb	r2, r3
 8004682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004684:	1c59      	adds	r1, r3, #1
 8004686:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	09db      	lsrs	r3, r3, #7
 8004694:	63bb      	str	r3, [r7, #56]	; 0x38
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	2b7f      	cmp	r3, #127	; 0x7f
 800469a:	d8f0      	bhi.n	800467e <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800469c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	633b      	str	r3, [r7, #48]	; 0x30
 80046b4:	e00b      	b.n	80046ce <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046bc:	1c59      	adds	r1, r3, #1
 80046be:	6379      	str	r1, [r7, #52]	; 0x34
 80046c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	09db      	lsrs	r3, r3, #7
 80046cc:	633b      	str	r3, [r7, #48]	; 0x30
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	2b7f      	cmp	r3, #127	; 0x7f
 80046d2:	d8f0      	bhi.n	80046b6 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80046d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	637a      	str	r2, [r7, #52]	; 0x34
 80046da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ec:	e00b      	b.n	8004706 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	1c59      	adds	r1, r3, #1
 80046f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	09db      	lsrs	r3, r3, #7
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	2b7f      	cmp	r3, #127	; 0x7f
 800470a:	d8f0      	bhi.n	80046ee <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
 8004720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004722:	623b      	str	r3, [r7, #32]
 8004724:	e00b      	b.n	800473e <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	1c59      	adds	r1, r3, #1
 800472e:	6279      	str	r1, [r7, #36]	; 0x24
 8004730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	09db      	lsrs	r3, r3, #7
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	2b7f      	cmp	r3, #127	; 0x7f
 8004742:	d8f0      	bhi.n	8004726 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	627a      	str	r2, [r7, #36]	; 0x24
 800474a:	6a3a      	ldr	r2, [r7, #32]
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	6979      	ldr	r1, [r7, #20]
 8004758:	69b8      	ldr	r0, [r7, #24]
 800475a:	f7ff fc7d 	bl	8004058 <_SendPacket>
  RECORD_END();
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f383 8811 	msr	BASEPRI, r3
}
 8004764:	bf00      	nop
 8004766:	3748      	adds	r7, #72	; 0x48
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	200153fc 	.word	0x200153fc

08004770 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b08c      	sub	sp, #48	; 0x30
 8004774:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004776:	4b59      	ldr	r3, [pc, #356]	; (80048dc <SEGGER_SYSVIEW_Start+0x16c>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 80aa 	bne.w	80048d4 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8004780:	4b56      	ldr	r3, [pc, #344]	; (80048dc <SEGGER_SYSVIEW_Start+0x16c>)
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004786:	f3ef 8311 	mrs	r3, BASEPRI
 800478a:	f04f 0120 	mov.w	r1, #32
 800478e:	f381 8811 	msr	BASEPRI, r1
 8004792:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004794:	220a      	movs	r2, #10
 8004796:	4952      	ldr	r1, [pc, #328]	; (80048e0 <SEGGER_SYSVIEW_Start+0x170>)
 8004798:	2001      	movs	r0, #1
 800479a:	f7ff f9d3 	bl	8003b44 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80047a4:	200a      	movs	r0, #10
 80047a6:	f7ff fd79 	bl	800429c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80047aa:	f3ef 8311 	mrs	r3, BASEPRI
 80047ae:	f04f 0120 	mov.w	r1, #32
 80047b2:	f381 8811 	msr	BASEPRI, r1
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	484a      	ldr	r0, [pc, #296]	; (80048e4 <SEGGER_SYSVIEW_Start+0x174>)
 80047ba:	f7ff fb74 	bl	8003ea6 <_PreparePacket>
 80047be:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c8:	4b44      	ldr	r3, [pc, #272]	; (80048dc <SEGGER_SYSVIEW_Start+0x16c>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ce:	e00b      	b.n	80047e8 <SEGGER_SYSVIEW_Start+0x78>
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	1c59      	adds	r1, r3, #1
 80047d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80047da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	09db      	lsrs	r3, r3, #7
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	2b7f      	cmp	r3, #127	; 0x7f
 80047ec:	d8f0      	bhi.n	80047d0 <SEGGER_SYSVIEW_Start+0x60>
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
 8004802:	4b36      	ldr	r3, [pc, #216]	; (80048dc <SEGGER_SYSVIEW_Start+0x16c>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	e00b      	b.n	8004822 <SEGGER_SYSVIEW_Start+0xb2>
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	1c59      	adds	r1, r3, #1
 8004812:	6279      	str	r1, [r7, #36]	; 0x24
 8004814:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	09db      	lsrs	r3, r3, #7
 8004820:	623b      	str	r3, [r7, #32]
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	2b7f      	cmp	r3, #127	; 0x7f
 8004826:	d8f0      	bhi.n	800480a <SEGGER_SYSVIEW_Start+0x9a>
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	627a      	str	r2, [r7, #36]	; 0x24
 800482e:	6a3a      	ldr	r2, [r7, #32]
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <SEGGER_SYSVIEW_Start+0x16c>)
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e00b      	b.n	800485c <SEGGER_SYSVIEW_Start+0xec>
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	b2da      	uxtb	r2, r3
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	1c59      	adds	r1, r3, #1
 800484c:	61f9      	str	r1, [r7, #28]
 800484e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	09db      	lsrs	r3, r3, #7
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b7f      	cmp	r3, #127	; 0x7f
 8004860:	d8f0      	bhi.n	8004844 <SEGGER_SYSVIEW_Start+0xd4>
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	61fa      	str	r2, [r7, #28]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	2302      	movs	r3, #2
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	e00b      	b.n	8004894 <SEGGER_SYSVIEW_Start+0x124>
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1c59      	adds	r1, r3, #1
 8004884:	6179      	str	r1, [r7, #20]
 8004886:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	09db      	lsrs	r3, r3, #7
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b7f      	cmp	r3, #127	; 0x7f
 8004898:	d8f0      	bhi.n	800487c <SEGGER_SYSVIEW_Start+0x10c>
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	617a      	str	r2, [r7, #20]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80048aa:	2218      	movs	r2, #24
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fbd2 	bl	8004058 <_SendPacket>
      RECORD_END();
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <SEGGER_SYSVIEW_Start+0x16c>)
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <SEGGER_SYSVIEW_Start+0x16c>)
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80048c8:	f000 f9ec 	bl	8004ca4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80048cc:	f000 f9b2 	bl	8004c34 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80048d0:	f000 fc8a 	bl	80051e8 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 80048d4:	bf00      	nop
 80048d6:	3730      	adds	r7, #48	; 0x30
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	200153cc 	.word	0x200153cc
 80048e0:	080068d0 	.word	0x080068d0
 80048e4:	200153fc 	.word	0x200153fc

080048e8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048ee:	f3ef 8311 	mrs	r3, BASEPRI
 80048f2:	f04f 0120 	mov.w	r1, #32
 80048f6:	f381 8811 	msr	BASEPRI, r1
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	480b      	ldr	r0, [pc, #44]	; (800492c <SEGGER_SYSVIEW_Stop+0x44>)
 80048fe:	f7ff fad2 	bl	8003ea6 <_PreparePacket>
 8004902:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <SEGGER_SYSVIEW_Stop+0x48>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800490c:	220b      	movs	r2, #11
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	6838      	ldr	r0, [r7, #0]
 8004912:	f7ff fba1 	bl	8004058 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <SEGGER_SYSVIEW_Stop+0x48>)
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f383 8811 	msr	BASEPRI, r3
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	200153fc 	.word	0x200153fc
 8004930:	200153cc 	.word	0x200153cc

08004934 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004934:	b580      	push	{r7, lr}
 8004936:	b08c      	sub	sp, #48	; 0x30
 8004938:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800493a:	f3ef 8311 	mrs	r3, BASEPRI
 800493e:	f04f 0120 	mov.w	r1, #32
 8004942:	f381 8811 	msr	BASEPRI, r1
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	4845      	ldr	r0, [pc, #276]	; (8004a60 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800494a:	f7ff faac 	bl	8003ea6 <_PreparePacket>
 800494e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004958:	4b42      	ldr	r3, [pc, #264]	; (8004a64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	e00b      	b.n	8004978 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	b2da      	uxtb	r2, r3
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	1c59      	adds	r1, r3, #1
 8004968:	62f9      	str	r1, [r7, #44]	; 0x2c
 800496a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	09db      	lsrs	r3, r3, #7
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	2b7f      	cmp	r3, #127	; 0x7f
 800497c:	d8f0      	bhi.n	8004960 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
 8004992:	4b34      	ldr	r3, [pc, #208]	; (8004a64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	623b      	str	r3, [r7, #32]
 8004998:	e00b      	b.n	80049b2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	1c59      	adds	r1, r3, #1
 80049a2:	6279      	str	r1, [r7, #36]	; 0x24
 80049a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	09db      	lsrs	r3, r3, #7
 80049b0:	623b      	str	r3, [r7, #32]
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	2b7f      	cmp	r3, #127	; 0x7f
 80049b6:	d8f0      	bhi.n	800499a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	627a      	str	r2, [r7, #36]	; 0x24
 80049be:	6a3a      	ldr	r2, [r7, #32]
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	e00b      	b.n	80049ec <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	1c59      	adds	r1, r3, #1
 80049dc:	61f9      	str	r1, [r7, #28]
 80049de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	09db      	lsrs	r3, r3, #7
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b7f      	cmp	r3, #127	; 0x7f
 80049f0:	d8f0      	bhi.n	80049d4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	61fa      	str	r2, [r7, #28]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	2302      	movs	r3, #2
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e00b      	b.n	8004a24 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	6179      	str	r1, [r7, #20]
 8004a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	09db      	lsrs	r3, r3, #7
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b7f      	cmp	r3, #127	; 0x7f
 8004a28:	d8f0      	bhi.n	8004a0c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	617a      	str	r2, [r7, #20]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a3a:	2218      	movs	r2, #24
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	68b8      	ldr	r0, [r7, #8]
 8004a40:	f7ff fb0a 	bl	8004058 <_SendPacket>
  RECORD_END();
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004a52:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	4798      	blx	r3
  }
}
 8004a58:	bf00      	nop
 8004a5a:	3730      	adds	r7, #48	; 0x30
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	200153fc 	.word	0x200153fc
 8004a64:	200153cc 	.word	0x200153cc

08004a68 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b092      	sub	sp, #72	; 0x48
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004a70:	f3ef 8311 	mrs	r3, BASEPRI
 8004a74:	f04f 0120 	mov.w	r1, #32
 8004a78:	f381 8811 	msr	BASEPRI, r1
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	486b      	ldr	r0, [pc, #428]	; (8004c2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a80:	f7ff fa11 	bl	8003ea6 <_PreparePacket>
 8004a84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b67      	ldr	r3, [pc, #412]	; (8004c30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	089b      	lsrs	r3, r3, #2
 8004a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a9c:	e00b      	b.n	8004ab6 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8004a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa4:	1c59      	adds	r1, r3, #1
 8004aa6:	6479      	str	r1, [r7, #68]	; 0x44
 8004aa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab2:	09db      	lsrs	r3, r3, #7
 8004ab4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8004aba:	d8f0      	bhi.n	8004a9e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8004abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	647a      	str	r2, [r7, #68]	; 0x44
 8004ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad6:	e00b      	b.n	8004af0 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ade:	1c59      	adds	r1, r3, #1
 8004ae0:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004ae2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	09db      	lsrs	r3, r3, #7
 8004aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	2b7f      	cmp	r3, #127	; 0x7f
 8004af4:	d8f0      	bhi.n	8004ad8 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8004af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b04:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7ff f97c 	bl	8003e0c <_EncodeStr>
 8004b14:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004b16:	2209      	movs	r2, #9
 8004b18:	68f9      	ldr	r1, [r7, #12]
 8004b1a:	6938      	ldr	r0, [r7, #16]
 8004b1c:	f7ff fa9c 	bl	8004058 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	089b      	lsrs	r3, r3, #2
 8004b34:	633b      	str	r3, [r7, #48]	; 0x30
 8004b36:	e00b      	b.n	8004b50 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	1c59      	adds	r1, r3, #1
 8004b40:	6379      	str	r1, [r7, #52]	; 0x34
 8004b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	09db      	lsrs	r3, r3, #7
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	2b7f      	cmp	r3, #127	; 0x7f
 8004b54:	d8f0      	bhi.n	8004b38 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	637a      	str	r2, [r7, #52]	; 0x34
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b70:	e00b      	b.n	8004b8a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	1c59      	adds	r1, r3, #1
 8004b7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	09db      	lsrs	r3, r3, #7
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b8e:	d8f0      	bhi.n	8004b72 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	701a      	strb	r2, [r3, #0]
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	623b      	str	r3, [r7, #32]
 8004baa:	e00b      	b.n	8004bc4 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	1c59      	adds	r1, r3, #1
 8004bb4:	6279      	str	r1, [r7, #36]	; 0x24
 8004bb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	09db      	lsrs	r3, r3, #7
 8004bc2:	623b      	str	r3, [r7, #32]
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8004bc8:	d8f0      	bhi.n	8004bac <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	627a      	str	r2, [r7, #36]	; 0x24
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	61fb      	str	r3, [r7, #28]
 8004bde:	2300      	movs	r3, #0
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e00b      	b.n	8004bfc <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	1c59      	adds	r1, r3, #1
 8004bec:	61f9      	str	r1, [r7, #28]
 8004bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	09db      	lsrs	r3, r3, #7
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8004c00:	d8f0      	bhi.n	8004be4 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	61fa      	str	r2, [r7, #28]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004c12:	2215      	movs	r2, #21
 8004c14:	68f9      	ldr	r1, [r7, #12]
 8004c16:	6938      	ldr	r0, [r7, #16]
 8004c18:	f7ff fa1e 	bl	8004058 <_SendPacket>
  RECORD_END();
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f383 8811 	msr	BASEPRI, r3
}
 8004c22:	bf00      	nop
 8004c24:	3748      	adds	r7, #72	; 0x48
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	200153fc 	.word	0x200153fc
 8004c30:	200153cc 	.word	0x200153cc

08004c34 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004c4a:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4798      	blx	r3
  }
}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	200153cc 	.word	0x200153cc

08004c5c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c64:	f3ef 8311 	mrs	r3, BASEPRI
 8004c68:	f04f 0120 	mov.w	r1, #32
 8004c6c:	f381 8811 	msr	BASEPRI, r1
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	480b      	ldr	r0, [pc, #44]	; (8004ca0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004c74:	f7ff f917 	bl	8003ea6 <_PreparePacket>
 8004c78:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c7a:	2280      	movs	r2, #128	; 0x80
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	6938      	ldr	r0, [r7, #16]
 8004c80:	f7ff f8c4 	bl	8003e0c <_EncodeStr>
 8004c84:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004c86:	220e      	movs	r2, #14
 8004c88:	68f9      	ldr	r1, [r7, #12]
 8004c8a:	6938      	ldr	r0, [r7, #16]
 8004c8c:	f7ff f9e4 	bl	8004058 <_SendPacket>
  RECORD_END();
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f383 8811 	msr	BASEPRI, r3
}
 8004c96:	bf00      	nop
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200153fc 	.word	0x200153fc

08004ca4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004caa:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d019      	beq.n	8004ce6 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8004cb2:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d014      	beq.n	8004ce6 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4798      	blx	r3
 8004cc4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004cc8:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004cca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	f04f 0400 	mov.w	r4, #0
 8004cd6:	0013      	movs	r3, r2
 8004cd8:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4601      	mov	r1, r0
 8004cde:	200d      	movs	r0, #13
 8004ce0:	f7ff fb36 	bl	8004350 <SEGGER_SYSVIEW_RecordU32x2>
 8004ce4:	e005      	b.n	8004cf2 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4619      	mov	r1, r3
 8004cec:	200c      	movs	r0, #12
 8004cee:	f7ff faf3 	bl	80042d8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd90      	pop	{r4, r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	200153cc 	.word	0x200153cc
 8004d00:	e0001004 	.word	0xe0001004

08004d04 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d0e:	f04f 0120 	mov.w	r1, #32
 8004d12:	f381 8811 	msr	BASEPRI, r1
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	4819      	ldr	r0, [pc, #100]	; (8004d80 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004d1a:	f7ff f8c4 	bl	8003ea6 <_PreparePacket>
 8004d1e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004d24:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	e00b      	b.n	8004d50 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1c59      	adds	r1, r3, #1
 8004d40:	6179      	str	r1, [r7, #20]
 8004d42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	09db      	lsrs	r3, r3, #7
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b7f      	cmp	r3, #127	; 0x7f
 8004d54:	d8f0      	bhi.n	8004d38 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	617a      	str	r2, [r7, #20]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004d66:	2202      	movs	r2, #2
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	68b8      	ldr	r0, [r7, #8]
 8004d6c:	f7ff f974 	bl	8004058 <_SendPacket>
  RECORD_END();
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f383 8811 	msr	BASEPRI, r3
}
 8004d76:	bf00      	nop
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	200153fc 	.word	0x200153fc
 8004d84:	e000ed04 	.word	0xe000ed04

08004d88 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d92:	f04f 0120 	mov.w	r1, #32
 8004d96:	f381 8811 	msr	BASEPRI, r1
 8004d9a:	607b      	str	r3, [r7, #4]
 8004d9c:	4807      	ldr	r0, [pc, #28]	; (8004dbc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004d9e:	f7ff f882 	bl	8003ea6 <_PreparePacket>
 8004da2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004da4:	2203      	movs	r2, #3
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	6838      	ldr	r0, [r7, #0]
 8004daa:	f7ff f955 	bl	8004058 <_SendPacket>
  RECORD_END();
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f383 8811 	msr	BASEPRI, r3
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	200153fc 	.word	0x200153fc

08004dc0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dca:	f04f 0120 	mov.w	r1, #32
 8004dce:	f381 8811 	msr	BASEPRI, r1
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	4807      	ldr	r0, [pc, #28]	; (8004df4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004dd6:	f7ff f866 	bl	8003ea6 <_PreparePacket>
 8004dda:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004ddc:	2212      	movs	r2, #18
 8004dde:	6839      	ldr	r1, [r7, #0]
 8004de0:	6838      	ldr	r0, [r7, #0]
 8004de2:	f7ff f939 	bl	8004058 <_SendPacket>
  RECORD_END();
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f383 8811 	msr	BASEPRI, r3
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	200153fc 	.word	0x200153fc

08004df8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8004e02:	f04f 0120 	mov.w	r1, #32
 8004e06:	f381 8811 	msr	BASEPRI, r1
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	4807      	ldr	r0, [pc, #28]	; (8004e2c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004e0e:	f7ff f84a 	bl	8003ea6 <_PreparePacket>
 8004e12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004e14:	2211      	movs	r2, #17
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	6838      	ldr	r0, [r7, #0]
 8004e1a:	f7ff f91d 	bl	8004058 <_SendPacket>
  RECORD_END();
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f383 8811 	msr	BASEPRI, r3
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	200153fc 	.word	0x200153fc

08004e30 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e38:	f3ef 8311 	mrs	r3, BASEPRI
 8004e3c:	f04f 0120 	mov.w	r1, #32
 8004e40:	f381 8811 	msr	BASEPRI, r1
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	481a      	ldr	r0, [pc, #104]	; (8004eb0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004e48:	f7ff f82d 	bl	8003ea6 <_PreparePacket>
 8004e4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e52:	4b18      	ldr	r3, [pc, #96]	; (8004eb4 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	61fb      	str	r3, [r7, #28]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	e00b      	b.n	8004e80 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	1c59      	adds	r1, r3, #1
 8004e70:	61f9      	str	r1, [r7, #28]
 8004e72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	09db      	lsrs	r3, r3, #7
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b7f      	cmp	r3, #127	; 0x7f
 8004e84:	d8f0      	bhi.n	8004e68 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	61fa      	str	r2, [r7, #28]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004e96:	2208      	movs	r2, #8
 8004e98:	68f9      	ldr	r1, [r7, #12]
 8004e9a:	6938      	ldr	r0, [r7, #16]
 8004e9c:	f7ff f8dc 	bl	8004058 <_SendPacket>
  RECORD_END();
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f383 8811 	msr	BASEPRI, r3
}
 8004ea6:	bf00      	nop
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	200153fc 	.word	0x200153fc
 8004eb4:	200153cc 	.word	0x200153cc

08004eb8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec4:	f04f 0120 	mov.w	r1, #32
 8004ec8:	f381 8811 	msr	BASEPRI, r1
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	481a      	ldr	r0, [pc, #104]	; (8004f38 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004ed0:	f7fe ffe9 	bl	8003ea6 <_PreparePacket>
 8004ed4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004eda:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	61bb      	str	r3, [r7, #24]
 8004eee:	e00b      	b.n	8004f08 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	1c59      	adds	r1, r3, #1
 8004ef8:	61f9      	str	r1, [r7, #28]
 8004efa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	09db      	lsrs	r3, r3, #7
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f0c:	d8f0      	bhi.n	8004ef0 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	61fa      	str	r2, [r7, #28]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004f1e:	2204      	movs	r2, #4
 8004f20:	68f9      	ldr	r1, [r7, #12]
 8004f22:	6938      	ldr	r0, [r7, #16]
 8004f24:	f7ff f898 	bl	8004058 <_SendPacket>
  RECORD_END();
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f383 8811 	msr	BASEPRI, r3
}
 8004f2e:	bf00      	nop
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	200153fc 	.word	0x200153fc
 8004f3c:	200153cc 	.word	0x200153cc

08004f40 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f48:	f3ef 8311 	mrs	r3, BASEPRI
 8004f4c:	f04f 0120 	mov.w	r1, #32
 8004f50:	f381 8811 	msr	BASEPRI, r1
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	481a      	ldr	r0, [pc, #104]	; (8004fc0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004f58:	f7fe ffa5 	bl	8003ea6 <_PreparePacket>
 8004f5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f62:	4b18      	ldr	r3, [pc, #96]	; (8004fc4 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	089b      	lsrs	r3, r3, #2
 8004f6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e00b      	b.n	8004f90 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	1c59      	adds	r1, r3, #1
 8004f80:	61f9      	str	r1, [r7, #28]
 8004f82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	09db      	lsrs	r3, r3, #7
 8004f8e:	61bb      	str	r3, [r7, #24]
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b7f      	cmp	r3, #127	; 0x7f
 8004f94:	d8f0      	bhi.n	8004f78 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	61fa      	str	r2, [r7, #28]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004fa6:	2206      	movs	r2, #6
 8004fa8:	68f9      	ldr	r1, [r7, #12]
 8004faa:	6938      	ldr	r0, [r7, #16]
 8004fac:	f7ff f854 	bl	8004058 <_SendPacket>
  RECORD_END();
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f383 8811 	msr	BASEPRI, r3
}
 8004fb6:	bf00      	nop
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	200153fc 	.word	0x200153fc
 8004fc4:	200153cc 	.word	0x200153cc

08004fc8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fd2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fd6:	f04f 0120 	mov.w	r1, #32
 8004fda:	f381 8811 	msr	BASEPRI, r1
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	4827      	ldr	r0, [pc, #156]	; (8005080 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004fe2:	f7fe ff60 	bl	8003ea6 <_PreparePacket>
 8004fe6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004fec:	4b25      	ldr	r3, [pc, #148]	; (8005084 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	089b      	lsrs	r3, r3, #2
 8004ff6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	623b      	str	r3, [r7, #32]
 8005000:	e00b      	b.n	800501a <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	1c59      	adds	r1, r3, #1
 800500a:	6279      	str	r1, [r7, #36]	; 0x24
 800500c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	09db      	lsrs	r3, r3, #7
 8005018:	623b      	str	r3, [r7, #32]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	2b7f      	cmp	r3, #127	; 0x7f
 800501e:	d8f0      	bhi.n	8005002 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	627a      	str	r2, [r7, #36]	; 0x24
 8005026:	6a3a      	ldr	r2, [r7, #32]
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	e00b      	b.n	8005052 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	1c59      	adds	r1, r3, #1
 8005042:	61f9      	str	r1, [r7, #28]
 8005044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	09db      	lsrs	r3, r3, #7
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b7f      	cmp	r3, #127	; 0x7f
 8005056:	d8f0      	bhi.n	800503a <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	61fa      	str	r2, [r7, #28]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005068:	2207      	movs	r2, #7
 800506a:	68f9      	ldr	r1, [r7, #12]
 800506c:	6938      	ldr	r0, [r7, #16]
 800506e:	f7fe fff3 	bl	8004058 <_SendPacket>
  RECORD_END();
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f383 8811 	msr	BASEPRI, r3
}
 8005078:	bf00      	nop
 800507a:	3728      	adds	r7, #40	; 0x28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	200153fc 	.word	0x200153fc
 8005084:	200153cc 	.word	0x200153cc

08005088 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	089b      	lsrs	r3, r3, #2
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	200153cc 	.word	0x200153cc

080050ac <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08c      	sub	sp, #48	; 0x30
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80050b6:	4b3b      	ldr	r3, [pc, #236]	; (80051a4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d06d      	beq.n	800519a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80050be:	4b39      	ldr	r3, [pc, #228]	; (80051a4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80050c4:	2300      	movs	r3, #0
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c8:	e008      	b.n	80050dc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	3301      	adds	r3, #1
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d3f2      	bcc.n	80050ca <SEGGER_SYSVIEW_SendModule+0x1e>
 80050e4:	e000      	b.n	80050e8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80050e6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d055      	beq.n	800519a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050ee:	f3ef 8311 	mrs	r3, BASEPRI
 80050f2:	f04f 0120 	mov.w	r1, #32
 80050f6:	f381 8811 	msr	BASEPRI, r1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	482a      	ldr	r0, [pc, #168]	; (80051a8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80050fe:	f7fe fed2 	bl	8003ea6 <_PreparePacket>
 8005102:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	623b      	str	r3, [r7, #32]
 8005110:	e00b      	b.n	800512a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	1c59      	adds	r1, r3, #1
 800511a:	6279      	str	r1, [r7, #36]	; 0x24
 800511c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	09db      	lsrs	r3, r3, #7
 8005128:	623b      	str	r3, [r7, #32]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	2b7f      	cmp	r3, #127	; 0x7f
 800512e:	d8f0      	bhi.n	8005112 <SEGGER_SYSVIEW_SendModule+0x66>
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	627a      	str	r2, [r7, #36]	; 0x24
 8005136:	6a3a      	ldr	r2, [r7, #32]
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	e00b      	b.n	8005164 <SEGGER_SYSVIEW_SendModule+0xb8>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	b2da      	uxtb	r2, r3
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	1c59      	adds	r1, r3, #1
 8005154:	61f9      	str	r1, [r7, #28]
 8005156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	09db      	lsrs	r3, r3, #7
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b7f      	cmp	r3, #127	; 0x7f
 8005168:	d8f0      	bhi.n	800514c <SEGGER_SYSVIEW_SendModule+0xa0>
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	61fa      	str	r2, [r7, #28]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2280      	movs	r2, #128	; 0x80
 8005180:	4619      	mov	r1, r3
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7fe fe42 	bl	8003e0c <_EncodeStr>
 8005188:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800518a:	2216      	movs	r2, #22
 800518c:	68f9      	ldr	r1, [r7, #12]
 800518e:	6938      	ldr	r0, [r7, #16]
 8005190:	f7fe ff62 	bl	8004058 <_SendPacket>
      RECORD_END();
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800519a:	bf00      	nop
 800519c:	3730      	adds	r7, #48	; 0x30
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	200153f4 	.word	0x200153f4
 80051a8:	200153fc 	.word	0x200153fc

080051ac <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00f      	beq.n	80051da <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80051ba:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f2      	bne.n	80051c0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	200153f4 	.word	0x200153f4

080051e8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80051ee:	f3ef 8311 	mrs	r3, BASEPRI
 80051f2:	f04f 0120 	mov.w	r1, #32
 80051f6:	f381 8811 	msr	BASEPRI, r1
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	4817      	ldr	r0, [pc, #92]	; (800525c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80051fe:	f7fe fe52 	bl	8003ea6 <_PreparePacket>
 8005202:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	4b14      	ldr	r3, [pc, #80]	; (8005260 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	e00b      	b.n	800522c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	1c59      	adds	r1, r3, #1
 800521c:	6179      	str	r1, [r7, #20]
 800521e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	09db      	lsrs	r3, r3, #7
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b7f      	cmp	r3, #127	; 0x7f
 8005230:	d8f0      	bhi.n	8005214 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	617a      	str	r2, [r7, #20]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005242:	221b      	movs	r2, #27
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	68b8      	ldr	r0, [r7, #8]
 8005248:	f7fe ff06 	bl	8004058 <_SendPacket>
  RECORD_END();
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f383 8811 	msr	BASEPRI, r3
}
 8005252:	bf00      	nop
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200153fc 	.word	0x200153fc
 8005260:	200153f8 	.word	0x200153f8

08005264 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	; 0x28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800526c:	f3ef 8311 	mrs	r3, BASEPRI
 8005270:	f04f 0120 	mov.w	r1, #32
 8005274:	f381 8811 	msr	BASEPRI, r1
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	4827      	ldr	r0, [pc, #156]	; (8005318 <SEGGER_SYSVIEW_Warn+0xb4>)
 800527c:	f7fe fe13 	bl	8003ea6 <_PreparePacket>
 8005280:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005282:	2280      	movs	r2, #128	; 0x80
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	6938      	ldr	r0, [r7, #16]
 8005288:	f7fe fdc0 	bl	8003e0c <_EncodeStr>
 800528c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	2301      	movs	r3, #1
 8005294:	623b      	str	r3, [r7, #32]
 8005296:	e00b      	b.n	80052b0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	b2da      	uxtb	r2, r3
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	1c59      	adds	r1, r3, #1
 80052a0:	6279      	str	r1, [r7, #36]	; 0x24
 80052a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	09db      	lsrs	r3, r3, #7
 80052ae:	623b      	str	r3, [r7, #32]
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	2b7f      	cmp	r3, #127	; 0x7f
 80052b4:	d8f0      	bhi.n	8005298 <SEGGER_SYSVIEW_Warn+0x34>
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	627a      	str	r2, [r7, #36]	; 0x24
 80052bc:	6a3a      	ldr	r2, [r7, #32]
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	e00b      	b.n	80052e8 <SEGGER_SYSVIEW_Warn+0x84>
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	1c59      	adds	r1, r3, #1
 80052d8:	61f9      	str	r1, [r7, #28]
 80052da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	09db      	lsrs	r3, r3, #7
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b7f      	cmp	r3, #127	; 0x7f
 80052ec:	d8f0      	bhi.n	80052d0 <SEGGER_SYSVIEW_Warn+0x6c>
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	61fa      	str	r2, [r7, #28]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80052fe:	221a      	movs	r2, #26
 8005300:	68f9      	ldr	r1, [r7, #12]
 8005302:	6938      	ldr	r0, [r7, #16]
 8005304:	f7fe fea8 	bl	8004058 <_SendPacket>
  RECORD_END();
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f383 8811 	msr	BASEPRI, r3
}
 800530e:	bf00      	nop
 8005310:	3728      	adds	r7, #40	; 0x28
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	200153fc 	.word	0x200153fc

0800531c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	f003 021f 	and.w	r2, r3, #31
 800532c:	4907      	ldr	r1, [pc, #28]	; (800534c <NVIC_EnableIRQ+0x30>)
 800532e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2001      	movs	r0, #1
 8005336:	fa00 f202 	lsl.w	r2, r0, r2
 800533a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	e000e100 	.word	0xe000e100

08005350 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	6039      	str	r1, [r7, #0]
 800535a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800535c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005360:	2b00      	cmp	r3, #0
 8005362:	da0b      	bge.n	800537c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	490c      	ldr	r1, [pc, #48]	; (800539c <NVIC_SetPriority+0x4c>)
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	3b04      	subs	r3, #4
 8005372:	0112      	lsls	r2, r2, #4
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	440b      	add	r3, r1
 8005378:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800537a:	e009      	b.n	8005390 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	b2da      	uxtb	r2, r3
 8005380:	4907      	ldr	r1, [pc, #28]	; (80053a0 <NVIC_SetPriority+0x50>)
 8005382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005386:	0112      	lsls	r2, r2, #4
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	440b      	add	r3, r1
 800538c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	e000ed00 	.word	0xe000ed00
 80053a0:	e000e100 	.word	0xe000e100

080053a4 <main>:
#ifdef USE_SEMIHOSTING
extern void initialise_monitor_handles();
#endif

int main(void)
{
 80053a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
    printf("Its a hello world application\r\n");
#endif

    DWT->CTRL |= (1<<0);//Data watch point trace->cyccnt(cycle count) in arm technical rm,it keeps time stamp
 80053aa:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <main+0x10c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a40      	ldr	r2, [pc, #256]	; (80054b0 <main+0x10c>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	6013      	str	r3, [r2, #0]

    //reset the RCC clock cconfiguration to default reset state
	//reset state is hsi=on,pll=off,hse=off, sysclk=16MHz

    RCC_DeInit();
 80053b6:	f7fb f89f 	bl	80004f8 <RCC_DeInit>

    //update the system core clock variable
    SystemCoreClockUpdate();
 80053ba:	f000 fb95 	bl	8005ae8 <SystemCoreClockUpdate>

    pvtHardwareSetup();
 80053be:	f000 f955 	bl	800566c <pvtHardwareSetup>

    sprintf(user_msg,"\rthis is demo of queue command processing project\r\n");
 80053c2:	4b3c      	ldr	r3, [pc, #240]	; (80054b4 <main+0x110>)
 80053c4:	4a3c      	ldr	r2, [pc, #240]	; (80054b8 <main+0x114>)
 80053c6:	4614      	mov	r4, r2
 80053c8:	469c      	mov	ip, r3
 80053ca:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80053ce:	4665      	mov	r5, ip
 80053d0:	4626      	mov	r6, r4
 80053d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80053d4:	6028      	str	r0, [r5, #0]
 80053d6:	6069      	str	r1, [r5, #4]
 80053d8:	60aa      	str	r2, [r5, #8]
 80053da:	60eb      	str	r3, [r5, #12]
 80053dc:	3410      	adds	r4, #16
 80053de:	f10c 0c10 	add.w	ip, ip, #16
 80053e2:	4574      	cmp	r4, lr
 80053e4:	d1f3      	bne.n	80053ce <main+0x2a>
 80053e6:	4663      	mov	r3, ip
 80053e8:	4622      	mov	r2, r4
 80053ea:	6810      	ldr	r0, [r2, #0]
 80053ec:	6018      	str	r0, [r3, #0]
    printmsg(user_msg);
 80053ee:	4831      	ldr	r0, [pc, #196]	; (80054b4 <main+0x110>)
 80053f0:	f000 f9dc 	bl	80057ac <printmsg>

    //Start recording
    SEGGER_SYSVIEW_Conf();
 80053f4:	f7fe f9ae 	bl	8003754 <SEGGER_SYSVIEW_Conf>
    SEGGER_SYSVIEW_Start();
 80053f8:	f7ff f9ba 	bl	8004770 <SEGGER_SYSVIEW_Start>

    //create command queue
    command_queue=xQueueCreate(10,sizeof(APP_CMD_t*));
 80053fc:	2200      	movs	r2, #0
 80053fe:	2104      	movs	r1, #4
 8005400:	200a      	movs	r0, #10
 8005402:	f7fb fd43 	bl	8000e8c <xQueueGenericCreate>
 8005406:	4602      	mov	r2, r0
 8005408:	4b2c      	ldr	r3, [pc, #176]	; (80054bc <main+0x118>)
 800540a:	601a      	str	r2, [r3, #0]
    uart_write_queue=xQueueCreate(10,sizeof(char*));
 800540c:	2200      	movs	r2, #0
 800540e:	2104      	movs	r1, #4
 8005410:	200a      	movs	r0, #10
 8005412:	f7fb fd3b 	bl	8000e8c <xQueueGenericCreate>
 8005416:	4602      	mov	r2, r0
 8005418:	4b29      	ldr	r3, [pc, #164]	; (80054c0 <main+0x11c>)
 800541a:	601a      	str	r2, [r3, #0]
    if((command_queue != NULL)&&(uart_write_queue != NULL)){
 800541c:	4b27      	ldr	r3, [pc, #156]	; (80054bc <main+0x118>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d032      	beq.n	800548a <main+0xe6>
 8005424:	4b26      	ldr	r3, [pc, #152]	; (80054c0 <main+0x11c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d02e      	beq.n	800548a <main+0xe6>
    	//create four tasks
    	    //1.printing menu to user,2.command processing,3.cmd handlinh, 4.uart write
    	    xTaskCreate(vTask1_menu_display, "menu-disp", 500, NULL, 1, &xTask1Handle);//stack size:500*4=~2kb
 800542c:	4b25      	ldr	r3, [pc, #148]	; (80054c4 <main+0x120>)
 800542e:	9301      	str	r3, [sp, #4]
 8005430:	2301      	movs	r3, #1
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	2300      	movs	r3, #0
 8005436:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800543a:	4923      	ldr	r1, [pc, #140]	; (80054c8 <main+0x124>)
 800543c:	4823      	ldr	r0, [pc, #140]	; (80054cc <main+0x128>)
 800543e:	f7fc f9d9 	bl	80017f4 <xTaskCreate>
    	    xTaskCreate(vTask2_cmd_handling, "cmd-handle", 500, NULL, 2, &xTask2Handle);
 8005442:	4b23      	ldr	r3, [pc, #140]	; (80054d0 <main+0x12c>)
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	2302      	movs	r3, #2
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	2300      	movs	r3, #0
 800544c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005450:	4920      	ldr	r1, [pc, #128]	; (80054d4 <main+0x130>)
 8005452:	4821      	ldr	r0, [pc, #132]	; (80054d8 <main+0x134>)
 8005454:	f7fc f9ce 	bl	80017f4 <xTaskCreate>
    	    xTaskCreate(vTask3_cmd_processing, "cmd-proces", 500, NULL, 2, &xTask3Handle);
 8005458:	4b20      	ldr	r3, [pc, #128]	; (80054dc <main+0x138>)
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	2302      	movs	r3, #2
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2300      	movs	r3, #0
 8005462:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005466:	491e      	ldr	r1, [pc, #120]	; (80054e0 <main+0x13c>)
 8005468:	481e      	ldr	r0, [pc, #120]	; (80054e4 <main+0x140>)
 800546a:	f7fc f9c3 	bl	80017f4 <xTaskCreate>
    	    xTaskCreate(vTask4_uart_write, "uart-wr", 500, NULL, 2, &xTask4Handle);
 800546e:	4b1e      	ldr	r3, [pc, #120]	; (80054e8 <main+0x144>)
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	2302      	movs	r3, #2
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	2300      	movs	r3, #0
 8005478:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800547c:	491b      	ldr	r1, [pc, #108]	; (80054ec <main+0x148>)
 800547e:	481c      	ldr	r0, [pc, #112]	; (80054f0 <main+0x14c>)
 8005480:	f7fc f9b8 	bl	80017f4 <xTaskCreate>

    	    //start the scheduler
    	    vTaskStartScheduler();
 8005484:	f7fc fb12 	bl	8001aac <vTaskStartScheduler>
 8005488:	e010      	b.n	80054ac <main+0x108>

    }else{
        sprintf(user_msg,"\rqueue creation failed\r\n");
 800548a:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <main+0x110>)
 800548c:	4b19      	ldr	r3, [pc, #100]	; (80054f4 <main+0x150>)
 800548e:	4615      	mov	r5, r2
 8005490:	461c      	mov	r4, r3
 8005492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005494:	6028      	str	r0, [r5, #0]
 8005496:	6069      	str	r1, [r5, #4]
 8005498:	60aa      	str	r2, [r5, #8]
 800549a:	60eb      	str	r3, [r5, #12]
 800549c:	cc03      	ldmia	r4!, {r0, r1}
 800549e:	6128      	str	r0, [r5, #16]
 80054a0:	6169      	str	r1, [r5, #20]
 80054a2:	7823      	ldrb	r3, [r4, #0]
 80054a4:	762b      	strb	r3, [r5, #24]
        printmsg(user_msg);
 80054a6:	4803      	ldr	r0, [pc, #12]	; (80054b4 <main+0x110>)
 80054a8:	f000 f980 	bl	80057ac <printmsg>

    }



    	for(;;);
 80054ac:	e7fe      	b.n	80054ac <main+0x108>
 80054ae:	bf00      	nop
 80054b0:	e0001000 	.word	0xe0001000
 80054b4:	20015608 	.word	0x20015608
 80054b8:	080067d0 	.word	0x080067d0
 80054bc:	200154f0 	.word	0x200154f0
 80054c0:	200154f4 	.word	0x200154f4
 80054c4:	200154e0 	.word	0x200154e0
 80054c8:	08006804 	.word	0x08006804
 80054cc:	080054f9 	.word	0x080054f9
 80054d0:	200154e4 	.word	0x200154e4
 80054d4:	08006810 	.word	0x08006810
 80054d8:	08005531 	.word	0x08005531
 80054dc:	200154e8 	.word	0x200154e8
 80054e0:	0800681c 	.word	0x0800681c
 80054e4:	08005589 	.word	0x08005589
 80054e8:	200154ec 	.word	0x200154ec
 80054ec:	08006828 	.word	0x08006828
 80054f0:	08005625 	.word	0x08005625
 80054f4:	08006830 	.word	0x08006830

080054f8 <vTask1_menu_display>:
}

void vTask1_menu_display(void* params){
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	char* pData=menu;
 8005500:	4b09      	ldr	r3, [pc, #36]	; (8005528 <vTask1_menu_display+0x30>)
 8005502:	60fb      	str	r3, [r7, #12]

	while(1){
		xQueueSend(uart_write_queue,(void*)&pData,portMAX_DELAY);
 8005504:	4b09      	ldr	r3, [pc, #36]	; (800552c <vTask1_menu_display+0x34>)
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	f107 010c 	add.w	r1, r7, #12
 800550c:	2300      	movs	r3, #0
 800550e:	f04f 32ff 	mov.w	r2, #4294967295
 8005512:	f7fb fd19 	bl	8000f48 <xQueueGenericSend>
		//menu display task should block
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	2200      	movs	r2, #0
 800551c:	2100      	movs	r1, #0
 800551e:	2000      	movs	r0, #0
 8005520:	f7fc ffaa 	bl	8002478 <xTaskNotifyWait>
		xQueueSend(uart_write_queue,(void*)&pData,portMAX_DELAY);
 8005524:	e7ee      	b.n	8005504 <vTask1_menu_display+0xc>
 8005526:	bf00      	nop
 8005528:	20000014 	.word	0x20000014
 800552c:	200154f4 	.word	0x200154f4

08005530 <vTask2_cmd_handling>:

	}

}
void vTask2_cmd_handling(void* params){
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	uint8_t command_code=0;
 8005538:	2300      	movs	r3, #0
 800553a:	73fb      	strb	r3, [r7, #15]
	APP_CMD_t* new_cmd;

	while(1){
		//block the task for the notification from uart interrupt handler
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800553c:	f04f 33ff 	mov.w	r3, #4294967295
 8005540:	2200      	movs	r2, #0
 8005542:	2100      	movs	r1, #0
 8005544:	2000      	movs	r0, #0
 8005546:	f7fc ff97 	bl	8002478 <xTaskNotifyWait>
		//port malloc returns the address of the heap where dynamic mem aloc for struc is created
		new_cmd=(APP_CMD_t*)pvPortMalloc(sizeof(APP_CMD_t));
 800554a:	200b      	movs	r0, #11
 800554c:	f7fd ff10 	bl	8003370 <pvPortMalloc>
 8005550:	4603      	mov	r3, r0
 8005552:	60bb      	str	r3, [r7, #8]
		//so it is a critical section and it is needed to be protected to avoid race condition
		//so we have to serialise the access of the global variable between isr and this task
		//that can be done by semaphore, mutex or by disabling the interrupt
		//disabling interrupt can be done by using the api taskENTER_CRITICAL()

		taskENTER_CRITICAL();
 8005554:	f7fd fdea 	bl	800312c <vPortEnterCritical>
		command_code=GetCommandCode(command_buffer);
 8005558:	4809      	ldr	r0, [pc, #36]	; (8005580 <vTask2_cmd_handling+0x50>)
 800555a:	f000 f879 	bl	8005650 <GetCommandCode>
 800555e:	4603      	mov	r3, r0
 8005560:	73fb      	strb	r3, [r7, #15]
		//step2:use malloc to allocate the structure in heap and get its pointer
		//step3:use the heap pointer to put the command code value in CMD_NUMBER member element
		new_cmd->CMD_NUMBER=command_code;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	7bfa      	ldrb	r2, [r7, #15]
 8005566:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8005568:	f7fd fe0e 	bl	8003188 <vPortExitCritical>

		//send the command number to command queue
		xQueueSend(command_queue,&new_cmd,portMAX_DELAY);
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <vTask2_cmd_handling+0x54>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	f107 0108 	add.w	r1, r7, #8
 8005574:	2300      	movs	r3, #0
 8005576:	f04f 32ff 	mov.w	r2, #4294967295
 800557a:	f7fb fce5 	bl	8000f48 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800557e:	e7dd      	b.n	800553c <vTask2_cmd_handling+0xc>
 8005580:	200155f4 	.word	0x200155f4
 8005584:	200154f0 	.word	0x200154f0

08005588 <vTask3_cmd_processing>:
#define LED_TOGGLE_OFF        4
#define LED_READ_STATUS       5
#define RTC_PRINT_DATE_TIME   6
#define EXIT_APP              7
*/
void vTask3_cmd_processing(void* params){
 8005588:	b580      	push	{r7, lr}
 800558a:	b092      	sub	sp, #72	; 0x48
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]

	APP_CMD_t* new_cmd;
	char task_msg[50];

	uint32_t toggle_duration=pdMS_TO_TICKS(500);
 8005590:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005594:	647b      	str	r3, [r7, #68]	; 0x44

	while(1){
		//block till cmd_handling updates the queue with  cmd_code
		xQueueReceive(command_queue, (void*)&new_cmd,portMAX_DELAY );
 8005596:	4b22      	ldr	r3, [pc, #136]	; (8005620 <vTask3_cmd_processing+0x98>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800559e:	f04f 32ff 	mov.w	r2, #4294967295
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fb fe9e 	bl	80012e4 <xQueueReceive>
		if(new_cmd->CMD_NUMBER==LED_ON){
 80055a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d102      	bne.n	80055b6 <vTask3_cmd_processing+0x2e>
			//switch on the led
			make_led_on();
 80055b0:	f000 f97c 	bl	80058ac <make_led_on>
 80055b4:	e02e      	b.n	8005614 <vTask3_cmd_processing+0x8c>
		}else if(new_cmd->CMD_NUMBER==LED_OFF){
 80055b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d102      	bne.n	80055c4 <vTask3_cmd_processing+0x3c>
			//switch off the led
			make_led_off();
 80055be:	f000 f981 	bl	80058c4 <make_led_off>
 80055c2:	e027      	b.n	8005614 <vTask3_cmd_processing+0x8c>
		}else if(new_cmd->CMD_NUMBER==LED_TOGGLE){
 80055c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d103      	bne.n	80055d4 <vTask3_cmd_processing+0x4c>
			//switch on the led toggle
			led_toggle_start(toggle_duration);
 80055cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80055ce:	f000 f993 	bl	80058f8 <led_toggle_start>
 80055d2:	e01f      	b.n	8005614 <vTask3_cmd_processing+0x8c>
	    }else if(new_cmd->CMD_NUMBER==LED_TOGGLE_OFF){
 80055d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d102      	bne.n	80055e2 <vTask3_cmd_processing+0x5a>
			//switch off the led toggle
	    	led_toggle_stop();
 80055dc:	f000 f9c4 	bl	8005968 <led_toggle_stop>
 80055e0:	e018      	b.n	8005614 <vTask3_cmd_processing+0x8c>
		}else if(new_cmd->CMD_NUMBER==LED_READ_STATUS){
 80055e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b05      	cmp	r3, #5
 80055e8:	d105      	bne.n	80055f6 <vTask3_cmd_processing+0x6e>
			//read led status
			read_led_status(task_msg);
 80055ea:	f107 030c 	add.w	r3, r7, #12
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f9cc 	bl	800598c <read_led_status>
 80055f4:	e00e      	b.n	8005614 <vTask3_cmd_processing+0x8c>
		}else if(new_cmd->CMD_NUMBER==RTC_PRINT_DATE_TIME){
 80055f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b06      	cmp	r3, #6
 80055fc:	d105      	bne.n	800560a <vTask3_cmd_processing+0x82>
			//print date and time
			read_rtc_info(task_msg);
 80055fe:	f107 030c 	add.w	r3, r7, #12
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f9e4 	bl	80059d0 <read_rtc_info>
 8005608:	e004      	b.n	8005614 <vTask3_cmd_processing+0x8c>
		}else{
			//print error message
			print_error_message(task_msg);
 800560a:	f107 030c 	add.w	r3, r7, #12
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fa10 	bl	8005a34 <print_error_message>
		}
		//deallocate the memory for new_cmd
		vPortFree(new_cmd);
 8005614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005616:	4618      	mov	r0, r3
 8005618:	f7fd ff72 	bl	8003500 <vPortFree>
		xQueueReceive(command_queue, (void*)&new_cmd,portMAX_DELAY );
 800561c:	e7bb      	b.n	8005596 <vTask3_cmd_processing+0xe>
 800561e:	bf00      	nop
 8005620:	200154f0 	.word	0x200154f0

08005624 <vTask4_uart_write>:

	}

}
void vTask4_uart_write(void* params){
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	char* pData=NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
	while(1){
		xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <vTask4_uart_write+0x28>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f107 010c 	add.w	r1, r7, #12
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	4618      	mov	r0, r3
 800563e:	f7fb fe51 	bl	80012e4 <xQueueReceive>
		printmsg(pData);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 f8b1 	bl	80057ac <printmsg>
		xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
 800564a:	e7f1      	b.n	8005630 <vTask4_uart_write+0xc>
 800564c:	200154f4 	.word	0x200154f4

08005650 <GetCommandCode>:

		}

}

uint8_t GetCommandCode(uint8_t* Buffer){
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	return Buffer[0]-48;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	3b30      	subs	r3, #48	; 0x30
 800565e:	b2db      	uxtb	r3, r3
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <pvtHardwareSetup>:
static void pvtHardwareSetup(void){
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
	UART2_Setup();
 8005670:	f000 f842 	bl	80056f8 <UART2_Setup>
	//Configure button PC13 and LED PA5
	GPIO_Setup();
 8005674:	f000 f802 	bl	800567c <GPIO_Setup>

}
 8005678:	bf00      	nop
 800567a:	bd80      	pop	{r7, pc}

0800567c <GPIO_Setup>:



static void GPIO_Setup(void){
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef buttonGPIO,LED_GPIO;
	memset(&buttonGPIO,0,sizeof(buttonGPIO));
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	2208      	movs	r2, #8
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fbf8 	bl	8005e80 <memset>
	memset(&LED_GPIO,0,sizeof(LED_GPIO));
 8005690:	463b      	mov	r3, r7
 8005692:	2208      	movs	r2, #8
 8005694:	2100      	movs	r1, #0
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fbf2 	bl	8005e80 <memset>

	//enable clock for gpioa and gpioc and syscfg
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800569c:	2101      	movs	r1, #1
 800569e:	2001      	movs	r0, #1
 80056a0:	f7fb f85c 	bl	800075c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80056a4:	2101      	movs	r1, #1
 80056a6:	2004      	movs	r0, #4
 80056a8:	f7fb f858 	bl	800075c <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80056ac:	2101      	movs	r1, #1
 80056ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80056b2:	f7fb f893 	bl	80007dc <RCC_APB2PeriphClockCmd>

	//configure led pin pa5 as output
	LED_GPIO.GPIO_Pin=GPIO_Pin_5;
 80056b6:	2320      	movs	r3, #32
 80056b8:	603b      	str	r3, [r7, #0]
	LED_GPIO.GPIO_Mode=GPIO_Mode_OUT;
 80056ba:	2301      	movs	r3, #1
 80056bc:	713b      	strb	r3, [r7, #4]
	LED_GPIO.GPIO_OType=GPIO_OType_PP;
 80056be:	2300      	movs	r3, #0
 80056c0:	71bb      	strb	r3, [r7, #6]
	LED_GPIO.GPIO_PuPd=GPIO_PuPd_NOPULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOA, &LED_GPIO);
 80056c6:	463b      	mov	r3, r7
 80056c8:	4619      	mov	r1, r3
 80056ca:	4809      	ldr	r0, [pc, #36]	; (80056f0 <GPIO_Setup+0x74>)
 80056cc:	f7fa fdf8 	bl	80002c0 <GPIO_Init>

	//configure button gpio pc13 as input
	buttonGPIO.GPIO_Pin=GPIO_Pin_13;
 80056d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056d4:	60bb      	str	r3, [r7, #8]
	buttonGPIO.GPIO_Mode=GPIO_Mode_IN;
 80056d6:	2300      	movs	r3, #0
 80056d8:	733b      	strb	r3, [r7, #12]

	GPIO_Init(GPIOC, &buttonGPIO);
 80056da:	f107 0308 	add.w	r3, r7, #8
 80056de:	4619      	mov	r1, r3
 80056e0:	4804      	ldr	r0, [pc, #16]	; (80056f4 <GPIO_Setup+0x78>)
 80056e2:	f7fa fded 	bl	80002c0 <GPIO_Init>

}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40020000 	.word	0x40020000
 80056f4:	40020800 	.word	0x40020800

080056f8 <UART2_Setup>:

static void UART2_Setup(void){
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
	    GPIO_InitTypeDef UART_Gpio;
		memset(&UART_Gpio,0,sizeof(UART_Gpio));
 80056fe:	f107 0310 	add.w	r3, r7, #16
 8005702:	2208      	movs	r2, #8
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fbba 	bl	8005e80 <memset>
		USART_InitTypeDef UART_Handle;
		memset(&UART_Handle,0,sizeof(UART_Handle));
 800570c:	463b      	mov	r3, r7
 800570e:	2210      	movs	r2, #16
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fbb4 	bl	8005e80 <memset>


	    //enable clock for uart peripheral and gpioa peripheral
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8005718:	2101      	movs	r1, #1
 800571a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800571e:	f7fb f83d 	bl	800079c <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8005722:	2101      	movs	r1, #1
 8005724:	2001      	movs	r0, #1
 8005726:	f7fb f819 	bl	800075c <RCC_AHB1PeriphClockCmd>

		//configure pa2 as uart_tx and pa3 as uart_rx

		UART_Gpio.GPIO_Pin=GPIO_Pin_2 | GPIO_Pin_3;
 800572a:	230c      	movs	r3, #12
 800572c:	613b      	str	r3, [r7, #16]
		UART_Gpio.GPIO_Mode=GPIO_Mode_AF;
 800572e:	2302      	movs	r3, #2
 8005730:	753b      	strb	r3, [r7, #20]
		UART_Gpio.GPIO_PuPd=GPIO_PuPd_UP;
 8005732:	2301      	movs	r3, #1
 8005734:	75fb      	strb	r3, [r7, #23]
		GPIO_Init(GPIOA, &UART_Gpio);
 8005736:	f107 0310 	add.w	r3, r7, #16
 800573a:	4619      	mov	r1, r3
 800573c:	4819      	ldr	r0, [pc, #100]	; (80057a4 <UART2_Setup+0xac>)
 800573e:	f7fa fdbf 	bl	80002c0 <GPIO_Init>

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);//PA2 CONFIG AF7
 8005742:	2207      	movs	r2, #7
 8005744:	2102      	movs	r1, #2
 8005746:	4817      	ldr	r0, [pc, #92]	; (80057a4 <UART2_Setup+0xac>)
 8005748:	f7fa fe8c 	bl	8000464 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);//PA3 CONFIG AF7
 800574c:	2207      	movs	r2, #7
 800574e:	2103      	movs	r1, #3
 8005750:	4814      	ldr	r0, [pc, #80]	; (80057a4 <UART2_Setup+0xac>)
 8005752:	f7fa fe87 	bl	8000464 <GPIO_PinAFConfig>

		//UART PERIPHERAL CONFIGURATION
		UART_Handle.USART_BaudRate=115200;
 8005756:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800575a:	603b      	str	r3, [r7, #0]
		UART_Handle.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 800575c:	2300      	movs	r3, #0
 800575e:	81bb      	strh	r3, [r7, #12]
		UART_Handle.USART_Mode=USART_Mode_Tx | USART_Mode_Rx;
 8005760:	230c      	movs	r3, #12
 8005762:	817b      	strh	r3, [r7, #10]
		UART_Handle.USART_Parity=USART_Parity_No;
 8005764:	2300      	movs	r3, #0
 8005766:	813b      	strh	r3, [r7, #8]
		UART_Handle.USART_StopBits=USART_StopBits_1;
 8005768:	2300      	movs	r3, #0
 800576a:	80fb      	strh	r3, [r7, #6]
		UART_Handle.USART_WordLength=USART_WordLength_8b;
 800576c:	2300      	movs	r3, #0
 800576e:	80bb      	strh	r3, [r7, #4]

		USART_Init(USART2, &UART_Handle);
 8005770:	463b      	mov	r3, r7
 8005772:	4619      	mov	r1, r3
 8005774:	480c      	ldr	r0, [pc, #48]	; (80057a8 <UART2_Setup+0xb0>)
 8005776:	f7fb f90d 	bl	8000994 <USART_Init>
		//enabling uart byte reception interrupt in the microcontroller
        //enabling interrupt in peripheral
		USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800577a:	2201      	movs	r2, #1
 800577c:	f240 5125 	movw	r1, #1317	; 0x525
 8005780:	4809      	ldr	r0, [pc, #36]	; (80057a8 <UART2_Setup+0xb0>)
 8005782:	f7fb fa03 	bl	8000b8c <USART_ITConfig>

        //enabling interrupt in the processor-NVIC
		NVIC_EnableIRQ(USART2_IRQn);
 8005786:	2026      	movs	r0, #38	; 0x26
 8005788:	f7ff fdc8 	bl	800531c <NVIC_EnableIRQ>
		NVIC_SetPriority(USART2_IRQn, 5);
 800578c:	2105      	movs	r1, #5
 800578e:	2026      	movs	r0, #38	; 0x26
 8005790:	f7ff fdde 	bl	8005350 <NVIC_SetPriority>

		USART_Cmd(USART2, ENABLE);
 8005794:	2101      	movs	r1, #1
 8005796:	4804      	ldr	r0, [pc, #16]	; (80057a8 <UART2_Setup+0xb0>)
 8005798:	f7fb f9b6 	bl	8000b08 <USART_Cmd>

}
 800579c:	bf00      	nop
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40020000 	.word	0x40020000
 80057a8:	40004400 	.word	0x40004400

080057ac <printmsg>:




void printmsg(char* msg){
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]

	for(uint32_t i=0;i<strlen(msg);i++){
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e013      	b.n	80057e2 <printmsg+0x36>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)==RESET);
 80057ba:	bf00      	nop
 80057bc:	2180      	movs	r1, #128	; 0x80
 80057be:	480e      	ldr	r0, [pc, #56]	; (80057f8 <printmsg+0x4c>)
 80057c0:	f7fb fa2c 	bl	8000c1c <USART_GetFlagStatus>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f8      	beq.n	80057bc <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	4619      	mov	r1, r3
 80057d6:	4808      	ldr	r0, [pc, #32]	; (80057f8 <printmsg+0x4c>)
 80057d8:	f7fb f9b6 	bl	8000b48 <USART_SendData>
	for(uint32_t i=0;i<strlen(msg);i++){
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3301      	adds	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fa fd14 	bl	8000210 <strlen>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d3e4      	bcc.n	80057ba <printmsg+0xe>
	}

}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40004400 	.word	0x40004400

080057fc <vApplicationIdleHook>:
	uint32_t Delay_In_Ticks=(Delay_In_Ms*configTICK_RATE_HZ)/1000;
	while(xTaskGetTickCount()<(currect_tick_count+Delay_In_Ticks));

}

void vApplicationIdleHook(void){
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8005800:	bf30      	wfi
//send the cpu to sleep mode, clock to the procesor is stopped
	__WFI();
}
 8005802:	bf00      	nop
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af02      	add	r7, sp, #8
	uint16_t data_byte;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
 8005812:	2300      	movs	r3, #0
 8005814:	603b      	str	r3, [r7, #0]

	if(USART_GetFlagStatus(USART2, USART_FLAG_RXNE)){
 8005816:	2120      	movs	r1, #32
 8005818:	481e      	ldr	r0, [pc, #120]	; (8005894 <USART2_IRQHandler+0x88>)
 800581a:	f7fb f9ff 	bl	8000c1c <USART_GetFlagStatus>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d027      	beq.n	8005874 <USART2_IRQHandler+0x68>
		//a data byte is received from the user
		data_byte=USART_ReceiveData(USART2);
 8005824:	481b      	ldr	r0, [pc, #108]	; (8005894 <USART2_IRQHandler+0x88>)
 8005826:	f7fb f9a1 	bl	8000b6c <USART_ReceiveData>
 800582a:	4603      	mov	r3, r0
 800582c:	80fb      	strh	r3, [r7, #6]

		command_buffer[command_length++]=(data_byte & 0xff);
 800582e:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <USART2_IRQHandler+0x8c>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	b2d1      	uxtb	r1, r2
 8005836:	4a18      	ldr	r2, [pc, #96]	; (8005898 <USART2_IRQHandler+0x8c>)
 8005838:	7011      	strb	r1, [r2, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	b2d9      	uxtb	r1, r3
 8005840:	4b16      	ldr	r3, [pc, #88]	; (800589c <USART2_IRQHandler+0x90>)
 8005842:	5499      	strb	r1, [r3, r2]
		if(data_byte== '\r'){
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	2b0d      	cmp	r3, #13
 8005848:	d114      	bne.n	8005874 <USART2_IRQHandler+0x68>
			//user has finished entering the data-reset the command length
			command_length=0;
 800584a:	4b13      	ldr	r3, [pc, #76]	; (8005898 <USART2_IRQHandler+0x8c>)
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
			//notify the command handling task
			xTaskNotifyFromISR(xTask2Handle,0,eNoAction,&xHigherPriorityTaskWoken);
 8005850:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <USART2_IRQHandler+0x94>)
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	463b      	mov	r3, r7
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	2300      	movs	r3, #0
 800585a:	2200      	movs	r2, #0
 800585c:	2100      	movs	r1, #0
 800585e:	f7fc fe6f 	bl	8002540 <xTaskGenericNotifyFromISR>
			//notify the menu display task
			xTaskNotifyFromISR(xTask1Handle,0,eNoAction,&xHigherPriorityTaskWoken);
 8005862:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <USART2_IRQHandler+0x98>)
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	463b      	mov	r3, r7
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	2300      	movs	r3, #0
 800586c:	2200      	movs	r2, #0
 800586e:	2100      	movs	r1, #0
 8005870:	f7fc fe66 	bl	8002540 <xTaskGenericNotifyFromISR>

	    }

    }
//yield the processor if the above apis unblock any high priority task
	if(xHigherPriorityTaskWoken){
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <USART2_IRQHandler+0x7e>
		taskYIELD();
 800587a:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <USART2_IRQHandler+0x9c>)
 800587c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	f3bf 8f6f 	isb	sy
	}
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40004400 	.word	0x40004400
 8005898:	200154f8 	.word	0x200154f8
 800589c:	200155f4 	.word	0x200155f4
 80058a0:	200154e4 	.word	0x200154e4
 80058a4:	200154e0 	.word	0x200154e0
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <make_led_on>:

void make_led_on(void){
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
	GPIO_WriteBit(GPIOA, GPIO_Pin_5, Bit_SET);
 80058b0:	2201      	movs	r2, #1
 80058b2:	2120      	movs	r1, #32
 80058b4:	4802      	ldr	r0, [pc, #8]	; (80058c0 <make_led_on+0x14>)
 80058b6:	f7fa fdab 	bl	8000410 <GPIO_WriteBit>

}
 80058ba:	bf00      	nop
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40020000 	.word	0x40020000

080058c4 <make_led_off>:
void make_led_off(void){
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
	GPIO_WriteBit(GPIOA, GPIO_Pin_5, Bit_RESET);
 80058c8:	2200      	movs	r2, #0
 80058ca:	2120      	movs	r1, #32
 80058cc:	4802      	ldr	r0, [pc, #8]	; (80058d8 <make_led_off+0x14>)
 80058ce:	f7fa fd9f 	bl	8000410 <GPIO_WriteBit>


}
 80058d2:	bf00      	nop
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40020000 	.word	0x40020000

080058dc <vLedTimerCallback>:

void vLedTimerCallback(TimerHandle_t xTimer){
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	//TOGGLE GPIO
	GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 80058e4:	2120      	movs	r1, #32
 80058e6:	4803      	ldr	r0, [pc, #12]	; (80058f4 <vLedTimerCallback+0x18>)
 80058e8:	f7fa fdaa 	bl	8000440 <GPIO_ToggleBits>

}
 80058ec:	bf00      	nop
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40020000 	.word	0x40020000

080058f8 <led_toggle_start>:

void led_toggle_start(uint32_t duration){
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	6078      	str	r0, [r7, #4]
	if(LED_Timer_Handle==NULL){
 8005900:	4b16      	ldr	r3, [pc, #88]	; (800595c <led_toggle_start+0x64>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d118      	bne.n	800593a <led_toggle_start+0x42>
	//1.create the software timer
	LED_Timer_Handle=xTimerCreate("LED-TIMER",duration , pdTRUE, NULL, vLedTimerCallback);
 8005908:	4b15      	ldr	r3, [pc, #84]	; (8005960 <led_toggle_start+0x68>)
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	2300      	movs	r3, #0
 800590e:	2201      	movs	r2, #1
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	4814      	ldr	r0, [pc, #80]	; (8005964 <led_toggle_start+0x6c>)
 8005914:	f7fc ffa8 	bl	8002868 <xTimerCreate>
 8005918:	4602      	mov	r2, r0
 800591a:	4b10      	ldr	r3, [pc, #64]	; (800595c <led_toggle_start+0x64>)
 800591c:	601a      	str	r2, [r3, #0]
    //2.start the software timer
	xTimerStart(LED_Timer_Handle,portMAX_DELAY);
 800591e:	4b0f      	ldr	r3, [pc, #60]	; (800595c <led_toggle_start+0x64>)
 8005920:	681c      	ldr	r4, [r3, #0]
 8005922:	f7fc f9cd 	bl	8001cc0 <xTaskGetTickCount>
 8005926:	4602      	mov	r2, r0
 8005928:	f04f 33ff 	mov.w	r3, #4294967295
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	2300      	movs	r3, #0
 8005930:	2101      	movs	r1, #1
 8005932:	4620      	mov	r0, r4
 8005934:	f7fc fff4 	bl	8002920 <xTimerGenericCommand>
	    //handle is already created and it can be used
		xTimerStart(LED_Timer_Handle,portMAX_DELAY);


	 }
}
 8005938:	e00c      	b.n	8005954 <led_toggle_start+0x5c>
		xTimerStart(LED_Timer_Handle,portMAX_DELAY);
 800593a:	4b08      	ldr	r3, [pc, #32]	; (800595c <led_toggle_start+0x64>)
 800593c:	681c      	ldr	r4, [r3, #0]
 800593e:	f7fc f9bf 	bl	8001cc0 <xTaskGetTickCount>
 8005942:	4602      	mov	r2, r0
 8005944:	f04f 33ff 	mov.w	r3, #4294967295
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	2101      	movs	r1, #1
 800594e:	4620      	mov	r0, r4
 8005950:	f7fc ffe6 	bl	8002920 <xTimerGenericCommand>
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	bd90      	pop	{r4, r7, pc}
 800595c:	200154fc 	.word	0x200154fc
 8005960:	080058dd 	.word	0x080058dd
 8005964:	0800684c 	.word	0x0800684c

08005968 <led_toggle_stop>:
void led_toggle_stop(void){
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af02      	add	r7, sp, #8
	//stop the software timer
	xTimerStop(LED_Timer_Handle,portMAX_DELAY);
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <led_toggle_stop+0x20>)
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	f04f 33ff 	mov.w	r3, #4294967295
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2300      	movs	r3, #0
 800597a:	2200      	movs	r2, #0
 800597c:	2103      	movs	r1, #3
 800597e:	f7fc ffcf 	bl	8002920 <xTimerGenericCommand>


}
 8005982:	bf00      	nop
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	200154fc 	.word	0x200154fc

0800598c <read_led_status>:
void read_led_status(char* task_msg){
 800598c:	b590      	push	{r4, r7, lr}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	sprintf(task_msg,"\r\nThe status of the led is:%d\r\n",GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_5));
 8005994:	687c      	ldr	r4, [r7, #4]
 8005996:	2120      	movs	r1, #32
 8005998:	480a      	ldr	r0, [pc, #40]	; (80059c4 <read_led_status+0x38>)
 800599a:	f7fa fd1f 	bl	80003dc <GPIO_ReadOutputDataBit>
 800599e:	4603      	mov	r3, r0
 80059a0:	461a      	mov	r2, r3
 80059a2:	4909      	ldr	r1, [pc, #36]	; (80059c8 <read_led_status+0x3c>)
 80059a4:	4620      	mov	r0, r4
 80059a6:	f000 fa73 	bl	8005e90 <siprintf>
	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <read_led_status+0x40>)
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	1d39      	adds	r1, r7, #4
 80059b0:	2300      	movs	r3, #0
 80059b2:	f04f 32ff 	mov.w	r2, #4294967295
 80059b6:	f7fb fac7 	bl	8000f48 <xQueueGenericSend>

}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd90      	pop	{r4, r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40020000 	.word	0x40020000
 80059c8:	08006858 	.word	0x08006858
 80059cc:	200154f4 	.word	0x200154f4

080059d0 <read_rtc_info>:
void read_rtc_info(char* task_msg){
 80059d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d2:	b089      	sub	sp, #36	; 0x24
 80059d4:	af04      	add	r7, sp, #16
 80059d6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef RTC_Time;
	RTC_DateTypeDef RTC_Calendar;

	RTC_GetTime(RTC_Format_BIN,&RTC_Time);
 80059d8:	f107 030c 	add.w	r3, r7, #12
 80059dc:	4619      	mov	r1, r3
 80059de:	2000      	movs	r0, #0
 80059e0:	f7fa ff1c 	bl	800081c <RTC_GetTime>
	RTC_GetDate(RTC_Format_BIN,&RTC_Calendar);
 80059e4:	f107 0308 	add.w	r3, r7, #8
 80059e8:	4619      	mov	r1, r3
 80059ea:	2000      	movs	r0, #0
 80059ec:	f7fa ff68 	bl	80008c0 <RTC_GetDate>
	sprintf(task_msg,"\r\n time:%02u:02u:02u  \r\n date:%02u -02u -02u\r\n ",RTC_Time.RTC_Hours,RTC_Time.RTC_Minutes,RTC_Time.RTC_Seconds,\
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	7b3b      	ldrb	r3, [r7, #12]
 80059f4:	461d      	mov	r5, r3
 80059f6:	7b7b      	ldrb	r3, [r7, #13]
 80059f8:	461e      	mov	r6, r3
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
			RTC_Calendar.RTC_Date,RTC_Calendar.RTC_Month,RTC_Calendar.RTC_Year);
 80059fc:	7aba      	ldrb	r2, [r7, #10]
 80059fe:	7a79      	ldrb	r1, [r7, #9]
 8005a00:	7afc      	ldrb	r4, [r7, #11]
	sprintf(task_msg,"\r\n time:%02u:02u:02u  \r\n date:%02u -02u -02u\r\n ",RTC_Time.RTC_Hours,RTC_Time.RTC_Minutes,RTC_Time.RTC_Seconds,\
 8005a02:	9403      	str	r4, [sp, #12]
 8005a04:	9102      	str	r1, [sp, #8]
 8005a06:	9201      	str	r2, [sp, #4]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	4633      	mov	r3, r6
 8005a0c:	462a      	mov	r2, r5
 8005a0e:	4907      	ldr	r1, [pc, #28]	; (8005a2c <read_rtc_info+0x5c>)
 8005a10:	f000 fa3e 	bl	8005e90 <siprintf>
    xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
 8005a14:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <read_rtc_info+0x60>)
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	1d39      	adds	r1, r7, #4
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a20:	f7fb fa92 	bl	8000f48 <xQueueGenericSend>
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2c:	08006878 	.word	0x08006878
 8005a30:	200154f4 	.word	0x200154f4

08005a34 <print_error_message>:



void print_error_message(char* task_msg){
 8005a34:	b5b0      	push	{r4, r5, r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]

	sprintf(task_msg,"\r\nInvalid command received\r\n");
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a0d      	ldr	r2, [pc, #52]	; (8005a74 <print_error_message+0x40>)
 8005a40:	461d      	mov	r5, r3
 8005a42:	4614      	mov	r4, r2
 8005a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a46:	6028      	str	r0, [r5, #0]
 8005a48:	6069      	str	r1, [r5, #4]
 8005a4a:	60aa      	str	r2, [r5, #8]
 8005a4c:	60eb      	str	r3, [r5, #12]
 8005a4e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8005a50:	6128      	str	r0, [r5, #16]
 8005a52:	6169      	str	r1, [r5, #20]
 8005a54:	61aa      	str	r2, [r5, #24]
 8005a56:	7823      	ldrb	r3, [r4, #0]
 8005a58:	772b      	strb	r3, [r5, #28]
	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
 8005a5a:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <print_error_message+0x44>)
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	1d39      	adds	r1, r7, #4
 8005a60:	2300      	movs	r3, #0
 8005a62:	f04f 32ff 	mov.w	r2, #4294967295
 8005a66:	f7fb fa6f 	bl	8000f48 <xQueueGenericSend>
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bdb0      	pop	{r4, r5, r7, pc}
 8005a72:	bf00      	nop
 8005a74:	080068a8 	.word	0x080068a8
 8005a78:	200154f4 	.word	0x200154f4

08005a7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a80:	4b16      	ldr	r3, [pc, #88]	; (8005adc <SystemInit+0x60>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	4a15      	ldr	r2, [pc, #84]	; (8005adc <SystemInit+0x60>)
 8005a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005a90:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <SystemInit+0x64>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <SystemInit+0x64>)
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005a9c:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <SystemInit+0x64>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005aa2:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <SystemInit+0x64>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a0e      	ldr	r2, [pc, #56]	; (8005ae0 <SystemInit+0x64>)
 8005aa8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005ab2:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <SystemInit+0x64>)
 8005ab4:	4a0b      	ldr	r2, [pc, #44]	; (8005ae4 <SystemInit+0x68>)
 8005ab6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <SystemInit+0x64>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a08      	ldr	r2, [pc, #32]	; (8005ae0 <SystemInit+0x64>)
 8005abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ac2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <SystemInit+0x64>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8005aca:	f000 f8db 	bl	8005c84 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ace:	4b03      	ldr	r3, [pc, #12]	; (8005adc <SystemInit+0x60>)
 8005ad0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ad4:	609a      	str	r2, [r3, #8]
#endif
}
 8005ad6:	bf00      	nop
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	e000ed00 	.word	0xe000ed00
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	24003010 	.word	0x24003010

08005ae8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	2300      	movs	r3, #0
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	2302      	movs	r3, #2
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	2300      	movs	r3, #0
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	2302      	movs	r3, #2
 8005b00:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8005b02:	2302      	movs	r3, #2
 8005b04:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005b06:	4b5a      	ldr	r3, [pc, #360]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 030c 	and.w	r3, r3, #12
 8005b0e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b0c      	cmp	r3, #12
 8005b14:	f200 8092 	bhi.w	8005c3c <SystemCoreClockUpdate+0x154>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <SystemCoreClockUpdate+0x38>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b55 	.word	0x08005b55
 8005b24:	08005c3d 	.word	0x08005c3d
 8005b28:	08005c3d 	.word	0x08005c3d
 8005b2c:	08005c3d 	.word	0x08005c3d
 8005b30:	08005b5d 	.word	0x08005b5d
 8005b34:	08005c3d 	.word	0x08005c3d
 8005b38:	08005c3d 	.word	0x08005c3d
 8005b3c:	08005c3d 	.word	0x08005c3d
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005c3d 	.word	0x08005c3d
 8005b48:	08005c3d 	.word	0x08005c3d
 8005b4c:	08005c3d 	.word	0x08005c3d
 8005b50:	08005bd1 	.word	0x08005bd1
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8005b54:	4b47      	ldr	r3, [pc, #284]	; (8005c74 <SystemCoreClockUpdate+0x18c>)
 8005b56:	4a48      	ldr	r2, [pc, #288]	; (8005c78 <SystemCoreClockUpdate+0x190>)
 8005b58:	601a      	str	r2, [r3, #0]
      break;
 8005b5a:	e073      	b.n	8005c44 <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005b5c:	4b45      	ldr	r3, [pc, #276]	; (8005c74 <SystemCoreClockUpdate+0x18c>)
 8005b5e:	4a47      	ldr	r2, [pc, #284]	; (8005c7c <SystemCoreClockUpdate+0x194>)
 8005b60:	601a      	str	r2, [r3, #0]
      break;
 8005b62:	e06f      	b.n	8005c44 <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005b64:	4b42      	ldr	r3, [pc, #264]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	0d9b      	lsrs	r3, r3, #22
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b70:	4b3f      	ldr	r3, [pc, #252]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b78:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00c      	beq.n	8005b9a <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005b80:	4a3e      	ldr	r2, [pc, #248]	; (8005c7c <SystemCoreClockUpdate+0x194>)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	4a39      	ldr	r2, [pc, #228]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005b8a:	6852      	ldr	r2, [r2, #4]
 8005b8c:	0992      	lsrs	r2, r2, #6
 8005b8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	e00b      	b.n	8005bb2 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005b9a:	4a37      	ldr	r2, [pc, #220]	; (8005c78 <SystemCoreClockUpdate+0x190>)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba2:	4a33      	ldr	r2, [pc, #204]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005ba4:	6852      	ldr	r2, [r2, #4]
 8005ba6:	0992      	lsrs	r2, r2, #6
 8005ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bac:	fb02 f303 	mul.w	r3, r2, r3
 8005bb0:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005bb2:	4b2f      	ldr	r3, [pc, #188]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bca:	4a2a      	ldr	r2, [pc, #168]	; (8005c74 <SystemCoreClockUpdate+0x18c>)
 8005bcc:	6013      	str	r3, [r2, #0]
      break;
 8005bce:	e039      	b.n	8005c44 <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005bd0:	4b27      	ldr	r3, [pc, #156]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	0d9b      	lsrs	r3, r3, #22
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bdc:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be4:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00c      	beq.n	8005c06 <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005bec:	4a23      	ldr	r2, [pc, #140]	; (8005c7c <SystemCoreClockUpdate+0x194>)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf4:	4a1e      	ldr	r2, [pc, #120]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005bf6:	6852      	ldr	r2, [r2, #4]
 8005bf8:	0992      	lsrs	r2, r2, #6
 8005bfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bfe:	fb02 f303 	mul.w	r3, r2, r3
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	e00b      	b.n	8005c1e <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8005c06:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <SystemCoreClockUpdate+0x190>)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0e:	4a18      	ldr	r2, [pc, #96]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005c10:	6852      	ldr	r2, [r2, #4]
 8005c12:	0992      	lsrs	r2, r2, #6
 8005c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c18:	fb02 f303 	mul.w	r3, r2, r3
 8005c1c:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8005c1e:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	0f1b      	lsrs	r3, r3, #28
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	3301      	adds	r3, #1
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	4a0f      	ldr	r2, [pc, #60]	; (8005c74 <SystemCoreClockUpdate+0x18c>)
 8005c38:	6013      	str	r3, [r2, #0]
      break;
 8005c3a:	e003      	b.n	8005c44 <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <SystemCoreClockUpdate+0x18c>)
 8005c3e:	4a0e      	ldr	r2, [pc, #56]	; (8005c78 <SystemCoreClockUpdate+0x190>)
 8005c40:	601a      	str	r2, [r3, #0]
      break;
 8005c42:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005c44:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <SystemCoreClockUpdate+0x188>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	091b      	lsrs	r3, r3, #4
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	; (8005c80 <SystemCoreClockUpdate+0x198>)
 8005c50:	5cd3      	ldrb	r3, [r2, r3]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8005c56:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <SystemCoreClockUpdate+0x18c>)
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <SystemCoreClockUpdate+0x18c>)
 8005c62:	6013      	str	r3, [r2, #0]
}
 8005c64:	bf00      	nop
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	40023800 	.word	0x40023800
 8005c74:	20000110 	.word	0x20000110
 8005c78:	00f42400 	.word	0x00f42400
 8005c7c:	007a1200 	.word	0x007a1200
 8005c80:	20000114 	.word	0x20000114

08005c84 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	607b      	str	r3, [r7, #4]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005c92:	4b43      	ldr	r3, [pc, #268]	; (8005da0 <SetSysClock+0x11c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a42      	ldr	r2, [pc, #264]	; (8005da0 <SetSysClock+0x11c>)
 8005c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005c9e:	4b40      	ldr	r3, [pc, #256]	; (8005da0 <SetSysClock+0x11c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3301      	adds	r3, #1
 8005cac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d103      	bne.n	8005cbc <SetSysClock+0x38>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005cba:	d1f0      	bne.n	8005c9e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005cbc:	4b38      	ldr	r3, [pc, #224]	; (8005da0 <SetSysClock+0x11c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	e001      	b.n	8005cd2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d15c      	bne.n	8005d92 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8005cd8:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <SetSysClock+0x11c>)
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	4a30      	ldr	r2, [pc, #192]	; (8005da0 <SetSysClock+0x11c>)
 8005cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8005ce4:	4b2f      	ldr	r3, [pc, #188]	; (8005da4 <SetSysClock+0x120>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a2e      	ldr	r2, [pc, #184]	; (8005da4 <SetSysClock+0x120>)
 8005cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cee:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005cf0:	4b2b      	ldr	r3, [pc, #172]	; (8005da0 <SetSysClock+0x11c>)
 8005cf2:	4a2b      	ldr	r2, [pc, #172]	; (8005da0 <SetSysClock+0x11c>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005cf8:	4b29      	ldr	r3, [pc, #164]	; (8005da0 <SetSysClock+0x11c>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	4a28      	ldr	r2, [pc, #160]	; (8005da0 <SetSysClock+0x11c>)
 8005cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d02:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005d04:	4b26      	ldr	r3, [pc, #152]	; (8005da0 <SetSysClock+0x11c>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	4a25      	ldr	r2, [pc, #148]	; (8005da0 <SetSysClock+0x11c>)
 8005d0a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8005d0e:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8005d10:	4b23      	ldr	r3, [pc, #140]	; (8005da0 <SetSysClock+0x11c>)
 8005d12:	4a25      	ldr	r2, [pc, #148]	; (8005da8 <SetSysClock+0x124>)
 8005d14:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005d16:	4b22      	ldr	r3, [pc, #136]	; (8005da0 <SetSysClock+0x11c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a21      	ldr	r2, [pc, #132]	; (8005da0 <SetSysClock+0x11c>)
 8005d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d20:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005d22:	bf00      	nop
 8005d24:	4b1e      	ldr	r3, [pc, #120]	; (8005da0 <SetSysClock+0x11c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f9      	beq.n	8005d24 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8005d30:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <SetSysClock+0x120>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <SetSysClock+0x120>)
 8005d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3a:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8005d3c:	bf00      	nop
 8005d3e:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <SetSysClock+0x120>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f9      	beq.n	8005d3e <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8005d4a:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <SetSysClock+0x120>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a15      	ldr	r2, [pc, #84]	; (8005da4 <SetSysClock+0x120>)
 8005d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d54:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8005d56:	bf00      	nop
 8005d58:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <SetSysClock+0x120>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f9      	beq.n	8005d58 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005d64:	4b11      	ldr	r3, [pc, #68]	; (8005dac <SetSysClock+0x128>)
 8005d66:	f240 7205 	movw	r2, #1797	; 0x705
 8005d6a:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <SetSysClock+0x11c>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	4a0b      	ldr	r2, [pc, #44]	; (8005da0 <SetSysClock+0x11c>)
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005d78:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <SetSysClock+0x11c>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	4a08      	ldr	r2, [pc, #32]	; (8005da0 <SetSysClock+0x11c>)
 8005d7e:	f043 0302 	orr.w	r3, r3, #2
 8005d82:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8005d84:	bf00      	nop
 8005d86:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <SetSysClock+0x11c>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d1f9      	bne.n	8005d86 <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40023800 	.word	0x40023800
 8005da4:	40007000 	.word	0x40007000
 8005da8:	77405a08 	.word	0x77405a08
 8005dac:	40023c00 	.word	0x40023c00

08005db0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005db0:	480d      	ldr	r0, [pc, #52]	; (8005de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005db2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005db4:	480d      	ldr	r0, [pc, #52]	; (8005dec <LoopForever+0x6>)
  ldr r1, =_edata
 8005db6:	490e      	ldr	r1, [pc, #56]	; (8005df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005db8:	4a0e      	ldr	r2, [pc, #56]	; (8005df4 <LoopForever+0xe>)
  movs r3, #0
 8005dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005dbc:	e002      	b.n	8005dc4 <LoopCopyDataInit>

08005dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dc2:	3304      	adds	r3, #4

08005dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005dc8:	d3f9      	bcc.n	8005dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dca:	4a0b      	ldr	r2, [pc, #44]	; (8005df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005dcc:	4c0b      	ldr	r4, [pc, #44]	; (8005dfc <LoopForever+0x16>)
  movs r3, #0
 8005dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dd0:	e001      	b.n	8005dd6 <LoopFillZerobss>

08005dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dd4:	3204      	adds	r2, #4

08005dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dd8:	d3fb      	bcc.n	8005dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005dda:	f7ff fe4f 	bl	8005a7c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005dde:	f000 f811 	bl	8005e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005de2:	f7ff fadf 	bl	80053a4 <main>

08005de6 <LoopForever>:

LoopForever:
    b LoopForever
 8005de6:	e7fe      	b.n	8005de6 <LoopForever>
  ldr   r0, =_estack
 8005de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005df0:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8005df4:	08006978 	.word	0x08006978
  ldr r2, =_sbss
 8005df8:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8005dfc:	20015670 	.word	0x20015670

08005e00 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005e00:	e7fe      	b.n	8005e00 <ADC_IRQHandler>
	...

08005e04 <__libc_init_array>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	4e0d      	ldr	r6, [pc, #52]	; (8005e3c <__libc_init_array+0x38>)
 8005e08:	4c0d      	ldr	r4, [pc, #52]	; (8005e40 <__libc_init_array+0x3c>)
 8005e0a:	1ba4      	subs	r4, r4, r6
 8005e0c:	10a4      	asrs	r4, r4, #2
 8005e0e:	2500      	movs	r5, #0
 8005e10:	42a5      	cmp	r5, r4
 8005e12:	d109      	bne.n	8005e28 <__libc_init_array+0x24>
 8005e14:	4e0b      	ldr	r6, [pc, #44]	; (8005e44 <__libc_init_array+0x40>)
 8005e16:	4c0c      	ldr	r4, [pc, #48]	; (8005e48 <__libc_init_array+0x44>)
 8005e18:	f000 fc60 	bl	80066dc <_init>
 8005e1c:	1ba4      	subs	r4, r4, r6
 8005e1e:	10a4      	asrs	r4, r4, #2
 8005e20:	2500      	movs	r5, #0
 8005e22:	42a5      	cmp	r5, r4
 8005e24:	d105      	bne.n	8005e32 <__libc_init_array+0x2e>
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e2c:	4798      	blx	r3
 8005e2e:	3501      	adds	r5, #1
 8005e30:	e7ee      	b.n	8005e10 <__libc_init_array+0xc>
 8005e32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e36:	4798      	blx	r3
 8005e38:	3501      	adds	r5, #1
 8005e3a:	e7f2      	b.n	8005e22 <__libc_init_array+0x1e>
 8005e3c:	08006970 	.word	0x08006970
 8005e40:	08006970 	.word	0x08006970
 8005e44:	08006970 	.word	0x08006970
 8005e48:	08006974 	.word	0x08006974

08005e4c <memcmp>:
 8005e4c:	b530      	push	{r4, r5, lr}
 8005e4e:	2400      	movs	r4, #0
 8005e50:	42a2      	cmp	r2, r4
 8005e52:	d101      	bne.n	8005e58 <memcmp+0xc>
 8005e54:	2000      	movs	r0, #0
 8005e56:	e007      	b.n	8005e68 <memcmp+0x1c>
 8005e58:	5d03      	ldrb	r3, [r0, r4]
 8005e5a:	3401      	adds	r4, #1
 8005e5c:	190d      	adds	r5, r1, r4
 8005e5e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005e62:	42ab      	cmp	r3, r5
 8005e64:	d0f4      	beq.n	8005e50 <memcmp+0x4>
 8005e66:	1b58      	subs	r0, r3, r5
 8005e68:	bd30      	pop	{r4, r5, pc}

08005e6a <memcpy>:
 8005e6a:	b510      	push	{r4, lr}
 8005e6c:	1e43      	subs	r3, r0, #1
 8005e6e:	440a      	add	r2, r1
 8005e70:	4291      	cmp	r1, r2
 8005e72:	d100      	bne.n	8005e76 <memcpy+0xc>
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e7e:	e7f7      	b.n	8005e70 <memcpy+0x6>

08005e80 <memset>:
 8005e80:	4402      	add	r2, r0
 8005e82:	4603      	mov	r3, r0
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d100      	bne.n	8005e8a <memset+0xa>
 8005e88:	4770      	bx	lr
 8005e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e8e:	e7f9      	b.n	8005e84 <memset+0x4>

08005e90 <siprintf>:
 8005e90:	b40e      	push	{r1, r2, r3}
 8005e92:	b500      	push	{lr}
 8005e94:	b09c      	sub	sp, #112	; 0x70
 8005e96:	ab1d      	add	r3, sp, #116	; 0x74
 8005e98:	9002      	str	r0, [sp, #8]
 8005e9a:	9006      	str	r0, [sp, #24]
 8005e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ea0:	4809      	ldr	r0, [pc, #36]	; (8005ec8 <siprintf+0x38>)
 8005ea2:	9107      	str	r1, [sp, #28]
 8005ea4:	9104      	str	r1, [sp, #16]
 8005ea6:	4909      	ldr	r1, [pc, #36]	; (8005ecc <siprintf+0x3c>)
 8005ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eac:	9105      	str	r1, [sp, #20]
 8005eae:	6800      	ldr	r0, [r0, #0]
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	a902      	add	r1, sp, #8
 8005eb4:	f000 f866 	bl	8005f84 <_svfiprintf_r>
 8005eb8:	9b02      	ldr	r3, [sp, #8]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	b01c      	add	sp, #112	; 0x70
 8005ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ec4:	b003      	add	sp, #12
 8005ec6:	4770      	bx	lr
 8005ec8:	20000124 	.word	0x20000124
 8005ecc:	ffff0208 	.word	0xffff0208

08005ed0 <__ssputs_r>:
 8005ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed4:	688e      	ldr	r6, [r1, #8]
 8005ed6:	429e      	cmp	r6, r3
 8005ed8:	4682      	mov	sl, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	4690      	mov	r8, r2
 8005ede:	4699      	mov	r9, r3
 8005ee0:	d837      	bhi.n	8005f52 <__ssputs_r+0x82>
 8005ee2:	898a      	ldrh	r2, [r1, #12]
 8005ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ee8:	d031      	beq.n	8005f4e <__ssputs_r+0x7e>
 8005eea:	6825      	ldr	r5, [r4, #0]
 8005eec:	6909      	ldr	r1, [r1, #16]
 8005eee:	1a6f      	subs	r7, r5, r1
 8005ef0:	6965      	ldr	r5, [r4, #20]
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ef8:	fb95 f5f3 	sdiv	r5, r5, r3
 8005efc:	f109 0301 	add.w	r3, r9, #1
 8005f00:	443b      	add	r3, r7
 8005f02:	429d      	cmp	r5, r3
 8005f04:	bf38      	it	cc
 8005f06:	461d      	movcc	r5, r3
 8005f08:	0553      	lsls	r3, r2, #21
 8005f0a:	d530      	bpl.n	8005f6e <__ssputs_r+0x9e>
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	f000 fb21 	bl	8006554 <_malloc_r>
 8005f12:	4606      	mov	r6, r0
 8005f14:	b950      	cbnz	r0, 8005f2c <__ssputs_r+0x5c>
 8005f16:	230c      	movs	r3, #12
 8005f18:	f8ca 3000 	str.w	r3, [sl]
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f22:	81a3      	strh	r3, [r4, #12]
 8005f24:	f04f 30ff 	mov.w	r0, #4294967295
 8005f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2c:	463a      	mov	r2, r7
 8005f2e:	6921      	ldr	r1, [r4, #16]
 8005f30:	f7ff ff9b 	bl	8005e6a <memcpy>
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3e:	81a3      	strh	r3, [r4, #12]
 8005f40:	6126      	str	r6, [r4, #16]
 8005f42:	6165      	str	r5, [r4, #20]
 8005f44:	443e      	add	r6, r7
 8005f46:	1bed      	subs	r5, r5, r7
 8005f48:	6026      	str	r6, [r4, #0]
 8005f4a:	60a5      	str	r5, [r4, #8]
 8005f4c:	464e      	mov	r6, r9
 8005f4e:	454e      	cmp	r6, r9
 8005f50:	d900      	bls.n	8005f54 <__ssputs_r+0x84>
 8005f52:	464e      	mov	r6, r9
 8005f54:	4632      	mov	r2, r6
 8005f56:	4641      	mov	r1, r8
 8005f58:	6820      	ldr	r0, [r4, #0]
 8005f5a:	f000 fa93 	bl	8006484 <memmove>
 8005f5e:	68a3      	ldr	r3, [r4, #8]
 8005f60:	1b9b      	subs	r3, r3, r6
 8005f62:	60a3      	str	r3, [r4, #8]
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	441e      	add	r6, r3
 8005f68:	6026      	str	r6, [r4, #0]
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	e7dc      	b.n	8005f28 <__ssputs_r+0x58>
 8005f6e:	462a      	mov	r2, r5
 8005f70:	f000 fb4a 	bl	8006608 <_realloc_r>
 8005f74:	4606      	mov	r6, r0
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d1e2      	bne.n	8005f40 <__ssputs_r+0x70>
 8005f7a:	6921      	ldr	r1, [r4, #16]
 8005f7c:	4650      	mov	r0, sl
 8005f7e:	f000 fa9b 	bl	80064b8 <_free_r>
 8005f82:	e7c8      	b.n	8005f16 <__ssputs_r+0x46>

08005f84 <_svfiprintf_r>:
 8005f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f88:	461d      	mov	r5, r3
 8005f8a:	898b      	ldrh	r3, [r1, #12]
 8005f8c:	061f      	lsls	r7, r3, #24
 8005f8e:	b09d      	sub	sp, #116	; 0x74
 8005f90:	4680      	mov	r8, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	4616      	mov	r6, r2
 8005f96:	d50f      	bpl.n	8005fb8 <_svfiprintf_r+0x34>
 8005f98:	690b      	ldr	r3, [r1, #16]
 8005f9a:	b96b      	cbnz	r3, 8005fb8 <_svfiprintf_r+0x34>
 8005f9c:	2140      	movs	r1, #64	; 0x40
 8005f9e:	f000 fad9 	bl	8006554 <_malloc_r>
 8005fa2:	6020      	str	r0, [r4, #0]
 8005fa4:	6120      	str	r0, [r4, #16]
 8005fa6:	b928      	cbnz	r0, 8005fb4 <_svfiprintf_r+0x30>
 8005fa8:	230c      	movs	r3, #12
 8005faa:	f8c8 3000 	str.w	r3, [r8]
 8005fae:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb2:	e0c8      	b.n	8006146 <_svfiprintf_r+0x1c2>
 8005fb4:	2340      	movs	r3, #64	; 0x40
 8005fb6:	6163      	str	r3, [r4, #20]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	9309      	str	r3, [sp, #36]	; 0x24
 8005fbc:	2320      	movs	r3, #32
 8005fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fc2:	2330      	movs	r3, #48	; 0x30
 8005fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fc8:	9503      	str	r5, [sp, #12]
 8005fca:	f04f 0b01 	mov.w	fp, #1
 8005fce:	4637      	mov	r7, r6
 8005fd0:	463d      	mov	r5, r7
 8005fd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005fd6:	b10b      	cbz	r3, 8005fdc <_svfiprintf_r+0x58>
 8005fd8:	2b25      	cmp	r3, #37	; 0x25
 8005fda:	d13e      	bne.n	800605a <_svfiprintf_r+0xd6>
 8005fdc:	ebb7 0a06 	subs.w	sl, r7, r6
 8005fe0:	d00b      	beq.n	8005ffa <_svfiprintf_r+0x76>
 8005fe2:	4653      	mov	r3, sl
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4640      	mov	r0, r8
 8005fea:	f7ff ff71 	bl	8005ed0 <__ssputs_r>
 8005fee:	3001      	adds	r0, #1
 8005ff0:	f000 80a4 	beq.w	800613c <_svfiprintf_r+0x1b8>
 8005ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff6:	4453      	add	r3, sl
 8005ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8005ffa:	783b      	ldrb	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 809d 	beq.w	800613c <_svfiprintf_r+0x1b8>
 8006002:	2300      	movs	r3, #0
 8006004:	f04f 32ff 	mov.w	r2, #4294967295
 8006008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	9307      	str	r3, [sp, #28]
 8006010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006014:	931a      	str	r3, [sp, #104]	; 0x68
 8006016:	462f      	mov	r7, r5
 8006018:	2205      	movs	r2, #5
 800601a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800601e:	4850      	ldr	r0, [pc, #320]	; (8006160 <_svfiprintf_r+0x1dc>)
 8006020:	f7fa f8fe 	bl	8000220 <memchr>
 8006024:	9b04      	ldr	r3, [sp, #16]
 8006026:	b9d0      	cbnz	r0, 800605e <_svfiprintf_r+0xda>
 8006028:	06d9      	lsls	r1, r3, #27
 800602a:	bf44      	itt	mi
 800602c:	2220      	movmi	r2, #32
 800602e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006032:	071a      	lsls	r2, r3, #28
 8006034:	bf44      	itt	mi
 8006036:	222b      	movmi	r2, #43	; 0x2b
 8006038:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800603c:	782a      	ldrb	r2, [r5, #0]
 800603e:	2a2a      	cmp	r2, #42	; 0x2a
 8006040:	d015      	beq.n	800606e <_svfiprintf_r+0xea>
 8006042:	9a07      	ldr	r2, [sp, #28]
 8006044:	462f      	mov	r7, r5
 8006046:	2000      	movs	r0, #0
 8006048:	250a      	movs	r5, #10
 800604a:	4639      	mov	r1, r7
 800604c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006050:	3b30      	subs	r3, #48	; 0x30
 8006052:	2b09      	cmp	r3, #9
 8006054:	d94d      	bls.n	80060f2 <_svfiprintf_r+0x16e>
 8006056:	b1b8      	cbz	r0, 8006088 <_svfiprintf_r+0x104>
 8006058:	e00f      	b.n	800607a <_svfiprintf_r+0xf6>
 800605a:	462f      	mov	r7, r5
 800605c:	e7b8      	b.n	8005fd0 <_svfiprintf_r+0x4c>
 800605e:	4a40      	ldr	r2, [pc, #256]	; (8006160 <_svfiprintf_r+0x1dc>)
 8006060:	1a80      	subs	r0, r0, r2
 8006062:	fa0b f000 	lsl.w	r0, fp, r0
 8006066:	4318      	orrs	r0, r3
 8006068:	9004      	str	r0, [sp, #16]
 800606a:	463d      	mov	r5, r7
 800606c:	e7d3      	b.n	8006016 <_svfiprintf_r+0x92>
 800606e:	9a03      	ldr	r2, [sp, #12]
 8006070:	1d11      	adds	r1, r2, #4
 8006072:	6812      	ldr	r2, [r2, #0]
 8006074:	9103      	str	r1, [sp, #12]
 8006076:	2a00      	cmp	r2, #0
 8006078:	db01      	blt.n	800607e <_svfiprintf_r+0xfa>
 800607a:	9207      	str	r2, [sp, #28]
 800607c:	e004      	b.n	8006088 <_svfiprintf_r+0x104>
 800607e:	4252      	negs	r2, r2
 8006080:	f043 0302 	orr.w	r3, r3, #2
 8006084:	9207      	str	r2, [sp, #28]
 8006086:	9304      	str	r3, [sp, #16]
 8006088:	783b      	ldrb	r3, [r7, #0]
 800608a:	2b2e      	cmp	r3, #46	; 0x2e
 800608c:	d10c      	bne.n	80060a8 <_svfiprintf_r+0x124>
 800608e:	787b      	ldrb	r3, [r7, #1]
 8006090:	2b2a      	cmp	r3, #42	; 0x2a
 8006092:	d133      	bne.n	80060fc <_svfiprintf_r+0x178>
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	1d1a      	adds	r2, r3, #4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	9203      	str	r2, [sp, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	bfb8      	it	lt
 80060a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80060a4:	3702      	adds	r7, #2
 80060a6:	9305      	str	r3, [sp, #20]
 80060a8:	4d2e      	ldr	r5, [pc, #184]	; (8006164 <_svfiprintf_r+0x1e0>)
 80060aa:	7839      	ldrb	r1, [r7, #0]
 80060ac:	2203      	movs	r2, #3
 80060ae:	4628      	mov	r0, r5
 80060b0:	f7fa f8b6 	bl	8000220 <memchr>
 80060b4:	b138      	cbz	r0, 80060c6 <_svfiprintf_r+0x142>
 80060b6:	2340      	movs	r3, #64	; 0x40
 80060b8:	1b40      	subs	r0, r0, r5
 80060ba:	fa03 f000 	lsl.w	r0, r3, r0
 80060be:	9b04      	ldr	r3, [sp, #16]
 80060c0:	4303      	orrs	r3, r0
 80060c2:	3701      	adds	r7, #1
 80060c4:	9304      	str	r3, [sp, #16]
 80060c6:	7839      	ldrb	r1, [r7, #0]
 80060c8:	4827      	ldr	r0, [pc, #156]	; (8006168 <_svfiprintf_r+0x1e4>)
 80060ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060ce:	2206      	movs	r2, #6
 80060d0:	1c7e      	adds	r6, r7, #1
 80060d2:	f7fa f8a5 	bl	8000220 <memchr>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d038      	beq.n	800614c <_svfiprintf_r+0x1c8>
 80060da:	4b24      	ldr	r3, [pc, #144]	; (800616c <_svfiprintf_r+0x1e8>)
 80060dc:	bb13      	cbnz	r3, 8006124 <_svfiprintf_r+0x1a0>
 80060de:	9b03      	ldr	r3, [sp, #12]
 80060e0:	3307      	adds	r3, #7
 80060e2:	f023 0307 	bic.w	r3, r3, #7
 80060e6:	3308      	adds	r3, #8
 80060e8:	9303      	str	r3, [sp, #12]
 80060ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ec:	444b      	add	r3, r9
 80060ee:	9309      	str	r3, [sp, #36]	; 0x24
 80060f0:	e76d      	b.n	8005fce <_svfiprintf_r+0x4a>
 80060f2:	fb05 3202 	mla	r2, r5, r2, r3
 80060f6:	2001      	movs	r0, #1
 80060f8:	460f      	mov	r7, r1
 80060fa:	e7a6      	b.n	800604a <_svfiprintf_r+0xc6>
 80060fc:	2300      	movs	r3, #0
 80060fe:	3701      	adds	r7, #1
 8006100:	9305      	str	r3, [sp, #20]
 8006102:	4619      	mov	r1, r3
 8006104:	250a      	movs	r5, #10
 8006106:	4638      	mov	r0, r7
 8006108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800610c:	3a30      	subs	r2, #48	; 0x30
 800610e:	2a09      	cmp	r2, #9
 8006110:	d903      	bls.n	800611a <_svfiprintf_r+0x196>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0c8      	beq.n	80060a8 <_svfiprintf_r+0x124>
 8006116:	9105      	str	r1, [sp, #20]
 8006118:	e7c6      	b.n	80060a8 <_svfiprintf_r+0x124>
 800611a:	fb05 2101 	mla	r1, r5, r1, r2
 800611e:	2301      	movs	r3, #1
 8006120:	4607      	mov	r7, r0
 8006122:	e7f0      	b.n	8006106 <_svfiprintf_r+0x182>
 8006124:	ab03      	add	r3, sp, #12
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	4622      	mov	r2, r4
 800612a:	4b11      	ldr	r3, [pc, #68]	; (8006170 <_svfiprintf_r+0x1ec>)
 800612c:	a904      	add	r1, sp, #16
 800612e:	4640      	mov	r0, r8
 8006130:	f3af 8000 	nop.w
 8006134:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006138:	4681      	mov	r9, r0
 800613a:	d1d6      	bne.n	80060ea <_svfiprintf_r+0x166>
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	065b      	lsls	r3, r3, #25
 8006140:	f53f af35 	bmi.w	8005fae <_svfiprintf_r+0x2a>
 8006144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006146:	b01d      	add	sp, #116	; 0x74
 8006148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614c:	ab03      	add	r3, sp, #12
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	4622      	mov	r2, r4
 8006152:	4b07      	ldr	r3, [pc, #28]	; (8006170 <_svfiprintf_r+0x1ec>)
 8006154:	a904      	add	r1, sp, #16
 8006156:	4640      	mov	r0, r8
 8006158:	f000 f882 	bl	8006260 <_printf_i>
 800615c:	e7ea      	b.n	8006134 <_svfiprintf_r+0x1b0>
 800615e:	bf00      	nop
 8006160:	080068da 	.word	0x080068da
 8006164:	080068e0 	.word	0x080068e0
 8006168:	080068e4 	.word	0x080068e4
 800616c:	00000000 	.word	0x00000000
 8006170:	08005ed1 	.word	0x08005ed1

08006174 <_printf_common>:
 8006174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	4691      	mov	r9, r2
 800617a:	461f      	mov	r7, r3
 800617c:	688a      	ldr	r2, [r1, #8]
 800617e:	690b      	ldr	r3, [r1, #16]
 8006180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006184:	4293      	cmp	r3, r2
 8006186:	bfb8      	it	lt
 8006188:	4613      	movlt	r3, r2
 800618a:	f8c9 3000 	str.w	r3, [r9]
 800618e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006192:	4606      	mov	r6, r0
 8006194:	460c      	mov	r4, r1
 8006196:	b112      	cbz	r2, 800619e <_printf_common+0x2a>
 8006198:	3301      	adds	r3, #1
 800619a:	f8c9 3000 	str.w	r3, [r9]
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	0699      	lsls	r1, r3, #26
 80061a2:	bf42      	ittt	mi
 80061a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80061a8:	3302      	addmi	r3, #2
 80061aa:	f8c9 3000 	strmi.w	r3, [r9]
 80061ae:	6825      	ldr	r5, [r4, #0]
 80061b0:	f015 0506 	ands.w	r5, r5, #6
 80061b4:	d107      	bne.n	80061c6 <_printf_common+0x52>
 80061b6:	f104 0a19 	add.w	sl, r4, #25
 80061ba:	68e3      	ldr	r3, [r4, #12]
 80061bc:	f8d9 2000 	ldr.w	r2, [r9]
 80061c0:	1a9b      	subs	r3, r3, r2
 80061c2:	42ab      	cmp	r3, r5
 80061c4:	dc28      	bgt.n	8006218 <_printf_common+0xa4>
 80061c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	3300      	adds	r3, #0
 80061ce:	bf18      	it	ne
 80061d0:	2301      	movne	r3, #1
 80061d2:	0692      	lsls	r2, r2, #26
 80061d4:	d42d      	bmi.n	8006232 <_printf_common+0xbe>
 80061d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061da:	4639      	mov	r1, r7
 80061dc:	4630      	mov	r0, r6
 80061de:	47c0      	blx	r8
 80061e0:	3001      	adds	r0, #1
 80061e2:	d020      	beq.n	8006226 <_printf_common+0xb2>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	68e5      	ldr	r5, [r4, #12]
 80061e8:	f8d9 2000 	ldr.w	r2, [r9]
 80061ec:	f003 0306 	and.w	r3, r3, #6
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	bf08      	it	eq
 80061f4:	1aad      	subeq	r5, r5, r2
 80061f6:	68a3      	ldr	r3, [r4, #8]
 80061f8:	6922      	ldr	r2, [r4, #16]
 80061fa:	bf0c      	ite	eq
 80061fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006200:	2500      	movne	r5, #0
 8006202:	4293      	cmp	r3, r2
 8006204:	bfc4      	itt	gt
 8006206:	1a9b      	subgt	r3, r3, r2
 8006208:	18ed      	addgt	r5, r5, r3
 800620a:	f04f 0900 	mov.w	r9, #0
 800620e:	341a      	adds	r4, #26
 8006210:	454d      	cmp	r5, r9
 8006212:	d11a      	bne.n	800624a <_printf_common+0xd6>
 8006214:	2000      	movs	r0, #0
 8006216:	e008      	b.n	800622a <_printf_common+0xb6>
 8006218:	2301      	movs	r3, #1
 800621a:	4652      	mov	r2, sl
 800621c:	4639      	mov	r1, r7
 800621e:	4630      	mov	r0, r6
 8006220:	47c0      	blx	r8
 8006222:	3001      	adds	r0, #1
 8006224:	d103      	bne.n	800622e <_printf_common+0xba>
 8006226:	f04f 30ff 	mov.w	r0, #4294967295
 800622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622e:	3501      	adds	r5, #1
 8006230:	e7c3      	b.n	80061ba <_printf_common+0x46>
 8006232:	18e1      	adds	r1, r4, r3
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	2030      	movs	r0, #48	; 0x30
 8006238:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800623c:	4422      	add	r2, r4
 800623e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006242:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006246:	3302      	adds	r3, #2
 8006248:	e7c5      	b.n	80061d6 <_printf_common+0x62>
 800624a:	2301      	movs	r3, #1
 800624c:	4622      	mov	r2, r4
 800624e:	4639      	mov	r1, r7
 8006250:	4630      	mov	r0, r6
 8006252:	47c0      	blx	r8
 8006254:	3001      	adds	r0, #1
 8006256:	d0e6      	beq.n	8006226 <_printf_common+0xb2>
 8006258:	f109 0901 	add.w	r9, r9, #1
 800625c:	e7d8      	b.n	8006210 <_printf_common+0x9c>
	...

08006260 <_printf_i>:
 8006260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006264:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006268:	460c      	mov	r4, r1
 800626a:	7e09      	ldrb	r1, [r1, #24]
 800626c:	b085      	sub	sp, #20
 800626e:	296e      	cmp	r1, #110	; 0x6e
 8006270:	4617      	mov	r7, r2
 8006272:	4606      	mov	r6, r0
 8006274:	4698      	mov	r8, r3
 8006276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006278:	f000 80b3 	beq.w	80063e2 <_printf_i+0x182>
 800627c:	d822      	bhi.n	80062c4 <_printf_i+0x64>
 800627e:	2963      	cmp	r1, #99	; 0x63
 8006280:	d036      	beq.n	80062f0 <_printf_i+0x90>
 8006282:	d80a      	bhi.n	800629a <_printf_i+0x3a>
 8006284:	2900      	cmp	r1, #0
 8006286:	f000 80b9 	beq.w	80063fc <_printf_i+0x19c>
 800628a:	2958      	cmp	r1, #88	; 0x58
 800628c:	f000 8083 	beq.w	8006396 <_printf_i+0x136>
 8006290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006294:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006298:	e032      	b.n	8006300 <_printf_i+0xa0>
 800629a:	2964      	cmp	r1, #100	; 0x64
 800629c:	d001      	beq.n	80062a2 <_printf_i+0x42>
 800629e:	2969      	cmp	r1, #105	; 0x69
 80062a0:	d1f6      	bne.n	8006290 <_printf_i+0x30>
 80062a2:	6820      	ldr	r0, [r4, #0]
 80062a4:	6813      	ldr	r3, [r2, #0]
 80062a6:	0605      	lsls	r5, r0, #24
 80062a8:	f103 0104 	add.w	r1, r3, #4
 80062ac:	d52a      	bpl.n	8006304 <_printf_i+0xa4>
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6011      	str	r1, [r2, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da03      	bge.n	80062be <_printf_i+0x5e>
 80062b6:	222d      	movs	r2, #45	; 0x2d
 80062b8:	425b      	negs	r3, r3
 80062ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80062be:	486f      	ldr	r0, [pc, #444]	; (800647c <_printf_i+0x21c>)
 80062c0:	220a      	movs	r2, #10
 80062c2:	e039      	b.n	8006338 <_printf_i+0xd8>
 80062c4:	2973      	cmp	r1, #115	; 0x73
 80062c6:	f000 809d 	beq.w	8006404 <_printf_i+0x1a4>
 80062ca:	d808      	bhi.n	80062de <_printf_i+0x7e>
 80062cc:	296f      	cmp	r1, #111	; 0x6f
 80062ce:	d020      	beq.n	8006312 <_printf_i+0xb2>
 80062d0:	2970      	cmp	r1, #112	; 0x70
 80062d2:	d1dd      	bne.n	8006290 <_printf_i+0x30>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	f043 0320 	orr.w	r3, r3, #32
 80062da:	6023      	str	r3, [r4, #0]
 80062dc:	e003      	b.n	80062e6 <_printf_i+0x86>
 80062de:	2975      	cmp	r1, #117	; 0x75
 80062e0:	d017      	beq.n	8006312 <_printf_i+0xb2>
 80062e2:	2978      	cmp	r1, #120	; 0x78
 80062e4:	d1d4      	bne.n	8006290 <_printf_i+0x30>
 80062e6:	2378      	movs	r3, #120	; 0x78
 80062e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062ec:	4864      	ldr	r0, [pc, #400]	; (8006480 <_printf_i+0x220>)
 80062ee:	e055      	b.n	800639c <_printf_i+0x13c>
 80062f0:	6813      	ldr	r3, [r2, #0]
 80062f2:	1d19      	adds	r1, r3, #4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6011      	str	r1, [r2, #0]
 80062f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006300:	2301      	movs	r3, #1
 8006302:	e08c      	b.n	800641e <_printf_i+0x1be>
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6011      	str	r1, [r2, #0]
 8006308:	f010 0f40 	tst.w	r0, #64	; 0x40
 800630c:	bf18      	it	ne
 800630e:	b21b      	sxthne	r3, r3
 8006310:	e7cf      	b.n	80062b2 <_printf_i+0x52>
 8006312:	6813      	ldr	r3, [r2, #0]
 8006314:	6825      	ldr	r5, [r4, #0]
 8006316:	1d18      	adds	r0, r3, #4
 8006318:	6010      	str	r0, [r2, #0]
 800631a:	0628      	lsls	r0, r5, #24
 800631c:	d501      	bpl.n	8006322 <_printf_i+0xc2>
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	e002      	b.n	8006328 <_printf_i+0xc8>
 8006322:	0668      	lsls	r0, r5, #25
 8006324:	d5fb      	bpl.n	800631e <_printf_i+0xbe>
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	4854      	ldr	r0, [pc, #336]	; (800647c <_printf_i+0x21c>)
 800632a:	296f      	cmp	r1, #111	; 0x6f
 800632c:	bf14      	ite	ne
 800632e:	220a      	movne	r2, #10
 8006330:	2208      	moveq	r2, #8
 8006332:	2100      	movs	r1, #0
 8006334:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006338:	6865      	ldr	r5, [r4, #4]
 800633a:	60a5      	str	r5, [r4, #8]
 800633c:	2d00      	cmp	r5, #0
 800633e:	f2c0 8095 	blt.w	800646c <_printf_i+0x20c>
 8006342:	6821      	ldr	r1, [r4, #0]
 8006344:	f021 0104 	bic.w	r1, r1, #4
 8006348:	6021      	str	r1, [r4, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d13d      	bne.n	80063ca <_printf_i+0x16a>
 800634e:	2d00      	cmp	r5, #0
 8006350:	f040 808e 	bne.w	8006470 <_printf_i+0x210>
 8006354:	4665      	mov	r5, ip
 8006356:	2a08      	cmp	r2, #8
 8006358:	d10b      	bne.n	8006372 <_printf_i+0x112>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	07db      	lsls	r3, r3, #31
 800635e:	d508      	bpl.n	8006372 <_printf_i+0x112>
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	6862      	ldr	r2, [r4, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	bfde      	ittt	le
 8006368:	2330      	movle	r3, #48	; 0x30
 800636a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800636e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006372:	ebac 0305 	sub.w	r3, ip, r5
 8006376:	6123      	str	r3, [r4, #16]
 8006378:	f8cd 8000 	str.w	r8, [sp]
 800637c:	463b      	mov	r3, r7
 800637e:	aa03      	add	r2, sp, #12
 8006380:	4621      	mov	r1, r4
 8006382:	4630      	mov	r0, r6
 8006384:	f7ff fef6 	bl	8006174 <_printf_common>
 8006388:	3001      	adds	r0, #1
 800638a:	d14d      	bne.n	8006428 <_printf_i+0x1c8>
 800638c:	f04f 30ff 	mov.w	r0, #4294967295
 8006390:	b005      	add	sp, #20
 8006392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006396:	4839      	ldr	r0, [pc, #228]	; (800647c <_printf_i+0x21c>)
 8006398:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800639c:	6813      	ldr	r3, [r2, #0]
 800639e:	6821      	ldr	r1, [r4, #0]
 80063a0:	1d1d      	adds	r5, r3, #4
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6015      	str	r5, [r2, #0]
 80063a6:	060a      	lsls	r2, r1, #24
 80063a8:	d50b      	bpl.n	80063c2 <_printf_i+0x162>
 80063aa:	07ca      	lsls	r2, r1, #31
 80063ac:	bf44      	itt	mi
 80063ae:	f041 0120 	orrmi.w	r1, r1, #32
 80063b2:	6021      	strmi	r1, [r4, #0]
 80063b4:	b91b      	cbnz	r3, 80063be <_printf_i+0x15e>
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	f022 0220 	bic.w	r2, r2, #32
 80063bc:	6022      	str	r2, [r4, #0]
 80063be:	2210      	movs	r2, #16
 80063c0:	e7b7      	b.n	8006332 <_printf_i+0xd2>
 80063c2:	064d      	lsls	r5, r1, #25
 80063c4:	bf48      	it	mi
 80063c6:	b29b      	uxthmi	r3, r3
 80063c8:	e7ef      	b.n	80063aa <_printf_i+0x14a>
 80063ca:	4665      	mov	r5, ip
 80063cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80063d0:	fb02 3311 	mls	r3, r2, r1, r3
 80063d4:	5cc3      	ldrb	r3, [r0, r3]
 80063d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063da:	460b      	mov	r3, r1
 80063dc:	2900      	cmp	r1, #0
 80063de:	d1f5      	bne.n	80063cc <_printf_i+0x16c>
 80063e0:	e7b9      	b.n	8006356 <_printf_i+0xf6>
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	6825      	ldr	r5, [r4, #0]
 80063e6:	6961      	ldr	r1, [r4, #20]
 80063e8:	1d18      	adds	r0, r3, #4
 80063ea:	6010      	str	r0, [r2, #0]
 80063ec:	0628      	lsls	r0, r5, #24
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	d501      	bpl.n	80063f6 <_printf_i+0x196>
 80063f2:	6019      	str	r1, [r3, #0]
 80063f4:	e002      	b.n	80063fc <_printf_i+0x19c>
 80063f6:	066a      	lsls	r2, r5, #25
 80063f8:	d5fb      	bpl.n	80063f2 <_printf_i+0x192>
 80063fa:	8019      	strh	r1, [r3, #0]
 80063fc:	2300      	movs	r3, #0
 80063fe:	6123      	str	r3, [r4, #16]
 8006400:	4665      	mov	r5, ip
 8006402:	e7b9      	b.n	8006378 <_printf_i+0x118>
 8006404:	6813      	ldr	r3, [r2, #0]
 8006406:	1d19      	adds	r1, r3, #4
 8006408:	6011      	str	r1, [r2, #0]
 800640a:	681d      	ldr	r5, [r3, #0]
 800640c:	6862      	ldr	r2, [r4, #4]
 800640e:	2100      	movs	r1, #0
 8006410:	4628      	mov	r0, r5
 8006412:	f7f9 ff05 	bl	8000220 <memchr>
 8006416:	b108      	cbz	r0, 800641c <_printf_i+0x1bc>
 8006418:	1b40      	subs	r0, r0, r5
 800641a:	6060      	str	r0, [r4, #4]
 800641c:	6863      	ldr	r3, [r4, #4]
 800641e:	6123      	str	r3, [r4, #16]
 8006420:	2300      	movs	r3, #0
 8006422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006426:	e7a7      	b.n	8006378 <_printf_i+0x118>
 8006428:	6923      	ldr	r3, [r4, #16]
 800642a:	462a      	mov	r2, r5
 800642c:	4639      	mov	r1, r7
 800642e:	4630      	mov	r0, r6
 8006430:	47c0      	blx	r8
 8006432:	3001      	adds	r0, #1
 8006434:	d0aa      	beq.n	800638c <_printf_i+0x12c>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	079b      	lsls	r3, r3, #30
 800643a:	d413      	bmi.n	8006464 <_printf_i+0x204>
 800643c:	68e0      	ldr	r0, [r4, #12]
 800643e:	9b03      	ldr	r3, [sp, #12]
 8006440:	4298      	cmp	r0, r3
 8006442:	bfb8      	it	lt
 8006444:	4618      	movlt	r0, r3
 8006446:	e7a3      	b.n	8006390 <_printf_i+0x130>
 8006448:	2301      	movs	r3, #1
 800644a:	464a      	mov	r2, r9
 800644c:	4639      	mov	r1, r7
 800644e:	4630      	mov	r0, r6
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d09a      	beq.n	800638c <_printf_i+0x12c>
 8006456:	3501      	adds	r5, #1
 8006458:	68e3      	ldr	r3, [r4, #12]
 800645a:	9a03      	ldr	r2, [sp, #12]
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	42ab      	cmp	r3, r5
 8006460:	dcf2      	bgt.n	8006448 <_printf_i+0x1e8>
 8006462:	e7eb      	b.n	800643c <_printf_i+0x1dc>
 8006464:	2500      	movs	r5, #0
 8006466:	f104 0919 	add.w	r9, r4, #25
 800646a:	e7f5      	b.n	8006458 <_printf_i+0x1f8>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1ac      	bne.n	80063ca <_printf_i+0x16a>
 8006470:	7803      	ldrb	r3, [r0, #0]
 8006472:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006476:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800647a:	e76c      	b.n	8006356 <_printf_i+0xf6>
 800647c:	080068eb 	.word	0x080068eb
 8006480:	080068fc 	.word	0x080068fc

08006484 <memmove>:
 8006484:	4288      	cmp	r0, r1
 8006486:	b510      	push	{r4, lr}
 8006488:	eb01 0302 	add.w	r3, r1, r2
 800648c:	d807      	bhi.n	800649e <memmove+0x1a>
 800648e:	1e42      	subs	r2, r0, #1
 8006490:	4299      	cmp	r1, r3
 8006492:	d00a      	beq.n	80064aa <memmove+0x26>
 8006494:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006498:	f802 4f01 	strb.w	r4, [r2, #1]!
 800649c:	e7f8      	b.n	8006490 <memmove+0xc>
 800649e:	4283      	cmp	r3, r0
 80064a0:	d9f5      	bls.n	800648e <memmove+0xa>
 80064a2:	1881      	adds	r1, r0, r2
 80064a4:	1ad2      	subs	r2, r2, r3
 80064a6:	42d3      	cmn	r3, r2
 80064a8:	d100      	bne.n	80064ac <memmove+0x28>
 80064aa:	bd10      	pop	{r4, pc}
 80064ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80064b4:	e7f7      	b.n	80064a6 <memmove+0x22>
	...

080064b8 <_free_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4605      	mov	r5, r0
 80064bc:	2900      	cmp	r1, #0
 80064be:	d045      	beq.n	800654c <_free_r+0x94>
 80064c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c4:	1f0c      	subs	r4, r1, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bfb8      	it	lt
 80064ca:	18e4      	addlt	r4, r4, r3
 80064cc:	f000 f8d2 	bl	8006674 <__malloc_lock>
 80064d0:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <_free_r+0x98>)
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	4610      	mov	r0, r2
 80064d6:	b933      	cbnz	r3, 80064e6 <_free_r+0x2e>
 80064d8:	6063      	str	r3, [r4, #4]
 80064da:	6014      	str	r4, [r2, #0]
 80064dc:	4628      	mov	r0, r5
 80064de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e2:	f000 b8c8 	b.w	8006676 <__malloc_unlock>
 80064e6:	42a3      	cmp	r3, r4
 80064e8:	d90c      	bls.n	8006504 <_free_r+0x4c>
 80064ea:	6821      	ldr	r1, [r4, #0]
 80064ec:	1862      	adds	r2, r4, r1
 80064ee:	4293      	cmp	r3, r2
 80064f0:	bf04      	itt	eq
 80064f2:	681a      	ldreq	r2, [r3, #0]
 80064f4:	685b      	ldreq	r3, [r3, #4]
 80064f6:	6063      	str	r3, [r4, #4]
 80064f8:	bf04      	itt	eq
 80064fa:	1852      	addeq	r2, r2, r1
 80064fc:	6022      	streq	r2, [r4, #0]
 80064fe:	6004      	str	r4, [r0, #0]
 8006500:	e7ec      	b.n	80064dc <_free_r+0x24>
 8006502:	4613      	mov	r3, r2
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	b10a      	cbz	r2, 800650c <_free_r+0x54>
 8006508:	42a2      	cmp	r2, r4
 800650a:	d9fa      	bls.n	8006502 <_free_r+0x4a>
 800650c:	6819      	ldr	r1, [r3, #0]
 800650e:	1858      	adds	r0, r3, r1
 8006510:	42a0      	cmp	r0, r4
 8006512:	d10b      	bne.n	800652c <_free_r+0x74>
 8006514:	6820      	ldr	r0, [r4, #0]
 8006516:	4401      	add	r1, r0
 8006518:	1858      	adds	r0, r3, r1
 800651a:	4282      	cmp	r2, r0
 800651c:	6019      	str	r1, [r3, #0]
 800651e:	d1dd      	bne.n	80064dc <_free_r+0x24>
 8006520:	6810      	ldr	r0, [r2, #0]
 8006522:	6852      	ldr	r2, [r2, #4]
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	4401      	add	r1, r0
 8006528:	6019      	str	r1, [r3, #0]
 800652a:	e7d7      	b.n	80064dc <_free_r+0x24>
 800652c:	d902      	bls.n	8006534 <_free_r+0x7c>
 800652e:	230c      	movs	r3, #12
 8006530:	602b      	str	r3, [r5, #0]
 8006532:	e7d3      	b.n	80064dc <_free_r+0x24>
 8006534:	6820      	ldr	r0, [r4, #0]
 8006536:	1821      	adds	r1, r4, r0
 8006538:	428a      	cmp	r2, r1
 800653a:	bf04      	itt	eq
 800653c:	6811      	ldreq	r1, [r2, #0]
 800653e:	6852      	ldreq	r2, [r2, #4]
 8006540:	6062      	str	r2, [r4, #4]
 8006542:	bf04      	itt	eq
 8006544:	1809      	addeq	r1, r1, r0
 8006546:	6021      	streq	r1, [r4, #0]
 8006548:	605c      	str	r4, [r3, #4]
 800654a:	e7c7      	b.n	80064dc <_free_r+0x24>
 800654c:	bd38      	pop	{r3, r4, r5, pc}
 800654e:	bf00      	nop
 8006550:	20015500 	.word	0x20015500

08006554 <_malloc_r>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	1ccd      	adds	r5, r1, #3
 8006558:	f025 0503 	bic.w	r5, r5, #3
 800655c:	3508      	adds	r5, #8
 800655e:	2d0c      	cmp	r5, #12
 8006560:	bf38      	it	cc
 8006562:	250c      	movcc	r5, #12
 8006564:	2d00      	cmp	r5, #0
 8006566:	4606      	mov	r6, r0
 8006568:	db01      	blt.n	800656e <_malloc_r+0x1a>
 800656a:	42a9      	cmp	r1, r5
 800656c:	d903      	bls.n	8006576 <_malloc_r+0x22>
 800656e:	230c      	movs	r3, #12
 8006570:	6033      	str	r3, [r6, #0]
 8006572:	2000      	movs	r0, #0
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	f000 f87d 	bl	8006674 <__malloc_lock>
 800657a:	4a21      	ldr	r2, [pc, #132]	; (8006600 <_malloc_r+0xac>)
 800657c:	6814      	ldr	r4, [r2, #0]
 800657e:	4621      	mov	r1, r4
 8006580:	b991      	cbnz	r1, 80065a8 <_malloc_r+0x54>
 8006582:	4c20      	ldr	r4, [pc, #128]	; (8006604 <_malloc_r+0xb0>)
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	b91b      	cbnz	r3, 8006590 <_malloc_r+0x3c>
 8006588:	4630      	mov	r0, r6
 800658a:	f000 f863 	bl	8006654 <_sbrk_r>
 800658e:	6020      	str	r0, [r4, #0]
 8006590:	4629      	mov	r1, r5
 8006592:	4630      	mov	r0, r6
 8006594:	f000 f85e 	bl	8006654 <_sbrk_r>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d124      	bne.n	80065e6 <_malloc_r+0x92>
 800659c:	230c      	movs	r3, #12
 800659e:	6033      	str	r3, [r6, #0]
 80065a0:	4630      	mov	r0, r6
 80065a2:	f000 f868 	bl	8006676 <__malloc_unlock>
 80065a6:	e7e4      	b.n	8006572 <_malloc_r+0x1e>
 80065a8:	680b      	ldr	r3, [r1, #0]
 80065aa:	1b5b      	subs	r3, r3, r5
 80065ac:	d418      	bmi.n	80065e0 <_malloc_r+0x8c>
 80065ae:	2b0b      	cmp	r3, #11
 80065b0:	d90f      	bls.n	80065d2 <_malloc_r+0x7e>
 80065b2:	600b      	str	r3, [r1, #0]
 80065b4:	50cd      	str	r5, [r1, r3]
 80065b6:	18cc      	adds	r4, r1, r3
 80065b8:	4630      	mov	r0, r6
 80065ba:	f000 f85c 	bl	8006676 <__malloc_unlock>
 80065be:	f104 000b 	add.w	r0, r4, #11
 80065c2:	1d23      	adds	r3, r4, #4
 80065c4:	f020 0007 	bic.w	r0, r0, #7
 80065c8:	1ac3      	subs	r3, r0, r3
 80065ca:	d0d3      	beq.n	8006574 <_malloc_r+0x20>
 80065cc:	425a      	negs	r2, r3
 80065ce:	50e2      	str	r2, [r4, r3]
 80065d0:	e7d0      	b.n	8006574 <_malloc_r+0x20>
 80065d2:	428c      	cmp	r4, r1
 80065d4:	684b      	ldr	r3, [r1, #4]
 80065d6:	bf16      	itet	ne
 80065d8:	6063      	strne	r3, [r4, #4]
 80065da:	6013      	streq	r3, [r2, #0]
 80065dc:	460c      	movne	r4, r1
 80065de:	e7eb      	b.n	80065b8 <_malloc_r+0x64>
 80065e0:	460c      	mov	r4, r1
 80065e2:	6849      	ldr	r1, [r1, #4]
 80065e4:	e7cc      	b.n	8006580 <_malloc_r+0x2c>
 80065e6:	1cc4      	adds	r4, r0, #3
 80065e8:	f024 0403 	bic.w	r4, r4, #3
 80065ec:	42a0      	cmp	r0, r4
 80065ee:	d005      	beq.n	80065fc <_malloc_r+0xa8>
 80065f0:	1a21      	subs	r1, r4, r0
 80065f2:	4630      	mov	r0, r6
 80065f4:	f000 f82e 	bl	8006654 <_sbrk_r>
 80065f8:	3001      	adds	r0, #1
 80065fa:	d0cf      	beq.n	800659c <_malloc_r+0x48>
 80065fc:	6025      	str	r5, [r4, #0]
 80065fe:	e7db      	b.n	80065b8 <_malloc_r+0x64>
 8006600:	20015500 	.word	0x20015500
 8006604:	20015504 	.word	0x20015504

08006608 <_realloc_r>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	4607      	mov	r7, r0
 800660c:	4614      	mov	r4, r2
 800660e:	460e      	mov	r6, r1
 8006610:	b921      	cbnz	r1, 800661c <_realloc_r+0x14>
 8006612:	4611      	mov	r1, r2
 8006614:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006618:	f7ff bf9c 	b.w	8006554 <_malloc_r>
 800661c:	b922      	cbnz	r2, 8006628 <_realloc_r+0x20>
 800661e:	f7ff ff4b 	bl	80064b8 <_free_r>
 8006622:	4625      	mov	r5, r4
 8006624:	4628      	mov	r0, r5
 8006626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006628:	f000 f826 	bl	8006678 <_malloc_usable_size_r>
 800662c:	42a0      	cmp	r0, r4
 800662e:	d20f      	bcs.n	8006650 <_realloc_r+0x48>
 8006630:	4621      	mov	r1, r4
 8006632:	4638      	mov	r0, r7
 8006634:	f7ff ff8e 	bl	8006554 <_malloc_r>
 8006638:	4605      	mov	r5, r0
 800663a:	2800      	cmp	r0, #0
 800663c:	d0f2      	beq.n	8006624 <_realloc_r+0x1c>
 800663e:	4631      	mov	r1, r6
 8006640:	4622      	mov	r2, r4
 8006642:	f7ff fc12 	bl	8005e6a <memcpy>
 8006646:	4631      	mov	r1, r6
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff ff35 	bl	80064b8 <_free_r>
 800664e:	e7e9      	b.n	8006624 <_realloc_r+0x1c>
 8006650:	4635      	mov	r5, r6
 8006652:	e7e7      	b.n	8006624 <_realloc_r+0x1c>

08006654 <_sbrk_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4c06      	ldr	r4, [pc, #24]	; (8006670 <_sbrk_r+0x1c>)
 8006658:	2300      	movs	r3, #0
 800665a:	4605      	mov	r5, r0
 800665c:	4608      	mov	r0, r1
 800665e:	6023      	str	r3, [r4, #0]
 8006660:	f000 f812 	bl	8006688 <_sbrk>
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	d102      	bne.n	800666e <_sbrk_r+0x1a>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	b103      	cbz	r3, 800666e <_sbrk_r+0x1a>
 800666c:	602b      	str	r3, [r5, #0]
 800666e:	bd38      	pop	{r3, r4, r5, pc}
 8006670:	2001566c 	.word	0x2001566c

08006674 <__malloc_lock>:
 8006674:	4770      	bx	lr

08006676 <__malloc_unlock>:
 8006676:	4770      	bx	lr

08006678 <_malloc_usable_size_r>:
 8006678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800667c:	1f18      	subs	r0, r3, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	bfbc      	itt	lt
 8006682:	580b      	ldrlt	r3, [r1, r0]
 8006684:	18c0      	addlt	r0, r0, r3
 8006686:	4770      	bx	lr

08006688 <_sbrk>:
 8006688:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <_sbrk+0x38>)
 800668a:	6819      	ldr	r1, [r3, #0]
 800668c:	b510      	push	{r4, lr}
 800668e:	4602      	mov	r2, r0
 8006690:	b909      	cbnz	r1, 8006696 <_sbrk+0xe>
 8006692:	490c      	ldr	r1, [pc, #48]	; (80066c4 <_sbrk+0x3c>)
 8006694:	6019      	str	r1, [r3, #0]
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	4669      	mov	r1, sp
 800669a:	4402      	add	r2, r0
 800669c:	428a      	cmp	r2, r1
 800669e:	d806      	bhi.n	80066ae <_sbrk+0x26>
 80066a0:	4909      	ldr	r1, [pc, #36]	; (80066c8 <_sbrk+0x40>)
 80066a2:	4c0a      	ldr	r4, [pc, #40]	; (80066cc <_sbrk+0x44>)
 80066a4:	6809      	ldr	r1, [r1, #0]
 80066a6:	42a1      	cmp	r1, r4
 80066a8:	d008      	beq.n	80066bc <_sbrk+0x34>
 80066aa:	428a      	cmp	r2, r1
 80066ac:	d906      	bls.n	80066bc <_sbrk+0x34>
 80066ae:	f000 f80f 	bl	80066d0 <__errno>
 80066b2:	230c      	movs	r3, #12
 80066b4:	6003      	str	r3, [r0, #0]
 80066b6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ba:	bd10      	pop	{r4, pc}
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e7fc      	b.n	80066ba <_sbrk+0x32>
 80066c0:	20015508 	.word	0x20015508
 80066c4:	20015670 	.word	0x20015670
 80066c8:	20000188 	.word	0x20000188
 80066cc:	cafedead 	.word	0xcafedead

080066d0 <__errno>:
 80066d0:	4b01      	ldr	r3, [pc, #4]	; (80066d8 <__errno+0x8>)
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000124 	.word	0x20000124

080066dc <_init>:
 80066dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066de:	bf00      	nop
 80066e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e2:	bc08      	pop	{r3}
 80066e4:	469e      	mov	lr, r3
 80066e6:	4770      	bx	lr

080066e8 <_fini>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr
