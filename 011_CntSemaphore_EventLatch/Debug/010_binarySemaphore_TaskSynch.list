
010_binarySemaphore_TaskSynch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005904  08005904  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08005904  08005904  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005904  08005904  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800590c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015444  20000090  0800599c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200154d4  0800599c  000254d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f639  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e1f  00000000  00000000  0002f6f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  00031518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  00032150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002d45  00000000  00000000  00032ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b023  00000000  00000000  000359e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080217  00000000  00000000  00040a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0c1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce8  00000000  00000000  000c0c9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005698 	.word	0x08005698

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08005698 	.word	0x08005698

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	e076      	b.n	80003ca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002dc:	2201      	movs	r2, #1
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	693a      	ldr	r2, [r7, #16]
 80002ec:	4013      	ands	r3, r2
 80002ee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d165      	bne.n	80003c4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43db      	mvns	r3, r3
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	4619      	mov	r1, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d003      	beq.n	8000336 <GPIO_Init+0x76>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d12e      	bne.n	8000394 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689a      	ldr	r2, [r3, #8]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	2103      	movs	r1, #3
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	4619      	mov	r1, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	b29b      	uxth	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	2301      	movs	r3, #1
 8000370:	408b      	lsls	r3, r1
 8000372:	43db      	mvns	r3, r3
 8000374:	401a      	ands	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	7992      	ldrb	r2, [r2, #6]
 8000382:	4611      	mov	r1, r2
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	b292      	uxth	r2, r2
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	b292      	uxth	r2, r2
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	b29b      	uxth	r3, r3
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	401a      	ands	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	79db      	ldrb	r3, [r3, #7]
 80003b4:	4619      	mov	r1, r3
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2b0f      	cmp	r3, #15
 80003ce:	d985      	bls.n	80002dc <GPIO_Init+0x1c>
    }
  }
}
 80003d0:	bf00      	nop
 80003d2:	371c      	adds	r7, #28
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	807b      	strh	r3, [r7, #2]
 80003e8:	4613      	mov	r3, r2
 80003ea:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003f4:	787a      	ldrb	r2, [r7, #1]
 80003f6:	887b      	ldrh	r3, [r7, #2]
 80003f8:	f003 0307 	and.w	r3, r3, #7
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000402:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000404:	887b      	ldrh	r3, [r7, #2]
 8000406:	08db      	lsrs	r3, r3, #3
 8000408:	b29b      	uxth	r3, r3
 800040a:	461a      	mov	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3208      	adds	r2, #8
 8000410:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000414:	887b      	ldrh	r3, [r7, #2]
 8000416:	f003 0307 	and.w	r3, r3, #7
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	210f      	movs	r1, #15
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	43db      	mvns	r3, r3
 8000424:	8879      	ldrh	r1, [r7, #2]
 8000426:	08c9      	lsrs	r1, r1, #3
 8000428:	b289      	uxth	r1, r1
 800042a:	4608      	mov	r0, r1
 800042c:	ea02 0103 	and.w	r1, r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f100 0208 	add.w	r2, r0, #8
 8000436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800043a:	887b      	ldrh	r3, [r7, #2]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b29b      	uxth	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3208      	adds	r2, #8
 8000446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	4313      	orrs	r3, r2
 800044e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000450:	887b      	ldrh	r3, [r7, #2]
 8000452:	08db      	lsrs	r3, r3, #3
 8000454:	b29b      	uxth	r3, r3
 8000456:	461a      	mov	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3208      	adds	r2, #8
 800045c:	68b9      	ldr	r1, [r7, #8]
 800045e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
	...

08000470 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <RCC_DeInit+0x60>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a15      	ldr	r2, [pc, #84]	; (80004d0 <RCC_DeInit+0x60>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <RCC_DeInit+0x60>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <RCC_DeInit+0x60>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <RCC_DeInit+0x60>)
 800048c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000490:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000494:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <RCC_DeInit+0x60>)
 8000498:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <RCC_DeInit+0x64>)
 800049a:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <RCC_DeInit+0x60>)
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <RCC_DeInit+0x68>)
 80004a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <RCC_DeInit+0x60>)
 80004a6:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <RCC_DeInit+0x6c>)
 80004a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <RCC_DeInit+0x60>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a07      	ldr	r2, [pc, #28]	; (80004d0 <RCC_DeInit+0x60>)
 80004b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <RCC_DeInit+0x60>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <RCC_DeInit+0x60>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40023800 	.word	0x40023800
 80004d4:	24003010 	.word	0x24003010
 80004d8:	20003000 	.word	0x20003000
 80004dc:	24003000 	.word	0x24003000

080004e0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b08b      	sub	sp, #44	; 0x2c
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80004e8:	2300      	movs	r3, #0
 80004ea:	623b      	str	r3, [r7, #32]
 80004ec:	2300      	movs	r3, #0
 80004ee:	61fb      	str	r3, [r7, #28]
 80004f0:	2300      	movs	r3, #0
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
 80004f4:	2302      	movs	r3, #2
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	2302      	movs	r3, #2
 80004fe:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000500:	2302      	movs	r3, #2
 8000502:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000504:	4b6f      	ldr	r3, [pc, #444]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	f003 030c 	and.w	r3, r3, #12
 800050c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800050e:	6a3b      	ldr	r3, [r7, #32]
 8000510:	2b0c      	cmp	r3, #12
 8000512:	f200 8091 	bhi.w	8000638 <RCC_GetClocksFreq+0x158>
 8000516:	a201      	add	r2, pc, #4	; (adr r2, 800051c <RCC_GetClocksFreq+0x3c>)
 8000518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051c:	08000551 	.word	0x08000551
 8000520:	08000639 	.word	0x08000639
 8000524:	08000639 	.word	0x08000639
 8000528:	08000639 	.word	0x08000639
 800052c:	08000559 	.word	0x08000559
 8000530:	08000639 	.word	0x08000639
 8000534:	08000639 	.word	0x08000639
 8000538:	08000639 	.word	0x08000639
 800053c:	08000561 	.word	0x08000561
 8000540:	08000639 	.word	0x08000639
 8000544:	08000639 	.word	0x08000639
 8000548:	08000639 	.word	0x08000639
 800054c:	080005cd 	.word	0x080005cd
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a5d      	ldr	r2, [pc, #372]	; (80006c8 <RCC_GetClocksFreq+0x1e8>)
 8000554:	601a      	str	r2, [r3, #0]
    break;
 8000556:	e073      	b.n	8000640 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a5c      	ldr	r2, [pc, #368]	; (80006cc <RCC_GetClocksFreq+0x1ec>)
 800055c:	601a      	str	r2, [r3, #0]
    break;
 800055e:	e06f      	b.n	8000640 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000560:	4b58      	ldr	r3, [pc, #352]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	0d9b      	lsrs	r3, r3, #22
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800056c:	4b55      	ldr	r3, [pc, #340]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000574:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00c      	beq.n	8000596 <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800057c:	4a53      	ldr	r2, [pc, #332]	; (80006cc <RCC_GetClocksFreq+0x1ec>)
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	fbb2 f3f3 	udiv	r3, r2, r3
 8000584:	4a4f      	ldr	r2, [pc, #316]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 8000586:	6852      	ldr	r2, [r2, #4]
 8000588:	0992      	lsrs	r2, r2, #6
 800058a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
 8000594:	e00b      	b.n	80005ae <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000596:	4a4c      	ldr	r2, [pc, #304]	; (80006c8 <RCC_GetClocksFreq+0x1e8>)
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	fbb2 f3f3 	udiv	r3, r2, r3
 800059e:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 80005a0:	6852      	ldr	r2, [r2, #4]
 80005a2:	0992      	lsrs	r2, r2, #6
 80005a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005a8:	fb02 f303 	mul.w	r3, r2, r3
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005ae:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	0c1b      	lsrs	r3, r3, #16
 80005b4:	f003 0303 	and.w	r3, r3, #3
 80005b8:	3301      	adds	r3, #1
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80005be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
    break;
 80005ca:	e039      	b.n	8000640 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005cc:	4b3d      	ldr	r3, [pc, #244]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	0d9b      	lsrs	r3, r3, #22
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005d8:	4b3a      	ldr	r3, [pc, #232]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005e0:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00c      	beq.n	8000602 <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005e8:	4a38      	ldr	r2, [pc, #224]	; (80006cc <RCC_GetClocksFreq+0x1ec>)
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f0:	4a34      	ldr	r2, [pc, #208]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 80005f2:	6852      	ldr	r2, [r2, #4]
 80005f4:	0992      	lsrs	r2, r2, #6
 80005f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000600:	e00b      	b.n	800061a <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000602:	4a31      	ldr	r2, [pc, #196]	; (80006c8 <RCC_GetClocksFreq+0x1e8>)
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	fbb2 f3f3 	udiv	r3, r2, r3
 800060a:	4a2e      	ldr	r2, [pc, #184]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 800060c:	6852      	ldr	r2, [r2, #4]
 800060e:	0992      	lsrs	r2, r2, #6
 8000610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000614:	fb02 f303 	mul.w	r3, r2, r3
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 800061a:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	0f1b      	lsrs	r3, r3, #28
 8000620:	f003 0307 	and.w	r3, r3, #7
 8000624:	3301      	adds	r3, #1
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 800062a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	601a      	str	r2, [r3, #0]
    break;
 8000636:	e003      	b.n	8000640 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a23      	ldr	r2, [pc, #140]	; (80006c8 <RCC_GetClocksFreq+0x1e8>)
 800063c:	601a      	str	r2, [r3, #0]
    break;
 800063e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000648:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800064a:	6a3b      	ldr	r3, [r7, #32]
 800064c:	091b      	lsrs	r3, r3, #4
 800064e:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000650:	4a1f      	ldr	r2, [pc, #124]	; (80006d0 <RCC_GetClocksFreq+0x1f0>)
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	40da      	lsrs	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000670:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 8000672:	6a3b      	ldr	r3, [r7, #32]
 8000674:	0a9b      	lsrs	r3, r3, #10
 8000676:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000678:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <RCC_GetClocksFreq+0x1f0>)
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	685a      	ldr	r2, [r3, #4]
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	40da      	lsrs	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <RCC_GetClocksFreq+0x1e4>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000698:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	0b5b      	lsrs	r3, r3, #13
 800069e:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006a0:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <RCC_GetClocksFreq+0x1f0>)
 80006a2:	6a3b      	ldr	r3, [r7, #32]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	40da      	lsrs	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60da      	str	r2, [r3, #12]
}
 80006b8:	bf00      	nop
 80006ba:	372c      	adds	r7, #44	; 0x2c
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40023800 	.word	0x40023800
 80006c8:	00f42400 	.word	0x00f42400
 80006cc:	007a1200 	.word	0x007a1200
 80006d0:	20000000 	.word	0x20000000

080006d4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d006      	beq.n	80006f4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ea:	4909      	ldr	r1, [pc, #36]	; (8000710 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006f2:	e006      	b.n	8000702 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4904      	ldr	r1, [pc, #16]	; (8000710 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006fe:	4013      	ands	r3, r2
 8000700:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <RCC_APB1PeriphClockCmd+0x3c>)
 8000728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800072a:	4909      	ldr	r1, [pc, #36]	; (8000750 <RCC_APB1PeriphClockCmd+0x3c>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4313      	orrs	r3, r2
 8000730:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000732:	e006      	b.n	8000742 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <RCC_APB1PeriphClockCmd+0x3c>)
 8000736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	43db      	mvns	r3, r3
 800073c:	4904      	ldr	r1, [pc, #16]	; (8000750 <RCC_APB1PeriphClockCmd+0x3c>)
 800073e:	4013      	ands	r3, r2
 8000740:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	8a1b      	ldrh	r3, [r3, #16]
 8000772:	b29b      	uxth	r3, r3
 8000774:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800077c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	88db      	ldrh	r3, [r3, #6]
 8000782:	461a      	mov	r2, r3
 8000784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000786:	4313      	orrs	r3, r2
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	b29a      	uxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	899b      	ldrh	r3, [r3, #12]
 8000796:	b29b      	uxth	r3, r3
 8000798:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80007a0:	f023 030c 	bic.w	r3, r3, #12
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	889a      	ldrh	r2, [r3, #4]
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	891b      	ldrh	r3, [r3, #8]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	4313      	orrs	r3, r2
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	8a9b      	ldrh	r3, [r3, #20]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	899b      	ldrh	r3, [r3, #12]
 80007de:	461a      	mov	r2, r3
 80007e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e2:	4313      	orrs	r3, r2
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fe74 	bl	80004e0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a30      	ldr	r2, [pc, #192]	; (80008bc <USART_Init+0x168>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d003      	beq.n	8000808 <USART_Init+0xb4>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a2f      	ldr	r2, [pc, #188]	; (80008c0 <USART_Init+0x16c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d102      	bne.n	800080e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	623b      	str	r3, [r7, #32]
 800080c:	e001      	b.n	8000812 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	899b      	ldrh	r3, [r3, #12]
 8000816:	b29b      	uxth	r3, r3
 8000818:	b21b      	sxth	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	da0c      	bge.n	8000838 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800081e:	6a3a      	ldr	r2, [r7, #32]
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	009a      	lsls	r2, r3, #2
 8000828:	441a      	add	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fbb2 f3f3 	udiv	r3, r2, r3
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	e00b      	b.n	8000850 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000838:	6a3a      	ldr	r2, [r7, #32]
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	009a      	lsls	r2, r3, #2
 8000842:	441a      	add	r2, r3
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <USART_Init+0x170>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	095b      	lsrs	r3, r3, #5
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	2264      	movs	r2, #100	; 0x64
 8000864:	fb02 f303 	mul.w	r3, r2, r3
 8000868:	69fa      	ldr	r2, [r7, #28]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	899b      	ldrh	r3, [r3, #12]
 8000872:	b29b      	uxth	r3, r3
 8000874:	b21b      	sxth	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	da0c      	bge.n	8000894 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	3332      	adds	r3, #50	; 0x32
 8000880:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <USART_Init+0x170>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	095b      	lsrs	r3, r3, #5
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800088e:	4313      	orrs	r3, r2
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
 8000892:	e00b      	b.n	80008ac <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	3332      	adds	r3, #50	; 0x32
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <USART_Init+0x170>)
 800089c:	fba2 2303 	umull	r2, r3, r2, r3
 80008a0:	095b      	lsrs	r3, r3, #5
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a8:	4313      	orrs	r3, r2
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	811a      	strh	r2, [r3, #8]
}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40011000 	.word	0x40011000
 80008c0:	40011400 	.word	0x40011400
 80008c4:	51eb851f 	.word	0x51eb851f

080008c8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d008      	beq.n	80008ec <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	899b      	ldrh	r3, [r3, #12]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80008ea:	e007      	b.n	80008fc <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	899b      	ldrh	r3, [r3, #12]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	819a      	strh	r2, [r3, #12]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000914:	887b      	ldrh	r3, [r7, #2]
 8000916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800091a:	b29a      	uxth	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	809a      	strh	r2, [r3, #4]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	b29a      	uxth	r2, r3
 8000942:	887b      	ldrh	r3, [r7, #2]
 8000944:	4013      	ands	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800094c:	2301      	movs	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	e001      	b.n	8000956 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f103 0208 	add.w	r2, r3, #8
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f103 0208 	add.w	r2, r3, #8
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f103 0208 	add.w	r2, r3, #8
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009be:	b480      	push	{r7}
 80009c0:	b085      	sub	sp, #20
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a06:	b480      	push	{r7}
 8000a08:	b085      	sub	sp, #20
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1c:	d103      	bne.n	8000a26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	e00c      	b.n	8000a40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3308      	adds	r3, #8
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	e002      	b.n	8000a34 <vListInsert+0x2e>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d2f6      	bcs.n	8000a2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	691b      	ldr	r3, [r3, #16]
 8000a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	6892      	ldr	r2, [r2, #8]
 8000a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	6852      	ldr	r2, [r2, #4]
 8000a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d103      	bne.n	8000aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d109      	bne.n	8000af4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ae4:	f383 8811 	msr	BASEPRI, r3
 8000ae8:	f3bf 8f6f 	isb	sy
 8000aec:	f3bf 8f4f 	dsb	sy
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e7fe      	b.n	8000af2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000af4:	f001 fd62 	bl	80025bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b00:	68f9      	ldr	r1, [r7, #12]
 8000b02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b04:	fb01 f303 	mul.w	r3, r1, r3
 8000b08:	441a      	add	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2200      	movs	r2, #0
 8000b12:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b24:	3b01      	subs	r3, #1
 8000b26:	68f9      	ldr	r1, [r7, #12]
 8000b28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b2a:	fb01 f303 	mul.w	r3, r1, r3
 8000b2e:	441a      	add	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	22ff      	movs	r2, #255	; 0xff
 8000b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d109      	bne.n	8000b5e <xQueueGenericReset+0x92>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00f      	beq.n	8000b72 <xQueueGenericReset+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3310      	adds	r3, #16
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 f84c 	bl	8001bf4 <xTaskRemoveFromEventList>
 8000b5c:	e009      	b.n	8000b72 <xQueueGenericReset+0xa6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	3310      	adds	r3, #16
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fefe 	bl	8000964 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3324      	adds	r3, #36	; 0x24
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fef9 	bl	8000964 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000b72:	f001 fd51 	bl	8002618 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d109      	bne.n	8000ba8 <xQueueGenericCreate+0x28>
 8000b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b98:	f383 8811 	msr	BASEPRI, r3
 8000b9c:	f3bf 8f6f 	isb	sy
 8000ba0:	f3bf 8f4f 	dsb	sy
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	e7fe      	b.n	8000ba6 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	fb02 f303 	mul.w	r3, r2, r3
 8000bb0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3350      	adds	r3, #80	; 0x50
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fe22 	bl	8002800 <pvPortMalloc>
 8000bbc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00d      	beq.n	8000be0 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3350      	adds	r3, #80	; 0x50
 8000bcc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000bce:	79fa      	ldrb	r2, [r7, #7]
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f000 f805 	bl	8000bea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000be0:	69bb      	ldr	r3, [r7, #24]
	}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d103      	bne.n	8000c06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	e002      	b.n	8000c0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c18:	2101      	movs	r1, #1
 8000c1a:	69b8      	ldr	r0, [r7, #24]
 8000c1c:	f7ff ff56 	bl	8000acc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	78fa      	ldrb	r2, [r7, #3]
 8000c24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	68f9      	ldr	r1, [r7, #12]
 8000c2e:	2073      	movs	r0, #115	; 0x73
 8000c30:	f002 fe36 	bl	80038a0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	; 0x38
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
 8000c48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8000c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d109      	bne.n	8000c6c <xQueueGenericSend+0x30>
 8000c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c5c:	f383 8811 	msr	BASEPRI, r3
 8000c60:	f3bf 8f6f 	isb	sy
 8000c64:	f3bf 8f4f 	dsb	sy
 8000c68:	623b      	str	r3, [r7, #32]
 8000c6a:	e7fe      	b.n	8000c6a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <xQueueGenericSend+0x3e>
 8000c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <xQueueGenericSend+0x42>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <xQueueGenericSend+0x44>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d109      	bne.n	8000c98 <xQueueGenericSend+0x5c>
 8000c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c88:	f383 8811 	msr	BASEPRI, r3
 8000c8c:	f3bf 8f6f 	isb	sy
 8000c90:	f3bf 8f4f 	dsb	sy
 8000c94:	61fb      	str	r3, [r7, #28]
 8000c96:	e7fe      	b.n	8000c96 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d103      	bne.n	8000ca6 <xQueueGenericSend+0x6a>
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d101      	bne.n	8000caa <xQueueGenericSend+0x6e>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <xQueueGenericSend+0x70>
 8000caa:	2300      	movs	r3, #0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d109      	bne.n	8000cc4 <xQueueGenericSend+0x88>
 8000cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb4:	f383 8811 	msr	BASEPRI, r3
 8000cb8:	f3bf 8f6f 	isb	sy
 8000cbc:	f3bf 8f4f 	dsb	sy
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	e7fe      	b.n	8000cc2 <xQueueGenericSend+0x86>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000cc4:	f001 fc7a 	bl	80025bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d302      	bcc.n	8000cda <xQueueGenericSend+0x9e>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d11f      	bne.n	8000d1a <xQueueGenericSend+0xde>
			{
				traceQUEUE_SEND( pxQueue );
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 fb73 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	6879      	ldr	r1, [r7, #4]
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	460b      	mov	r3, r1
 8000cec:	4601      	mov	r1, r0
 8000cee:	205a      	movs	r0, #90	; 0x5a
 8000cf0:	f002 fe4c 	bl	800398c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cfa:	f000 fab9 	bl	8001270 <prvCopyDataToQueue>
 8000cfe:	6278      	str	r0, [r7, #36]	; 0x24

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d004      	beq.n	8000d12 <xQueueGenericSend+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	3324      	adds	r3, #36	; 0x24
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 ff71 	bl	8001bf4 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000d12:	f001 fc81 	bl	8002618 <vPortExitCritical>
				return pdPASS;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e07d      	b.n	8000e16 <xQueueGenericSend+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d110      	bne.n	8000d42 <xQueueGenericSend+0x106>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000d20:	f001 fc7a 	bl	8002618 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8000d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d26:	4618      	mov	r0, r3
 8000d28:	f003 fb4e 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	460b      	mov	r3, r1
 8000d36:	4601      	mov	r1, r0
 8000d38:	205a      	movs	r0, #90	; 0x5a
 8000d3a:	f002 fe27 	bl	800398c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e069      	b.n	8000e16 <xQueueGenericSend+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d106      	bne.n	8000d56 <xQueueGenericSend+0x11a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 ffb7 	bl	8001cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000d56:	f001 fc5f 	bl	8002618 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000d5a:	f000 fd75 	bl	8001848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000d5e:	f001 fc2d 	bl	80025bc <vPortEnterCritical>
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6e:	d103      	bne.n	8000d78 <xQueueGenericSend+0x13c>
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d84:	d103      	bne.n	8000d8e <xQueueGenericSend+0x152>
 8000d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d8e:	f001 fc43 	bl	8002618 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d92:	1d3a      	adds	r2, r7, #4
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 ffa6 	bl	8001cec <xTaskCheckForTimeOut>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d124      	bne.n	8000df0 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000da8:	f000 fb5a 	bl	8001460 <prvIsQueueFull>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d018      	beq.n	8000de4 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db4:	3310      	adds	r3, #16
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fef6 	bl	8001bac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dc2:	f000 fae5 	bl	8001390 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000dc6:	f000 fd4d 	bl	8001864 <xTaskResumeAll>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f47f af79 	bne.w	8000cc4 <xQueueGenericSend+0x88>
				{
					portYIELD_WITHIN_API();
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <xQueueGenericSend+0x1e4>)
 8000dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	f3bf 8f4f 	dsb	sy
 8000dde:	f3bf 8f6f 	isb	sy
 8000de2:	e76f      	b.n	8000cc4 <xQueueGenericSend+0x88>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000de6:	f000 fad3 	bl	8001390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000dea:	f000 fd3b 	bl	8001864 <xTaskResumeAll>
 8000dee:	e769      	b.n	8000cc4 <xQueueGenericSend+0x88>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000df2:	f000 facd 	bl	8001390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000df6:	f000 fd35 	bl	8001864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8000dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 fae3 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4601      	mov	r1, r0
 8000e0e:	205a      	movs	r0, #90	; 0x5a
 8000e10:	f002 fdbc 	bl	800398c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8000e14:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3730      	adds	r7, #48	; 0x30
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000ed04 	.word	0xe000ed04

08000e24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b08f      	sub	sp, #60	; 0x3c
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d109      	bne.n	8000e52 <xQueueReceive+0x2e>
 8000e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e42:	f383 8811 	msr	BASEPRI, r3
 8000e46:	f3bf 8f6f 	isb	sy
 8000e4a:	f3bf 8f4f 	dsb	sy
 8000e4e:	623b      	str	r3, [r7, #32]
 8000e50:	e7fe      	b.n	8000e50 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d103      	bne.n	8000e60 <xQueueReceive+0x3c>
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <xQueueReceive+0x40>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <xQueueReceive+0x42>
 8000e64:	2300      	movs	r3, #0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d109      	bne.n	8000e7e <xQueueReceive+0x5a>
 8000e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e6e:	f383 8811 	msr	BASEPRI, r3
 8000e72:	f3bf 8f6f 	isb	sy
 8000e76:	f3bf 8f4f 	dsb	sy
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	e7fe      	b.n	8000e7c <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e7e:	f001 fb9d 	bl	80025bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d026      	beq.n	8000edc <xQueueReceive+0xb8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e8e:	68b9      	ldr	r1, [r7, #8]
 8000e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e92:	f000 fa57 	bl	8001344 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8000e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fa95 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f003 fa91 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	4621      	mov	r1, r4
 8000eb4:	205c      	movs	r0, #92	; 0x5c
 8000eb6:	f002 fd69 	bl	800398c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <xQueueReceive+0xb0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ecc:	3310      	adds	r3, #16
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fe90 	bl	8001bf4 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000ed4:	f001 fba0 	bl	8002618 <vPortExitCritical>
				return pdPASS;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e08e      	b.n	8000ffa <xQueueReceive+0x1d6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d115      	bne.n	8000f0e <xQueueReceive+0xea>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000ee2:	f001 fb99 	bl	8002618 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 fa6d 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 8000eee:	4604      	mov	r4, r0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f003 fa69 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	2301      	movs	r3, #1
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	4613      	mov	r3, r2
 8000f00:	460a      	mov	r2, r1
 8000f02:	4621      	mov	r1, r4
 8000f04:	205c      	movs	r0, #92	; 0x5c
 8000f06:	f002 fd41 	bl	800398c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e075      	b.n	8000ffa <xQueueReceive+0x1d6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d106      	bne.n	8000f22 <xQueueReceive+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fed1 	bl	8001cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000f22:	f001 fb79 	bl	8002618 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000f26:	f000 fc8f 	bl	8001848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000f2a:	f001 fb47 	bl	80025bc <vPortEnterCritical>
 8000f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3a:	d103      	bne.n	8000f44 <xQueueReceive+0x120>
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d103      	bne.n	8000f5a <xQueueReceive+0x136>
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f5a:	f001 fb5d 	bl	8002618 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f5e:	1d3a      	adds	r2, r7, #4
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fec0 	bl	8001cec <xTaskCheckForTimeOut>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d124      	bne.n	8000fbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f74:	f000 fa5e 	bl	8001434 <prvIsQueueEmpty>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d018      	beq.n	8000fb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	3324      	adds	r3, #36	; 0x24
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fe10 	bl	8001bac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f8e:	f000 f9ff 	bl	8001390 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000f92:	f000 fc67 	bl	8001864 <xTaskResumeAll>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f47f af70 	bne.w	8000e7e <xQueueReceive+0x5a>
				{
					portYIELD_WITHIN_API();
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <xQueueReceive+0x1e0>)
 8000fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	f3bf 8f4f 	dsb	sy
 8000faa:	f3bf 8f6f 	isb	sy
 8000fae:	e766      	b.n	8000e7e <xQueueReceive+0x5a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fb2:	f000 f9ed 	bl	8001390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000fb6:	f000 fc55 	bl	8001864 <xTaskResumeAll>
 8000fba:	e760      	b.n	8000e7e <xQueueReceive+0x5a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fbe:	f000 f9e7 	bl	8001390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000fc2:	f000 fc4f 	bl	8001864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fc8:	f000 fa34 	bl	8001434 <prvIsQueueEmpty>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f43f af55 	beq.w	8000e7e <xQueueReceive+0x5a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 f9f6 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 8000fdc:	4604      	mov	r4, r0
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f003 f9f2 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	4613      	mov	r3, r2
 8000fee:	460a      	mov	r2, r1
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	205c      	movs	r0, #92	; 0x5c
 8000ff4:	f002 fcca 	bl	800398c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8000ff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3734      	adds	r7, #52	; 0x34
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	e000ed04 	.word	0xe000ed04

08001008 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b08f      	sub	sp, #60	; 0x3c
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	627b      	str	r3, [r7, #36]	; 0x24

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	2b00      	cmp	r3, #0
 8001022:	d109      	bne.n	8001038 <xQueueSemaphoreTake+0x30>
 8001024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001028:	f383 8811 	msr	BASEPRI, r3
 800102c:	f3bf 8f6f 	isb	sy
 8001030:	f3bf 8f4f 	dsb	sy
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	e7fe      	b.n	8001036 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	2b00      	cmp	r3, #0
 800103e:	d009      	beq.n	8001054 <xQueueSemaphoreTake+0x4c>
 8001040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001044:	f383 8811 	msr	BASEPRI, r3
 8001048:	f3bf 8f6f 	isb	sy
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e7fe      	b.n	8001052 <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001054:	f001 fab2 	bl	80025bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105c:	623b      	str	r3, [r7, #32]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d02b      	beq.n	80010bc <xQueueSemaphoreTake+0xb4>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	4618      	mov	r0, r3
 8001068:	f003 f9ae 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 800106c:	4604      	mov	r4, r0
 800106e:	2000      	movs	r0, #0
 8001070:	f003 f9aa 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 8001074:	4601      	mov	r1, r0
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	4613      	mov	r3, r2
 800107e:	460a      	mov	r2, r1
 8001080:	4621      	mov	r1, r4
 8001082:	205c      	movs	r0, #92	; 0x5c
 8001084:	f002 fc82 	bl	800398c <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d104      	bne.n	80010a2 <xQueueSemaphoreTake+0x9a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001098:	f001 f8da 	bl	8002250 <pvTaskIncrementMutexHeldCount>
 800109c:	4602      	mov	r2, r0
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <xQueueSemaphoreTake+0xac>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	3310      	adds	r3, #16
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fda0 	bl	8001bf4 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80010b4:	f001 fab0 	bl	8002618 <vPortExitCritical>
				return pdPASS;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0ba      	b.n	8001232 <xQueueSemaphoreTake+0x22a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d122      	bne.n	8001108 <xQueueSemaphoreTake+0x100>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80010c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d009      	beq.n	80010dc <xQueueSemaphoreTake+0xd4>
 80010c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	f3bf 8f6f 	isb	sy
 80010d4:	f3bf 8f4f 	dsb	sy
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	e7fe      	b.n	80010da <xQueueSemaphoreTake+0xd2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80010dc:	f001 fa9c 	bl	8002618 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 f970 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 80010e8:	4604      	mov	r4, r0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f003 f96c 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 80010f0:	4601      	mov	r1, r0
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	4613      	mov	r3, r2
 80010fa:	460a      	mov	r2, r1
 80010fc:	4621      	mov	r1, r4
 80010fe:	205c      	movs	r0, #92	; 0x5c
 8001100:	f002 fc44 	bl	800398c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8001104:	2300      	movs	r3, #0
 8001106:	e094      	b.n	8001232 <xQueueSemaphoreTake+0x22a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <xQueueSemaphoreTake+0x114>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fdd4 	bl	8001cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001118:	2301      	movs	r3, #1
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800111c:	f001 fa7c 	bl	8002618 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001120:	f000 fb92 	bl	8001848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001124:	f001 fa4a 	bl	80025bc <vPortEnterCritical>
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800112e:	b25b      	sxtb	r3, r3
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d103      	bne.n	800113e <xQueueSemaphoreTake+0x136>
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001144:	b25b      	sxtb	r3, r3
 8001146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114a:	d103      	bne.n	8001154 <xQueueSemaphoreTake+0x14c>
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001154:	f001 fa60 	bl	8002618 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001158:	463a      	mov	r2, r7
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fdc3 	bl	8001cec <xTaskCheckForTimeOut>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d132      	bne.n	80011d2 <xQueueSemaphoreTake+0x1ca>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800116c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800116e:	f000 f961 	bl	8001434 <prvIsQueueEmpty>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d026      	beq.n	80011c6 <xQueueSemaphoreTake+0x1be>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d109      	bne.n	8001194 <xQueueSemaphoreTake+0x18c>
					{
						taskENTER_CRITICAL();
 8001180:	f001 fa1c 	bl	80025bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fec9 	bl	8001f20 <xTaskPriorityInherit>
 800118e:	62b8      	str	r0, [r7, #40]	; 0x28
						}
						taskEXIT_CRITICAL();
 8001190:	f001 fa42 	bl	8002618 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	3324      	adds	r3, #36	; 0x24
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fd05 	bl	8001bac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80011a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011a4:	f000 f8f4 	bl	8001390 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80011a8:	f000 fb5c 	bl	8001864 <xTaskResumeAll>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f47f af50 	bne.w	8001054 <xQueueSemaphoreTake+0x4c>
				{
					portYIELD_WITHIN_API();
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <xQueueSemaphoreTake+0x234>)
 80011b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	f3bf 8f4f 	dsb	sy
 80011c0:	f3bf 8f6f 	isb	sy
 80011c4:	e746      	b.n	8001054 <xQueueSemaphoreTake+0x4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80011c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011c8:	f000 f8e2 	bl	8001390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011cc:	f000 fb4a 	bl	8001864 <xTaskResumeAll>
 80011d0:	e740      	b.n	8001054 <xQueueSemaphoreTake+0x4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80011d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011d4:	f000 f8dc 	bl	8001390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011d8:	f000 fb44 	bl	8001864 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011de:	f000 f929 	bl	8001434 <prvIsQueueEmpty>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f43f af35 	beq.w	8001054 <xQueueSemaphoreTake+0x4c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80011ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00d      	beq.n	800120c <xQueueSemaphoreTake+0x204>
					{
						taskENTER_CRITICAL();
 80011f0:	f001 f9e4 	bl	80025bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80011f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011f6:	f000 f823 	bl	8001240 <prvGetDisinheritPriorityAfterTimeout>
 80011fa:	61f8      	str	r0, [r7, #28]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	69f9      	ldr	r1, [r7, #28]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 ff8e 	bl	8002124 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001208:	f001 fa06 	bl	8002618 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	4618      	mov	r0, r3
 8001210:	f003 f8da 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 8001214:	4604      	mov	r4, r0
 8001216:	2000      	movs	r0, #0
 8001218:	f003 f8d6 	bl	80043c8 <SEGGER_SYSVIEW_ShrinkId>
 800121c:	4601      	mov	r1, r0
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	460a      	mov	r2, r1
 8001228:	4621      	mov	r1, r4
 800122a:	205c      	movs	r0, #92	; 0x5c
 800122c:	f002 fbae 	bl	800398c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8001230:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001232:	4618      	mov	r0, r3
 8001234:	3734      	adds	r7, #52	; 0x34
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	bf00      	nop
 800123c:	e000ed04 	.word	0xe000ed04

08001240 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f1c3 0305 	rsb	r3, r3, #5
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	e001      	b.n	8001262 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001262:	68fb      	ldr	r3, [r7, #12]
	}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001284:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10d      	bne.n	80012aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d14d      	bne.n	8001332 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 feba 	bl	8002014 <xTaskPriorityDisinherit>
 80012a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	e043      	b.n	8001332 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d119      	bne.n	80012e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6858      	ldr	r0, [r3, #4]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	461a      	mov	r2, r3
 80012ba:	68b9      	ldr	r1, [r7, #8]
 80012bc:	f003 fd77 	bl	8004dae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	441a      	add	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d32b      	bcc.n	8001332 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	e026      	b.n	8001332 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	68d8      	ldr	r0, [r3, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	461a      	mov	r2, r3
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	f003 fd5d 	bl	8004dae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	425b      	negs	r3, r3
 80012fe:	441a      	add	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d207      	bcs.n	8001320 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	425b      	negs	r3, r3
 800131a:	441a      	add	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d105      	bne.n	8001332 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	3b01      	subs	r3, #1
 8001330:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800133a:	697b      	ldr	r3, [r7, #20]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d018      	beq.n	8001388 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	441a      	add	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	429a      	cmp	r2, r3
 800136e:	d303      	bcc.n	8001378 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68d9      	ldr	r1, [r3, #12]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	461a      	mov	r2, r3
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f003 fd13 	bl	8004dae <memcpy>
	}
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001398:	f001 f910 	bl	80025bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80013a4:	e011      	b.n	80013ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d012      	beq.n	80013d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3324      	adds	r3, #36	; 0x24
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fc1e 	bl	8001bf4 <xTaskRemoveFromEventList>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80013be:	f000 fcf5 	bl	8001dac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	dce9      	bgt.n	80013a6 <prvUnlockQueue+0x16>
 80013d2:	e000      	b.n	80013d6 <prvUnlockQueue+0x46>
					break;
 80013d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	22ff      	movs	r2, #255	; 0xff
 80013da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80013de:	f001 f91b 	bl	8002618 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80013e2:	f001 f8eb 	bl	80025bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013ee:	e011      	b.n	8001414 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d012      	beq.n	800141e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3310      	adds	r3, #16
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fbf9 	bl	8001bf4 <xTaskRemoveFromEventList>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001408:	f000 fcd0 	bl	8001dac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800140c:	7bbb      	ldrb	r3, [r7, #14]
 800140e:	3b01      	subs	r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dce9      	bgt.n	80013f0 <prvUnlockQueue+0x60>
 800141c:	e000      	b.n	8001420 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800141e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001428:	f001 f8f6 	bl	8002618 <vPortExitCritical>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800143c:	f001 f8be 	bl	80025bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001448:	2301      	movs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e001      	b.n	8001452 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001452:	f001 f8e1 	bl	8002618 <vPortExitCritical>

	return xReturn;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001468:	f001 f8a8 	bl	80025bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001474:	429a      	cmp	r2, r3
 8001476:	d102      	bne.n	800147e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001478:	2301      	movs	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e001      	b.n	8001482 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001482:	f001 f8c9 	bl	8002618 <vPortExitCritical>

	return xReturn;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af04      	add	r7, sp, #16
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f9ab 	bl	8002800 <pvPortMalloc>
 80014aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00e      	beq.n	80014d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80014b2:	2058      	movs	r0, #88	; 0x58
 80014b4:	f001 f9a4 	bl	8002800 <pvPortMalloc>
 80014b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
 80014c6:	e005      	b.n	80014d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80014c8:	6978      	ldr	r0, [r7, #20]
 80014ca:	f001 fa61 	bl	8002990 <vPortFree>
 80014ce:	e001      	b.n	80014d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d013      	beq.n	8001502 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80014da:	88fa      	ldrh	r2, [r7, #6]
 80014dc:	2300      	movs	r3, #0
 80014de:	9303      	str	r3, [sp, #12]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	9302      	str	r3, [sp, #8]
 80014e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 f80e 	bl	8001512 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80014f6:	69f8      	ldr	r0, [r7, #28]
 80014f8:	f000 f89a 	bl	8001630 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	e002      	b.n	8001508 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001508:	69bb      	ldr	r3, [r7, #24]
	}
 800150a:	4618      	mov	r0, r3
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b088      	sub	sp, #32
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001522:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	461a      	mov	r2, r3
 800152a:	21a5      	movs	r1, #165	; 0xa5
 800152c:	f003 fc4a 	bl	8004dc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800153a:	3b01      	subs	r3, #1
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f023 0307 	bic.w	r3, r3, #7
 8001548:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	2b00      	cmp	r3, #0
 8001552:	d009      	beq.n	8001568 <prvInitialiseNewTask+0x56>
 8001554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001558:	f383 8811 	msr	BASEPRI, r3
 800155c:	f3bf 8f6f 	isb	sy
 8001560:	f3bf 8f4f 	dsb	sy
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e7fe      	b.n	8001566 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d01f      	beq.n	80015ae <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	e012      	b.n	800159a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	4413      	add	r3, r2
 800157a:	7819      	ldrb	r1, [r3, #0]
 800157c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	4413      	add	r3, r2
 8001582:	3334      	adds	r3, #52	; 0x34
 8001584:	460a      	mov	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	3301      	adds	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	2b09      	cmp	r3, #9
 800159e:	d9e9      	bls.n	8001574 <prvInitialiseNewTask+0x62>
 80015a0:	e000      	b.n	80015a4 <prvInitialiseNewTask+0x92>
			{
				break;
 80015a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80015ac:	e003      	b.n	80015b6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80015b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d901      	bls.n	80015c0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015bc:	2304      	movs	r3, #4
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80015c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80015c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ca:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80015cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ce:	2200      	movs	r2, #0
 80015d0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d4:	3304      	adds	r3, #4
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f9e4 	bl	80009a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80015dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015de:	3318      	adds	r3, #24
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff f9df 	bl	80009a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80015e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	f1c3 0205 	rsb	r2, r3, #5
 80015f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80015f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80015fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fe:	2200      	movs	r2, #0
 8001600:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	68f9      	ldr	r1, [r7, #12]
 800160e:	69b8      	ldr	r0, [r7, #24]
 8001610:	f000 feaa 	bl	8002368 <pxPortInitialiseStack>
 8001614:	4602      	mov	r2, r0
 8001616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001618:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af02      	add	r7, sp, #8
 8001636:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001638:	f000 ffc0 	bl	80025bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <prvAddNewTaskToReadyList+0xe4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a34      	ldr	r2, [pc, #208]	; (8001714 <prvAddNewTaskToReadyList+0xe4>)
 8001644:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001646:	4b34      	ldr	r3, [pc, #208]	; (8001718 <prvAddNewTaskToReadyList+0xe8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800164e:	4a32      	ldr	r2, [pc, #200]	; (8001718 <prvAddNewTaskToReadyList+0xe8>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <prvAddNewTaskToReadyList+0xe4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d110      	bne.n	800167e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800165c:	f000 fbc4 	bl	8001de8 <prvInitialiseTaskLists>
 8001660:	e00d      	b.n	800167e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001662:	4b2e      	ldr	r3, [pc, #184]	; (800171c <prvAddNewTaskToReadyList+0xec>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <prvAddNewTaskToReadyList+0xe8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	429a      	cmp	r2, r3
 8001676:	d802      	bhi.n	800167e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <prvAddNewTaskToReadyList+0xe8>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800167e:	4b28      	ldr	r3, [pc, #160]	; (8001720 <prvAddNewTaskToReadyList+0xf0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a26      	ldr	r2, [pc, #152]	; (8001720 <prvAddNewTaskToReadyList+0xf0>)
 8001686:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <prvAddNewTaskToReadyList+0xf0>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d016      	beq.n	80016c4 <prvAddNewTaskToReadyList+0x94>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fd69 	bl	8004170 <SEGGER_SYSVIEW_OnTaskCreate>
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	461d      	mov	r5, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	461c      	mov	r4, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	1ae3      	subs	r3, r4, r3
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	462b      	mov	r3, r5
 80016c0:	f001 fb30 	bl	8002d24 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fdda 	bl	8004280 <SEGGER_SYSVIEW_OnTaskStartReady>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	2201      	movs	r2, #1
 80016d2:	409a      	lsls	r2, r3
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <prvAddNewTaskToReadyList+0xf4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4313      	orrs	r3, r2
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <prvAddNewTaskToReadyList+0xf4>)
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <prvAddNewTaskToReadyList+0xf8>)
 80016ec:	441a      	add	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3304      	adds	r3, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	4610      	mov	r0, r2
 80016f6:	f7ff f962 	bl	80009be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80016fa:	f000 ff8d 	bl	8002618 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <prvAddNewTaskToReadyList+0xec>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <prvAddNewTaskToReadyList+0xda>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <prvAddNewTaskToReadyList+0xe8>)
 8001708:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bdb0      	pop	{r4, r5, r7, pc}
 8001712:	bf00      	nop
 8001714:	20000184 	.word	0x20000184
 8001718:	200000ac 	.word	0x200000ac
 800171c:	20000190 	.word	0x20000190
 8001720:	200001a0 	.word	0x200001a0
 8001724:	2000018c 	.word	0x2000018c
 8001728:	200000b0 	.word	0x200000b0

0800172c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d01a      	beq.n	8001774 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <vTaskDelay+0x68>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <vTaskDelay+0x2e>
 8001746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800174a:	f383 8811 	msr	BASEPRI, r3
 800174e:	f3bf 8f6f 	isb	sy
 8001752:	f3bf 8f4f 	dsb	sy
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	e7fe      	b.n	8001758 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800175a:	f000 f875 	bl	8001848 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	2023      	movs	r0, #35	; 0x23
 8001762:	f002 f807 	bl	8003774 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fd85 	bl	8002278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800176e:	f000 f879 	bl	8001864 <xTaskResumeAll>
 8001772:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d107      	bne.n	800178a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <vTaskDelay+0x6c>)
 800177c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f3bf 8f4f 	dsb	sy
 8001786:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200001ac 	.word	0x200001ac
 8001798:	e000ed04 	.word	0xe000ed04

0800179c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <vTaskStartScheduler+0x90>)
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	2300      	movs	r3, #0
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2300      	movs	r3, #0
 80017ac:	2282      	movs	r2, #130	; 0x82
 80017ae:	4920      	ldr	r1, [pc, #128]	; (8001830 <vTaskStartScheduler+0x94>)
 80017b0:	4820      	ldr	r0, [pc, #128]	; (8001834 <vTaskStartScheduler+0x98>)
 80017b2:	f7ff fe6d 	bl	8001490 <xTaskCreate>
 80017b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d123      	bne.n	8001806 <vTaskStartScheduler+0x6a>
 80017be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c2:	f383 8811 	msr	BASEPRI, r3
 80017c6:	f3bf 8f6f 	isb	sy
 80017ca:	f3bf 8f4f 	dsb	sy
 80017ce:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <vTaskStartScheduler+0x9c>)
 80017d2:	f04f 32ff 	mov.w	r2, #4294967295
 80017d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <vTaskStartScheduler+0xa0>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <vTaskStartScheduler+0xa4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <vTaskStartScheduler+0xa8>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <vTaskStartScheduler+0x90>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d102      	bne.n	80017f6 <vTaskStartScheduler+0x5a>
 80017f0:	f002 fca2 	bl	8004138 <SEGGER_SYSVIEW_OnIdle>
 80017f4:	e004      	b.n	8001800 <vTaskStartScheduler+0x64>
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <vTaskStartScheduler+0xa8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fcfc 	bl	80041f8 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001800:	f000 fe3e 	bl	8002480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001804:	e00d      	b.n	8001822 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d109      	bne.n	8001822 <vTaskStartScheduler+0x86>
 800180e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001812:	f383 8811 	msr	BASEPRI, r3
 8001816:	f3bf 8f6f 	isb	sy
 800181a:	f3bf 8f4f 	dsb	sy
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	e7fe      	b.n	8001820 <vTaskStartScheduler+0x84>
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200001a8 	.word	0x200001a8
 8001830:	080056b0 	.word	0x080056b0
 8001834:	08001dc5 	.word	0x08001dc5
 8001838:	200001a4 	.word	0x200001a4
 800183c:	20000190 	.word	0x20000190
 8001840:	20000188 	.word	0x20000188
 8001844:	200000ac 	.word	0x200000ac

08001848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <vTaskSuspendAll+0x18>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	4a03      	ldr	r2, [pc, #12]	; (8001860 <vTaskSuspendAll+0x18>)
 8001854:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	200001ac 	.word	0x200001ac

08001864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <xTaskResumeAll+0x104>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <xTaskResumeAll+0x2a>
 800187a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187e:	f383 8811 	msr	BASEPRI, r3
 8001882:	f3bf 8f6f 	isb	sy
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	e7fe      	b.n	800188c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800188e:	f000 fe95 	bl	80025bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <xTaskResumeAll+0x104>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3b01      	subs	r3, #1
 8001898:	4a33      	ldr	r2, [pc, #204]	; (8001968 <xTaskResumeAll+0x104>)
 800189a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800189c:	4b32      	ldr	r3, [pc, #200]	; (8001968 <xTaskResumeAll+0x104>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d159      	bne.n	8001958 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <xTaskResumeAll+0x108>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d055      	beq.n	8001958 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018ac:	e032      	b.n	8001914 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <xTaskResumeAll+0x10c>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3318      	adds	r3, #24
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f8dc 	bl	8000a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3304      	adds	r3, #4
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f8d7 	bl	8000a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fcd7 	bl	8004280 <SEGGER_SYSVIEW_OnTaskStartReady>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	2201      	movs	r2, #1
 80018d8:	409a      	lsls	r2, r3
 80018da:	4b26      	ldr	r3, [pc, #152]	; (8001974 <xTaskResumeAll+0x110>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	4a24      	ldr	r2, [pc, #144]	; (8001974 <xTaskResumeAll+0x110>)
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4a21      	ldr	r2, [pc, #132]	; (8001978 <xTaskResumeAll+0x114>)
 80018f2:	441a      	add	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3304      	adds	r3, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f7ff f85f 	bl	80009be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <xTaskResumeAll+0x118>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	429a      	cmp	r2, r3
 800190c:	d302      	bcc.n	8001914 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <xTaskResumeAll+0x11c>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <xTaskResumeAll+0x10c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1c8      	bne.n	80018ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001922:	f000 fadd 	bl	8001ee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <xTaskResumeAll+0x120>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d010      	beq.n	8001954 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001932:	f000 f83b 	bl	80019ac <xTaskIncrementTick>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <xTaskResumeAll+0x11c>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3b01      	subs	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f1      	bne.n	8001932 <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <xTaskResumeAll+0x120>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <xTaskResumeAll+0x11c>)
 8001956:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001958:	f000 fe5e 	bl	8002618 <vPortExitCritical>

	return xAlreadyYielded;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200001ac 	.word	0x200001ac
 800196c:	20000184 	.word	0x20000184
 8001970:	20000144 	.word	0x20000144
 8001974:	2000018c 	.word	0x2000018c
 8001978:	200000b0 	.word	0x200000b0
 800197c:	200000ac 	.word	0x200000ac
 8001980:	20000198 	.word	0x20000198
 8001984:	20000194 	.word	0x20000194

08001988 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800198e:	f000 fef9 	bl	8002784 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <xTaskGetTickCountFromISR+0x20>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800199c:	683b      	ldr	r3, [r7, #0]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000188 	.word	0x20000188

080019ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019b6:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <xTaskIncrementTick+0x10c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d172      	bne.n	8001aa4 <xTaskIncrementTick+0xf8>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80019be:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <xTaskIncrementTick+0x110>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80019c6:	4a3d      	ldr	r2, [pc, #244]	; (8001abc <xTaskIncrementTick+0x110>)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d11f      	bne.n	8001a12 <xTaskIncrementTick+0x66>
		{
			taskSWITCH_DELAYED_LISTS();
 80019d2:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <xTaskIncrementTick+0x114>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d009      	beq.n	80019f0 <xTaskIncrementTick+0x44>
 80019dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e0:	f383 8811 	msr	BASEPRI, r3
 80019e4:	f3bf 8f6f 	isb	sy
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	e7fe      	b.n	80019ee <xTaskIncrementTick+0x42>
 80019f0:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <xTaskIncrementTick+0x114>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <xTaskIncrementTick+0x118>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a31      	ldr	r2, [pc, #196]	; (8001ac0 <xTaskIncrementTick+0x114>)
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4a31      	ldr	r2, [pc, #196]	; (8001ac4 <xTaskIncrementTick+0x118>)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <xTaskIncrementTick+0x11c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a2f      	ldr	r2, [pc, #188]	; (8001ac8 <xTaskIncrementTick+0x11c>)
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	f000 fa67 	bl	8001ee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a12:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <xTaskIncrementTick+0x120>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d348      	bcc.n	8001aae <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <xTaskIncrementTick+0x114>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d104      	bne.n	8001a30 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a26:	4b29      	ldr	r3, [pc, #164]	; (8001acc <xTaskIncrementTick+0x120>)
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	601a      	str	r2, [r3, #0]
					break;
 8001a2e:	e03e      	b.n	8001aae <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <xTaskIncrementTick+0x114>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d203      	bcs.n	8001a50 <xTaskIncrementTick+0xa4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a48:	4a20      	ldr	r2, [pc, #128]	; (8001acc <xTaskIncrementTick+0x120>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001a4e:	e02e      	b.n	8001aae <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	3304      	adds	r3, #4
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f80f 	bl	8000a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d004      	beq.n	8001a6c <xTaskIncrementTick+0xc0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	3318      	adds	r3, #24
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f806 	bl	8000a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fc06 	bl	8004280 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	2201      	movs	r2, #1
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <xTaskIncrementTick+0x124>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	4a13      	ldr	r2, [pc, #76]	; (8001ad0 <xTaskIncrementTick+0x124>)
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <xTaskIncrementTick+0x128>)
 8001a94:	441a      	add	r2, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	f7fe ff8e 	bl	80009be <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001aa2:	e7bb      	b.n	8001a1c <xTaskIncrementTick+0x70>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <xTaskIncrementTick+0x12c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <xTaskIncrementTick+0x12c>)
 8001aac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001aae:	697b      	ldr	r3, [r7, #20]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200001ac 	.word	0x200001ac
 8001abc:	20000188 	.word	0x20000188
 8001ac0:	2000013c 	.word	0x2000013c
 8001ac4:	20000140 	.word	0x20000140
 8001ac8:	2000019c 	.word	0x2000019c
 8001acc:	200001a4 	.word	0x200001a4
 8001ad0:	2000018c 	.word	0x2000018c
 8001ad4:	200000b0 	.word	0x200000b0
 8001ad8:	20000194 	.word	0x20000194

08001adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <vTaskSwitchContext+0xb8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <vTaskSwitchContext+0xbc>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001af0:	e04c      	b.n	8001b8c <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <vTaskSwitchContext+0xbc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001af8:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <vTaskSwitchContext+0xc0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001b06:	7afb      	ldrb	r3, [r7, #11]
 8001b08:	f1c3 031f 	rsb	r3, r3, #31
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	4924      	ldr	r1, [pc, #144]	; (8001ba0 <vTaskSwitchContext+0xc4>)
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <vTaskSwitchContext+0x5a>
	__asm volatile
 8001b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b26:	f383 8811 	msr	BASEPRI, r3
 8001b2a:	f3bf 8f6f 	isb	sy
 8001b2e:	f3bf 8f4f 	dsb	sy
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	e7fe      	b.n	8001b34 <vTaskSwitchContext+0x58>
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <vTaskSwitchContext+0xc4>)
 8001b42:	4413      	add	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	3308      	adds	r3, #8
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d104      	bne.n	8001b66 <vTaskSwitchContext+0x8a>
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <vTaskSwitchContext+0xc8>)
 8001b6e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <vTaskSwitchContext+0xc8>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <vTaskSwitchContext+0xcc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d102      	bne.n	8001b82 <vTaskSwitchContext+0xa6>
 8001b7c:	f002 fadc 	bl	8004138 <SEGGER_SYSVIEW_OnIdle>
}
 8001b80:	e004      	b.n	8001b8c <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <vTaskSwitchContext+0xc8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fb36 	bl	80041f8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001b8c:	bf00      	nop
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200001ac 	.word	0x200001ac
 8001b98:	20000198 	.word	0x20000198
 8001b9c:	2000018c 	.word	0x2000018c
 8001ba0:	200000b0 	.word	0x200000b0
 8001ba4:	200000ac 	.word	0x200000ac
 8001ba8:	200001a8 	.word	0x200001a8

08001bac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <vTaskPlaceOnEventList+0x24>
 8001bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc0:	f383 8811 	msr	BASEPRI, r3
 8001bc4:	f3bf 8f6f 	isb	sy
 8001bc8:	f3bf 8f4f 	dsb	sy
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	e7fe      	b.n	8001bce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <vTaskPlaceOnEventList+0x44>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7fe ff14 	bl	8000a06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001bde:	2101      	movs	r1, #1
 8001be0:	6838      	ldr	r0, [r7, #0]
 8001be2:	f000 fb49 	bl	8002278 <prvAddCurrentTaskToDelayedList>
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200000ac 	.word	0x200000ac

08001bf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <xTaskRemoveFromEventList+0x2a>
 8001c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c0e:	f383 8811 	msr	BASEPRI, r3
 8001c12:	f3bf 8f6f 	isb	sy
 8001c16:	f3bf 8f4f 	dsb	sy
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e7fe      	b.n	8001c1c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	3318      	adds	r3, #24
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe ff28 	bl	8000a78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <xTaskRemoveFromEventList+0xb4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d120      	bne.n	8001c72 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe ff1f 	bl	8000a78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 fb1f 	bl	8004280 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	2201      	movs	r2, #1
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <xTaskRemoveFromEventList+0xb8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	4a16      	ldr	r2, [pc, #88]	; (8001cac <xTaskRemoveFromEventList+0xb8>)
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <xTaskRemoveFromEventList+0xbc>)
 8001c62:	441a      	add	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	3304      	adds	r3, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	f7fe fea7 	bl	80009be <vListInsertEnd>
 8001c70:	e005      	b.n	8001c7e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	3318      	adds	r3, #24
 8001c76:	4619      	mov	r1, r3
 8001c78:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <xTaskRemoveFromEventList+0xc0>)
 8001c7a:	f7fe fea0 	bl	80009be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <xTaskRemoveFromEventList+0xc4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d905      	bls.n	8001c98 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <xTaskRemoveFromEventList+0xc8>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e001      	b.n	8001c9c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001c9c:	697b      	ldr	r3, [r7, #20]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200001ac 	.word	0x200001ac
 8001cac:	2000018c 	.word	0x2000018c
 8001cb0:	200000b0 	.word	0x200000b0
 8001cb4:	20000144 	.word	0x20000144
 8001cb8:	200000ac 	.word	0x200000ac
 8001cbc:	20000198 	.word	0x20000198

08001cc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <vTaskInternalSetTimeOutState+0x24>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <vTaskInternalSetTimeOutState+0x28>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	605a      	str	r2, [r3, #4]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	2000019c 	.word	0x2000019c
 8001ce8:	20000188 	.word	0x20000188

08001cec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <xTaskCheckForTimeOut+0x24>
 8001cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d00:	f383 8811 	msr	BASEPRI, r3
 8001d04:	f3bf 8f6f 	isb	sy
 8001d08:	f3bf 8f4f 	dsb	sy
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	e7fe      	b.n	8001d0e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <xTaskCheckForTimeOut+0x3e>
 8001d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1a:	f383 8811 	msr	BASEPRI, r3
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	f3bf 8f4f 	dsb	sy
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	e7fe      	b.n	8001d28 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001d2a:	f000 fc47 	bl	80025bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <xTaskCheckForTimeOut+0xb8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d46:	d102      	bne.n	8001d4e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	e023      	b.n	8001d96 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <xTaskCheckForTimeOut+0xbc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d007      	beq.n	8001d6a <xTaskCheckForTimeOut+0x7e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d302      	bcc.n	8001d6a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	e015      	b.n	8001d96 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d20b      	bcs.n	8001d8c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	1ad2      	subs	r2, r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff9d 	bl	8001cc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	e004      	b.n	8001d96 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001d92:	2301      	movs	r3, #1
 8001d94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001d96:	f000 fc3f 	bl	8002618 <vPortExitCritical>

	return xReturn;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000188 	.word	0x20000188
 8001da8:	2000019c 	.word	0x2000019c

08001dac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <vTaskMissedYield+0x14>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	20000198 	.word	0x20000198

08001dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001dcc:	f000 f84c 	bl	8001e68 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <prvIdleTask+0x20>)
 8001dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001de0:	e7f4      	b.n	8001dcc <prvIdleTask+0x8>
 8001de2:	bf00      	nop
 8001de4:	e000ed04 	.word	0xe000ed04

08001de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	e00c      	b.n	8001e0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <prvInitialiseTaskLists+0x60>)
 8001e00:	4413      	add	r3, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fdae 	bl	8000964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d9ef      	bls.n	8001df4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001e14:	480d      	ldr	r0, [pc, #52]	; (8001e4c <prvInitialiseTaskLists+0x64>)
 8001e16:	f7fe fda5 	bl	8000964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <prvInitialiseTaskLists+0x68>)
 8001e1c:	f7fe fda2 	bl	8000964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001e20:	480c      	ldr	r0, [pc, #48]	; (8001e54 <prvInitialiseTaskLists+0x6c>)
 8001e22:	f7fe fd9f 	bl	8000964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001e26:	480c      	ldr	r0, [pc, #48]	; (8001e58 <prvInitialiseTaskLists+0x70>)
 8001e28:	f7fe fd9c 	bl	8000964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <prvInitialiseTaskLists+0x74>)
 8001e2e:	f7fe fd99 	bl	8000964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <prvInitialiseTaskLists+0x78>)
 8001e34:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <prvInitialiseTaskLists+0x64>)
 8001e36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <prvInitialiseTaskLists+0x7c>)
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <prvInitialiseTaskLists+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200000b0 	.word	0x200000b0
 8001e4c:	20000114 	.word	0x20000114
 8001e50:	20000128 	.word	0x20000128
 8001e54:	20000144 	.word	0x20000144
 8001e58:	20000158 	.word	0x20000158
 8001e5c:	20000170 	.word	0x20000170
 8001e60:	2000013c 	.word	0x2000013c
 8001e64:	20000140 	.word	0x20000140

08001e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e6e:	e019      	b.n	8001ea4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001e70:	f000 fba4 	bl	80025bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <prvCheckTasksWaitingTermination+0x4c>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fdf9 	bl	8000a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <prvCheckTasksWaitingTermination+0x50>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <prvCheckTasksWaitingTermination+0x50>)
 8001e8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <prvCheckTasksWaitingTermination+0x54>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <prvCheckTasksWaitingTermination+0x54>)
 8001e98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001e9a:	f000 fbbd 	bl	8002618 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f80e 	bl	8001ec0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <prvCheckTasksWaitingTermination+0x54>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e1      	bne.n	8001e70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000158 	.word	0x20000158
 8001eb8:	20000184 	.word	0x20000184
 8001ebc:	2000016c 	.word	0x2000016c

08001ec0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fd5f 	bl	8002990 <vPortFree>
			vPortFree( pxTCB );
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fd5c 	bl	8002990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <prvResetNextTaskUnblockTime+0x38>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d104      	bne.n	8001efa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <prvResetNextTaskUnblockTime+0x3c>)
 8001ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001ef8:	e008      	b.n	8001f0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <prvResetNextTaskUnblockTime+0x38>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <prvResetNextTaskUnblockTime+0x3c>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	2000013c 	.word	0x2000013c
 8001f1c:	200001a4 	.word	0x200001a4

08001f20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d063      	beq.n	8001ffe <xTaskPriorityInherit+0xde>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3a:	4b33      	ldr	r3, [pc, #204]	; (8002008 <xTaskPriorityInherit+0xe8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d253      	bcs.n	8001fec <xTaskPriorityInherit+0xcc>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db06      	blt.n	8001f5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <xTaskPriorityInherit+0xe8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	f1c3 0205 	rsb	r2, r3, #5
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6959      	ldr	r1, [r3, #20]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4a28      	ldr	r2, [pc, #160]	; (800200c <xTaskPriorityInherit+0xec>)
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4299      	cmp	r1, r3
 8001f70:	d12f      	bne.n	8001fd2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3304      	adds	r3, #4
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fd7e 	bl	8000a78 <uxListRemove>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10a      	bne.n	8001f98 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	2201      	movs	r2, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <xTaskPriorityInherit+0xf0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4013      	ands	r3, r2
 8001f94:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <xTaskPriorityInherit+0xf0>)
 8001f96:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <xTaskPriorityInherit+0xe8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <xTaskPriorityInherit+0xf0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <xTaskPriorityInherit+0xf0>)
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <xTaskPriorityInherit+0xec>)
 8001fc2:	441a      	add	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f7fe fcf7 	bl	80009be <vListInsertEnd>
 8001fd0:	e004      	b.n	8001fdc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <xTaskPriorityInherit+0xe8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	2049      	movs	r0, #73	; 0x49
 8001fe2:	f001 fbc7 	bl	8003774 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e008      	b.n	8001ffe <xTaskPriorityInherit+0xde>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <xTaskPriorityInherit+0xe8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d201      	bcs.n	8001ffe <xTaskPriorityInherit+0xde>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
	}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200000ac 	.word	0x200000ac
 800200c:	200000b0 	.word	0x200000b0
 8002010:	2000018c 	.word	0x2000018c

08002014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d071      	beq.n	800210e <xTaskPriorityDisinherit+0xfa>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <xTaskPriorityDisinherit+0x104>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d009      	beq.n	8002048 <xTaskPriorityDisinherit+0x34>
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e7fe      	b.n	8002046 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d109      	bne.n	8002064 <xTaskPriorityDisinherit+0x50>
 8002050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002054:	f383 8811 	msr	BASEPRI, r3
 8002058:	f3bf 8f6f 	isb	sy
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	e7fe      	b.n	8002062 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002076:	429a      	cmp	r2, r3
 8002078:	d049      	beq.n	800210e <xTaskPriorityDisinherit+0xfa>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d145      	bne.n	800210e <xTaskPriorityDisinherit+0xfa>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	3304      	adds	r3, #4
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fcf6 	bl	8000a78 <uxListRemove>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d115      	bne.n	80020be <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002096:	4921      	ldr	r1, [pc, #132]	; (800211c <xTaskPriorityDisinherit+0x108>)
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10a      	bne.n	80020be <xTaskPriorityDisinherit+0xaa>
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	2201      	movs	r2, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <xTaskPriorityDisinherit+0x10c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4013      	ands	r3, r2
 80020ba:	4a19      	ldr	r2, [pc, #100]	; (8002120 <xTaskPriorityDisinherit+0x10c>)
 80020bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4619      	mov	r1, r3
 80020c2:	204a      	movs	r0, #74	; 0x4a
 80020c4:	f001 fb56 	bl	8003774 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	f1c3 0205 	rsb	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	2201      	movs	r2, #1
 80020e2:	409a      	lsls	r2, r3
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <xTaskPriorityDisinherit+0x10c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <xTaskPriorityDisinherit+0x10c>)
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <xTaskPriorityDisinherit+0x108>)
 80020fc:	441a      	add	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	3304      	adds	r3, #4
 8002102:	4619      	mov	r1, r3
 8002104:	4610      	mov	r0, r2
 8002106:	f7fe fc5a 	bl	80009be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800210a:	2301      	movs	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800210e:	697b      	ldr	r3, [r7, #20]
	}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	200000ac 	.word	0x200000ac
 800211c:	200000b0 	.word	0x200000b0
 8002120:	2000018c 	.word	0x2000018c

08002124 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002132:	2301      	movs	r3, #1
 8002134:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d07e      	beq.n	800223a <vTaskPriorityDisinheritAfterTimeout+0x116>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8002144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e7fe      	b.n	8002156 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d902      	bls.n	8002168 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e002      	b.n	800216e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	d060      	beq.n	800223a <vTaskPriorityDisinheritAfterTimeout+0x116>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	429a      	cmp	r2, r3
 8002180:	d15b      	bne.n	800223a <vTaskPriorityDisinheritAfterTimeout+0x116>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <vTaskPriorityDisinheritAfterTimeout+0x120>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	429a      	cmp	r2, r3
 800218a:	d109      	bne.n	80021a0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800218c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002190:	f383 8811 	msr	BASEPRI, r3
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	e7fe      	b.n	800219e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4619      	mov	r1, r3
 80021a4:	204a      	movs	r0, #74	; 0x4a
 80021a6:	f001 fae5 	bl	8003774 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db04      	blt.n	80021c8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f1c3 0205 	rsb	r2, r3, #5
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6959      	ldr	r1, [r3, #20]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80021d8:	4413      	add	r3, r2
 80021da:	4299      	cmp	r1, r3
 80021dc:	d12d      	bne.n	800223a <vTaskPriorityDisinheritAfterTimeout+0x116>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	3304      	adds	r3, #4
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fc48 	bl	8000a78 <uxListRemove>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10a      	bne.n	8002204 <vTaskPriorityDisinheritAfterTimeout+0xe0>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	2201      	movs	r2, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43da      	mvns	r2, r3
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4013      	ands	r3, r2
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8002202:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	4618      	mov	r0, r3
 8002208:	f002 f83a 	bl	8004280 <SEGGER_SYSVIEW_OnTaskStartReady>
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	2201      	movs	r2, #1
 8002212:	409a      	lsls	r2, r3
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4313      	orrs	r3, r2
 800221a:	4a0c      	ldr	r2, [pc, #48]	; (800224c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4a07      	ldr	r2, [pc, #28]	; (8002248 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800222c:	441a      	add	r2, r3
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	3304      	adds	r3, #4
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f7fe fbc2 	bl	80009be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800223a:	bf00      	nop
 800223c:	3720      	adds	r7, #32
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200000ac 	.word	0x200000ac
 8002248:	200000b0 	.word	0x200000b0
 800224c:	2000018c 	.word	0x2000018c

08002250 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <pvTaskIncrementMutexHeldCount+0x24>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <pvTaskIncrementMutexHeldCount+0x24>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002262:	3201      	adds	r2, #1
 8002264:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8002266:	4b03      	ldr	r3, [pc, #12]	; (8002274 <pvTaskIncrementMutexHeldCount+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
	}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	200000ac 	.word	0x200000ac

08002278 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002282:	4b32      	ldr	r3, [pc, #200]	; (800234c <prvAddCurrentTaskToDelayedList+0xd4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002288:	4b31      	ldr	r3, [pc, #196]	; (8002350 <prvAddCurrentTaskToDelayedList+0xd8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3304      	adds	r3, #4
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fbf2 	bl	8000a78 <uxListRemove>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10b      	bne.n	80022b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <prvAddCurrentTaskToDelayedList+0xd8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	2201      	movs	r2, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <prvAddCurrentTaskToDelayedList+0xdc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4013      	ands	r3, r2
 80022ae:	4a29      	ldr	r2, [pc, #164]	; (8002354 <prvAddCurrentTaskToDelayedList+0xdc>)
 80022b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d110      	bne.n	80022dc <prvAddCurrentTaskToDelayedList+0x64>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00d      	beq.n	80022dc <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	211b      	movs	r1, #27
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 f81e 	bl	8004308 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3304      	adds	r3, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4820      	ldr	r0, [pc, #128]	; (8002358 <prvAddCurrentTaskToDelayedList+0xe0>)
 80022d6:	f7fe fb72 	bl	80009be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80022da:	e032      	b.n	8002342 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d20f      	bcs.n	8002314 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80022f4:	4b16      	ldr	r3, [pc, #88]	; (8002350 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2104      	movs	r1, #4
 80022fa:	4618      	mov	r0, r3
 80022fc:	f002 f804 	bl	8004308 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <prvAddCurrentTaskToDelayedList+0xe4>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3304      	adds	r3, #4
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f7fe fb7a 	bl	8000a06 <vListInsert>
}
 8002312:	e016      	b.n	8002342 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2104      	movs	r1, #4
 800231a:	4618      	mov	r0, r3
 800231c:	f001 fff4 	bl	8004308 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3304      	adds	r3, #4
 800232a:	4619      	mov	r1, r3
 800232c:	4610      	mov	r0, r2
 800232e:	f7fe fb6a 	bl	8000a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <prvAddCurrentTaskToDelayedList+0xec>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	429a      	cmp	r2, r3
 800233a:	d202      	bcs.n	8002342 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 800233c:	4a09      	ldr	r2, [pc, #36]	; (8002364 <prvAddCurrentTaskToDelayedList+0xec>)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	6013      	str	r3, [r2, #0]
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000188 	.word	0x20000188
 8002350:	200000ac 	.word	0x200000ac
 8002354:	2000018c 	.word	0x2000018c
 8002358:	20000170 	.word	0x20000170
 800235c:	20000140 	.word	0x20000140
 8002360:	2000013c 	.word	0x2000013c
 8002364:	200001a4 	.word	0x200001a4

08002368 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3b04      	subs	r3, #4
 8002378:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b04      	subs	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f023 0201 	bic.w	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3b04      	subs	r3, #4
 8002396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002398:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <pxPortInitialiseStack+0x64>)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3b14      	subs	r3, #20
 80023a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3b04      	subs	r3, #4
 80023ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f06f 0202 	mvn.w	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3b20      	subs	r3, #32
 80023bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	080023d1 	.word	0x080023d1

080023d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <prvTaskExitError+0x50>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e2:	d009      	beq.n	80023f8 <prvTaskExitError+0x28>
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e7fe      	b.n	80023f6 <prvTaskExitError+0x26>
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800240a:	bf00      	nop
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0fc      	beq.n	800240c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000010 	.word	0x20000010
	...

08002430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <pxCurrentTCBConst2>)
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	6808      	ldr	r0, [r1, #0]
 8002436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800243a:	f380 8809 	msr	PSP, r0
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f04f 0000 	mov.w	r0, #0
 8002446:	f380 8811 	msr	BASEPRI, r0
 800244a:	4770      	bx	lr
 800244c:	f3af 8000 	nop.w

08002450 <pxCurrentTCBConst2>:
 8002450:	200000ac 	.word	0x200000ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop

08002458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002458:	4808      	ldr	r0, [pc, #32]	; (800247c <prvPortStartFirstTask+0x24>)
 800245a:	6800      	ldr	r0, [r0, #0]
 800245c:	6800      	ldr	r0, [r0, #0]
 800245e:	f380 8808 	msr	MSP, r0
 8002462:	f04f 0000 	mov.w	r0, #0
 8002466:	f380 8814 	msr	CONTROL, r0
 800246a:	b662      	cpsie	i
 800246c:	b661      	cpsie	f
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	f3bf 8f6f 	isb	sy
 8002476:	df00      	svc	0
 8002478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800247a:	bf00      	nop
 800247c:	e000ed08 	.word	0xe000ed08

08002480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002486:	4b44      	ldr	r3, [pc, #272]	; (8002598 <xPortStartScheduler+0x118>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a44      	ldr	r2, [pc, #272]	; (800259c <xPortStartScheduler+0x11c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d109      	bne.n	80024a4 <xPortStartScheduler+0x24>
 8002490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	e7fe      	b.n	80024a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80024a4:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <xPortStartScheduler+0x118>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a3d      	ldr	r2, [pc, #244]	; (80025a0 <xPortStartScheduler+0x120>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d109      	bne.n	80024c2 <xPortStartScheduler+0x42>
 80024ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e7fe      	b.n	80024c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80024c2:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <xPortStartScheduler+0x124>)
 80024c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	22ff      	movs	r2, #255	; 0xff
 80024d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <xPortStartScheduler+0x128>)
 80024e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024ea:	4b30      	ldr	r3, [pc, #192]	; (80025ac <xPortStartScheduler+0x12c>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024f0:	e009      	b.n	8002506 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80024f2:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <xPortStartScheduler+0x12c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	4a2c      	ldr	r2, [pc, #176]	; (80025ac <xPortStartScheduler+0x12c>)
 80024fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	2b80      	cmp	r3, #128	; 0x80
 8002510:	d0ef      	beq.n	80024f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <xPortStartScheduler+0x12c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	d009      	beq.n	8002532 <xPortStartScheduler+0xb2>
 800251e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002522:	f383 8811 	msr	BASEPRI, r3
 8002526:	f3bf 8f6f 	isb	sy
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	e7fe      	b.n	8002530 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <xPortStartScheduler+0x12c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <xPortStartScheduler+0x12c>)
 800253a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <xPortStartScheduler+0x12c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002544:	4a19      	ldr	r2, [pc, #100]	; (80025ac <xPortStartScheduler+0x12c>)
 8002546:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <xPortStartScheduler+0x130>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <xPortStartScheduler+0x130>)
 8002556:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800255a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <xPortStartScheduler+0x130>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <xPortStartScheduler+0x130>)
 8002562:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002566:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002568:	f000 f8de 	bl	8002728 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <xPortStartScheduler+0x134>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002572:	f000 f8fd 	bl	8002770 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <xPortStartScheduler+0x138>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <xPortStartScheduler+0x138>)
 800257c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002580:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002582:	f7ff ff69 	bl	8002458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002586:	f7ff faa9 	bl	8001adc <vTaskSwitchContext>
	prvTaskExitError();
 800258a:	f7ff ff21 	bl	80023d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	e000ed00 	.word	0xe000ed00
 800259c:	410fc271 	.word	0x410fc271
 80025a0:	410fc270 	.word	0x410fc270
 80025a4:	e000e400 	.word	0xe000e400
 80025a8:	200001b0 	.word	0x200001b0
 80025ac:	200001b4 	.word	0x200001b4
 80025b0:	e000ed20 	.word	0xe000ed20
 80025b4:	20000010 	.word	0x20000010
 80025b8:	e000ef34 	.word	0xe000ef34

080025bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <vPortEnterCritical+0x54>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <vPortEnterCritical+0x54>)
 80025dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <vPortEnterCritical+0x54>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d10e      	bne.n	8002604 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <vPortEnterCritical+0x58>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <vPortEnterCritical+0x48>
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	e7fe      	b.n	8002602 <vPortEnterCritical+0x46>
	}
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	20000010 	.word	0x20000010
 8002614:	e000ed04 	.word	0xe000ed04

08002618 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <vPortExitCritical+0x4c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <vPortExitCritical+0x22>
 8002626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	e7fe      	b.n	8002638 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <vPortExitCritical+0x4c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3b01      	subs	r3, #1
 8002640:	4a08      	ldr	r2, [pc, #32]	; (8002664 <vPortExitCritical+0x4c>)
 8002642:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <vPortExitCritical+0x4c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d104      	bne.n	8002656 <vPortExitCritical+0x3e>
 800264c:	2300      	movs	r3, #0
 800264e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000010 	.word	0x20000010
	...

08002670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002670:	f3ef 8009 	mrs	r0, PSP
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <pxCurrentTCBConst>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	f01e 0f10 	tst.w	lr, #16
 8002680:	bf08      	it	eq
 8002682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800268a:	6010      	str	r0, [r2, #0]
 800268c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002694:	f380 8811 	msr	BASEPRI, r0
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f7ff fa1c 	bl	8001adc <vTaskSwitchContext>
 80026a4:	f04f 0000 	mov.w	r0, #0
 80026a8:	f380 8811 	msr	BASEPRI, r0
 80026ac:	bc09      	pop	{r0, r3}
 80026ae:	6819      	ldr	r1, [r3, #0]
 80026b0:	6808      	ldr	r0, [r1, #0]
 80026b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b6:	f01e 0f10 	tst.w	lr, #16
 80026ba:	bf08      	it	eq
 80026bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80026c0:	f380 8809 	msr	PSP, r0
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	f3af 8000 	nop.w

080026d0 <pxCurrentTCBConst>:
 80026d0:	200000ac 	.word	0x200000ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop

080026d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
	__asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80026f0:	f001 fca8 	bl	8004044 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80026f4:	f7ff f95a 	bl	80019ac <xTaskIncrementTick>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80026fe:	f001 fcff 	bl	8004100 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <SysTick_Handler+0x4c>)
 8002704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e001      	b.n	8002710 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800270c:	f001 fcdc 	bl	80040c8 <SEGGER_SYSVIEW_RecordExitISR>
 8002710:	2300      	movs	r3, #0
 8002712:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000ed04 	.word	0xe000ed04

08002728 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <vPortSetupTimerInterrupt+0x34>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <vPortSetupTimerInterrupt+0x38>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <vPortSetupTimerInterrupt+0x3c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <vPortSetupTimerInterrupt+0x40>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	4a09      	ldr	r2, [pc, #36]	; (800276c <vPortSetupTimerInterrupt+0x44>)
 8002746:	3b01      	subs	r3, #1
 8002748:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <vPortSetupTimerInterrupt+0x34>)
 800274c:	2207      	movs	r2, #7
 800274e:	601a      	str	r2, [r3, #0]
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000e010 	.word	0xe000e010
 8002760:	e000e018 	.word	0xe000e018
 8002764:	20000014 	.word	0x20000014
 8002768:	10624dd3 	.word	0x10624dd3
 800276c:	e000e014 	.word	0xe000e014

08002770 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002770:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002780 <vPortEnableVFP+0x10>
 8002774:	6801      	ldr	r1, [r0, #0]
 8002776:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800277a:	6001      	str	r1, [r0, #0]
 800277c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800277e:	bf00      	nop
 8002780:	e000ed88 	.word	0xe000ed88

08002784 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800278a:	f3ef 8305 	mrs	r3, IPSR
 800278e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	d913      	bls.n	80027be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <vPortValidateInterruptPriority+0x6c>)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4413      	add	r3, r2
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80027a0:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <vPortValidateInterruptPriority+0x70>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	7afa      	ldrb	r2, [r7, #11]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d209      	bcs.n	80027be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	e7fe      	b.n	80027bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <vPortValidateInterruptPriority+0x74>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <vPortValidateInterruptPriority+0x78>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d909      	bls.n	80027e2 <vPortValidateInterruptPriority+0x5e>
 80027ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	e7fe      	b.n	80027e0 <vPortValidateInterruptPriority+0x5c>
	}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000e3f0 	.word	0xe000e3f0
 80027f4:	200001b0 	.word	0x200001b0
 80027f8:	e000ed0c 	.word	0xe000ed0c
 80027fc:	200001b4 	.word	0x200001b4

08002800 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800280c:	f7ff f81c 	bl	8001848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002810:	4b59      	ldr	r3, [pc, #356]	; (8002978 <pvPortMalloc+0x178>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002818:	f000 f91a 	bl	8002a50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800281c:	4b57      	ldr	r3, [pc, #348]	; (800297c <pvPortMalloc+0x17c>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	f040 8091 	bne.w	800294c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01c      	beq.n	800286a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002830:	2208      	movs	r2, #8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	2b00      	cmp	r3, #0
 8002840:	d013      	beq.n	800286a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f023 0307 	bic.w	r3, r3, #7
 8002848:	3308      	adds	r3, #8
 800284a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <pvPortMalloc+0x6a>
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	e7fe      	b.n	8002868 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d06d      	beq.n	800294c <pvPortMalloc+0x14c>
 8002870:	4b43      	ldr	r3, [pc, #268]	; (8002980 <pvPortMalloc+0x180>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d868      	bhi.n	800294c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <pvPortMalloc+0x184>)
 800287c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <pvPortMalloc+0x184>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002884:	e004      	b.n	8002890 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	429a      	cmp	r2, r3
 8002898:	d903      	bls.n	80028a2 <pvPortMalloc+0xa2>
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f1      	bne.n	8002886 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80028a2:	4b35      	ldr	r3, [pc, #212]	; (8002978 <pvPortMalloc+0x178>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d04f      	beq.n	800294c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2208      	movs	r2, #8
 80028b2:	4413      	add	r3, r2
 80028b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	1ad2      	subs	r2, r2, r3
 80028c6:	2308      	movs	r3, #8
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d91e      	bls.n	800290c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d009      	beq.n	80028f4 <pvPortMalloc+0xf4>
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	e7fe      	b.n	80028f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	1ad2      	subs	r2, r2, r3
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002906:	69b8      	ldr	r0, [r7, #24]
 8002908:	f000 f904 	bl	8002b14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800290c:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <pvPortMalloc+0x180>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	4a1a      	ldr	r2, [pc, #104]	; (8002980 <pvPortMalloc+0x180>)
 8002918:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800291a:	4b19      	ldr	r3, [pc, #100]	; (8002980 <pvPortMalloc+0x180>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <pvPortMalloc+0x188>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d203      	bcs.n	800292e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <pvPortMalloc+0x180>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <pvPortMalloc+0x188>)
 800292c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <pvPortMalloc+0x17c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	431a      	orrs	r2, r3
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <pvPortMalloc+0x18c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	4a10      	ldr	r2, [pc, #64]	; (800298c <pvPortMalloc+0x18c>)
 800294a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800294c:	f7fe ff8a 	bl	8001864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <pvPortMalloc+0x16e>
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e7fe      	b.n	800296c <pvPortMalloc+0x16c>
	return pvReturn;
 800296e:	69fb      	ldr	r3, [r7, #28]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20012dc0 	.word	0x20012dc0
 800297c:	20012dd4 	.word	0x20012dd4
 8002980:	20012dc4 	.word	0x20012dc4
 8002984:	20012db8 	.word	0x20012db8
 8002988:	20012dc8 	.word	0x20012dc8
 800298c:	20012dcc 	.word	0x20012dcc

08002990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d04b      	beq.n	8002a3a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80029a2:	2308      	movs	r3, #8
 80029a4:	425b      	negs	r3, r3
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4413      	add	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <vPortFree+0xb4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <vPortFree+0x42>
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e7fe      	b.n	80029d0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <vPortFree+0x5e>
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	e7fe      	b.n	80029ec <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <vPortFree+0xb4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01e      	beq.n	8002a3a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d11a      	bne.n	8002a3a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <vPortFree+0xb4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	401a      	ands	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002a14:	f7fe ff18 	bl	8001848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <vPortFree+0xb8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <vPortFree+0xb8>)
 8002a24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a26:	6938      	ldr	r0, [r7, #16]
 8002a28:	f000 f874 	bl	8002b14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002a2c:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <vPortFree+0xbc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3301      	adds	r3, #1
 8002a32:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <vPortFree+0xbc>)
 8002a34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002a36:	f7fe ff15 	bl	8001864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20012dd4 	.word	0x20012dd4
 8002a48:	20012dc4 	.word	0x20012dc4
 8002a4c:	20012dd0 	.word	0x20012dd0

08002a50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a56:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002a5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <prvHeapInit+0xac>)
 8002a5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00c      	beq.n	8002a84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3307      	adds	r3, #7
 8002a6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <prvHeapInit+0xac>)
 8002a80:	4413      	add	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a88:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <prvHeapInit+0xb0>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <prvHeapInit+0xb0>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4413      	add	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0307 	bic.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <prvHeapInit+0xb4>)
 8002ab0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <prvHeapInit+0xb4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <prvHeapInit+0xb4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	1ad2      	subs	r2, r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <prvHeapInit+0xb4>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <prvHeapInit+0xb8>)
 8002ade:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a09      	ldr	r2, [pc, #36]	; (8002b0c <prvHeapInit+0xbc>)
 8002ae6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <prvHeapInit+0xc0>)
 8002aea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002aee:	601a      	str	r2, [r3, #0]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	200001b8 	.word	0x200001b8
 8002b00:	20012db8 	.word	0x20012db8
 8002b04:	20012dc0 	.word	0x20012dc0
 8002b08:	20012dc8 	.word	0x20012dc8
 8002b0c:	20012dc4 	.word	0x20012dc4
 8002b10:	20012dd4 	.word	0x20012dd4

08002b14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002b1c:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <prvInsertBlockIntoFreeList+0xac>)
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	e002      	b.n	8002b28 <prvInsertBlockIntoFreeList+0x14>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d8f7      	bhi.n	8002b22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d108      	bne.n	8002b56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	441a      	add	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	441a      	add	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d118      	bne.n	8002b9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <prvInsertBlockIntoFreeList+0xb0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d00d      	beq.n	8002b92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	441a      	add	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e008      	b.n	8002ba4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <prvInsertBlockIntoFreeList+0xb0>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e003      	b.n	8002ba4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d002      	beq.n	8002bb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20012db8 	.word	0x20012db8
 8002bc4:	20012dc0 	.word	0x20012dc0

08002bc8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002bcc:	4803      	ldr	r0, [pc, #12]	; (8002bdc <_cbSendSystemDesc+0x14>)
 8002bce:	f001 f9e5 	bl	8003f9c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002bd2:	4803      	ldr	r0, [pc, #12]	; (8002be0 <_cbSendSystemDesc+0x18>)
 8002bd4:	f001 f9e2 	bl	8003f9c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	080056b8 	.word	0x080056b8
 8002be0:	080056f4 	.word	0x080056f4

08002be4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <SEGGER_SYSVIEW_Conf+0x20>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SEGGER_SYSVIEW_Conf+0x20>)
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <SEGGER_SYSVIEW_Conf+0x24>)
 8002bf2:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <SEGGER_SYSVIEW_Conf+0x28>)
 8002bf4:	f000 fd52 	bl	800369c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002bf8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002bfc:	f000 fd8c 	bl	8003718 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000014 	.word	0x20000014
 8002c08:	08002bc9 	.word	0x08002bc9
 8002c0c:	0800585c 	.word	0x0800585c

08002c10 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	e034      	b.n	8002c86 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002c1c:	491e      	ldr	r1, [pc, #120]	; (8002c98 <_cbSendTaskList+0x88>)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	491a      	ldr	r1, [pc, #104]	; (8002c98 <_cbSendTaskList+0x88>)
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	681c      	ldr	r4, [r3, #0]
 8002c3e:	4916      	ldr	r1, [pc, #88]	; (8002c98 <_cbSendTaskList+0x88>)
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	681d      	ldr	r5, [r3, #0]
 8002c50:	4911      	ldr	r1, [pc, #68]	; (8002c98 <_cbSendTaskList+0x88>)
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	330c      	adds	r3, #12
 8002c60:	681e      	ldr	r6, [r3, #0]
 8002c62:	490d      	ldr	r1, [pc, #52]	; (8002c98 <_cbSendTaskList+0x88>)
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3310      	adds	r3, #16
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	4633      	mov	r3, r6
 8002c78:	462a      	mov	r2, r5
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	f000 f8ba 	bl	8002df4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3301      	adds	r3, #1
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <_cbSendTaskList+0x8c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3c5      	bcc.n	8002c1c <_cbSendTaskList+0xc>
  }
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c98:	20012dd8 	.word	0x20012dd8
 8002c9c:	20012e78 	.word	0x20012e78

08002ca0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002ca6:	f7fe fe6f 	bl	8001988 <xTaskGetTickCountFromISR>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f04f 0400 	mov.w	r4, #0
 8002cb0:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
 8002cb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002cb8:	184b      	adds	r3, r1, r1
 8002cba:	eb42 0402 	adc.w	r4, r2, r2
 8002cbe:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= 1000;
 8002cc2:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	4634      	mov	r4, r6
 8002cca:	f04f 0100 	mov.w	r1, #0
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	0162      	lsls	r2, r4, #5
 8002cd4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002cd8:	0159      	lsls	r1, r3, #5
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4614      	mov	r4, r2
 8002cde:	1b5b      	subs	r3, r3, r5
 8002ce0:	eb64 0406 	sbc.w	r4, r4, r6
 8002ce4:	f04f 0100 	mov.w	r1, #0
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	00a2      	lsls	r2, r4, #2
 8002cee:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002cf2:	0099      	lsls	r1, r3, #2
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4614      	mov	r4, r2
 8002cf8:	195b      	adds	r3, r3, r5
 8002cfa:	eb44 0406 	adc.w	r4, r4, r6
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	00e2      	lsls	r2, r4, #3
 8002d08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d0c:	00d9      	lsls	r1, r3, #3
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4614      	mov	r4, r2
 8002d12:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8002d16:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d24 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002d32:	2205      	movs	r2, #5
 8002d34:	492b      	ldr	r1, [pc, #172]	; (8002de4 <SYSVIEW_AddTask+0xc0>)
 8002d36:	68b8      	ldr	r0, [r7, #8]
 8002d38:	f002 f82a 	bl	8004d90 <memcmp>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d04b      	beq.n	8002dda <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002d42:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <SYSVIEW_AddTask+0xc4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b07      	cmp	r3, #7
 8002d48:	d903      	bls.n	8002d52 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002d4a:	4828      	ldr	r0, [pc, #160]	; (8002dec <SYSVIEW_AddTask+0xc8>)
 8002d4c:	f001 fc2a 	bl	80045a4 <SEGGER_SYSVIEW_Warn>
    return;
 8002d50:	e044      	b.n	8002ddc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002d52:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <SYSVIEW_AddTask+0xc4>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4926      	ldr	r1, [pc, #152]	; (8002df0 <SYSVIEW_AddTask+0xcc>)
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <SYSVIEW_AddTask+0xc4>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4921      	ldr	r1, [pc, #132]	; (8002df0 <SYSVIEW_AddTask+0xcc>)
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3304      	adds	r3, #4
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <SYSVIEW_AddTask+0xc4>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	491b      	ldr	r1, [pc, #108]	; (8002df0 <SYSVIEW_AddTask+0xcc>)
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <SYSVIEW_AddTask+0xc4>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4916      	ldr	r1, [pc, #88]	; (8002df0 <SYSVIEW_AddTask+0xcc>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	330c      	adds	r3, #12
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <SYSVIEW_AddTask+0xc4>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4910      	ldr	r1, [pc, #64]	; (8002df0 <SYSVIEW_AddTask+0xcc>)
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3310      	adds	r3, #16
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <SYSVIEW_AddTask+0xc4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <SYSVIEW_AddTask+0xc4>)
 8002dc6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f80e 	bl	8002df4 <SYSVIEW_SendTaskInfo>
 8002dd8:	e000      	b.n	8002ddc <SYSVIEW_AddTask+0xb8>
    return;
 8002dda:	bf00      	nop

}
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	08005704 	.word	0x08005704
 8002de8:	20012e78 	.word	0x20012e78
 8002dec:	0800570c 	.word	0x0800570c
 8002df0:	20012dd8 	.word	0x20012dd8

08002df4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002e02:	f107 0314 	add.w	r3, r7, #20
 8002e06:	2214      	movs	r2, #20
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f001 ffda 	bl	8004dc4 <memset>
  TaskInfo.TaskID     = TaskID;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 ffbd 	bl	8003da8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002e2e:	bf00      	nop
 8002e30:	3728      	adds	r7, #40	; 0x28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002e3e:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <_DoInit+0x8c>)
 8002e40:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2203      	movs	r2, #3
 8002e46:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <_DoInit+0x90>)
 8002e52:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <_DoInit+0x94>)
 8002e58:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e60:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <_DoInit+0x90>)
 8002e78:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <_DoInit+0x98>)
 8002e7e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2210      	movs	r2, #16
 8002e84:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3307      	adds	r3, #7
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <_DoInit+0x9c>)
 8002e9e:	6810      	ldr	r0, [r2, #0]
 8002ea0:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <_DoInit+0xa0>)
 8002ea6:	6810      	ldr	r0, [r2, #0]
 8002ea8:	6018      	str	r0, [r3, #0]
 8002eaa:	8891      	ldrh	r1, [r2, #4]
 8002eac:	7992      	ldrb	r2, [r2, #6]
 8002eae:	8099      	strh	r1, [r3, #4]
 8002eb0:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	719a      	strb	r2, [r3, #6]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	200153bc 	.word	0x200153bc
 8002ec8:	0800575c 	.word	0x0800575c
 8002ecc:	20012e7c 	.word	0x20012e7c
 8002ed0:	2001327c 	.word	0x2001327c
 8002ed4:	08005768 	.word	0x08005768
 8002ed8:	0800576c 	.word	0x0800576c

08002edc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002ee8:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <SEGGER_RTT_ReadNoLock+0x100>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <SEGGER_RTT_ReadNoLock+0x18>
 8002ef0:	f7ff ffa2 	bl	8002e38 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	3360      	adds	r3, #96	; 0x60
 8002f00:	4a36      	ldr	r2, [pc, #216]	; (8002fdc <SEGGER_RTT_ReadNoLock+0x100>)
 8002f02:	4413      	add	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002f1a:	6a3a      	ldr	r2, [r7, #32]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d92a      	bls.n	8002f78 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4293      	cmp	r3, r2
 8002f32:	bf28      	it	cs
 8002f34:	4613      	movcs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	4413      	add	r3, r2
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4619      	mov	r1, r3
 8002f44:	69f8      	ldr	r0, [r7, #28]
 8002f46:	f001 ff32 	bl	8004dae <memcpy>
    NumBytesRead += NumBytesRem;
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4413      	add	r3, r2
 8002f58:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002f62:	6a3a      	ldr	r2, [r7, #32]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	6a3a      	ldr	r2, [r7, #32]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d101      	bne.n	8002f78 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002f74:	2300      	movs	r3, #0
 8002f76:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf28      	it	cs
 8002f88:	4613      	movcs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d018      	beq.n	8002fc4 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	4413      	add	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	69f8      	ldr	r0, [r7, #28]
 8002fa0:	f001 ff05 	bl	8004dae <memcpy>
    NumBytesRead += NumBytesRem;
 8002fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4413      	add	r3, r2
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	6a3a      	ldr	r2, [r7, #32]
 8002fce:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3728      	adds	r7, #40	; 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200153bc 	.word	0x200153bc

08002fe0 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4a3f      	ldr	r2, [pc, #252]	; (80030fc <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002ffe:	4413      	add	r3, r2
 8003000:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	429a      	cmp	r2, r3
 8003014:	d854      	bhi.n	80030c0 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	d30f      	bcc.n	800304a <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4413      	add	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003036:	4618      	mov	r0, r3
 8003038:	f001 feb9 	bl	8004dae <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	441a      	add	r2, r3
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003046:	2301      	movs	r3, #1
 8003048:	e054      	b.n	80030f4 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	4413      	add	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d34b      	bcc.n	80030f2 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	429a      	cmp	r2, r3
 800306a:	d90e      	bls.n	800308a <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	4413      	add	r3, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003078:	4618      	mov	r0, r3
 800307a:	f001 fe98 	bl	8004dae <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	441a      	add	r2, r3
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	e018      	b.n	80030bc <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4413      	add	r3, r2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003096:	4618      	mov	r0, r3
 8003098:	f001 fe89 	bl	8004dae <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	6858      	ldr	r0, [r3, #4]
 80030a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	18d1      	adds	r1, r2, r3
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	f001 fe7e 	bl	8004dae <memcpy>
        pRing->WrOff = NumBytes - Rem;
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad2      	subs	r2, r2, r3
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80030bc:	2301      	movs	r3, #1
 80030be:	e019      	b.n	80030f4 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d30f      	bcc.n	80030f2 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4413      	add	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 fe65 	bl	8004dae <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	441a      	add	r2, r3
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3728      	adds	r7, #40	; 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	200153bc 	.word	0x200153bc

08003100 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800310e:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8003116:	f7ff fe8f 	bl	8002e38 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	461a      	mov	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4293      	cmp	r3, r2
 8003124:	d24c      	bcs.n	80031c0 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8003126:	f3ef 8311 	mrs	r3, BASEPRI
 800312a:	f04f 0120 	mov.w	r1, #32
 800312e:	f381 8811 	msr	BASEPRI, r1
 8003132:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d032      	beq.n	80031a0 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800313a:	4925      	ldr	r1, [pc, #148]	; (80031d0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	440b      	add	r3, r1
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800314e:	4920      	ldr	r1, [pc, #128]	; (80031d0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	3304      	adds	r3, #4
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003164:	491a      	ldr	r1, [pc, #104]	; (80031d0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	3320      	adds	r3, #32
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003178:	4915      	ldr	r1, [pc, #84]	; (80031d0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	3328      	adds	r3, #40	; 0x28
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800318c:	4910      	ldr	r1, [pc, #64]	; (80031d0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	3324      	adds	r3, #36	; 0x24
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80031a0:	490b      	ldr	r1, [pc, #44]	; (80031d0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	440b      	add	r3, r1
 80031ae:	332c      	adds	r3, #44	; 0x2c
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e002      	b.n	80031c6 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
 80031c4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80031c6:	697b      	ldr	r3, [r7, #20]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	200153bc 	.word	0x200153bc

080031d4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80031e2:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80031ea:	f7ff fe25 	bl	8002e38 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80031ee:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d24b      	bcs.n	8003292 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80031fa:	f3ef 8311 	mrs	r3, BASEPRI
 80031fe:	f04f 0120 	mov.w	r1, #32
 8003202:	f381 8811 	msr	BASEPRI, r1
 8003206:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d031      	beq.n	8003272 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800320e:	4925      	ldr	r1, [pc, #148]	; (80032a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	3360      	adds	r3, #96	; 0x60
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003222:	4920      	ldr	r1, [pc, #128]	; (80032a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	3364      	adds	r3, #100	; 0x64
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003236:	491b      	ldr	r1, [pc, #108]	; (80032a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	3368      	adds	r3, #104	; 0x68
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800324a:	4916      	ldr	r1, [pc, #88]	; (80032a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	3370      	adds	r3, #112	; 0x70
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800325e:	4911      	ldr	r1, [pc, #68]	; (80032a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	336c      	adds	r3, #108	; 0x6c
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8003272:	490c      	ldr	r1, [pc, #48]	; (80032a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	3374      	adds	r3, #116	; 0x74
 8003282:	6a3a      	ldr	r2, [r7, #32]
 8003284:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e002      	b.n	8003298 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003298:	697b      	ldr	r3, [r7, #20]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200153bc 	.word	0x200153bc

080032a8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80032b8:	e002      	b.n	80032c0 <_EncodeStr+0x18>
    Len++;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	3301      	adds	r3, #1
 80032be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4413      	add	r3, r2
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f6      	bne.n	80032ba <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d901      	bls.n	80032d8 <_EncodeStr+0x30>
    Len = Limit;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2bfe      	cmp	r3, #254	; 0xfe
 80032dc:	d806      	bhi.n	80032ec <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	60fa      	str	r2, [r7, #12]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e011      	b.n	8003310 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	60fa      	str	r2, [r7, #12]
 80032f2:	22ff      	movs	r2, #255	; 0xff
 80032f4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	60fa      	str	r2, [r7, #12]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	0a19      	lsrs	r1, r3, #8
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	60fa      	str	r2, [r7, #12]
 800330c:	b2ca      	uxtb	r2, r1
 800330e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003314:	e00a      	b.n	800332c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	1c53      	adds	r3, r2, #1
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1c59      	adds	r1, r3, #1
 8003320:	60f9      	str	r1, [r7, #12]
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	701a      	strb	r2, [r3, #0]
    n++;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	3301      	adds	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d3f0      	bcc.n	8003316 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003334:	68fb      	ldr	r3, [r7, #12]
}
 8003336:	4618      	mov	r0, r3
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3304      	adds	r3, #4
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003360:	1cfb      	adds	r3, r7, #3
 8003362:	2201      	movs	r2, #1
 8003364:	4619      	mov	r1, r3
 8003366:	2001      	movs	r0, #1
 8003368:	f7ff fdb8 	bl	8002edc <SEGGER_RTT_ReadNoLock>
 800336c:	4603      	mov	r3, r0
 800336e:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	dd44      	ble.n	8003400 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	2b04      	cmp	r3, #4
 800337a:	d01a      	beq.n	80033b2 <_HandleIncomingPacket+0x58>
 800337c:	2b04      	cmp	r3, #4
 800337e:	dc06      	bgt.n	800338e <_HandleIncomingPacket+0x34>
 8003380:	2b02      	cmp	r3, #2
 8003382:	d010      	beq.n	80033a6 <_HandleIncomingPacket+0x4c>
 8003384:	2b02      	cmp	r3, #2
 8003386:	dc11      	bgt.n	80033ac <_HandleIncomingPacket+0x52>
 8003388:	2b01      	cmp	r3, #1
 800338a:	d009      	beq.n	80033a0 <_HandleIncomingPacket+0x46>
 800338c:	e02d      	b.n	80033ea <_HandleIncomingPacket+0x90>
 800338e:	2b06      	cmp	r3, #6
 8003390:	d015      	beq.n	80033be <_HandleIncomingPacket+0x64>
 8003392:	2b06      	cmp	r3, #6
 8003394:	db10      	blt.n	80033b8 <_HandleIncomingPacket+0x5e>
 8003396:	2b07      	cmp	r3, #7
 8003398:	d014      	beq.n	80033c4 <_HandleIncomingPacket+0x6a>
 800339a:	2b80      	cmp	r3, #128	; 0x80
 800339c:	d015      	beq.n	80033ca <_HandleIncomingPacket+0x70>
 800339e:	e024      	b.n	80033ea <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80033a0:	f000 fb86 	bl	8003ab0 <SEGGER_SYSVIEW_Start>
      break;
 80033a4:	e031      	b.n	800340a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80033a6:	f000 fc3f 	bl	8003c28 <SEGGER_SYSVIEW_Stop>
      break;
 80033aa:	e02e      	b.n	800340a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80033ac:	f000 fe1a 	bl	8003fe4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80033b0:	e02b      	b.n	800340a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80033b2:	f000 fddf 	bl	8003f74 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80033b6:	e028      	b.n	800340a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80033b8:	f000 fc5c 	bl	8003c74 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80033bc:	e025      	b.n	800340a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80033be:	f001 f8b3 	bl	8004528 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80033c2:	e022      	b.n	800340a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80033c4:	f001 f892 	bl	80044ec <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80033c8:	e01f      	b.n	800340a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80033ca:	1cfb      	adds	r3, r7, #3
 80033cc:	2201      	movs	r2, #1
 80033ce:	4619      	mov	r1, r3
 80033d0:	2001      	movs	r0, #1
 80033d2:	f7ff fd83 	bl	8002edc <SEGGER_RTT_ReadNoLock>
 80033d6:	4603      	mov	r3, r0
 80033d8:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	dd11      	ble.n	8003404 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 f802 	bl	80043ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80033e8:	e00c      	b.n	8003404 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	da0a      	bge.n	8003408 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80033f2:	1cfb      	adds	r3, r7, #3
 80033f4:	2201      	movs	r2, #1
 80033f6:	4619      	mov	r1, r3
 80033f8:	2001      	movs	r0, #1
 80033fa:	f7ff fd6f 	bl	8002edc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80033fe:	e003      	b.n	8003408 <_HandleIncomingPacket+0xae>
    }
  }
 8003400:	bf00      	nop
 8003402:	e002      	b.n	800340a <_HandleIncomingPacket+0xb0>
      break;
 8003404:	bf00      	nop
 8003406:	e000      	b.n	800340a <_HandleIncomingPacket+0xb0>
      break;
 8003408:	bf00      	nop
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b08c      	sub	sp, #48	; 0x30
 8003418:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800341a:	2301      	movs	r3, #1
 800341c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	3301      	adds	r3, #1
 8003422:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003428:	4b30      	ldr	r3, [pc, #192]	; (80034ec <_TrySendOverflowPacket+0xd8>)
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
 800342e:	e00b      	b.n	8003448 <_TrySendOverflowPacket+0x34>
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	b2da      	uxtb	r2, r3
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	1c59      	adds	r1, r3, #1
 8003438:	62f9      	str	r1, [r7, #44]	; 0x2c
 800343a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	09db      	lsrs	r3, r3, #7
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	2b7f      	cmp	r3, #127	; 0x7f
 800344c:	d8f0      	bhi.n	8003430 <_TrySendOverflowPacket+0x1c>
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <_TrySendOverflowPacket+0xdc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003464:	4b21      	ldr	r3, [pc, #132]	; (80034ec <_TrySendOverflowPacket+0xd8>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	623b      	str	r3, [r7, #32]
 8003476:	e00b      	b.n	8003490 <_TrySendOverflowPacket+0x7c>
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	1c59      	adds	r1, r3, #1
 8003480:	6279      	str	r1, [r7, #36]	; 0x24
 8003482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	09db      	lsrs	r3, r3, #7
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	2b7f      	cmp	r3, #127	; 0x7f
 8003494:	d8f0      	bhi.n	8003478 <_TrySendOverflowPacket+0x64>
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	627a      	str	r2, [r7, #36]	; 0x24
 800349c:	6a3a      	ldr	r2, [r7, #32]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	1d3b      	adds	r3, r7, #4
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	2001      	movs	r0, #1
 80034b4:	f7ff fd94 	bl	8002fe0 <SEGGER_RTT_WriteSkipNoLock>
 80034b8:	4603      	mov	r3, r0
 80034ba:	613b      	str	r3, [r7, #16]
  if (Status) {
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80034c2:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <_TrySendOverflowPacket+0xd8>)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <_TrySendOverflowPacket+0xd8>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <_TrySendOverflowPacket+0xd8>)
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e004      	b.n	80034e0 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <_TrySendOverflowPacket+0xd8>)
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	3301      	adds	r3, #1
 80034dc:	4a03      	ldr	r2, [pc, #12]	; (80034ec <_TrySendOverflowPacket+0xd8>)
 80034de:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80034e0:	693b      	ldr	r3, [r7, #16]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3730      	adds	r7, #48	; 0x30
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20015294 	.word	0x20015294
 80034f0:	e0001004 	.word	0xe0001004

080034f4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003500:	4b63      	ldr	r3, [pc, #396]	; (8003690 <_SendPacket+0x19c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d010      	beq.n	800352a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003508:	4b61      	ldr	r3, [pc, #388]	; (8003690 <_SendPacket+0x19c>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a1 	beq.w	8003654 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003512:	4b5f      	ldr	r3, [pc, #380]	; (8003690 <_SendPacket+0x19c>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d109      	bne.n	800352e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800351a:	f7ff ff7b 	bl	8003414 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800351e:	4b5c      	ldr	r3, [pc, #368]	; (8003690 <_SendPacket+0x19c>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	f040 8098 	bne.w	8003658 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8003528:	e001      	b.n	800352e <_SendPacket+0x3a>
    goto Send;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <_SendPacket+0x3c>
Send:
 800352e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b1f      	cmp	r3, #31
 8003534:	d809      	bhi.n	800354a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003536:	4b56      	ldr	r3, [pc, #344]	; (8003690 <_SendPacket+0x19c>)
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	f040 8089 	bne.w	800365c <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b17      	cmp	r3, #23
 800354e:	d807      	bhi.n	8003560 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3b01      	subs	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e03d      	b.n	80035dc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b7f      	cmp	r3, #127	; 0x7f
 800356c:	d912      	bls.n	8003594 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	09da      	lsrs	r2, r3, #7
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3b01      	subs	r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	3a01      	subs	r2, #1
 8003586:	60fa      	str	r2, [r7, #12]
 8003588:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800358c:	b2da      	uxtb	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e006      	b.n	80035a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3b01      	subs	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b7f      	cmp	r3, #127	; 0x7f
 80035a6:	d912      	bls.n	80035ce <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	09da      	lsrs	r2, r3, #7
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	3a01      	subs	r2, #1
 80035c0:	60fa      	str	r2, [r7, #12]
 80035c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e006      	b.n	80035dc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <_SendPacket+0x1a0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80035e2:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <_SendPacket+0x19c>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	623b      	str	r3, [r7, #32]
 80035f4:	e00b      	b.n	800360e <_SendPacket+0x11a>
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	1c59      	adds	r1, r3, #1
 80035fe:	6279      	str	r1, [r7, #36]	; 0x24
 8003600:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	09db      	lsrs	r3, r3, #7
 800360c:	623b      	str	r3, [r7, #32]
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	2b7f      	cmp	r3, #127	; 0x7f
 8003612:	d8f0      	bhi.n	80035f6 <_SendPacket+0x102>
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	627a      	str	r2, [r7, #36]	; 0x24
 800361a:	6a3a      	ldr	r2, [r7, #32]
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	461a      	mov	r2, r3
 800362c:	68f9      	ldr	r1, [r7, #12]
 800362e:	2001      	movs	r0, #1
 8003630:	f7ff fcd6 	bl	8002fe0 <SEGGER_RTT_WriteSkipNoLock>
 8003634:	4603      	mov	r3, r0
 8003636:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800363e:	4a14      	ldr	r2, [pc, #80]	; (8003690 <_SendPacket+0x19c>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	60d3      	str	r3, [r2, #12]
 8003644:	e00b      	b.n	800365e <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <_SendPacket+0x19c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	3301      	adds	r3, #1
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <_SendPacket+0x19c>)
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e004      	b.n	800365e <_SendPacket+0x16a>
    goto SendDone;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <_SendPacket+0x16a>
      goto SendDone;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <_SendPacket+0x16a>
      goto SendDone;
 800365c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <_SendPacket+0x1a4>)
 8003660:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <_SendPacket+0x1a4>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	429a      	cmp	r2, r3
 800366c:	d00b      	beq.n	8003686 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <_SendPacket+0x19c>)
 8003670:	789b      	ldrb	r3, [r3, #2]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <_SendPacket+0x19c>)
 8003678:	2201      	movs	r2, #1
 800367a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800367c:	f7ff fe6d 	bl	800335a <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <_SendPacket+0x19c>)
 8003682:	2200      	movs	r2, #0
 8003684:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003686:	bf00      	nop
 8003688:	3728      	adds	r7, #40	; 0x28
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20015294 	.word	0x20015294
 8003694:	e0001004 	.word	0xe0001004
 8003698:	200153bc 	.word	0x200153bc

0800369c <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80036aa:	2300      	movs	r3, #0
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036b2:	4a14      	ldr	r2, [pc, #80]	; (8003704 <SEGGER_SYSVIEW_Init+0x68>)
 80036b4:	4914      	ldr	r1, [pc, #80]	; (8003708 <SEGGER_SYSVIEW_Init+0x6c>)
 80036b6:	2001      	movs	r0, #1
 80036b8:	f7ff fd22 	bl	8003100 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80036bc:	2300      	movs	r3, #0
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2308      	movs	r3, #8
 80036c2:	4a12      	ldr	r2, [pc, #72]	; (800370c <SEGGER_SYSVIEW_Init+0x70>)
 80036c4:	4910      	ldr	r1, [pc, #64]	; (8003708 <SEGGER_SYSVIEW_Init+0x6c>)
 80036c6:	2001      	movs	r0, #1
 80036c8:	f7ff fd84 	bl	80031d4 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <SEGGER_SYSVIEW_Init+0x74>)
 80036ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d2:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <SEGGER_SYSVIEW_Init+0x78>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <SEGGER_SYSVIEW_Init+0x74>)
 80036da:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80036dc:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <SEGGER_SYSVIEW_Init+0x74>)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80036e2:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <SEGGER_SYSVIEW_Init+0x74>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80036e8:	4a09      	ldr	r2, [pc, #36]	; (8003710 <SEGGER_SYSVIEW_Init+0x74>)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80036ee:	4a08      	ldr	r2, [pc, #32]	; (8003710 <SEGGER_SYSVIEW_Init+0x74>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <SEGGER_SYSVIEW_Init+0x74>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	2001328c 	.word	0x2001328c
 8003708:	08005774 	.word	0x08005774
 800370c:	2001528c 	.word	0x2001528c
 8003710:	20015294 	.word	0x20015294
 8003714:	e0001004 	.word	0xe0001004

08003718 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003720:	4a04      	ldr	r2, [pc, #16]	; (8003734 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6113      	str	r3, [r2, #16]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20015294 	.word	0x20015294

08003738 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003740:	f3ef 8311 	mrs	r3, BASEPRI
 8003744:	f04f 0120 	mov.w	r1, #32
 8003748:	f381 8811 	msr	BASEPRI, r1
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	4808      	ldr	r0, [pc, #32]	; (8003770 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003750:	f7ff fdf7 	bl	8003342 <_PreparePacket>
 8003754:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	68b8      	ldr	r0, [r7, #8]
 800375c:	f7ff feca 	bl	80034f4 <_SendPacket>
  RECORD_END();
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f383 8811 	msr	BASEPRI, r3
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	200152c4 	.word	0x200152c4

08003774 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800377e:	f3ef 8311 	mrs	r3, BASEPRI
 8003782:	f04f 0120 	mov.w	r1, #32
 8003786:	f381 8811 	msr	BASEPRI, r1
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	4816      	ldr	r0, [pc, #88]	; (80037e8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800378e:	f7ff fdd8 	bl	8003342 <_PreparePacket>
 8003792:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	e00b      	b.n	80037ba <SEGGER_SYSVIEW_RecordU32+0x46>
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	1c59      	adds	r1, r3, #1
 80037aa:	61f9      	str	r1, [r7, #28]
 80037ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	09db      	lsrs	r3, r3, #7
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b7f      	cmp	r3, #127	; 0x7f
 80037be:	d8f0      	bhi.n	80037a2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	61fa      	str	r2, [r7, #28]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	68f9      	ldr	r1, [r7, #12]
 80037d4:	6938      	ldr	r0, [r7, #16]
 80037d6:	f7ff fe8d 	bl	80034f4 <_SendPacket>
  RECORD_END();
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f383 8811 	msr	BASEPRI, r3
}
 80037e0:	bf00      	nop
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	200152c4 	.word	0x200152c4

080037ec <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	; 0x30
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80037f8:	f3ef 8311 	mrs	r3, BASEPRI
 80037fc:	f04f 0120 	mov.w	r1, #32
 8003800:	f381 8811 	msr	BASEPRI, r1
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	4825      	ldr	r0, [pc, #148]	; (800389c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003808:	f7ff fd9b 	bl	8003342 <_PreparePacket>
 800380c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28
 800381a:	e00b      	b.n	8003834 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	b2da      	uxtb	r2, r3
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	1c59      	adds	r1, r3, #1
 8003824:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003826:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	09db      	lsrs	r3, r3, #7
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	2b7f      	cmp	r3, #127	; 0x7f
 8003838:	d8f0      	bhi.n	800381c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	623b      	str	r3, [r7, #32]
 8003852:	e00b      	b.n	800386c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	b2da      	uxtb	r2, r3
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	6279      	str	r1, [r7, #36]	; 0x24
 800385e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	09db      	lsrs	r3, r3, #7
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	2b7f      	cmp	r3, #127	; 0x7f
 8003870:	d8f0      	bhi.n	8003854 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	627a      	str	r2, [r7, #36]	; 0x24
 8003878:	6a3a      	ldr	r2, [r7, #32]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	6979      	ldr	r1, [r7, #20]
 8003886:	69b8      	ldr	r0, [r7, #24]
 8003888:	f7ff fe34 	bl	80034f4 <_SendPacket>
  RECORD_END();
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f383 8811 	msr	BASEPRI, r3
}
 8003892:	bf00      	nop
 8003894:	3730      	adds	r7, #48	; 0x30
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200152c4 	.word	0x200152c4

080038a0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08e      	sub	sp, #56	; 0x38
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80038ae:	f3ef 8311 	mrs	r3, BASEPRI
 80038b2:	f04f 0120 	mov.w	r1, #32
 80038b6:	f381 8811 	msr	BASEPRI, r1
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	4832      	ldr	r0, [pc, #200]	; (8003988 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80038be:	f7ff fd40 	bl	8003342 <_PreparePacket>
 80038c2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	637b      	str	r3, [r7, #52]	; 0x34
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
 80038d0:	e00b      	b.n	80038ea <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d8:	1c59      	adds	r1, r3, #1
 80038da:	6379      	str	r1, [r7, #52]	; 0x34
 80038dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	09db      	lsrs	r3, r3, #7
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	2b7f      	cmp	r3, #127	; 0x7f
 80038ee:	d8f0      	bhi.n	80038d2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	637a      	str	r2, [r7, #52]	; 0x34
 80038f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
 8003908:	e00b      	b.n	8003922 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	b2da      	uxtb	r2, r3
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	1c59      	adds	r1, r3, #1
 8003912:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003914:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	09db      	lsrs	r3, r3, #7
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	2b7f      	cmp	r3, #127	; 0x7f
 8003926:	d8f0      	bhi.n	800390a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800392e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]
 8003934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003936:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	623b      	str	r3, [r7, #32]
 8003940:	e00b      	b.n	800395a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	1c59      	adds	r1, r3, #1
 800394a:	6279      	str	r1, [r7, #36]	; 0x24
 800394c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	09db      	lsrs	r3, r3, #7
 8003958:	623b      	str	r3, [r7, #32]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2b7f      	cmp	r3, #127	; 0x7f
 800395e:	d8f0      	bhi.n	8003942 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	627a      	str	r2, [r7, #36]	; 0x24
 8003966:	6a3a      	ldr	r2, [r7, #32]
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	6979      	ldr	r1, [r7, #20]
 8003974:	69b8      	ldr	r0, [r7, #24]
 8003976:	f7ff fdbd 	bl	80034f4 <_SendPacket>
  RECORD_END();
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f383 8811 	msr	BASEPRI, r3
}
 8003980:	bf00      	nop
 8003982:	3738      	adds	r7, #56	; 0x38
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	200152c4 	.word	0x200152c4

0800398c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b090      	sub	sp, #64	; 0x40
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800399a:	f3ef 8311 	mrs	r3, BASEPRI
 800399e:	f04f 0120 	mov.w	r1, #32
 80039a2:	f381 8811 	msr	BASEPRI, r1
 80039a6:	61fb      	str	r3, [r7, #28]
 80039a8:	4840      	ldr	r0, [pc, #256]	; (8003aac <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80039aa:	f7ff fcca 	bl	8003342 <_PreparePacket>
 80039ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80039bc:	e00b      	b.n	80039d6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c4:	1c59      	adds	r1, r3, #1
 80039c6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80039c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	09db      	lsrs	r3, r3, #7
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2b7f      	cmp	r3, #127	; 0x7f
 80039da:	d8f0      	bhi.n	80039be <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80039dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	637b      	str	r3, [r7, #52]	; 0x34
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	633b      	str	r3, [r7, #48]	; 0x30
 80039f4:	e00b      	b.n	8003a0e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fc:	1c59      	adds	r1, r3, #1
 80039fe:	6379      	str	r1, [r7, #52]	; 0x34
 8003a00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	09db      	lsrs	r3, r3, #7
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	2b7f      	cmp	r3, #127	; 0x7f
 8003a12:	d8f0      	bhi.n	80039f6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	637a      	str	r2, [r7, #52]	; 0x34
 8003a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2c:	e00b      	b.n	8003a46 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	1c59      	adds	r1, r3, #1
 8003a36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	09db      	lsrs	r3, r3, #7
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	2b7f      	cmp	r3, #127	; 0x7f
 8003a4a:	d8f0      	bhi.n	8003a2e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a62:	623b      	str	r3, [r7, #32]
 8003a64:	e00b      	b.n	8003a7e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	1c59      	adds	r1, r3, #1
 8003a6e:	6279      	str	r1, [r7, #36]	; 0x24
 8003a70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	09db      	lsrs	r3, r3, #7
 8003a7c:	623b      	str	r3, [r7, #32]
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	2b7f      	cmp	r3, #127	; 0x7f
 8003a82:	d8f0      	bhi.n	8003a66 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	627a      	str	r2, [r7, #36]	; 0x24
 8003a8a:	6a3a      	ldr	r2, [r7, #32]
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	6979      	ldr	r1, [r7, #20]
 8003a98:	69b8      	ldr	r0, [r7, #24]
 8003a9a:	f7ff fd2b 	bl	80034f4 <_SendPacket>
  RECORD_END();
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f383 8811 	msr	BASEPRI, r3
}
 8003aa4:	bf00      	nop
 8003aa6:	3740      	adds	r7, #64	; 0x40
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	200152c4 	.word	0x200152c4

08003ab0 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	; 0x30
 8003ab4:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003ab6:	4b59      	ldr	r3, [pc, #356]	; (8003c1c <SEGGER_SYSVIEW_Start+0x16c>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f040 80aa 	bne.w	8003c14 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003ac0:	4b56      	ldr	r3, [pc, #344]	; (8003c1c <SEGGER_SYSVIEW_Start+0x16c>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8003aca:	f04f 0120 	mov.w	r1, #32
 8003ace:	f381 8811 	msr	BASEPRI, r1
 8003ad2:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003ad4:	220a      	movs	r2, #10
 8003ad6:	4952      	ldr	r1, [pc, #328]	; (8003c20 <SEGGER_SYSVIEW_Start+0x170>)
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f7ff fa81 	bl	8002fe0 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003ae4:	200a      	movs	r0, #10
 8003ae6:	f7ff fe27 	bl	8003738 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003aea:	f3ef 8311 	mrs	r3, BASEPRI
 8003aee:	f04f 0120 	mov.w	r1, #32
 8003af2:	f381 8811 	msr	BASEPRI, r1
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	484a      	ldr	r0, [pc, #296]	; (8003c24 <SEGGER_SYSVIEW_Start+0x174>)
 8003afa:	f7ff fc22 	bl	8003342 <_PreparePacket>
 8003afe:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b08:	4b44      	ldr	r3, [pc, #272]	; (8003c1c <SEGGER_SYSVIEW_Start+0x16c>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0e:	e00b      	b.n	8003b28 <SEGGER_SYSVIEW_Start+0x78>
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	1c59      	adds	r1, r3, #1
 8003b18:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	09db      	lsrs	r3, r3, #7
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b2c:	d8f0      	bhi.n	8003b10 <SEGGER_SYSVIEW_Start+0x60>
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
 8003b42:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <SEGGER_SYSVIEW_Start+0x16c>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	623b      	str	r3, [r7, #32]
 8003b48:	e00b      	b.n	8003b62 <SEGGER_SYSVIEW_Start+0xb2>
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	1c59      	adds	r1, r3, #1
 8003b52:	6279      	str	r1, [r7, #36]	; 0x24
 8003b54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	09db      	lsrs	r3, r3, #7
 8003b60:	623b      	str	r3, [r7, #32]
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	2b7f      	cmp	r3, #127	; 0x7f
 8003b66:	d8f0      	bhi.n	8003b4a <SEGGER_SYSVIEW_Start+0x9a>
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b6e:	6a3a      	ldr	r2, [r7, #32]
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <SEGGER_SYSVIEW_Start+0x16c>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	e00b      	b.n	8003b9c <SEGGER_SYSVIEW_Start+0xec>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	1c59      	adds	r1, r3, #1
 8003b8c:	61f9      	str	r1, [r7, #28]
 8003b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	09db      	lsrs	r3, r3, #7
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8003ba0:	d8f0      	bhi.n	8003b84 <SEGGER_SYSVIEW_Start+0xd4>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	61fa      	str	r2, [r7, #28]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	e00b      	b.n	8003bd4 <SEGGER_SYSVIEW_Start+0x124>
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	1c59      	adds	r1, r3, #1
 8003bc4:	6179      	str	r1, [r7, #20]
 8003bc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	09db      	lsrs	r3, r3, #7
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8003bd8:	d8f0      	bhi.n	8003bbc <SEGGER_SYSVIEW_Start+0x10c>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	617a      	str	r2, [r7, #20]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003bea:	2218      	movs	r2, #24
 8003bec:	6839      	ldr	r1, [r7, #0]
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fc80 	bl	80034f4 <_SendPacket>
      RECORD_END();
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <SEGGER_SYSVIEW_Start+0x16c>)
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <SEGGER_SYSVIEW_Start+0x16c>)
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003c08:	f000 f9ec 	bl	8003fe4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003c0c:	f000 f9b2 	bl	8003f74 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003c10:	f000 fc8a 	bl	8004528 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003c14:	bf00      	nop
 8003c16:	3730      	adds	r7, #48	; 0x30
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20015294 	.word	0x20015294
 8003c20:	08005864 	.word	0x08005864
 8003c24:	200152c4 	.word	0x200152c4

08003c28 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c32:	f04f 0120 	mov.w	r1, #32
 8003c36:	f381 8811 	msr	BASEPRI, r1
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	480b      	ldr	r0, [pc, #44]	; (8003c6c <SEGGER_SYSVIEW_Stop+0x44>)
 8003c3e:	f7ff fb80 	bl	8003342 <_PreparePacket>
 8003c42:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <SEGGER_SYSVIEW_Stop+0x48>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003c4c:	220b      	movs	r2, #11
 8003c4e:	6839      	ldr	r1, [r7, #0]
 8003c50:	6838      	ldr	r0, [r7, #0]
 8003c52:	f7ff fc4f 	bl	80034f4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <SEGGER_SYSVIEW_Stop+0x48>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f383 8811 	msr	BASEPRI, r3
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200152c4 	.word	0x200152c4
 8003c70:	20015294 	.word	0x20015294

08003c74 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	; 0x30
 8003c78:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c7a:	f3ef 8311 	mrs	r3, BASEPRI
 8003c7e:	f04f 0120 	mov.w	r1, #32
 8003c82:	f381 8811 	msr	BASEPRI, r1
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	4845      	ldr	r0, [pc, #276]	; (8003da0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003c8a:	f7ff fb5a 	bl	8003342 <_PreparePacket>
 8003c8e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c98:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c9e:	e00b      	b.n	8003cb8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca6:	1c59      	adds	r1, r3, #1
 8003ca8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	09db      	lsrs	r3, r3, #7
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	2b7f      	cmp	r3, #127	; 0x7f
 8003cbc:	d8f0      	bhi.n	8003ca0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	4b34      	ldr	r3, [pc, #208]	; (8003da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	e00b      	b.n	8003cf2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	1c59      	adds	r1, r3, #1
 8003ce2:	6279      	str	r1, [r7, #36]	; 0x24
 8003ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	09db      	lsrs	r3, r3, #7
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8003cf6:	d8f0      	bhi.n	8003cda <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	627a      	str	r2, [r7, #36]	; 0x24
 8003cfe:	6a3a      	ldr	r2, [r7, #32]
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	e00b      	b.n	8003d2c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	1c59      	adds	r1, r3, #1
 8003d1c:	61f9      	str	r1, [r7, #28]
 8003d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	09db      	lsrs	r3, r3, #7
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d30:	d8f0      	bhi.n	8003d14 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	61fa      	str	r2, [r7, #28]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	2302      	movs	r3, #2
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	e00b      	b.n	8003d64 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1c59      	adds	r1, r3, #1
 8003d54:	6179      	str	r1, [r7, #20]
 8003d56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	09db      	lsrs	r3, r3, #7
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b7f      	cmp	r3, #127	; 0x7f
 8003d68:	d8f0      	bhi.n	8003d4c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	617a      	str	r2, [r7, #20]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003d7a:	2218      	movs	r2, #24
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	68b8      	ldr	r0, [r7, #8]
 8003d80:	f7ff fbb8 	bl	80034f4 <_SendPacket>
  RECORD_END();
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	4798      	blx	r3
  }
}
 8003d98:	bf00      	nop
 8003d9a:	3730      	adds	r7, #48	; 0x30
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	200152c4 	.word	0x200152c4
 8003da4:	20015294 	.word	0x20015294

08003da8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b092      	sub	sp, #72	; 0x48
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003db0:	f3ef 8311 	mrs	r3, BASEPRI
 8003db4:	f04f 0120 	mov.w	r1, #32
 8003db8:	f381 8811 	msr	BASEPRI, r1
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	486b      	ldr	r0, [pc, #428]	; (8003f6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003dc0:	f7ff fabf 	bl	8003342 <_PreparePacket>
 8003dc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	643b      	str	r3, [r7, #64]	; 0x40
 8003ddc:	e00b      	b.n	8003df6 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de4:	1c59      	adds	r1, r3, #1
 8003de6:	6479      	str	r1, [r7, #68]	; 0x44
 8003de8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df2:	09db      	lsrs	r3, r3, #7
 8003df4:	643b      	str	r3, [r7, #64]	; 0x40
 8003df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df8:	2b7f      	cmp	r3, #127	; 0x7f
 8003dfa:	d8f0      	bhi.n	8003dde <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	647a      	str	r2, [r7, #68]	; 0x44
 8003e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e16:	e00b      	b.n	8003e30 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1e:	1c59      	adds	r1, r3, #1
 8003e20:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	09db      	lsrs	r3, r3, #7
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	2b7f      	cmp	r3, #127	; 0x7f
 8003e34:	d8f0      	bhi.n	8003e18 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e44:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff fa2a 	bl	80032a8 <_EncodeStr>
 8003e54:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003e56:	2209      	movs	r2, #9
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	6938      	ldr	r0, [r7, #16]
 8003e5c:	f7ff fb4a 	bl	80034f4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b40      	ldr	r3, [pc, #256]	; (8003f70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	633b      	str	r3, [r7, #48]	; 0x30
 8003e76:	e00b      	b.n	8003e90 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	1c59      	adds	r1, r3, #1
 8003e80:	6379      	str	r1, [r7, #52]	; 0x34
 8003e82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	09db      	lsrs	r3, r3, #7
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	2b7f      	cmp	r3, #127	; 0x7f
 8003e94:	d8f0      	bhi.n	8003e78 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	637a      	str	r2, [r7, #52]	; 0x34
 8003e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb0:	e00b      	b.n	8003eca <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	1c59      	adds	r1, r3, #1
 8003eba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003ebc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	09db      	lsrs	r3, r3, #7
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8003ece:	d8f0      	bhi.n	8003eb2 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	e00b      	b.n	8003f04 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	1c59      	adds	r1, r3, #1
 8003ef4:	6279      	str	r1, [r7, #36]	; 0x24
 8003ef6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	09db      	lsrs	r3, r3, #7
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	2b7f      	cmp	r3, #127	; 0x7f
 8003f08:	d8f0      	bhi.n	8003eec <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	627a      	str	r2, [r7, #36]	; 0x24
 8003f10:	6a3a      	ldr	r2, [r7, #32]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	e00b      	b.n	8003f3c <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	1c59      	adds	r1, r3, #1
 8003f2c:	61f9      	str	r1, [r7, #28]
 8003f2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	09db      	lsrs	r3, r3, #7
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f40:	d8f0      	bhi.n	8003f24 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	61fa      	str	r2, [r7, #28]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003f52:	2215      	movs	r2, #21
 8003f54:	68f9      	ldr	r1, [r7, #12]
 8003f56:	6938      	ldr	r0, [r7, #16]
 8003f58:	f7ff facc 	bl	80034f4 <_SendPacket>
  RECORD_END();
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f383 8811 	msr	BASEPRI, r3
}
 8003f62:	bf00      	nop
 8003f64:	3748      	adds	r7, #72	; 0x48
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	200152c4 	.word	0x200152c4
 8003f70:	20015294 	.word	0x20015294

08003f74 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003f78:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003f8a:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4798      	blx	r3
  }
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20015294 	.word	0x20015294

08003f9c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8003fa8:	f04f 0120 	mov.w	r1, #32
 8003fac:	f381 8811 	msr	BASEPRI, r1
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	480b      	ldr	r0, [pc, #44]	; (8003fe0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003fb4:	f7ff f9c5 	bl	8003342 <_PreparePacket>
 8003fb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003fba:	2280      	movs	r2, #128	; 0x80
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	6938      	ldr	r0, [r7, #16]
 8003fc0:	f7ff f972 	bl	80032a8 <_EncodeStr>
 8003fc4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003fc6:	220e      	movs	r2, #14
 8003fc8:	68f9      	ldr	r1, [r7, #12]
 8003fca:	6938      	ldr	r0, [r7, #16]
 8003fcc:	f7ff fa92 	bl	80034f4 <_SendPacket>
  RECORD_END();
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f383 8811 	msr	BASEPRI, r3
}
 8003fd6:	bf00      	nop
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	200152c4 	.word	0x200152c4

08003fe4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003fea:	4b14      	ldr	r3, [pc, #80]	; (800403c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d019      	beq.n	8004026 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d014      	beq.n	8004026 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	; (800403c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4798      	blx	r3
 8004004:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004008:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800400a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	f04f 0400 	mov.w	r4, #0
 8004016:	0013      	movs	r3, r2
 8004018:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800401a:	461a      	mov	r2, r3
 800401c:	4601      	mov	r1, r0
 800401e:	200d      	movs	r0, #13
 8004020:	f7ff fbe4 	bl	80037ec <SEGGER_SYSVIEW_RecordU32x2>
 8004024:	e005      	b.n	8004032 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4619      	mov	r1, r3
 800402c:	200c      	movs	r0, #12
 800402e:	f7ff fba1 	bl	8003774 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	bd90      	pop	{r4, r7, pc}
 800403a:	bf00      	nop
 800403c:	20015294 	.word	0x20015294
 8004040:	e0001004 	.word	0xe0001004

08004044 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800404a:	f3ef 8311 	mrs	r3, BASEPRI
 800404e:	f04f 0120 	mov.w	r1, #32
 8004052:	f381 8811 	msr	BASEPRI, r1
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	4819      	ldr	r0, [pc, #100]	; (80040c0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800405a:	f7ff f972 	bl	8003342 <_PreparePacket>
 800405e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004064:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	e00b      	b.n	8004090 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	b2da      	uxtb	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	1c59      	adds	r1, r3, #1
 8004080:	6179      	str	r1, [r7, #20]
 8004082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	09db      	lsrs	r3, r3, #7
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b7f      	cmp	r3, #127	; 0x7f
 8004094:	d8f0      	bhi.n	8004078 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	617a      	str	r2, [r7, #20]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80040a6:	2202      	movs	r2, #2
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	68b8      	ldr	r0, [r7, #8]
 80040ac:	f7ff fa22 	bl	80034f4 <_SendPacket>
  RECORD_END();
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f383 8811 	msr	BASEPRI, r3
}
 80040b6:	bf00      	nop
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200152c4 	.word	0x200152c4
 80040c4:	e000ed04 	.word	0xe000ed04

080040c8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040ce:	f3ef 8311 	mrs	r3, BASEPRI
 80040d2:	f04f 0120 	mov.w	r1, #32
 80040d6:	f381 8811 	msr	BASEPRI, r1
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	4807      	ldr	r0, [pc, #28]	; (80040fc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80040de:	f7ff f930 	bl	8003342 <_PreparePacket>
 80040e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80040e4:	2203      	movs	r2, #3
 80040e6:	6839      	ldr	r1, [r7, #0]
 80040e8:	6838      	ldr	r0, [r7, #0]
 80040ea:	f7ff fa03 	bl	80034f4 <_SendPacket>
  RECORD_END();
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f383 8811 	msr	BASEPRI, r3
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	200152c4 	.word	0x200152c4

08004100 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004106:	f3ef 8311 	mrs	r3, BASEPRI
 800410a:	f04f 0120 	mov.w	r1, #32
 800410e:	f381 8811 	msr	BASEPRI, r1
 8004112:	607b      	str	r3, [r7, #4]
 8004114:	4807      	ldr	r0, [pc, #28]	; (8004134 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004116:	f7ff f914 	bl	8003342 <_PreparePacket>
 800411a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800411c:	2212      	movs	r2, #18
 800411e:	6839      	ldr	r1, [r7, #0]
 8004120:	6838      	ldr	r0, [r7, #0]
 8004122:	f7ff f9e7 	bl	80034f4 <_SendPacket>
  RECORD_END();
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f383 8811 	msr	BASEPRI, r3
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	200152c4 	.word	0x200152c4

08004138 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800413e:	f3ef 8311 	mrs	r3, BASEPRI
 8004142:	f04f 0120 	mov.w	r1, #32
 8004146:	f381 8811 	msr	BASEPRI, r1
 800414a:	607b      	str	r3, [r7, #4]
 800414c:	4807      	ldr	r0, [pc, #28]	; (800416c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800414e:	f7ff f8f8 	bl	8003342 <_PreparePacket>
 8004152:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004154:	2211      	movs	r2, #17
 8004156:	6839      	ldr	r1, [r7, #0]
 8004158:	6838      	ldr	r0, [r7, #0]
 800415a:	f7ff f9cb 	bl	80034f4 <_SendPacket>
  RECORD_END();
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f383 8811 	msr	BASEPRI, r3
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	200152c4 	.word	0x200152c4

08004170 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004178:	f3ef 8311 	mrs	r3, BASEPRI
 800417c:	f04f 0120 	mov.w	r1, #32
 8004180:	f381 8811 	msr	BASEPRI, r1
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	481a      	ldr	r0, [pc, #104]	; (80041f0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004188:	f7ff f8db 	bl	8003342 <_PreparePacket>
 800418c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004192:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	089b      	lsrs	r3, r3, #2
 800419c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	e00b      	b.n	80041c0 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	1c59      	adds	r1, r3, #1
 80041b0:	61f9      	str	r1, [r7, #28]
 80041b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	09db      	lsrs	r3, r3, #7
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b7f      	cmp	r3, #127	; 0x7f
 80041c4:	d8f0      	bhi.n	80041a8 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	61fa      	str	r2, [r7, #28]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80041d6:	2208      	movs	r2, #8
 80041d8:	68f9      	ldr	r1, [r7, #12]
 80041da:	6938      	ldr	r0, [r7, #16]
 80041dc:	f7ff f98a 	bl	80034f4 <_SendPacket>
  RECORD_END();
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f383 8811 	msr	BASEPRI, r3
}
 80041e6:	bf00      	nop
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200152c4 	.word	0x200152c4
 80041f4:	20015294 	.word	0x20015294

080041f8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004200:	f3ef 8311 	mrs	r3, BASEPRI
 8004204:	f04f 0120 	mov.w	r1, #32
 8004208:	f381 8811 	msr	BASEPRI, r1
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	481a      	ldr	r0, [pc, #104]	; (8004278 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004210:	f7ff f897 	bl	8003342 <_PreparePacket>
 8004214:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800421a:	4b18      	ldr	r3, [pc, #96]	; (800427c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	e00b      	b.n	8004248 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	1c59      	adds	r1, r3, #1
 8004238:	61f9      	str	r1, [r7, #28]
 800423a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	09db      	lsrs	r3, r3, #7
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b7f      	cmp	r3, #127	; 0x7f
 800424c:	d8f0      	bhi.n	8004230 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	61fa      	str	r2, [r7, #28]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800425e:	2204      	movs	r2, #4
 8004260:	68f9      	ldr	r1, [r7, #12]
 8004262:	6938      	ldr	r0, [r7, #16]
 8004264:	f7ff f946 	bl	80034f4 <_SendPacket>
  RECORD_END();
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f383 8811 	msr	BASEPRI, r3
}
 800426e:	bf00      	nop
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200152c4 	.word	0x200152c4
 800427c:	20015294 	.word	0x20015294

08004280 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004288:	f3ef 8311 	mrs	r3, BASEPRI
 800428c:	f04f 0120 	mov.w	r1, #32
 8004290:	f381 8811 	msr	BASEPRI, r1
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	481a      	ldr	r0, [pc, #104]	; (8004300 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004298:	f7ff f853 	bl	8003342 <_PreparePacket>
 800429c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80042a2:	4b18      	ldr	r3, [pc, #96]	; (8004304 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	e00b      	b.n	80042d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	1c59      	adds	r1, r3, #1
 80042c0:	61f9      	str	r1, [r7, #28]
 80042c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	09db      	lsrs	r3, r3, #7
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b7f      	cmp	r3, #127	; 0x7f
 80042d4:	d8f0      	bhi.n	80042b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	61fa      	str	r2, [r7, #28]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80042e6:	2206      	movs	r2, #6
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	6938      	ldr	r0, [r7, #16]
 80042ec:	f7ff f902 	bl	80034f4 <_SendPacket>
  RECORD_END();
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f383 8811 	msr	BASEPRI, r3
}
 80042f6:	bf00      	nop
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	200152c4 	.word	0x200152c4
 8004304:	20015294 	.word	0x20015294

08004308 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	; 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004312:	f3ef 8311 	mrs	r3, BASEPRI
 8004316:	f04f 0120 	mov.w	r1, #32
 800431a:	f381 8811 	msr	BASEPRI, r1
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	4827      	ldr	r0, [pc, #156]	; (80043c0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004322:	f7ff f80e 	bl	8003342 <_PreparePacket>
 8004326:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	623b      	str	r3, [r7, #32]
 8004340:	e00b      	b.n	800435a <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	1c59      	adds	r1, r3, #1
 800434a:	6279      	str	r1, [r7, #36]	; 0x24
 800434c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	09db      	lsrs	r3, r3, #7
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	2b7f      	cmp	r3, #127	; 0x7f
 800435e:	d8f0      	bhi.n	8004342 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	627a      	str	r2, [r7, #36]	; 0x24
 8004366:	6a3a      	ldr	r2, [r7, #32]
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e00b      	b.n	8004392 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	1c59      	adds	r1, r3, #1
 8004382:	61f9      	str	r1, [r7, #28]
 8004384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	09db      	lsrs	r3, r3, #7
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b7f      	cmp	r3, #127	; 0x7f
 8004396:	d8f0      	bhi.n	800437a <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	61fa      	str	r2, [r7, #28]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80043a8:	2207      	movs	r2, #7
 80043aa:	68f9      	ldr	r1, [r7, #12]
 80043ac:	6938      	ldr	r0, [r7, #16]
 80043ae:	f7ff f8a1 	bl	80034f4 <_SendPacket>
  RECORD_END();
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f383 8811 	msr	BASEPRI, r3
}
 80043b8:	bf00      	nop
 80043ba:	3728      	adds	r7, #40	; 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	200152c4 	.word	0x200152c4
 80043c4:	20015294 	.word	0x20015294

080043c8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	089b      	lsrs	r3, r3, #2
}
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20015294 	.word	0x20015294

080043ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08c      	sub	sp, #48	; 0x30
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80043f6:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d06d      	beq.n	80044da <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80043fe:	4b39      	ldr	r3, [pc, #228]	; (80044e4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004404:	2300      	movs	r3, #0
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
 8004408:	e008      	b.n	800441c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	3301      	adds	r3, #1
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004420:	429a      	cmp	r2, r3
 8004422:	d3f2      	bcc.n	800440a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004424:	e000      	b.n	8004428 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004426:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d055      	beq.n	80044da <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800442e:	f3ef 8311 	mrs	r3, BASEPRI
 8004432:	f04f 0120 	mov.w	r1, #32
 8004436:	f381 8811 	msr	BASEPRI, r1
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	482a      	ldr	r0, [pc, #168]	; (80044e8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800443e:	f7fe ff80 	bl	8003342 <_PreparePacket>
 8004442:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	623b      	str	r3, [r7, #32]
 8004450:	e00b      	b.n	800446a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	1c59      	adds	r1, r3, #1
 800445a:	6279      	str	r1, [r7, #36]	; 0x24
 800445c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	09db      	lsrs	r3, r3, #7
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	2b7f      	cmp	r3, #127	; 0x7f
 800446e:	d8f0      	bhi.n	8004452 <SEGGER_SYSVIEW_SendModule+0x66>
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	627a      	str	r2, [r7, #36]	; 0x24
 8004476:	6a3a      	ldr	r2, [r7, #32]
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	61fb      	str	r3, [r7, #28]
 8004484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	e00b      	b.n	80044a4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	1c59      	adds	r1, r3, #1
 8004494:	61f9      	str	r1, [r7, #28]
 8004496:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	09db      	lsrs	r3, r3, #7
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b7f      	cmp	r3, #127	; 0x7f
 80044a8:	d8f0      	bhi.n	800448c <SEGGER_SYSVIEW_SendModule+0xa0>
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	61fa      	str	r2, [r7, #28]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2280      	movs	r2, #128	; 0x80
 80044c0:	4619      	mov	r1, r3
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7fe fef0 	bl	80032a8 <_EncodeStr>
 80044c8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80044ca:	2216      	movs	r2, #22
 80044cc:	68f9      	ldr	r1, [r7, #12]
 80044ce:	6938      	ldr	r0, [r7, #16]
 80044d0:	f7ff f810 	bl	80034f4 <_SendPacket>
      RECORD_END();
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80044da:	bf00      	nop
 80044dc:	3730      	adds	r7, #48	; 0x30
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200152bc 	.word	0x200152bc
 80044e8:	200152c4 	.word	0x200152c4

080044ec <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80044f2:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00f      	beq.n	800451a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f2      	bne.n	8004500 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	200152bc 	.word	0x200152bc

08004528 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800452e:	f3ef 8311 	mrs	r3, BASEPRI
 8004532:	f04f 0120 	mov.w	r1, #32
 8004536:	f381 8811 	msr	BASEPRI, r1
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	4817      	ldr	r0, [pc, #92]	; (800459c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800453e:	f7fe ff00 	bl	8003342 <_PreparePacket>
 8004542:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e00b      	b.n	800456c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	1c59      	adds	r1, r3, #1
 800455c:	6179      	str	r1, [r7, #20]
 800455e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	09db      	lsrs	r3, r3, #7
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2b7f      	cmp	r3, #127	; 0x7f
 8004570:	d8f0      	bhi.n	8004554 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	617a      	str	r2, [r7, #20]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004582:	221b      	movs	r2, #27
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	68b8      	ldr	r0, [r7, #8]
 8004588:	f7fe ffb4 	bl	80034f4 <_SendPacket>
  RECORD_END();
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f383 8811 	msr	BASEPRI, r3
}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200152c4 	.word	0x200152c4
 80045a0:	200152c0 	.word	0x200152c0

080045a4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80045ac:	f3ef 8311 	mrs	r3, BASEPRI
 80045b0:	f04f 0120 	mov.w	r1, #32
 80045b4:	f381 8811 	msr	BASEPRI, r1
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	4827      	ldr	r0, [pc, #156]	; (8004658 <SEGGER_SYSVIEW_Warn+0xb4>)
 80045bc:	f7fe fec1 	bl	8003342 <_PreparePacket>
 80045c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80045c2:	2280      	movs	r2, #128	; 0x80
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	6938      	ldr	r0, [r7, #16]
 80045c8:	f7fe fe6e 	bl	80032a8 <_EncodeStr>
 80045cc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
 80045d2:	2301      	movs	r3, #1
 80045d4:	623b      	str	r3, [r7, #32]
 80045d6:	e00b      	b.n	80045f0 <SEGGER_SYSVIEW_Warn+0x4c>
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	1c59      	adds	r1, r3, #1
 80045e0:	6279      	str	r1, [r7, #36]	; 0x24
 80045e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	09db      	lsrs	r3, r3, #7
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	2b7f      	cmp	r3, #127	; 0x7f
 80045f4:	d8f0      	bhi.n	80045d8 <SEGGER_SYSVIEW_Warn+0x34>
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	627a      	str	r2, [r7, #36]	; 0x24
 80045fc:	6a3a      	ldr	r2, [r7, #32]
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	2300      	movs	r3, #0
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	e00b      	b.n	8004628 <SEGGER_SYSVIEW_Warn+0x84>
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	1c59      	adds	r1, r3, #1
 8004618:	61f9      	str	r1, [r7, #28]
 800461a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	09db      	lsrs	r3, r3, #7
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b7f      	cmp	r3, #127	; 0x7f
 800462c:	d8f0      	bhi.n	8004610 <SEGGER_SYSVIEW_Warn+0x6c>
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	61fa      	str	r2, [r7, #28]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800463e:	221a      	movs	r2, #26
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	6938      	ldr	r0, [r7, #16]
 8004644:	f7fe ff56 	bl	80034f4 <_SendPacket>
  RECORD_END();
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f383 8811 	msr	BASEPRI, r3
}
 800464e:	bf00      	nop
 8004650:	3728      	adds	r7, #40	; 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200152c4 	.word	0x200152c4

0800465c <main>:
#ifdef USE_SEMIHOSTING
extern void initialise_monitor_handles();
#endif

int main(void)
{
 800465c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800465e:	b083      	sub	sp, #12
 8004660:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
    printf("Its a hello world application\r\n");
#endif

    DWT->CTRL |= (1<<0);//Data watch point trace->cyccnt(cycle count) in arm technical rm,it keeps time stamp
 8004662:	4b3d      	ldr	r3, [pc, #244]	; (8004758 <main+0xfc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a3c      	ldr	r2, [pc, #240]	; (8004758 <main+0xfc>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	6013      	str	r3, [r2, #0]

    //reset the RCC clock cconfiguration to default reset state
	//reset state is hsi=on,pll=off,hse=off, sysclk=16MHz

    RCC_DeInit();
 800466e:	f7fb feff 	bl	8000470 <RCC_DeInit>

    //update the system core clock variable
    SystemCoreClockUpdate();
 8004672:	f000 f9db 	bl	8004a2c <SystemCoreClockUpdate>

    pvtHardwareSetup();
 8004676:	f000 f975 	bl	8004964 <pvtHardwareSetup>

    sprintf(user_msg,"\rDemo of binary semaphore for sync between two tasks\r\n");
 800467a:	4b38      	ldr	r3, [pc, #224]	; (800475c <main+0x100>)
 800467c:	4a38      	ldr	r2, [pc, #224]	; (8004760 <main+0x104>)
 800467e:	4614      	mov	r4, r2
 8004680:	469c      	mov	ip, r3
 8004682:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8004686:	4665      	mov	r5, ip
 8004688:	4626      	mov	r6, r4
 800468a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800468c:	6028      	str	r0, [r5, #0]
 800468e:	6069      	str	r1, [r5, #4]
 8004690:	60aa      	str	r2, [r5, #8]
 8004692:	60eb      	str	r3, [r5, #12]
 8004694:	3410      	adds	r4, #16
 8004696:	f10c 0c10 	add.w	ip, ip, #16
 800469a:	4574      	cmp	r4, lr
 800469c:	d1f3      	bne.n	8004686 <main+0x2a>
 800469e:	4663      	mov	r3, ip
 80046a0:	4622      	mov	r2, r4
 80046a2:	6810      	ldr	r0, [r2, #0]
 80046a4:	6018      	str	r0, [r3, #0]
 80046a6:	8891      	ldrh	r1, [r2, #4]
 80046a8:	7992      	ldrb	r2, [r2, #6]
 80046aa:	8099      	strh	r1, [r3, #4]
 80046ac:	719a      	strb	r2, [r3, #6]
    printmsg(user_msg);
 80046ae:	482b      	ldr	r0, [pc, #172]	; (800475c <main+0x100>)
 80046b0:	f000 f95e 	bl	8004970 <printmsg>

    //Start recording
    SEGGER_SYSVIEW_Conf();
 80046b4:	f7fe fa96 	bl	8002be4 <SEGGER_SYSVIEW_Conf>
    SEGGER_SYSVIEW_Start();
 80046b8:	f7ff f9fa 	bl	8003ab0 <SEGGER_SYSVIEW_Start>

    //before a semaphore is used it should be explicitly created-create binary semaphore

    vSemaphoreCreateBinary(xWork);
 80046bc:	2203      	movs	r2, #3
 80046be:	2100      	movs	r1, #0
 80046c0:	2001      	movs	r0, #1
 80046c2:	f7fc fa5d 	bl	8000b80 <xQueueGenericCreate>
 80046c6:	4602      	mov	r2, r0
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <main+0x108>)
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	4b25      	ldr	r3, [pc, #148]	; (8004764 <main+0x108>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d006      	beq.n	80046e2 <main+0x86>
 80046d4:	4b23      	ldr	r3, [pc, #140]	; (8004764 <main+0x108>)
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	2300      	movs	r3, #0
 80046da:	2200      	movs	r2, #0
 80046dc:	2100      	movs	r1, #0
 80046de:	f7fc faad 	bl	8000c3c <xQueueGenericSend>

    //a queue is created to hold a maximum of one item as it is a binary semaphore

    xWorkQueue=xQueueCreate(1,sizeof(unsigned int));
 80046e2:	2200      	movs	r2, #0
 80046e4:	2104      	movs	r1, #4
 80046e6:	2001      	movs	r0, #1
 80046e8:	f7fc fa4a 	bl	8000b80 <xQueueGenericCreate>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <main+0x10c>)
 80046f0:	601a      	str	r2, [r3, #0]

    //check if semaphore and queue are created successfully
    if((xWork !=NULL)&&(xWorkQueue !=NULL)){
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <main+0x108>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01b      	beq.n	8004732 <main+0xd6>
 80046fa:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <main+0x10c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d017      	beq.n	8004732 <main+0xd6>
    	//CREATE THE MANAGER AND EMPLOYEE TASK
        xTaskCreate(vManager_Task, "Manager", 500, NULL,3, &xTask1Handle);
 8004702:	4b1a      	ldr	r3, [pc, #104]	; (800476c <main+0x110>)
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	2303      	movs	r3, #3
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2300      	movs	r3, #0
 800470c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004710:	4917      	ldr	r1, [pc, #92]	; (8004770 <main+0x114>)
 8004712:	4818      	ldr	r0, [pc, #96]	; (8004774 <main+0x118>)
 8004714:	f7fc febc 	bl	8001490 <xTaskCreate>
        xTaskCreate(vEmployee_Task, "Employee", 500, NULL, 1, &xTask2Handle);
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <main+0x11c>)
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	2301      	movs	r3, #1
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	2300      	movs	r3, #0
 8004722:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004726:	4915      	ldr	r1, [pc, #84]	; (800477c <main+0x120>)
 8004728:	4815      	ldr	r0, [pc, #84]	; (8004780 <main+0x124>)
 800472a:	f7fc feb1 	bl	8001490 <xTaskCreate>
        //start the scheduler
		vTaskStartScheduler();
 800472e:	f7fd f835 	bl	800179c <vTaskStartScheduler>


    }

    sprintf(user_msg,"\rqueue/sema creation failed\r\n");
 8004732:	4a0a      	ldr	r2, [pc, #40]	; (800475c <main+0x100>)
 8004734:	4b13      	ldr	r3, [pc, #76]	; (8004784 <main+0x128>)
 8004736:	4615      	mov	r5, r2
 8004738:	461c      	mov	r4, r3
 800473a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800473c:	6028      	str	r0, [r5, #0]
 800473e:	6069      	str	r1, [r5, #4]
 8004740:	60aa      	str	r2, [r5, #8]
 8004742:	60eb      	str	r3, [r5, #12]
 8004744:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004746:	6128      	str	r0, [r5, #16]
 8004748:	6169      	str	r1, [r5, #20]
 800474a:	61aa      	str	r2, [r5, #24]
 800474c:	8823      	ldrh	r3, [r4, #0]
 800474e:	83ab      	strh	r3, [r5, #28]
	printmsg(user_msg);
 8004750:	4802      	ldr	r0, [pc, #8]	; (800475c <main+0x100>)
 8004752:	f000 f90d 	bl	8004970 <printmsg>



    for(;;);
 8004756:	e7fe      	b.n	8004756 <main+0xfa>
 8004758:	e0001000 	.word	0xe0001000
 800475c:	2001546c 	.word	0x2001546c
 8004760:	0800577c 	.word	0x0800577c
 8004764:	20015468 	.word	0x20015468
 8004768:	20015464 	.word	0x20015464
 800476c:	200153a8 	.word	0x200153a8
 8004770:	080057b4 	.word	0x080057b4
 8004774:	08004789 	.word	0x08004789
 8004778:	200153ac 	.word	0x200153ac
 800477c:	080057bc 	.word	0x080057bc
 8004780:	08004819 	.word	0x08004819
 8004784:	080057c8 	.word	0x080057c8

08004788 <vManager_Task>:
}

void vManager_Task(void* params){
 8004788:	b5b0      	push	{r4, r5, r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	//xSemaphoreGive(xWork);


	for(;;){

		xWorkTicketID=(rand() & (0x1FF));
 8004790:	f000 fb20 	bl	8004dd4 <rand>
 8004794:	4603      	mov	r3, r0
 8004796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479a:	60bb      	str	r3, [r7, #8]

		xStatus=xQueueSend(xWorkQueue,&xWorkTicketID,portMAX_DELAY);
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <vManager_Task+0x7c>)
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	f107 0108 	add.w	r1, r7, #8
 80047a4:	2300      	movs	r3, #0
 80047a6:	f04f 32ff 	mov.w	r2, #4294967295
 80047aa:	f7fc fa47 	bl	8000c3c <xQueueGenericSend>
 80047ae:	60f8      	str	r0, [r7, #12]
		if(xStatus != pdTRUE){
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d015      	beq.n	80047e2 <vManager_Task+0x5a>
			//sending to queue has failed
			sprintf(user_msg,"\rsending to queue has failed\r\n");
 80047b6:	4a14      	ldr	r2, [pc, #80]	; (8004808 <vManager_Task+0x80>)
 80047b8:	4b14      	ldr	r3, [pc, #80]	; (800480c <vManager_Task+0x84>)
 80047ba:	4615      	mov	r5, r2
 80047bc:	461c      	mov	r4, r3
 80047be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047c0:	6028      	str	r0, [r5, #0]
 80047c2:	6069      	str	r1, [r5, #4]
 80047c4:	60aa      	str	r2, [r5, #8]
 80047c6:	60eb      	str	r3, [r5, #12]
 80047c8:	cc07      	ldmia	r4!, {r0, r1, r2}
 80047ca:	6128      	str	r0, [r5, #16]
 80047cc:	6169      	str	r1, [r5, #20]
 80047ce:	61aa      	str	r2, [r5, #24]
 80047d0:	8823      	ldrh	r3, [r4, #0]
 80047d2:	78a2      	ldrb	r2, [r4, #2]
 80047d4:	83ab      	strh	r3, [r5, #28]
 80047d6:	4613      	mov	r3, r2
 80047d8:	77ab      	strb	r3, [r5, #30]
			printmsg(user_msg);
 80047da:	480b      	ldr	r0, [pc, #44]	; (8004808 <vManager_Task+0x80>)
 80047dc:	f000 f8c8 	bl	8004970 <printmsg>
 80047e0:	e7d6      	b.n	8004790 <vManager_Task+0x8>

		}else{
			xSemaphoreGive(xWork);
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <vManager_Task+0x88>)
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	2300      	movs	r3, #0
 80047e8:	2200      	movs	r2, #0
 80047ea:	2100      	movs	r1, #0
 80047ec:	f7fc fa26 	bl	8000c3c <xQueueGenericSend>
			taskYIELD();
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <vManager_Task+0x8c>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
		xWorkTicketID=(rand() & (0x1FF));
 8004800:	e7c6      	b.n	8004790 <vManager_Task+0x8>
 8004802:	bf00      	nop
 8004804:	20015464 	.word	0x20015464
 8004808:	2001546c 	.word	0x2001546c
 800480c:	080057e8 	.word	0x080057e8
 8004810:	20015468 	.word	0x20015468
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <vEmployee_Task>:


	}

}
void vEmployee_Task(void* params){
 8004818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]




	for(;;){
		xSemaphoreTake(xWork,0);
 8004820:	4b18      	ldr	r3, [pc, #96]	; (8004884 <vEmployee_Task+0x6c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f7fc fbee 	bl	8001008 <xQueueSemaphoreTake>
		xStatus=xQueueReceive(xWorkQueue, &xWorkTicketID, 0);
 800482c:	4b16      	ldr	r3, [pc, #88]	; (8004888 <vEmployee_Task+0x70>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f107 010b 	add.w	r1, r7, #11
 8004834:	2200      	movs	r2, #0
 8004836:	4618      	mov	r0, r3
 8004838:	f7fc faf4 	bl	8000e24 <xQueueReceive>
 800483c:	60f8      	str	r0, [r7, #12]
		if(xStatus==pdTRUE){
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d104      	bne.n	800484e <vEmployee_Task+0x36>
			//queue has received the ticket id
			EmployeeDoWork(xWorkTicketID);
 8004844:	7afb      	ldrb	r3, [r7, #11]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f824 	bl	8004894 <EmployeeDoWork>
 800484c:	e7e8      	b.n	8004820 <vEmployee_Task+0x8>

		}else{
			//nothing is received
			sprintf(user_msg,"\r receiving in queue has failed\r\n");
 800484e:	4b0f      	ldr	r3, [pc, #60]	; (800488c <vEmployee_Task+0x74>)
 8004850:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <vEmployee_Task+0x78>)
 8004852:	4614      	mov	r4, r2
 8004854:	469c      	mov	ip, r3
 8004856:	f104 0e20 	add.w	lr, r4, #32
 800485a:	4665      	mov	r5, ip
 800485c:	4626      	mov	r6, r4
 800485e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004860:	6028      	str	r0, [r5, #0]
 8004862:	6069      	str	r1, [r5, #4]
 8004864:	60aa      	str	r2, [r5, #8]
 8004866:	60eb      	str	r3, [r5, #12]
 8004868:	3410      	adds	r4, #16
 800486a:	f10c 0c10 	add.w	ip, ip, #16
 800486e:	4574      	cmp	r4, lr
 8004870:	d1f3      	bne.n	800485a <vEmployee_Task+0x42>
 8004872:	4662      	mov	r2, ip
 8004874:	4623      	mov	r3, r4
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	8013      	strh	r3, [r2, #0]
			printmsg(user_msg);
 800487a:	4804      	ldr	r0, [pc, #16]	; (800488c <vEmployee_Task+0x74>)
 800487c:	f000 f878 	bl	8004970 <printmsg>
		xSemaphoreTake(xWork,0);
 8004880:	e7ce      	b.n	8004820 <vEmployee_Task+0x8>
 8004882:	bf00      	nop
 8004884:	20015468 	.word	0x20015468
 8004888:	20015464 	.word	0x20015464
 800488c:	2001546c 	.word	0x2001546c
 8004890:	08005808 	.word	0x08005808

08004894 <EmployeeDoWork>:


	}
}

void EmployeeDoWork(unsigned char TicketId){
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	71fb      	strb	r3, [r7, #7]

	sprintf(user_msg,"\rEmployee task : Working on Ticked id : %u \r\n",TicketId);
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	461a      	mov	r2, r3
 80048a2:	4907      	ldr	r1, [pc, #28]	; (80048c0 <EmployeeDoWork+0x2c>)
 80048a4:	4807      	ldr	r0, [pc, #28]	; (80048c4 <EmployeeDoWork+0x30>)
 80048a6:	f000 fac9 	bl	8004e3c <siprintf>
	printmsg(user_msg);
 80048aa:	4806      	ldr	r0, [pc, #24]	; (80048c4 <EmployeeDoWork+0x30>)
 80048ac:	f000 f860 	bl	8004970 <printmsg>
	vTaskDelay(TicketId);
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc ff3a 	bl	800172c <vTaskDelay>



}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	0800582c 	.word	0x0800582c
 80048c4:	2001546c 	.word	0x2001546c

080048c8 <UART_Setup>:

static void UART_Setup(void){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef UART_Gpio;
		memset(&UART_Gpio,0,sizeof(UART_Gpio));
 80048ce:	f107 0310 	add.w	r3, r7, #16
 80048d2:	2208      	movs	r2, #8
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fa74 	bl	8004dc4 <memset>
		USART_InitTypeDef UART_Handle;
		memset(&UART_Handle,0,sizeof(UART_Handle));
 80048dc:	463b      	mov	r3, r7
 80048de:	2210      	movs	r2, #16
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fa6e 	bl	8004dc4 <memset>

	//enable clock for uart peripheral and gpioa peripheral
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 80048e8:	2101      	movs	r1, #1
 80048ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80048ee:	f7fb ff11 	bl	8000714 <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80048f2:	2101      	movs	r1, #1
 80048f4:	2001      	movs	r0, #1
 80048f6:	f7fb feed 	bl	80006d4 <RCC_AHB1PeriphClockCmd>

		//configure pa2 as uart_tx and pa3 as uart_rx

		UART_Gpio.GPIO_Pin=GPIO_Pin_2 | GPIO_Pin_3;
 80048fa:	230c      	movs	r3, #12
 80048fc:	613b      	str	r3, [r7, #16]
		UART_Gpio.GPIO_Mode=GPIO_Mode_AF;
 80048fe:	2302      	movs	r3, #2
 8004900:	753b      	strb	r3, [r7, #20]
		UART_Gpio.GPIO_PuPd=GPIO_PuPd_UP;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
		GPIO_Init(GPIOA, &UART_Gpio);
 8004906:	f107 0310 	add.w	r3, r7, #16
 800490a:	4619      	mov	r1, r3
 800490c:	4813      	ldr	r0, [pc, #76]	; (800495c <UART_Setup+0x94>)
 800490e:	f7fb fcd7 	bl	80002c0 <GPIO_Init>

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);//PA2 CONFIG AF7
 8004912:	2207      	movs	r2, #7
 8004914:	2102      	movs	r1, #2
 8004916:	4811      	ldr	r0, [pc, #68]	; (800495c <UART_Setup+0x94>)
 8004918:	f7fb fd60 	bl	80003dc <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);//PA3 CONFIG AF7
 800491c:	2207      	movs	r2, #7
 800491e:	2103      	movs	r1, #3
 8004920:	480e      	ldr	r0, [pc, #56]	; (800495c <UART_Setup+0x94>)
 8004922:	f7fb fd5b 	bl	80003dc <GPIO_PinAFConfig>

		//UART PERIPHERAL CONFIGURATION
		UART_Handle.USART_BaudRate=115200;
 8004926:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800492a:	603b      	str	r3, [r7, #0]
		UART_Handle.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 800492c:	2300      	movs	r3, #0
 800492e:	81bb      	strh	r3, [r7, #12]
		UART_Handle.USART_Mode=USART_Mode_Tx | USART_Mode_Rx;
 8004930:	230c      	movs	r3, #12
 8004932:	817b      	strh	r3, [r7, #10]
		UART_Handle.USART_Parity=USART_Parity_No;
 8004934:	2300      	movs	r3, #0
 8004936:	813b      	strh	r3, [r7, #8]
		UART_Handle.USART_StopBits=USART_StopBits_1;
 8004938:	2300      	movs	r3, #0
 800493a:	80fb      	strh	r3, [r7, #6]
		UART_Handle.USART_WordLength=USART_WordLength_8b;
 800493c:	2300      	movs	r3, #0
 800493e:	80bb      	strh	r3, [r7, #4]

		USART_Init(USART2, &UART_Handle);
 8004940:	463b      	mov	r3, r7
 8004942:	4619      	mov	r1, r3
 8004944:	4806      	ldr	r0, [pc, #24]	; (8004960 <UART_Setup+0x98>)
 8004946:	f7fb ff05 	bl	8000754 <USART_Init>
		USART_Cmd(USART2, ENABLE);
 800494a:	2101      	movs	r1, #1
 800494c:	4804      	ldr	r0, [pc, #16]	; (8004960 <UART_Setup+0x98>)
 800494e:	f7fb ffbb 	bl	80008c8 <USART_Cmd>

}
 8004952:	bf00      	nop
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40020000 	.word	0x40020000
 8004960:	40004400 	.word	0x40004400

08004964 <pvtHardwareSetup>:

static void pvtHardwareSetup(void){
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
	UART_Setup();
 8004968:	f7ff ffae 	bl	80048c8 <UART_Setup>


}
 800496c:	bf00      	nop
 800496e:	bd80      	pop	{r7, pc}

08004970 <printmsg>:

void printmsg(char* msg){
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

	for(uint32_t i=0;i<strlen(msg);i++){
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e013      	b.n	80049a6 <printmsg+0x36>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)==RESET);
 800497e:	bf00      	nop
 8004980:	2180      	movs	r1, #128	; 0x80
 8004982:	480e      	ldr	r0, [pc, #56]	; (80049bc <printmsg+0x4c>)
 8004984:	f7fb ffd2 	bl	800092c <USART_GetFlagStatus>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f8      	beq.n	8004980 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	4619      	mov	r1, r3
 800499a:	4808      	ldr	r0, [pc, #32]	; (80049bc <printmsg+0x4c>)
 800499c:	f7fb ffb4 	bl	8000908 <USART_SendData>
	for(uint32_t i=0;i<strlen(msg);i++){
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3301      	adds	r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fb fc32 	bl	8000210 <strlen>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d3e4      	bcc.n	800497e <printmsg+0xe>
	}

}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40004400 	.word	0x40004400

080049c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049c4:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <SystemInit+0x60>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ca:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <SystemInit+0x60>)
 80049cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80049d4:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <SystemInit+0x64>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <SystemInit+0x64>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80049e0:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <SystemInit+0x64>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80049e6:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <SystemInit+0x64>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <SystemInit+0x64>)
 80049ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80049f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80049f6:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <SystemInit+0x64>)
 80049f8:	4a0b      	ldr	r2, [pc, #44]	; (8004a28 <SystemInit+0x68>)
 80049fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80049fc:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <SystemInit+0x64>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <SystemInit+0x64>)
 8004a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <SystemInit+0x64>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004a0e:	f000 f8db 	bl	8004bc8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a12:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <SystemInit+0x60>)
 8004a14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a18:	609a      	str	r2, [r3, #8]
#endif
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	e000ed00 	.word	0xe000ed00
 8004a24:	40023800 	.word	0x40023800
 8004a28:	24003010 	.word	0x24003010

08004a2c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	2302      	movs	r3, #2
 8004a44:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8004a46:	2302      	movs	r3, #2
 8004a48:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004a4a:	4b5a      	ldr	r3, [pc, #360]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	f200 8092 	bhi.w	8004b80 <SystemCoreClockUpdate+0x154>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <SystemCoreClockUpdate+0x38>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a99 	.word	0x08004a99
 8004a68:	08004b81 	.word	0x08004b81
 8004a6c:	08004b81 	.word	0x08004b81
 8004a70:	08004b81 	.word	0x08004b81
 8004a74:	08004aa1 	.word	0x08004aa1
 8004a78:	08004b81 	.word	0x08004b81
 8004a7c:	08004b81 	.word	0x08004b81
 8004a80:	08004b81 	.word	0x08004b81
 8004a84:	08004aa9 	.word	0x08004aa9
 8004a88:	08004b81 	.word	0x08004b81
 8004a8c:	08004b81 	.word	0x08004b81
 8004a90:	08004b81 	.word	0x08004b81
 8004a94:	08004b15 	.word	0x08004b15
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004a98:	4b47      	ldr	r3, [pc, #284]	; (8004bb8 <SystemCoreClockUpdate+0x18c>)
 8004a9a:	4a48      	ldr	r2, [pc, #288]	; (8004bbc <SystemCoreClockUpdate+0x190>)
 8004a9c:	601a      	str	r2, [r3, #0]
      break;
 8004a9e:	e073      	b.n	8004b88 <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004aa0:	4b45      	ldr	r3, [pc, #276]	; (8004bb8 <SystemCoreClockUpdate+0x18c>)
 8004aa2:	4a47      	ldr	r2, [pc, #284]	; (8004bc0 <SystemCoreClockUpdate+0x194>)
 8004aa4:	601a      	str	r2, [r3, #0]
      break;
 8004aa6:	e06f      	b.n	8004b88 <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004aa8:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	0d9b      	lsrs	r3, r3, #22
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ab4:	4b3f      	ldr	r3, [pc, #252]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004abc:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00c      	beq.n	8004ade <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004ac4:	4a3e      	ldr	r2, [pc, #248]	; (8004bc0 <SystemCoreClockUpdate+0x194>)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	4a39      	ldr	r2, [pc, #228]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004ace:	6852      	ldr	r2, [r2, #4]
 8004ad0:	0992      	lsrs	r2, r2, #6
 8004ad2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e00b      	b.n	8004af6 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004ade:	4a37      	ldr	r2, [pc, #220]	; (8004bbc <SystemCoreClockUpdate+0x190>)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	4a33      	ldr	r2, [pc, #204]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004ae8:	6852      	ldr	r2, [r2, #4]
 8004aea:	0992      	lsrs	r2, r2, #6
 8004aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004af0:	fb02 f303 	mul.w	r3, r2, r3
 8004af4:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004af6:	4b2f      	ldr	r3, [pc, #188]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	0c1b      	lsrs	r3, r3, #16
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	3301      	adds	r3, #1
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <SystemCoreClockUpdate+0x18c>)
 8004b10:	6013      	str	r3, [r2, #0]
      break;
 8004b12:	e039      	b.n	8004b88 <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004b14:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	0d9b      	lsrs	r3, r3, #22
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b20:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b28:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00c      	beq.n	8004b4a <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004b30:	4a23      	ldr	r2, [pc, #140]	; (8004bc0 <SystemCoreClockUpdate+0x194>)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004b3a:	6852      	ldr	r2, [r2, #4]
 8004b3c:	0992      	lsrs	r2, r2, #6
 8004b3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e00b      	b.n	8004b62 <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004b4a:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <SystemCoreClockUpdate+0x190>)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	4a18      	ldr	r2, [pc, #96]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004b54:	6852      	ldr	r2, [r2, #4]
 8004b56:	0992      	lsrs	r2, r2, #6
 8004b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b5c:	fb02 f303 	mul.w	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	0f1b      	lsrs	r3, r3, #28
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	4a0f      	ldr	r2, [pc, #60]	; (8004bb8 <SystemCoreClockUpdate+0x18c>)
 8004b7c:	6013      	str	r3, [r2, #0]
      break;
 8004b7e:	e003      	b.n	8004b88 <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <SystemCoreClockUpdate+0x18c>)
 8004b82:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <SystemCoreClockUpdate+0x190>)
 8004b84:	601a      	str	r2, [r3, #0]
      break;
 8004b86:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <SystemCoreClockUpdate+0x188>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	4a0c      	ldr	r2, [pc, #48]	; (8004bc4 <SystemCoreClockUpdate+0x198>)
 8004b94:	5cd3      	ldrb	r3, [r2, r3]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <SystemCoreClockUpdate+0x18c>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba4:	4a04      	ldr	r2, [pc, #16]	; (8004bb8 <SystemCoreClockUpdate+0x18c>)
 8004ba6:	6013      	str	r3, [r2, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	20000014 	.word	0x20000014
 8004bbc:	00f42400 	.word	0x00f42400
 8004bc0:	007a1200 	.word	0x007a1200
 8004bc4:	20000018 	.word	0x20000018

08004bc8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004bd6:	4b43      	ldr	r3, [pc, #268]	; (8004ce4 <SetSysClock+0x11c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a42      	ldr	r2, [pc, #264]	; (8004ce4 <SetSysClock+0x11c>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004be2:	4b40      	ldr	r3, [pc, #256]	; (8004ce4 <SetSysClock+0x11c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <SetSysClock+0x38>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004bfe:	d1f0      	bne.n	8004be2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004c00:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <SetSysClock+0x11c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	e001      	b.n	8004c16 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004c12:	2300      	movs	r3, #0
 8004c14:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d15c      	bne.n	8004cd6 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004c1c:	4b31      	ldr	r3, [pc, #196]	; (8004ce4 <SetSysClock+0x11c>)
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	4a30      	ldr	r2, [pc, #192]	; (8004ce4 <SetSysClock+0x11c>)
 8004c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c26:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8004c28:	4b2f      	ldr	r3, [pc, #188]	; (8004ce8 <SetSysClock+0x120>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a2e      	ldr	r2, [pc, #184]	; (8004ce8 <SetSysClock+0x120>)
 8004c2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c32:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004c34:	4b2b      	ldr	r3, [pc, #172]	; (8004ce4 <SetSysClock+0x11c>)
 8004c36:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <SetSysClock+0x11c>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004c3c:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <SetSysClock+0x11c>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4a28      	ldr	r2, [pc, #160]	; (8004ce4 <SetSysClock+0x11c>)
 8004c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c46:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004c48:	4b26      	ldr	r3, [pc, #152]	; (8004ce4 <SetSysClock+0x11c>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	4a25      	ldr	r2, [pc, #148]	; (8004ce4 <SetSysClock+0x11c>)
 8004c4e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004c52:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004c54:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <SetSysClock+0x11c>)
 8004c56:	4a25      	ldr	r2, [pc, #148]	; (8004cec <SetSysClock+0x124>)
 8004c58:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004c5a:	4b22      	ldr	r3, [pc, #136]	; (8004ce4 <SetSysClock+0x11c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <SetSysClock+0x11c>)
 8004c60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c64:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004c66:	bf00      	nop
 8004c68:	4b1e      	ldr	r3, [pc, #120]	; (8004ce4 <SetSysClock+0x11c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f9      	beq.n	8004c68 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8004c74:	4b1c      	ldr	r3, [pc, #112]	; (8004ce8 <SetSysClock+0x120>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <SetSysClock+0x120>)
 8004c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7e:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8004c80:	bf00      	nop
 8004c82:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <SetSysClock+0x120>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f9      	beq.n	8004c82 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <SetSysClock+0x120>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <SetSysClock+0x120>)
 8004c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c98:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8004c9a:	bf00      	nop
 8004c9c:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <SetSysClock+0x120>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f9      	beq.n	8004c9c <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004ca8:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <SetSysClock+0x128>)
 8004caa:	f240 7205 	movw	r2, #1797	; 0x705
 8004cae:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <SetSysClock+0x11c>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	4a0b      	ldr	r2, [pc, #44]	; (8004ce4 <SetSysClock+0x11c>)
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <SetSysClock+0x11c>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a08      	ldr	r2, [pc, #32]	; (8004ce4 <SetSysClock+0x11c>)
 8004cc2:	f043 0302 	orr.w	r3, r3, #2
 8004cc6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004cc8:	bf00      	nop
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <SetSysClock+0x11c>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d1f9      	bne.n	8004cca <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	77405a08 	.word	0x77405a08
 8004cf0:	40023c00 	.word	0x40023c00

08004cf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004cf4:	480d      	ldr	r0, [pc, #52]	; (8004d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004cf6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cf8:	480d      	ldr	r0, [pc, #52]	; (8004d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8004cfa:	490e      	ldr	r1, [pc, #56]	; (8004d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004cfc:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <LoopForever+0xe>)
  movs r3, #0
 8004cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d00:	e002      	b.n	8004d08 <LoopCopyDataInit>

08004d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d06:	3304      	adds	r3, #4

08004d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d0c:	d3f9      	bcc.n	8004d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d0e:	4a0b      	ldr	r2, [pc, #44]	; (8004d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004d10:	4c0b      	ldr	r4, [pc, #44]	; (8004d40 <LoopForever+0x16>)
  movs r3, #0
 8004d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d14:	e001      	b.n	8004d1a <LoopFillZerobss>

08004d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d18:	3204      	adds	r2, #4

08004d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d1c:	d3fb      	bcc.n	8004d16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004d1e:	f7ff fe4f 	bl	80049c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004d22:	f000 f811 	bl	8004d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d26:	f7ff fc99 	bl	800465c <main>

08004d2a <LoopForever>:

LoopForever:
    b LoopForever
 8004d2a:	e7fe      	b.n	8004d2a <LoopForever>
  ldr   r0, =_estack
 8004d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d34:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8004d38:	0800590c 	.word	0x0800590c
  ldr r2, =_sbss
 8004d3c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8004d40:	200154d4 	.word	0x200154d4

08004d44 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d44:	e7fe      	b.n	8004d44 <ADC_IRQHandler>
	...

08004d48 <__libc_init_array>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	4e0d      	ldr	r6, [pc, #52]	; (8004d80 <__libc_init_array+0x38>)
 8004d4c:	4c0d      	ldr	r4, [pc, #52]	; (8004d84 <__libc_init_array+0x3c>)
 8004d4e:	1ba4      	subs	r4, r4, r6
 8004d50:	10a4      	asrs	r4, r4, #2
 8004d52:	2500      	movs	r5, #0
 8004d54:	42a5      	cmp	r5, r4
 8004d56:	d109      	bne.n	8004d6c <__libc_init_array+0x24>
 8004d58:	4e0b      	ldr	r6, [pc, #44]	; (8004d88 <__libc_init_array+0x40>)
 8004d5a:	4c0c      	ldr	r4, [pc, #48]	; (8004d8c <__libc_init_array+0x44>)
 8004d5c:	f000 fc9c 	bl	8005698 <_init>
 8004d60:	1ba4      	subs	r4, r4, r6
 8004d62:	10a4      	asrs	r4, r4, #2
 8004d64:	2500      	movs	r5, #0
 8004d66:	42a5      	cmp	r5, r4
 8004d68:	d105      	bne.n	8004d76 <__libc_init_array+0x2e>
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d70:	4798      	blx	r3
 8004d72:	3501      	adds	r5, #1
 8004d74:	e7ee      	b.n	8004d54 <__libc_init_array+0xc>
 8004d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d7a:	4798      	blx	r3
 8004d7c:	3501      	adds	r5, #1
 8004d7e:	e7f2      	b.n	8004d66 <__libc_init_array+0x1e>
 8004d80:	08005904 	.word	0x08005904
 8004d84:	08005904 	.word	0x08005904
 8004d88:	08005904 	.word	0x08005904
 8004d8c:	08005908 	.word	0x08005908

08004d90 <memcmp>:
 8004d90:	b530      	push	{r4, r5, lr}
 8004d92:	2400      	movs	r4, #0
 8004d94:	42a2      	cmp	r2, r4
 8004d96:	d101      	bne.n	8004d9c <memcmp+0xc>
 8004d98:	2000      	movs	r0, #0
 8004d9a:	e007      	b.n	8004dac <memcmp+0x1c>
 8004d9c:	5d03      	ldrb	r3, [r0, r4]
 8004d9e:	3401      	adds	r4, #1
 8004da0:	190d      	adds	r5, r1, r4
 8004da2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004da6:	42ab      	cmp	r3, r5
 8004da8:	d0f4      	beq.n	8004d94 <memcmp+0x4>
 8004daa:	1b58      	subs	r0, r3, r5
 8004dac:	bd30      	pop	{r4, r5, pc}

08004dae <memcpy>:
 8004dae:	b510      	push	{r4, lr}
 8004db0:	1e43      	subs	r3, r0, #1
 8004db2:	440a      	add	r2, r1
 8004db4:	4291      	cmp	r1, r2
 8004db6:	d100      	bne.n	8004dba <memcpy+0xc>
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dc2:	e7f7      	b.n	8004db4 <memcpy+0x6>

08004dc4 <memset>:
 8004dc4:	4402      	add	r2, r0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d100      	bne.n	8004dce <memset+0xa>
 8004dcc:	4770      	bx	lr
 8004dce:	f803 1b01 	strb.w	r1, [r3], #1
 8004dd2:	e7f9      	b.n	8004dc8 <memset+0x4>

08004dd4 <rand>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4b13      	ldr	r3, [pc, #76]	; (8004e24 <rand+0x50>)
 8004dd8:	681c      	ldr	r4, [r3, #0]
 8004dda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ddc:	b97b      	cbnz	r3, 8004dfe <rand+0x2a>
 8004dde:	2018      	movs	r0, #24
 8004de0:	f000 f84c 	bl	8004e7c <malloc>
 8004de4:	4a10      	ldr	r2, [pc, #64]	; (8004e28 <rand+0x54>)
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <rand+0x58>)
 8004de8:	63a0      	str	r0, [r4, #56]	; 0x38
 8004dea:	e9c0 2300 	strd	r2, r3, [r0]
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <rand+0x5c>)
 8004df0:	6083      	str	r3, [r0, #8]
 8004df2:	230b      	movs	r3, #11
 8004df4:	8183      	strh	r3, [r0, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004dfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e00:	480c      	ldr	r0, [pc, #48]	; (8004e34 <rand+0x60>)
 8004e02:	690a      	ldr	r2, [r1, #16]
 8004e04:	694b      	ldr	r3, [r1, #20]
 8004e06:	4c0c      	ldr	r4, [pc, #48]	; (8004e38 <rand+0x64>)
 8004e08:	4350      	muls	r0, r2
 8004e0a:	fb04 0003 	mla	r0, r4, r3, r0
 8004e0e:	fba2 2304 	umull	r2, r3, r2, r4
 8004e12:	4403      	add	r3, r0
 8004e14:	1c54      	adds	r4, r2, #1
 8004e16:	f143 0500 	adc.w	r5, r3, #0
 8004e1a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004e1e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	20000028 	.word	0x20000028
 8004e28:	abcd330e 	.word	0xabcd330e
 8004e2c:	e66d1234 	.word	0xe66d1234
 8004e30:	0005deec 	.word	0x0005deec
 8004e34:	5851f42d 	.word	0x5851f42d
 8004e38:	4c957f2d 	.word	0x4c957f2d

08004e3c <siprintf>:
 8004e3c:	b40e      	push	{r1, r2, r3}
 8004e3e:	b500      	push	{lr}
 8004e40:	b09c      	sub	sp, #112	; 0x70
 8004e42:	ab1d      	add	r3, sp, #116	; 0x74
 8004e44:	9002      	str	r0, [sp, #8]
 8004e46:	9006      	str	r0, [sp, #24]
 8004e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e4c:	4809      	ldr	r0, [pc, #36]	; (8004e74 <siprintf+0x38>)
 8004e4e:	9107      	str	r1, [sp, #28]
 8004e50:	9104      	str	r1, [sp, #16]
 8004e52:	4909      	ldr	r1, [pc, #36]	; (8004e78 <siprintf+0x3c>)
 8004e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	a902      	add	r1, sp, #8
 8004e60:	f000 f916 	bl	8005090 <_svfiprintf_r>
 8004e64:	9b02      	ldr	r3, [sp, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	b01c      	add	sp, #112	; 0x70
 8004e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e70:	b003      	add	sp, #12
 8004e72:	4770      	bx	lr
 8004e74:	20000028 	.word	0x20000028
 8004e78:	ffff0208 	.word	0xffff0208

08004e7c <malloc>:
 8004e7c:	4b02      	ldr	r3, [pc, #8]	; (8004e88 <malloc+0xc>)
 8004e7e:	4601      	mov	r1, r0
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	f000 b851 	b.w	8004f28 <_malloc_r>
 8004e86:	bf00      	nop
 8004e88:	20000028 	.word	0x20000028

08004e8c <_free_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4605      	mov	r5, r0
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d045      	beq.n	8004f20 <_free_r+0x94>
 8004e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e98:	1f0c      	subs	r4, r1, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bfb8      	it	lt
 8004e9e:	18e4      	addlt	r4, r4, r3
 8004ea0:	f000 fb9f 	bl	80055e2 <__malloc_lock>
 8004ea4:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <_free_r+0x98>)
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	b933      	cbnz	r3, 8004eba <_free_r+0x2e>
 8004eac:	6063      	str	r3, [r4, #4]
 8004eae:	6014      	str	r4, [r2, #0]
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eb6:	f000 bb95 	b.w	80055e4 <__malloc_unlock>
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	d90c      	bls.n	8004ed8 <_free_r+0x4c>
 8004ebe:	6821      	ldr	r1, [r4, #0]
 8004ec0:	1862      	adds	r2, r4, r1
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	bf04      	itt	eq
 8004ec6:	681a      	ldreq	r2, [r3, #0]
 8004ec8:	685b      	ldreq	r3, [r3, #4]
 8004eca:	6063      	str	r3, [r4, #4]
 8004ecc:	bf04      	itt	eq
 8004ece:	1852      	addeq	r2, r2, r1
 8004ed0:	6022      	streq	r2, [r4, #0]
 8004ed2:	6004      	str	r4, [r0, #0]
 8004ed4:	e7ec      	b.n	8004eb0 <_free_r+0x24>
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	b10a      	cbz	r2, 8004ee0 <_free_r+0x54>
 8004edc:	42a2      	cmp	r2, r4
 8004ede:	d9fa      	bls.n	8004ed6 <_free_r+0x4a>
 8004ee0:	6819      	ldr	r1, [r3, #0]
 8004ee2:	1858      	adds	r0, r3, r1
 8004ee4:	42a0      	cmp	r0, r4
 8004ee6:	d10b      	bne.n	8004f00 <_free_r+0x74>
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	4401      	add	r1, r0
 8004eec:	1858      	adds	r0, r3, r1
 8004eee:	4282      	cmp	r2, r0
 8004ef0:	6019      	str	r1, [r3, #0]
 8004ef2:	d1dd      	bne.n	8004eb0 <_free_r+0x24>
 8004ef4:	6810      	ldr	r0, [r2, #0]
 8004ef6:	6852      	ldr	r2, [r2, #4]
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	4401      	add	r1, r0
 8004efc:	6019      	str	r1, [r3, #0]
 8004efe:	e7d7      	b.n	8004eb0 <_free_r+0x24>
 8004f00:	d902      	bls.n	8004f08 <_free_r+0x7c>
 8004f02:	230c      	movs	r3, #12
 8004f04:	602b      	str	r3, [r5, #0]
 8004f06:	e7d3      	b.n	8004eb0 <_free_r+0x24>
 8004f08:	6820      	ldr	r0, [r4, #0]
 8004f0a:	1821      	adds	r1, r4, r0
 8004f0c:	428a      	cmp	r2, r1
 8004f0e:	bf04      	itt	eq
 8004f10:	6811      	ldreq	r1, [r2, #0]
 8004f12:	6852      	ldreq	r2, [r2, #4]
 8004f14:	6062      	str	r2, [r4, #4]
 8004f16:	bf04      	itt	eq
 8004f18:	1809      	addeq	r1, r1, r0
 8004f1a:	6021      	streq	r1, [r4, #0]
 8004f1c:	605c      	str	r4, [r3, #4]
 8004f1e:	e7c7      	b.n	8004eb0 <_free_r+0x24>
 8004f20:	bd38      	pop	{r3, r4, r5, pc}
 8004f22:	bf00      	nop
 8004f24:	200153b0 	.word	0x200153b0

08004f28 <_malloc_r>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	1ccd      	adds	r5, r1, #3
 8004f2c:	f025 0503 	bic.w	r5, r5, #3
 8004f30:	3508      	adds	r5, #8
 8004f32:	2d0c      	cmp	r5, #12
 8004f34:	bf38      	it	cc
 8004f36:	250c      	movcc	r5, #12
 8004f38:	2d00      	cmp	r5, #0
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	db01      	blt.n	8004f42 <_malloc_r+0x1a>
 8004f3e:	42a9      	cmp	r1, r5
 8004f40:	d903      	bls.n	8004f4a <_malloc_r+0x22>
 8004f42:	230c      	movs	r3, #12
 8004f44:	6033      	str	r3, [r6, #0]
 8004f46:	2000      	movs	r0, #0
 8004f48:	bd70      	pop	{r4, r5, r6, pc}
 8004f4a:	f000 fb4a 	bl	80055e2 <__malloc_lock>
 8004f4e:	4a21      	ldr	r2, [pc, #132]	; (8004fd4 <_malloc_r+0xac>)
 8004f50:	6814      	ldr	r4, [r2, #0]
 8004f52:	4621      	mov	r1, r4
 8004f54:	b991      	cbnz	r1, 8004f7c <_malloc_r+0x54>
 8004f56:	4c20      	ldr	r4, [pc, #128]	; (8004fd8 <_malloc_r+0xb0>)
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	b91b      	cbnz	r3, 8004f64 <_malloc_r+0x3c>
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f000 fb17 	bl	8005590 <_sbrk_r>
 8004f62:	6020      	str	r0, [r4, #0]
 8004f64:	4629      	mov	r1, r5
 8004f66:	4630      	mov	r0, r6
 8004f68:	f000 fb12 	bl	8005590 <_sbrk_r>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d124      	bne.n	8004fba <_malloc_r+0x92>
 8004f70:	230c      	movs	r3, #12
 8004f72:	6033      	str	r3, [r6, #0]
 8004f74:	4630      	mov	r0, r6
 8004f76:	f000 fb35 	bl	80055e4 <__malloc_unlock>
 8004f7a:	e7e4      	b.n	8004f46 <_malloc_r+0x1e>
 8004f7c:	680b      	ldr	r3, [r1, #0]
 8004f7e:	1b5b      	subs	r3, r3, r5
 8004f80:	d418      	bmi.n	8004fb4 <_malloc_r+0x8c>
 8004f82:	2b0b      	cmp	r3, #11
 8004f84:	d90f      	bls.n	8004fa6 <_malloc_r+0x7e>
 8004f86:	600b      	str	r3, [r1, #0]
 8004f88:	50cd      	str	r5, [r1, r3]
 8004f8a:	18cc      	adds	r4, r1, r3
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f000 fb29 	bl	80055e4 <__malloc_unlock>
 8004f92:	f104 000b 	add.w	r0, r4, #11
 8004f96:	1d23      	adds	r3, r4, #4
 8004f98:	f020 0007 	bic.w	r0, r0, #7
 8004f9c:	1ac3      	subs	r3, r0, r3
 8004f9e:	d0d3      	beq.n	8004f48 <_malloc_r+0x20>
 8004fa0:	425a      	negs	r2, r3
 8004fa2:	50e2      	str	r2, [r4, r3]
 8004fa4:	e7d0      	b.n	8004f48 <_malloc_r+0x20>
 8004fa6:	428c      	cmp	r4, r1
 8004fa8:	684b      	ldr	r3, [r1, #4]
 8004faa:	bf16      	itet	ne
 8004fac:	6063      	strne	r3, [r4, #4]
 8004fae:	6013      	streq	r3, [r2, #0]
 8004fb0:	460c      	movne	r4, r1
 8004fb2:	e7eb      	b.n	8004f8c <_malloc_r+0x64>
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	6849      	ldr	r1, [r1, #4]
 8004fb8:	e7cc      	b.n	8004f54 <_malloc_r+0x2c>
 8004fba:	1cc4      	adds	r4, r0, #3
 8004fbc:	f024 0403 	bic.w	r4, r4, #3
 8004fc0:	42a0      	cmp	r0, r4
 8004fc2:	d005      	beq.n	8004fd0 <_malloc_r+0xa8>
 8004fc4:	1a21      	subs	r1, r4, r0
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 fae2 	bl	8005590 <_sbrk_r>
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d0cf      	beq.n	8004f70 <_malloc_r+0x48>
 8004fd0:	6025      	str	r5, [r4, #0]
 8004fd2:	e7db      	b.n	8004f8c <_malloc_r+0x64>
 8004fd4:	200153b0 	.word	0x200153b0
 8004fd8:	200153b4 	.word	0x200153b4

08004fdc <__ssputs_r>:
 8004fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe0:	688e      	ldr	r6, [r1, #8]
 8004fe2:	429e      	cmp	r6, r3
 8004fe4:	4682      	mov	sl, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	4690      	mov	r8, r2
 8004fea:	4699      	mov	r9, r3
 8004fec:	d837      	bhi.n	800505e <__ssputs_r+0x82>
 8004fee:	898a      	ldrh	r2, [r1, #12]
 8004ff0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ff4:	d031      	beq.n	800505a <__ssputs_r+0x7e>
 8004ff6:	6825      	ldr	r5, [r4, #0]
 8004ff8:	6909      	ldr	r1, [r1, #16]
 8004ffa:	1a6f      	subs	r7, r5, r1
 8004ffc:	6965      	ldr	r5, [r4, #20]
 8004ffe:	2302      	movs	r3, #2
 8005000:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005004:	fb95 f5f3 	sdiv	r5, r5, r3
 8005008:	f109 0301 	add.w	r3, r9, #1
 800500c:	443b      	add	r3, r7
 800500e:	429d      	cmp	r5, r3
 8005010:	bf38      	it	cc
 8005012:	461d      	movcc	r5, r3
 8005014:	0553      	lsls	r3, r2, #21
 8005016:	d530      	bpl.n	800507a <__ssputs_r+0x9e>
 8005018:	4629      	mov	r1, r5
 800501a:	f7ff ff85 	bl	8004f28 <_malloc_r>
 800501e:	4606      	mov	r6, r0
 8005020:	b950      	cbnz	r0, 8005038 <__ssputs_r+0x5c>
 8005022:	230c      	movs	r3, #12
 8005024:	f8ca 3000 	str.w	r3, [sl]
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005038:	463a      	mov	r2, r7
 800503a:	6921      	ldr	r1, [r4, #16]
 800503c:	f7ff feb7 	bl	8004dae <memcpy>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504a:	81a3      	strh	r3, [r4, #12]
 800504c:	6126      	str	r6, [r4, #16]
 800504e:	6165      	str	r5, [r4, #20]
 8005050:	443e      	add	r6, r7
 8005052:	1bed      	subs	r5, r5, r7
 8005054:	6026      	str	r6, [r4, #0]
 8005056:	60a5      	str	r5, [r4, #8]
 8005058:	464e      	mov	r6, r9
 800505a:	454e      	cmp	r6, r9
 800505c:	d900      	bls.n	8005060 <__ssputs_r+0x84>
 800505e:	464e      	mov	r6, r9
 8005060:	4632      	mov	r2, r6
 8005062:	4641      	mov	r1, r8
 8005064:	6820      	ldr	r0, [r4, #0]
 8005066:	f000 faa3 	bl	80055b0 <memmove>
 800506a:	68a3      	ldr	r3, [r4, #8]
 800506c:	1b9b      	subs	r3, r3, r6
 800506e:	60a3      	str	r3, [r4, #8]
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	441e      	add	r6, r3
 8005074:	6026      	str	r6, [r4, #0]
 8005076:	2000      	movs	r0, #0
 8005078:	e7dc      	b.n	8005034 <__ssputs_r+0x58>
 800507a:	462a      	mov	r2, r5
 800507c:	f000 fab3 	bl	80055e6 <_realloc_r>
 8005080:	4606      	mov	r6, r0
 8005082:	2800      	cmp	r0, #0
 8005084:	d1e2      	bne.n	800504c <__ssputs_r+0x70>
 8005086:	6921      	ldr	r1, [r4, #16]
 8005088:	4650      	mov	r0, sl
 800508a:	f7ff feff 	bl	8004e8c <_free_r>
 800508e:	e7c8      	b.n	8005022 <__ssputs_r+0x46>

08005090 <_svfiprintf_r>:
 8005090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005094:	461d      	mov	r5, r3
 8005096:	898b      	ldrh	r3, [r1, #12]
 8005098:	061f      	lsls	r7, r3, #24
 800509a:	b09d      	sub	sp, #116	; 0x74
 800509c:	4680      	mov	r8, r0
 800509e:	460c      	mov	r4, r1
 80050a0:	4616      	mov	r6, r2
 80050a2:	d50f      	bpl.n	80050c4 <_svfiprintf_r+0x34>
 80050a4:	690b      	ldr	r3, [r1, #16]
 80050a6:	b96b      	cbnz	r3, 80050c4 <_svfiprintf_r+0x34>
 80050a8:	2140      	movs	r1, #64	; 0x40
 80050aa:	f7ff ff3d 	bl	8004f28 <_malloc_r>
 80050ae:	6020      	str	r0, [r4, #0]
 80050b0:	6120      	str	r0, [r4, #16]
 80050b2:	b928      	cbnz	r0, 80050c0 <_svfiprintf_r+0x30>
 80050b4:	230c      	movs	r3, #12
 80050b6:	f8c8 3000 	str.w	r3, [r8]
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	e0c8      	b.n	8005252 <_svfiprintf_r+0x1c2>
 80050c0:	2340      	movs	r3, #64	; 0x40
 80050c2:	6163      	str	r3, [r4, #20]
 80050c4:	2300      	movs	r3, #0
 80050c6:	9309      	str	r3, [sp, #36]	; 0x24
 80050c8:	2320      	movs	r3, #32
 80050ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050ce:	2330      	movs	r3, #48	; 0x30
 80050d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050d4:	9503      	str	r5, [sp, #12]
 80050d6:	f04f 0b01 	mov.w	fp, #1
 80050da:	4637      	mov	r7, r6
 80050dc:	463d      	mov	r5, r7
 80050de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050e2:	b10b      	cbz	r3, 80050e8 <_svfiprintf_r+0x58>
 80050e4:	2b25      	cmp	r3, #37	; 0x25
 80050e6:	d13e      	bne.n	8005166 <_svfiprintf_r+0xd6>
 80050e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80050ec:	d00b      	beq.n	8005106 <_svfiprintf_r+0x76>
 80050ee:	4653      	mov	r3, sl
 80050f0:	4632      	mov	r2, r6
 80050f2:	4621      	mov	r1, r4
 80050f4:	4640      	mov	r0, r8
 80050f6:	f7ff ff71 	bl	8004fdc <__ssputs_r>
 80050fa:	3001      	adds	r0, #1
 80050fc:	f000 80a4 	beq.w	8005248 <_svfiprintf_r+0x1b8>
 8005100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005102:	4453      	add	r3, sl
 8005104:	9309      	str	r3, [sp, #36]	; 0x24
 8005106:	783b      	ldrb	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 809d 	beq.w	8005248 <_svfiprintf_r+0x1b8>
 800510e:	2300      	movs	r3, #0
 8005110:	f04f 32ff 	mov.w	r2, #4294967295
 8005114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005118:	9304      	str	r3, [sp, #16]
 800511a:	9307      	str	r3, [sp, #28]
 800511c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005120:	931a      	str	r3, [sp, #104]	; 0x68
 8005122:	462f      	mov	r7, r5
 8005124:	2205      	movs	r2, #5
 8005126:	f817 1b01 	ldrb.w	r1, [r7], #1
 800512a:	4850      	ldr	r0, [pc, #320]	; (800526c <_svfiprintf_r+0x1dc>)
 800512c:	f7fb f878 	bl	8000220 <memchr>
 8005130:	9b04      	ldr	r3, [sp, #16]
 8005132:	b9d0      	cbnz	r0, 800516a <_svfiprintf_r+0xda>
 8005134:	06d9      	lsls	r1, r3, #27
 8005136:	bf44      	itt	mi
 8005138:	2220      	movmi	r2, #32
 800513a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800513e:	071a      	lsls	r2, r3, #28
 8005140:	bf44      	itt	mi
 8005142:	222b      	movmi	r2, #43	; 0x2b
 8005144:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005148:	782a      	ldrb	r2, [r5, #0]
 800514a:	2a2a      	cmp	r2, #42	; 0x2a
 800514c:	d015      	beq.n	800517a <_svfiprintf_r+0xea>
 800514e:	9a07      	ldr	r2, [sp, #28]
 8005150:	462f      	mov	r7, r5
 8005152:	2000      	movs	r0, #0
 8005154:	250a      	movs	r5, #10
 8005156:	4639      	mov	r1, r7
 8005158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800515c:	3b30      	subs	r3, #48	; 0x30
 800515e:	2b09      	cmp	r3, #9
 8005160:	d94d      	bls.n	80051fe <_svfiprintf_r+0x16e>
 8005162:	b1b8      	cbz	r0, 8005194 <_svfiprintf_r+0x104>
 8005164:	e00f      	b.n	8005186 <_svfiprintf_r+0xf6>
 8005166:	462f      	mov	r7, r5
 8005168:	e7b8      	b.n	80050dc <_svfiprintf_r+0x4c>
 800516a:	4a40      	ldr	r2, [pc, #256]	; (800526c <_svfiprintf_r+0x1dc>)
 800516c:	1a80      	subs	r0, r0, r2
 800516e:	fa0b f000 	lsl.w	r0, fp, r0
 8005172:	4318      	orrs	r0, r3
 8005174:	9004      	str	r0, [sp, #16]
 8005176:	463d      	mov	r5, r7
 8005178:	e7d3      	b.n	8005122 <_svfiprintf_r+0x92>
 800517a:	9a03      	ldr	r2, [sp, #12]
 800517c:	1d11      	adds	r1, r2, #4
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	9103      	str	r1, [sp, #12]
 8005182:	2a00      	cmp	r2, #0
 8005184:	db01      	blt.n	800518a <_svfiprintf_r+0xfa>
 8005186:	9207      	str	r2, [sp, #28]
 8005188:	e004      	b.n	8005194 <_svfiprintf_r+0x104>
 800518a:	4252      	negs	r2, r2
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	9207      	str	r2, [sp, #28]
 8005192:	9304      	str	r3, [sp, #16]
 8005194:	783b      	ldrb	r3, [r7, #0]
 8005196:	2b2e      	cmp	r3, #46	; 0x2e
 8005198:	d10c      	bne.n	80051b4 <_svfiprintf_r+0x124>
 800519a:	787b      	ldrb	r3, [r7, #1]
 800519c:	2b2a      	cmp	r3, #42	; 0x2a
 800519e:	d133      	bne.n	8005208 <_svfiprintf_r+0x178>
 80051a0:	9b03      	ldr	r3, [sp, #12]
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	9203      	str	r2, [sp, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bfb8      	it	lt
 80051ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80051b0:	3702      	adds	r7, #2
 80051b2:	9305      	str	r3, [sp, #20]
 80051b4:	4d2e      	ldr	r5, [pc, #184]	; (8005270 <_svfiprintf_r+0x1e0>)
 80051b6:	7839      	ldrb	r1, [r7, #0]
 80051b8:	2203      	movs	r2, #3
 80051ba:	4628      	mov	r0, r5
 80051bc:	f7fb f830 	bl	8000220 <memchr>
 80051c0:	b138      	cbz	r0, 80051d2 <_svfiprintf_r+0x142>
 80051c2:	2340      	movs	r3, #64	; 0x40
 80051c4:	1b40      	subs	r0, r0, r5
 80051c6:	fa03 f000 	lsl.w	r0, r3, r0
 80051ca:	9b04      	ldr	r3, [sp, #16]
 80051cc:	4303      	orrs	r3, r0
 80051ce:	3701      	adds	r7, #1
 80051d0:	9304      	str	r3, [sp, #16]
 80051d2:	7839      	ldrb	r1, [r7, #0]
 80051d4:	4827      	ldr	r0, [pc, #156]	; (8005274 <_svfiprintf_r+0x1e4>)
 80051d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051da:	2206      	movs	r2, #6
 80051dc:	1c7e      	adds	r6, r7, #1
 80051de:	f7fb f81f 	bl	8000220 <memchr>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d038      	beq.n	8005258 <_svfiprintf_r+0x1c8>
 80051e6:	4b24      	ldr	r3, [pc, #144]	; (8005278 <_svfiprintf_r+0x1e8>)
 80051e8:	bb13      	cbnz	r3, 8005230 <_svfiprintf_r+0x1a0>
 80051ea:	9b03      	ldr	r3, [sp, #12]
 80051ec:	3307      	adds	r3, #7
 80051ee:	f023 0307 	bic.w	r3, r3, #7
 80051f2:	3308      	adds	r3, #8
 80051f4:	9303      	str	r3, [sp, #12]
 80051f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f8:	444b      	add	r3, r9
 80051fa:	9309      	str	r3, [sp, #36]	; 0x24
 80051fc:	e76d      	b.n	80050da <_svfiprintf_r+0x4a>
 80051fe:	fb05 3202 	mla	r2, r5, r2, r3
 8005202:	2001      	movs	r0, #1
 8005204:	460f      	mov	r7, r1
 8005206:	e7a6      	b.n	8005156 <_svfiprintf_r+0xc6>
 8005208:	2300      	movs	r3, #0
 800520a:	3701      	adds	r7, #1
 800520c:	9305      	str	r3, [sp, #20]
 800520e:	4619      	mov	r1, r3
 8005210:	250a      	movs	r5, #10
 8005212:	4638      	mov	r0, r7
 8005214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005218:	3a30      	subs	r2, #48	; 0x30
 800521a:	2a09      	cmp	r2, #9
 800521c:	d903      	bls.n	8005226 <_svfiprintf_r+0x196>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0c8      	beq.n	80051b4 <_svfiprintf_r+0x124>
 8005222:	9105      	str	r1, [sp, #20]
 8005224:	e7c6      	b.n	80051b4 <_svfiprintf_r+0x124>
 8005226:	fb05 2101 	mla	r1, r5, r1, r2
 800522a:	2301      	movs	r3, #1
 800522c:	4607      	mov	r7, r0
 800522e:	e7f0      	b.n	8005212 <_svfiprintf_r+0x182>
 8005230:	ab03      	add	r3, sp, #12
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	4622      	mov	r2, r4
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <_svfiprintf_r+0x1ec>)
 8005238:	a904      	add	r1, sp, #16
 800523a:	4640      	mov	r0, r8
 800523c:	f3af 8000 	nop.w
 8005240:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005244:	4681      	mov	r9, r0
 8005246:	d1d6      	bne.n	80051f6 <_svfiprintf_r+0x166>
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	065b      	lsls	r3, r3, #25
 800524c:	f53f af35 	bmi.w	80050ba <_svfiprintf_r+0x2a>
 8005250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005252:	b01d      	add	sp, #116	; 0x74
 8005254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005258:	ab03      	add	r3, sp, #12
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	4622      	mov	r2, r4
 800525e:	4b07      	ldr	r3, [pc, #28]	; (800527c <_svfiprintf_r+0x1ec>)
 8005260:	a904      	add	r1, sp, #16
 8005262:	4640      	mov	r0, r8
 8005264:	f000 f882 	bl	800536c <_printf_i>
 8005268:	e7ea      	b.n	8005240 <_svfiprintf_r+0x1b0>
 800526a:	bf00      	nop
 800526c:	0800586e 	.word	0x0800586e
 8005270:	08005874 	.word	0x08005874
 8005274:	08005878 	.word	0x08005878
 8005278:	00000000 	.word	0x00000000
 800527c:	08004fdd 	.word	0x08004fdd

08005280 <_printf_common>:
 8005280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005284:	4691      	mov	r9, r2
 8005286:	461f      	mov	r7, r3
 8005288:	688a      	ldr	r2, [r1, #8]
 800528a:	690b      	ldr	r3, [r1, #16]
 800528c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005290:	4293      	cmp	r3, r2
 8005292:	bfb8      	it	lt
 8005294:	4613      	movlt	r3, r2
 8005296:	f8c9 3000 	str.w	r3, [r9]
 800529a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800529e:	4606      	mov	r6, r0
 80052a0:	460c      	mov	r4, r1
 80052a2:	b112      	cbz	r2, 80052aa <_printf_common+0x2a>
 80052a4:	3301      	adds	r3, #1
 80052a6:	f8c9 3000 	str.w	r3, [r9]
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	0699      	lsls	r1, r3, #26
 80052ae:	bf42      	ittt	mi
 80052b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052b4:	3302      	addmi	r3, #2
 80052b6:	f8c9 3000 	strmi.w	r3, [r9]
 80052ba:	6825      	ldr	r5, [r4, #0]
 80052bc:	f015 0506 	ands.w	r5, r5, #6
 80052c0:	d107      	bne.n	80052d2 <_printf_common+0x52>
 80052c2:	f104 0a19 	add.w	sl, r4, #25
 80052c6:	68e3      	ldr	r3, [r4, #12]
 80052c8:	f8d9 2000 	ldr.w	r2, [r9]
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	42ab      	cmp	r3, r5
 80052d0:	dc28      	bgt.n	8005324 <_printf_common+0xa4>
 80052d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	3300      	adds	r3, #0
 80052da:	bf18      	it	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	0692      	lsls	r2, r2, #26
 80052e0:	d42d      	bmi.n	800533e <_printf_common+0xbe>
 80052e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052e6:	4639      	mov	r1, r7
 80052e8:	4630      	mov	r0, r6
 80052ea:	47c0      	blx	r8
 80052ec:	3001      	adds	r0, #1
 80052ee:	d020      	beq.n	8005332 <_printf_common+0xb2>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	68e5      	ldr	r5, [r4, #12]
 80052f4:	f8d9 2000 	ldr.w	r2, [r9]
 80052f8:	f003 0306 	and.w	r3, r3, #6
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	bf08      	it	eq
 8005300:	1aad      	subeq	r5, r5, r2
 8005302:	68a3      	ldr	r3, [r4, #8]
 8005304:	6922      	ldr	r2, [r4, #16]
 8005306:	bf0c      	ite	eq
 8005308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800530c:	2500      	movne	r5, #0
 800530e:	4293      	cmp	r3, r2
 8005310:	bfc4      	itt	gt
 8005312:	1a9b      	subgt	r3, r3, r2
 8005314:	18ed      	addgt	r5, r5, r3
 8005316:	f04f 0900 	mov.w	r9, #0
 800531a:	341a      	adds	r4, #26
 800531c:	454d      	cmp	r5, r9
 800531e:	d11a      	bne.n	8005356 <_printf_common+0xd6>
 8005320:	2000      	movs	r0, #0
 8005322:	e008      	b.n	8005336 <_printf_common+0xb6>
 8005324:	2301      	movs	r3, #1
 8005326:	4652      	mov	r2, sl
 8005328:	4639      	mov	r1, r7
 800532a:	4630      	mov	r0, r6
 800532c:	47c0      	blx	r8
 800532e:	3001      	adds	r0, #1
 8005330:	d103      	bne.n	800533a <_printf_common+0xba>
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533a:	3501      	adds	r5, #1
 800533c:	e7c3      	b.n	80052c6 <_printf_common+0x46>
 800533e:	18e1      	adds	r1, r4, r3
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	2030      	movs	r0, #48	; 0x30
 8005344:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005348:	4422      	add	r2, r4
 800534a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800534e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005352:	3302      	adds	r3, #2
 8005354:	e7c5      	b.n	80052e2 <_printf_common+0x62>
 8005356:	2301      	movs	r3, #1
 8005358:	4622      	mov	r2, r4
 800535a:	4639      	mov	r1, r7
 800535c:	4630      	mov	r0, r6
 800535e:	47c0      	blx	r8
 8005360:	3001      	adds	r0, #1
 8005362:	d0e6      	beq.n	8005332 <_printf_common+0xb2>
 8005364:	f109 0901 	add.w	r9, r9, #1
 8005368:	e7d8      	b.n	800531c <_printf_common+0x9c>
	...

0800536c <_printf_i>:
 800536c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005370:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005374:	460c      	mov	r4, r1
 8005376:	7e09      	ldrb	r1, [r1, #24]
 8005378:	b085      	sub	sp, #20
 800537a:	296e      	cmp	r1, #110	; 0x6e
 800537c:	4617      	mov	r7, r2
 800537e:	4606      	mov	r6, r0
 8005380:	4698      	mov	r8, r3
 8005382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005384:	f000 80b3 	beq.w	80054ee <_printf_i+0x182>
 8005388:	d822      	bhi.n	80053d0 <_printf_i+0x64>
 800538a:	2963      	cmp	r1, #99	; 0x63
 800538c:	d036      	beq.n	80053fc <_printf_i+0x90>
 800538e:	d80a      	bhi.n	80053a6 <_printf_i+0x3a>
 8005390:	2900      	cmp	r1, #0
 8005392:	f000 80b9 	beq.w	8005508 <_printf_i+0x19c>
 8005396:	2958      	cmp	r1, #88	; 0x58
 8005398:	f000 8083 	beq.w	80054a2 <_printf_i+0x136>
 800539c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80053a4:	e032      	b.n	800540c <_printf_i+0xa0>
 80053a6:	2964      	cmp	r1, #100	; 0x64
 80053a8:	d001      	beq.n	80053ae <_printf_i+0x42>
 80053aa:	2969      	cmp	r1, #105	; 0x69
 80053ac:	d1f6      	bne.n	800539c <_printf_i+0x30>
 80053ae:	6820      	ldr	r0, [r4, #0]
 80053b0:	6813      	ldr	r3, [r2, #0]
 80053b2:	0605      	lsls	r5, r0, #24
 80053b4:	f103 0104 	add.w	r1, r3, #4
 80053b8:	d52a      	bpl.n	8005410 <_printf_i+0xa4>
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6011      	str	r1, [r2, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	da03      	bge.n	80053ca <_printf_i+0x5e>
 80053c2:	222d      	movs	r2, #45	; 0x2d
 80053c4:	425b      	negs	r3, r3
 80053c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053ca:	486f      	ldr	r0, [pc, #444]	; (8005588 <_printf_i+0x21c>)
 80053cc:	220a      	movs	r2, #10
 80053ce:	e039      	b.n	8005444 <_printf_i+0xd8>
 80053d0:	2973      	cmp	r1, #115	; 0x73
 80053d2:	f000 809d 	beq.w	8005510 <_printf_i+0x1a4>
 80053d6:	d808      	bhi.n	80053ea <_printf_i+0x7e>
 80053d8:	296f      	cmp	r1, #111	; 0x6f
 80053da:	d020      	beq.n	800541e <_printf_i+0xb2>
 80053dc:	2970      	cmp	r1, #112	; 0x70
 80053de:	d1dd      	bne.n	800539c <_printf_i+0x30>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	f043 0320 	orr.w	r3, r3, #32
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	e003      	b.n	80053f2 <_printf_i+0x86>
 80053ea:	2975      	cmp	r1, #117	; 0x75
 80053ec:	d017      	beq.n	800541e <_printf_i+0xb2>
 80053ee:	2978      	cmp	r1, #120	; 0x78
 80053f0:	d1d4      	bne.n	800539c <_printf_i+0x30>
 80053f2:	2378      	movs	r3, #120	; 0x78
 80053f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053f8:	4864      	ldr	r0, [pc, #400]	; (800558c <_printf_i+0x220>)
 80053fa:	e055      	b.n	80054a8 <_printf_i+0x13c>
 80053fc:	6813      	ldr	r3, [r2, #0]
 80053fe:	1d19      	adds	r1, r3, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6011      	str	r1, [r2, #0]
 8005404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800540c:	2301      	movs	r3, #1
 800540e:	e08c      	b.n	800552a <_printf_i+0x1be>
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6011      	str	r1, [r2, #0]
 8005414:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005418:	bf18      	it	ne
 800541a:	b21b      	sxthne	r3, r3
 800541c:	e7cf      	b.n	80053be <_printf_i+0x52>
 800541e:	6813      	ldr	r3, [r2, #0]
 8005420:	6825      	ldr	r5, [r4, #0]
 8005422:	1d18      	adds	r0, r3, #4
 8005424:	6010      	str	r0, [r2, #0]
 8005426:	0628      	lsls	r0, r5, #24
 8005428:	d501      	bpl.n	800542e <_printf_i+0xc2>
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	e002      	b.n	8005434 <_printf_i+0xc8>
 800542e:	0668      	lsls	r0, r5, #25
 8005430:	d5fb      	bpl.n	800542a <_printf_i+0xbe>
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	4854      	ldr	r0, [pc, #336]	; (8005588 <_printf_i+0x21c>)
 8005436:	296f      	cmp	r1, #111	; 0x6f
 8005438:	bf14      	ite	ne
 800543a:	220a      	movne	r2, #10
 800543c:	2208      	moveq	r2, #8
 800543e:	2100      	movs	r1, #0
 8005440:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005444:	6865      	ldr	r5, [r4, #4]
 8005446:	60a5      	str	r5, [r4, #8]
 8005448:	2d00      	cmp	r5, #0
 800544a:	f2c0 8095 	blt.w	8005578 <_printf_i+0x20c>
 800544e:	6821      	ldr	r1, [r4, #0]
 8005450:	f021 0104 	bic.w	r1, r1, #4
 8005454:	6021      	str	r1, [r4, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d13d      	bne.n	80054d6 <_printf_i+0x16a>
 800545a:	2d00      	cmp	r5, #0
 800545c:	f040 808e 	bne.w	800557c <_printf_i+0x210>
 8005460:	4665      	mov	r5, ip
 8005462:	2a08      	cmp	r2, #8
 8005464:	d10b      	bne.n	800547e <_printf_i+0x112>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	07db      	lsls	r3, r3, #31
 800546a:	d508      	bpl.n	800547e <_printf_i+0x112>
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	6862      	ldr	r2, [r4, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	bfde      	ittt	le
 8005474:	2330      	movle	r3, #48	; 0x30
 8005476:	f805 3c01 	strble.w	r3, [r5, #-1]
 800547a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800547e:	ebac 0305 	sub.w	r3, ip, r5
 8005482:	6123      	str	r3, [r4, #16]
 8005484:	f8cd 8000 	str.w	r8, [sp]
 8005488:	463b      	mov	r3, r7
 800548a:	aa03      	add	r2, sp, #12
 800548c:	4621      	mov	r1, r4
 800548e:	4630      	mov	r0, r6
 8005490:	f7ff fef6 	bl	8005280 <_printf_common>
 8005494:	3001      	adds	r0, #1
 8005496:	d14d      	bne.n	8005534 <_printf_i+0x1c8>
 8005498:	f04f 30ff 	mov.w	r0, #4294967295
 800549c:	b005      	add	sp, #20
 800549e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054a2:	4839      	ldr	r0, [pc, #228]	; (8005588 <_printf_i+0x21c>)
 80054a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80054a8:	6813      	ldr	r3, [r2, #0]
 80054aa:	6821      	ldr	r1, [r4, #0]
 80054ac:	1d1d      	adds	r5, r3, #4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6015      	str	r5, [r2, #0]
 80054b2:	060a      	lsls	r2, r1, #24
 80054b4:	d50b      	bpl.n	80054ce <_printf_i+0x162>
 80054b6:	07ca      	lsls	r2, r1, #31
 80054b8:	bf44      	itt	mi
 80054ba:	f041 0120 	orrmi.w	r1, r1, #32
 80054be:	6021      	strmi	r1, [r4, #0]
 80054c0:	b91b      	cbnz	r3, 80054ca <_printf_i+0x15e>
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	f022 0220 	bic.w	r2, r2, #32
 80054c8:	6022      	str	r2, [r4, #0]
 80054ca:	2210      	movs	r2, #16
 80054cc:	e7b7      	b.n	800543e <_printf_i+0xd2>
 80054ce:	064d      	lsls	r5, r1, #25
 80054d0:	bf48      	it	mi
 80054d2:	b29b      	uxthmi	r3, r3
 80054d4:	e7ef      	b.n	80054b6 <_printf_i+0x14a>
 80054d6:	4665      	mov	r5, ip
 80054d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80054dc:	fb02 3311 	mls	r3, r2, r1, r3
 80054e0:	5cc3      	ldrb	r3, [r0, r3]
 80054e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054e6:	460b      	mov	r3, r1
 80054e8:	2900      	cmp	r1, #0
 80054ea:	d1f5      	bne.n	80054d8 <_printf_i+0x16c>
 80054ec:	e7b9      	b.n	8005462 <_printf_i+0xf6>
 80054ee:	6813      	ldr	r3, [r2, #0]
 80054f0:	6825      	ldr	r5, [r4, #0]
 80054f2:	6961      	ldr	r1, [r4, #20]
 80054f4:	1d18      	adds	r0, r3, #4
 80054f6:	6010      	str	r0, [r2, #0]
 80054f8:	0628      	lsls	r0, r5, #24
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	d501      	bpl.n	8005502 <_printf_i+0x196>
 80054fe:	6019      	str	r1, [r3, #0]
 8005500:	e002      	b.n	8005508 <_printf_i+0x19c>
 8005502:	066a      	lsls	r2, r5, #25
 8005504:	d5fb      	bpl.n	80054fe <_printf_i+0x192>
 8005506:	8019      	strh	r1, [r3, #0]
 8005508:	2300      	movs	r3, #0
 800550a:	6123      	str	r3, [r4, #16]
 800550c:	4665      	mov	r5, ip
 800550e:	e7b9      	b.n	8005484 <_printf_i+0x118>
 8005510:	6813      	ldr	r3, [r2, #0]
 8005512:	1d19      	adds	r1, r3, #4
 8005514:	6011      	str	r1, [r2, #0]
 8005516:	681d      	ldr	r5, [r3, #0]
 8005518:	6862      	ldr	r2, [r4, #4]
 800551a:	2100      	movs	r1, #0
 800551c:	4628      	mov	r0, r5
 800551e:	f7fa fe7f 	bl	8000220 <memchr>
 8005522:	b108      	cbz	r0, 8005528 <_printf_i+0x1bc>
 8005524:	1b40      	subs	r0, r0, r5
 8005526:	6060      	str	r0, [r4, #4]
 8005528:	6863      	ldr	r3, [r4, #4]
 800552a:	6123      	str	r3, [r4, #16]
 800552c:	2300      	movs	r3, #0
 800552e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005532:	e7a7      	b.n	8005484 <_printf_i+0x118>
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	462a      	mov	r2, r5
 8005538:	4639      	mov	r1, r7
 800553a:	4630      	mov	r0, r6
 800553c:	47c0      	blx	r8
 800553e:	3001      	adds	r0, #1
 8005540:	d0aa      	beq.n	8005498 <_printf_i+0x12c>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	079b      	lsls	r3, r3, #30
 8005546:	d413      	bmi.n	8005570 <_printf_i+0x204>
 8005548:	68e0      	ldr	r0, [r4, #12]
 800554a:	9b03      	ldr	r3, [sp, #12]
 800554c:	4298      	cmp	r0, r3
 800554e:	bfb8      	it	lt
 8005550:	4618      	movlt	r0, r3
 8005552:	e7a3      	b.n	800549c <_printf_i+0x130>
 8005554:	2301      	movs	r3, #1
 8005556:	464a      	mov	r2, r9
 8005558:	4639      	mov	r1, r7
 800555a:	4630      	mov	r0, r6
 800555c:	47c0      	blx	r8
 800555e:	3001      	adds	r0, #1
 8005560:	d09a      	beq.n	8005498 <_printf_i+0x12c>
 8005562:	3501      	adds	r5, #1
 8005564:	68e3      	ldr	r3, [r4, #12]
 8005566:	9a03      	ldr	r2, [sp, #12]
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	42ab      	cmp	r3, r5
 800556c:	dcf2      	bgt.n	8005554 <_printf_i+0x1e8>
 800556e:	e7eb      	b.n	8005548 <_printf_i+0x1dc>
 8005570:	2500      	movs	r5, #0
 8005572:	f104 0919 	add.w	r9, r4, #25
 8005576:	e7f5      	b.n	8005564 <_printf_i+0x1f8>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1ac      	bne.n	80054d6 <_printf_i+0x16a>
 800557c:	7803      	ldrb	r3, [r0, #0]
 800557e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005582:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005586:	e76c      	b.n	8005462 <_printf_i+0xf6>
 8005588:	0800587f 	.word	0x0800587f
 800558c:	08005890 	.word	0x08005890

08005590 <_sbrk_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4c06      	ldr	r4, [pc, #24]	; (80055ac <_sbrk_r+0x1c>)
 8005594:	2300      	movs	r3, #0
 8005596:	4605      	mov	r5, r0
 8005598:	4608      	mov	r0, r1
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	f000 f852 	bl	8005644 <_sbrk>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_sbrk_r+0x1a>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_sbrk_r+0x1a>
 80055a8:	602b      	str	r3, [r5, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	200154d0 	.word	0x200154d0

080055b0 <memmove>:
 80055b0:	4288      	cmp	r0, r1
 80055b2:	b510      	push	{r4, lr}
 80055b4:	eb01 0302 	add.w	r3, r1, r2
 80055b8:	d807      	bhi.n	80055ca <memmove+0x1a>
 80055ba:	1e42      	subs	r2, r0, #1
 80055bc:	4299      	cmp	r1, r3
 80055be:	d00a      	beq.n	80055d6 <memmove+0x26>
 80055c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80055c8:	e7f8      	b.n	80055bc <memmove+0xc>
 80055ca:	4283      	cmp	r3, r0
 80055cc:	d9f5      	bls.n	80055ba <memmove+0xa>
 80055ce:	1881      	adds	r1, r0, r2
 80055d0:	1ad2      	subs	r2, r2, r3
 80055d2:	42d3      	cmn	r3, r2
 80055d4:	d100      	bne.n	80055d8 <memmove+0x28>
 80055d6:	bd10      	pop	{r4, pc}
 80055d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80055e0:	e7f7      	b.n	80055d2 <memmove+0x22>

080055e2 <__malloc_lock>:
 80055e2:	4770      	bx	lr

080055e4 <__malloc_unlock>:
 80055e4:	4770      	bx	lr

080055e6 <_realloc_r>:
 80055e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e8:	4607      	mov	r7, r0
 80055ea:	4614      	mov	r4, r2
 80055ec:	460e      	mov	r6, r1
 80055ee:	b921      	cbnz	r1, 80055fa <_realloc_r+0x14>
 80055f0:	4611      	mov	r1, r2
 80055f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055f6:	f7ff bc97 	b.w	8004f28 <_malloc_r>
 80055fa:	b922      	cbnz	r2, 8005606 <_realloc_r+0x20>
 80055fc:	f7ff fc46 	bl	8004e8c <_free_r>
 8005600:	4625      	mov	r5, r4
 8005602:	4628      	mov	r0, r5
 8005604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005606:	f000 f814 	bl	8005632 <_malloc_usable_size_r>
 800560a:	42a0      	cmp	r0, r4
 800560c:	d20f      	bcs.n	800562e <_realloc_r+0x48>
 800560e:	4621      	mov	r1, r4
 8005610:	4638      	mov	r0, r7
 8005612:	f7ff fc89 	bl	8004f28 <_malloc_r>
 8005616:	4605      	mov	r5, r0
 8005618:	2800      	cmp	r0, #0
 800561a:	d0f2      	beq.n	8005602 <_realloc_r+0x1c>
 800561c:	4631      	mov	r1, r6
 800561e:	4622      	mov	r2, r4
 8005620:	f7ff fbc5 	bl	8004dae <memcpy>
 8005624:	4631      	mov	r1, r6
 8005626:	4638      	mov	r0, r7
 8005628:	f7ff fc30 	bl	8004e8c <_free_r>
 800562c:	e7e9      	b.n	8005602 <_realloc_r+0x1c>
 800562e:	4635      	mov	r5, r6
 8005630:	e7e7      	b.n	8005602 <_realloc_r+0x1c>

08005632 <_malloc_usable_size_r>:
 8005632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005636:	1f18      	subs	r0, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	bfbc      	itt	lt
 800563c:	580b      	ldrlt	r3, [r1, r0]
 800563e:	18c0      	addlt	r0, r0, r3
 8005640:	4770      	bx	lr
	...

08005644 <_sbrk>:
 8005644:	4b0d      	ldr	r3, [pc, #52]	; (800567c <_sbrk+0x38>)
 8005646:	6819      	ldr	r1, [r3, #0]
 8005648:	b510      	push	{r4, lr}
 800564a:	4602      	mov	r2, r0
 800564c:	b909      	cbnz	r1, 8005652 <_sbrk+0xe>
 800564e:	490c      	ldr	r1, [pc, #48]	; (8005680 <_sbrk+0x3c>)
 8005650:	6019      	str	r1, [r3, #0]
 8005652:	6818      	ldr	r0, [r3, #0]
 8005654:	4669      	mov	r1, sp
 8005656:	4402      	add	r2, r0
 8005658:	428a      	cmp	r2, r1
 800565a:	d806      	bhi.n	800566a <_sbrk+0x26>
 800565c:	4909      	ldr	r1, [pc, #36]	; (8005684 <_sbrk+0x40>)
 800565e:	4c0a      	ldr	r4, [pc, #40]	; (8005688 <_sbrk+0x44>)
 8005660:	6809      	ldr	r1, [r1, #0]
 8005662:	42a1      	cmp	r1, r4
 8005664:	d008      	beq.n	8005678 <_sbrk+0x34>
 8005666:	428a      	cmp	r2, r1
 8005668:	d906      	bls.n	8005678 <_sbrk+0x34>
 800566a:	f000 f80f 	bl	800568c <__errno>
 800566e:	230c      	movs	r3, #12
 8005670:	6003      	str	r3, [r0, #0]
 8005672:	f04f 30ff 	mov.w	r0, #4294967295
 8005676:	bd10      	pop	{r4, pc}
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e7fc      	b.n	8005676 <_sbrk+0x32>
 800567c:	200153b8 	.word	0x200153b8
 8005680:	200154d8 	.word	0x200154d8
 8005684:	2000008c 	.word	0x2000008c
 8005688:	cafedead 	.word	0xcafedead

0800568c <__errno>:
 800568c:	4b01      	ldr	r3, [pc, #4]	; (8005694 <__errno+0x8>)
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000028 	.word	0x20000028

08005698 <_init>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	bf00      	nop
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr

080056a4 <_fini>:
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	bf00      	nop
 80056a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056aa:	bc08      	pop	{r3}
 80056ac:	469e      	mov	lr, r3
 80056ae:	4770      	bx	lr
