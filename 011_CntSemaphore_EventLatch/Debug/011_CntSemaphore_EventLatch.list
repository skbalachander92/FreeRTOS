
011_CntSemaphore_EventLatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08004bbc  08004bbc  00014bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d88  08004d88  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08004d88  08004d88  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d88  08004d88  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08004d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015430  20000028  08004db8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015458  08004db8  00025458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010254  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021ba  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  00032468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf8  00000000  00000000  00033168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000334a  00000000  00000000  00033d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c17f  00000000  00000000  000370aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080ded  00000000  00000000  00043229  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4016  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003790  00000000  00000000  000c4094  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000028 	.word	0x20000028
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ba4 	.word	0x08004ba4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000002c 	.word	0x2000002c
 800020c:	08004ba4 	.word	0x08004ba4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800022c:	4b34      	ldr	r3, [pc, #208]	; (8000300 <EXTI_Init+0xe0>)
 800022e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	799b      	ldrb	r3, [r3, #6]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d04f      	beq.n	80002d8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000238:	4b31      	ldr	r3, [pc, #196]	; (8000300 <EXTI_Init+0xe0>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	43db      	mvns	r3, r3
 8000242:	492f      	ldr	r1, [pc, #188]	; (8000300 <EXTI_Init+0xe0>)
 8000244:	4013      	ands	r3, r2
 8000246:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000248:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <EXTI_Init+0xe0>)
 800024a:	685a      	ldr	r2, [r3, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	43db      	mvns	r3, r3
 8000252:	492b      	ldr	r1, [pc, #172]	; (8000300 <EXTI_Init+0xe0>)
 8000254:	4013      	ands	r3, r2
 8000256:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	461a      	mov	r2, r3
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	4413      	add	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	6819      	ldr	r1, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	430a      	orrs	r2, r1
 8000270:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000272:	4b23      	ldr	r3, [pc, #140]	; (8000300 <EXTI_Init+0xe0>)
 8000274:	689a      	ldr	r2, [r3, #8]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	43db      	mvns	r3, r3
 800027c:	4920      	ldr	r1, [pc, #128]	; (8000300 <EXTI_Init+0xe0>)
 800027e:	4013      	ands	r3, r2
 8000280:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000282:	4b1f      	ldr	r3, [pc, #124]	; (8000300 <EXTI_Init+0xe0>)
 8000284:	68da      	ldr	r2, [r3, #12]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	43db      	mvns	r3, r3
 800028c:	491c      	ldr	r1, [pc, #112]	; (8000300 <EXTI_Init+0xe0>)
 800028e:	4013      	ands	r3, r2
 8000290:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	795b      	ldrb	r3, [r3, #5]
 8000296:	2b10      	cmp	r3, #16
 8000298:	d10e      	bne.n	80002b8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800029a:	4b19      	ldr	r3, [pc, #100]	; (8000300 <EXTI_Init+0xe0>)
 800029c:	689a      	ldr	r2, [r3, #8]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4917      	ldr	r1, [pc, #92]	; (8000300 <EXTI_Init+0xe0>)
 80002a4:	4313      	orrs	r3, r2
 80002a6:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <EXTI_Init+0xe0>)
 80002aa:	68da      	ldr	r2, [r3, #12]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4913      	ldr	r1, [pc, #76]	; (8000300 <EXTI_Init+0xe0>)
 80002b2:	4313      	orrs	r3, r2
 80002b4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002b6:	e01d      	b.n	80002f4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <EXTI_Init+0xe0>)
 80002ba:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	795b      	ldrb	r3, [r3, #5]
 80002c0:	461a      	mov	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	4413      	add	r3, r2
 80002c6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	6819      	ldr	r1, [r3, #0]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	430a      	orrs	r2, r1
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	e00d      	b.n	80002f4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	791b      	ldrb	r3, [r3, #4]
 80002dc:	461a      	mov	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	4413      	add	r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	6819      	ldr	r1, [r3, #0]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	43da      	mvns	r2, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	400a      	ands	r2, r1
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	40013c00 	.word	0x40013c00

08000304 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <EXTI_ClearITPendingBit+0x1c>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	6153      	str	r3, [r2, #20]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40013c00 	.word	0x40013c00

08000324 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]
 8000332:	2300      	movs	r3, #0
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
 800033e:	e076      	b.n	800042e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000340:	2201      	movs	r2, #1
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	fa02 f303 	lsl.w	r3, r2, r3
 8000348:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	4013      	ands	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	429a      	cmp	r2, r3
 800035a:	d165      	bne.n	8000428 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	2103      	movs	r1, #3
 8000366:	fa01 f303 	lsl.w	r3, r1, r3
 800036a:	43db      	mvns	r3, r3
 800036c:	401a      	ands	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	791b      	ldrb	r3, [r3, #4]
 800037a:	4619      	mov	r1, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	fa01 f303 	lsl.w	r3, r1, r3
 8000384:	431a      	orrs	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	791b      	ldrb	r3, [r3, #4]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d003      	beq.n	800039a <GPIO_Init+0x76>
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	2b02      	cmp	r3, #2
 8000398:	d12e      	bne.n	80003f8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	2103      	movs	r1, #3
 80003a4:	fa01 f303 	lsl.w	r3, r1, r3
 80003a8:	43db      	mvns	r3, r3
 80003aa:	401a      	ands	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	689a      	ldr	r2, [r3, #8]
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	795b      	ldrb	r3, [r3, #5]
 80003b8:	4619      	mov	r1, r3
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	fa01 f303 	lsl.w	r3, r1, r3
 80003c2:	431a      	orrs	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	685a      	ldr	r2, [r3, #4]
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	2301      	movs	r3, #1
 80003d4:	408b      	lsls	r3, r1
 80003d6:	43db      	mvns	r3, r3
 80003d8:	401a      	ands	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	683a      	ldr	r2, [r7, #0]
 80003e4:	7992      	ldrb	r2, [r2, #6]
 80003e6:	4611      	mov	r1, r2
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	b292      	uxth	r2, r2
 80003ec:	fa01 f202 	lsl.w	r2, r1, r2
 80003f0:	b292      	uxth	r2, r2
 80003f2:	431a      	orrs	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	68da      	ldr	r2, [r3, #12]
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	b29b      	uxth	r3, r3
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	2103      	movs	r1, #3
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	68da      	ldr	r2, [r3, #12]
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	79db      	ldrb	r3, [r3, #7]
 8000418:	4619      	mov	r1, r3
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	431a      	orrs	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	3301      	adds	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	2b0f      	cmp	r3, #15
 8000432:	d985      	bls.n	8000340 <GPIO_Init+0x1c>
    }
  }
}
 8000434:	bf00      	nop
 8000436:	371c      	adds	r7, #28
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	807b      	strh	r3, [r7, #2]
 800044c:	4613      	mov	r3, r2
 800044e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000458:	787a      	ldrb	r2, [r7, #1]
 800045a:	887b      	ldrh	r3, [r7, #2]
 800045c:	f003 0307 	and.w	r3, r3, #7
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	fa02 f303 	lsl.w	r3, r2, r3
 8000466:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000468:	887b      	ldrh	r3, [r7, #2]
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b29b      	uxth	r3, r3
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3208      	adds	r2, #8
 8000474:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000478:	887b      	ldrh	r3, [r7, #2]
 800047a:	f003 0307 	and.w	r3, r3, #7
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	210f      	movs	r1, #15
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	43db      	mvns	r3, r3
 8000488:	8879      	ldrh	r1, [r7, #2]
 800048a:	08c9      	lsrs	r1, r1, #3
 800048c:	b289      	uxth	r1, r1
 800048e:	4608      	mov	r0, r1
 8000490:	ea02 0103 	and.w	r1, r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f100 0208 	add.w	r2, r0, #8
 800049a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800049e:	887b      	ldrh	r3, [r7, #2]
 80004a0:	08db      	lsrs	r3, r3, #3
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3208      	adds	r2, #8
 80004aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004b4:	887b      	ldrh	r3, [r7, #2]
 80004b6:	08db      	lsrs	r3, r3, #3
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3208      	adds	r2, #8
 80004c0:	68b9      	ldr	r1, [r7, #8]
 80004c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <RCC_DeInit+0x60>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a15      	ldr	r2, [pc, #84]	; (8000534 <RCC_DeInit+0x60>)
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004e4:	4b13      	ldr	r3, [pc, #76]	; (8000534 <RCC_DeInit+0x60>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <RCC_DeInit+0x60>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a11      	ldr	r2, [pc, #68]	; (8000534 <RCC_DeInit+0x60>)
 80004f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004f8:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <RCC_DeInit+0x60>)
 80004fc:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <RCC_DeInit+0x64>)
 80004fe:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <RCC_DeInit+0x60>)
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <RCC_DeInit+0x68>)
 8000504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <RCC_DeInit+0x60>)
 800050a:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <RCC_DeInit+0x6c>)
 800050c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <RCC_DeInit+0x60>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <RCC_DeInit+0x60>)
 8000516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800051a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <RCC_DeInit+0x60>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <RCC_DeInit+0x60>)
 8000524:	2200      	movs	r2, #0
 8000526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40023800 	.word	0x40023800
 8000538:	24003010 	.word	0x24003010
 800053c:	20003000 	.word	0x20003000
 8000540:	24003000 	.word	0x24003000

08000544 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000544:	b480      	push	{r7}
 8000546:	b08b      	sub	sp, #44	; 0x2c
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
 8000554:	2300      	movs	r3, #0
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
 8000558:	2302      	movs	r3, #2
 800055a:	61bb      	str	r3, [r7, #24]
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	2302      	movs	r3, #2
 8000562:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000564:	2302      	movs	r3, #2
 8000566:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000568:	4b6f      	ldr	r3, [pc, #444]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	f003 030c 	and.w	r3, r3, #12
 8000570:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	2b0c      	cmp	r3, #12
 8000576:	f200 8091 	bhi.w	800069c <RCC_GetClocksFreq+0x158>
 800057a:	a201      	add	r2, pc, #4	; (adr r2, 8000580 <RCC_GetClocksFreq+0x3c>)
 800057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000580:	080005b5 	.word	0x080005b5
 8000584:	0800069d 	.word	0x0800069d
 8000588:	0800069d 	.word	0x0800069d
 800058c:	0800069d 	.word	0x0800069d
 8000590:	080005bd 	.word	0x080005bd
 8000594:	0800069d 	.word	0x0800069d
 8000598:	0800069d 	.word	0x0800069d
 800059c:	0800069d 	.word	0x0800069d
 80005a0:	080005c5 	.word	0x080005c5
 80005a4:	0800069d 	.word	0x0800069d
 80005a8:	0800069d 	.word	0x0800069d
 80005ac:	0800069d 	.word	0x0800069d
 80005b0:	08000631 	.word	0x08000631
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a5d      	ldr	r2, [pc, #372]	; (800072c <RCC_GetClocksFreq+0x1e8>)
 80005b8:	601a      	str	r2, [r3, #0]
    break;
 80005ba:	e073      	b.n	80006a4 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a5c      	ldr	r2, [pc, #368]	; (8000730 <RCC_GetClocksFreq+0x1ec>)
 80005c0:	601a      	str	r2, [r3, #0]
    break;
 80005c2:	e06f      	b.n	80006a4 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005c4:	4b58      	ldr	r3, [pc, #352]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	0d9b      	lsrs	r3, r3, #22
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005d0:	4b55      	ldr	r3, [pc, #340]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005d8:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005e0:	4a53      	ldr	r2, [pc, #332]	; (8000730 <RCC_GetClocksFreq+0x1ec>)
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e8:	4a4f      	ldr	r2, [pc, #316]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 80005ea:	6852      	ldr	r2, [r2, #4]
 80005ec:	0992      	lsrs	r2, r2, #6
 80005ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005f2:	fb02 f303 	mul.w	r3, r2, r3
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
 80005f8:	e00b      	b.n	8000612 <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005fa:	4a4c      	ldr	r2, [pc, #304]	; (800072c <RCC_GetClocksFreq+0x1e8>)
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4a49      	ldr	r2, [pc, #292]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 8000604:	6852      	ldr	r2, [r2, #4]
 8000606:	0992      	lsrs	r2, r2, #6
 8000608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800060c:	fb02 f303 	mul.w	r3, r2, r3
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000612:	4b45      	ldr	r3, [pc, #276]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	0c1b      	lsrs	r3, r3, #16
 8000618:	f003 0303 	and.w	r3, r3, #3
 800061c:	3301      	adds	r3, #1
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	fbb2 f2f3 	udiv	r2, r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	601a      	str	r2, [r3, #0]
    break;
 800062e:	e039      	b.n	80006a4 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000630:	4b3d      	ldr	r3, [pc, #244]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	0d9b      	lsrs	r3, r3, #22
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800063c:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000644:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00c      	beq.n	8000666 <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800064c:	4a38      	ldr	r2, [pc, #224]	; (8000730 <RCC_GetClocksFreq+0x1ec>)
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	fbb2 f3f3 	udiv	r3, r2, r3
 8000654:	4a34      	ldr	r2, [pc, #208]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 8000656:	6852      	ldr	r2, [r2, #4]
 8000658:	0992      	lsrs	r2, r2, #6
 800065a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800065e:	fb02 f303 	mul.w	r3, r2, r3
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
 8000664:	e00b      	b.n	800067e <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000666:	4a31      	ldr	r2, [pc, #196]	; (800072c <RCC_GetClocksFreq+0x1e8>)
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	fbb2 f3f3 	udiv	r3, r2, r3
 800066e:	4a2e      	ldr	r2, [pc, #184]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 8000670:	6852      	ldr	r2, [r2, #4]
 8000672:	0992      	lsrs	r2, r2, #6
 8000674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	0f1b      	lsrs	r3, r3, #28
 8000684:	f003 0307 	and.w	r3, r3, #7
 8000688:	3301      	adds	r3, #1
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 800068e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	fbb2 f2f3 	udiv	r2, r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]
    break;
 800069a:	e003      	b.n	80006a4 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a23      	ldr	r2, [pc, #140]	; (800072c <RCC_GetClocksFreq+0x1e8>)
 80006a0:	601a      	str	r2, [r3, #0]
    break;
 80006a2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006ac:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80006ae:	6a3b      	ldr	r3, [r7, #32]
 80006b0:	091b      	lsrs	r3, r3, #4
 80006b2:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006b4:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <RCC_GetClocksFreq+0x1f0>)
 80006b6:	6a3b      	ldr	r3, [r7, #32]
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	40da      	lsrs	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80006d4:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 80006d6:	6a3b      	ldr	r3, [r7, #32]
 80006d8:	0a9b      	lsrs	r3, r3, #10
 80006da:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006dc:	4a15      	ldr	r2, [pc, #84]	; (8000734 <RCC_GetClocksFreq+0x1f0>)
 80006de:	6a3b      	ldr	r3, [r7, #32]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	40da      	lsrs	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <RCC_GetClocksFreq+0x1e4>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80006fc:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	0b5b      	lsrs	r3, r3, #13
 8000702:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <RCC_GetClocksFreq+0x1f0>)
 8000706:	6a3b      	ldr	r3, [r7, #32]
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	40da      	lsrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	60da      	str	r2, [r3, #12]
}
 800071c:	bf00      	nop
 800071e:	372c      	adds	r7, #44	; 0x2c
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	40023800 	.word	0x40023800
 800072c:	00f42400 	.word	0x00f42400
 8000730:	007a1200 	.word	0x007a1200
 8000734:	20000000 	.word	0x20000000

08000738 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <RCC_AHB1PeriphClockCmd+0x3c>)
 800074c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800074e:	4909      	ldr	r1, [pc, #36]	; (8000774 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4313      	orrs	r3, r2
 8000754:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000756:	e006      	b.n	8000766 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <RCC_AHB1PeriphClockCmd+0x3c>)
 800075a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	43db      	mvns	r3, r3
 8000760:	4904      	ldr	r1, [pc, #16]	; (8000774 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000762:	4013      	ands	r3, r2
 8000764:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d006      	beq.n	8000798 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <RCC_APB1PeriphClockCmd+0x3c>)
 800078c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800078e:	4909      	ldr	r1, [pc, #36]	; (80007b4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4313      	orrs	r3, r2
 8000794:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000796:	e006      	b.n	80007a6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <RCC_APB1PeriphClockCmd+0x3c>)
 800079a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	43db      	mvns	r3, r3
 80007a0:	4904      	ldr	r1, [pc, #16]	; (80007b4 <RCC_APB1PeriphClockCmd+0x3c>)
 80007a2:	4013      	ands	r3, r2
 80007a4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <RCC_APB2PeriphClockCmd+0x3c>)
 80007cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007ce:	4909      	ldr	r1, [pc, #36]	; (80007f4 <RCC_APB2PeriphClockCmd+0x3c>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007d6:	e006      	b.n	80007e6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <RCC_APB2PeriphClockCmd+0x3c>)
 80007da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	43db      	mvns	r3, r3
 80007e0:	4904      	ldr	r1, [pc, #16]	; (80007f4 <RCC_APB2PeriphClockCmd+0x3c>)
 80007e2:	4013      	ands	r3, r2
 80007e4:	644b      	str	r3, [r1, #68]	; 0x44
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	460a      	mov	r2, r1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	f003 0303 	and.w	r3, r3, #3
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	220f      	movs	r2, #15
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800081c:	4a16      	ldr	r2, [pc, #88]	; (8000878 <SYSCFG_EXTILineConfig+0x80>)
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	089b      	lsrs	r3, r3, #2
 8000822:	b2db      	uxtb	r3, r3
 8000824:	3302      	adds	r3, #2
 8000826:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	43db      	mvns	r3, r3
 800082e:	4812      	ldr	r0, [pc, #72]	; (8000878 <SYSCFG_EXTILineConfig+0x80>)
 8000830:	79b9      	ldrb	r1, [r7, #6]
 8000832:	0889      	lsrs	r1, r1, #2
 8000834:	b2c9      	uxtb	r1, r1
 8000836:	401a      	ands	r2, r3
 8000838:	1c8b      	adds	r3, r1, #2
 800083a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <SYSCFG_EXTILineConfig+0x80>)
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	3302      	adds	r3, #2
 8000848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084c:	79f9      	ldrb	r1, [r7, #7]
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	f003 0303 	and.w	r3, r3, #3
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <SYSCFG_EXTILineConfig+0x80>)
 800085c:	79b9      	ldrb	r1, [r7, #6]
 800085e:	0889      	lsrs	r1, r1, #2
 8000860:	b2c9      	uxtb	r1, r1
 8000862:	431a      	orrs	r2, r3
 8000864:	1c8b      	adds	r3, r1, #2
 8000866:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40013800 	.word	0x40013800

0800087c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	8a1b      	ldrh	r3, [r3, #16]
 800089a:	b29b      	uxth	r3, r3
 800089c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	88db      	ldrh	r3, [r3, #6]
 80008aa:	461a      	mov	r2, r3
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	4313      	orrs	r3, r2
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80008b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	899b      	ldrh	r3, [r3, #12]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80008c8:	f023 030c 	bic.w	r3, r3, #12
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	889a      	ldrh	r2, [r3, #4]
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	891b      	ldrh	r3, [r3, #8]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008de:	4313      	orrs	r3, r2
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	461a      	mov	r2, r3
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	4313      	orrs	r3, r2
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	8a9b      	ldrh	r3, [r3, #20]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000900:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	899b      	ldrh	r3, [r3, #12]
 8000906:	461a      	mov	r2, r3
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	4313      	orrs	r3, r2
 800090c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	b29a      	uxth	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fe12 	bl	8000544 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a30      	ldr	r2, [pc, #192]	; (80009e4 <USART_Init+0x168>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d003      	beq.n	8000930 <USART_Init+0xb4>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a2f      	ldr	r2, [pc, #188]	; (80009e8 <USART_Init+0x16c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d102      	bne.n	8000936 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	623b      	str	r3, [r7, #32]
 8000934:	e001      	b.n	800093a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	899b      	ldrh	r3, [r3, #12]
 800093e:	b29b      	uxth	r3, r3
 8000940:	b21b      	sxth	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	da0c      	bge.n	8000960 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000946:	6a3a      	ldr	r2, [r7, #32]
 8000948:	4613      	mov	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	009a      	lsls	r2, r3, #2
 8000950:	441a      	add	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	fbb2 f3f3 	udiv	r3, r2, r3
 800095c:	61fb      	str	r3, [r7, #28]
 800095e:	e00b      	b.n	8000978 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000960:	6a3a      	ldr	r2, [r7, #32]
 8000962:	4613      	mov	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	009a      	lsls	r2, r3, #2
 800096a:	441a      	add	r2, r3
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <USART_Init+0x170>)
 800097c:	fba2 2303 	umull	r2, r3, r2, r3
 8000980:	095b      	lsrs	r3, r3, #5
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	091b      	lsrs	r3, r3, #4
 800098a:	2264      	movs	r2, #100	; 0x64
 800098c:	fb02 f303 	mul.w	r3, r2, r3
 8000990:	69fa      	ldr	r2, [r7, #28]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	899b      	ldrh	r3, [r3, #12]
 800099a:	b29b      	uxth	r3, r3
 800099c:	b21b      	sxth	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da0c      	bge.n	80009bc <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	3332      	adds	r3, #50	; 0x32
 80009a8:	4a10      	ldr	r2, [pc, #64]	; (80009ec <USART_Init+0x170>)
 80009aa:	fba2 2303 	umull	r2, r3, r2, r3
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	f003 0307 	and.w	r3, r3, #7
 80009b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009b6:	4313      	orrs	r3, r2
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
 80009ba:	e00b      	b.n	80009d4 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	3332      	adds	r3, #50	; 0x32
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <USART_Init+0x170>)
 80009c4:	fba2 2303 	umull	r2, r3, r2, r3
 80009c8:	095b      	lsrs	r3, r3, #5
 80009ca:	f003 030f 	and.w	r3, r3, #15
 80009ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009d0:	4313      	orrs	r3, r2
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	811a      	strh	r2, [r3, #8]
}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40011000 	.word	0x40011000
 80009e8:	40011400 	.word	0x40011400
 80009ec:	51eb851f 	.word	0x51eb851f

080009f0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d008      	beq.n	8000a14 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	899b      	ldrh	r3, [r3, #12]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a12:	e007      	b.n	8000a24 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	899b      	ldrh	r3, [r3, #12]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	819a      	strh	r2, [r3, #12]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a3c:	887b      	ldrh	r3, [r7, #2]
 8000a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	809a      	strh	r2, [r3, #4]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	e001      	b.n	8000a7e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f103 0208 	add.w	r2, r3, #8
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f103 0208 	add.w	r2, r3, #8
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f103 0208 	add.w	r2, r3, #8
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b085      	sub	sp, #20
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	683a      	ldr	r2, [r7, #0]
 8000b10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	1c5a      	adds	r2, r3, #1
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b085      	sub	sp, #20
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b44:	d103      	bne.n	8000b4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e00c      	b.n	8000b68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3308      	adds	r3, #8
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e002      	b.n	8000b5c <vListInsert+0x2e>
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d2f6      	bcs.n	8000b56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6892      	ldr	r2, [r2, #8]
 8000bb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	6852      	ldr	r2, [r2, #4]
 8000bc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d103      	bne.n	8000bd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1e5a      	subs	r2, r3, #1
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d109      	bne.n	8000c1c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c0c:	f383 8811 	msr	BASEPRI, r3
 8000c10:	f3bf 8f6f 	isb	sy
 8000c14:	f3bf 8f4f 	dsb	sy
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	e7fe      	b.n	8000c1a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000c1c:	f001 fb16 	bl	800224c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c28:	68f9      	ldr	r1, [r7, #12]
 8000c2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c2c:	fb01 f303 	mul.w	r3, r1, r3
 8000c30:	441a      	add	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	68f9      	ldr	r1, [r7, #12]
 8000c50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c52:	fb01 f303 	mul.w	r3, r1, r3
 8000c56:	441a      	add	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	22ff      	movs	r2, #255	; 0xff
 8000c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	22ff      	movs	r2, #255	; 0xff
 8000c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d109      	bne.n	8000c86 <xQueueGenericReset+0x92>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00f      	beq.n	8000c9a <xQueueGenericReset+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3310      	adds	r3, #16
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fe8c 	bl	800199c <xTaskRemoveFromEventList>
 8000c84:	e009      	b.n	8000c9a <xQueueGenericReset+0xa6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3310      	adds	r3, #16
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fefe 	bl	8000a8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3324      	adds	r3, #36	; 0x24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fef9 	bl	8000a8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000c9a:	f001 fb05 	bl	80022a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d109      	bne.n	8000cd0 <xQueueGenericCreate+0x28>
 8000cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc0:	f383 8811 	msr	BASEPRI, r3
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	f3bf 8f4f 	dsb	sy
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	e7fe      	b.n	8000cce <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	fb02 f303 	mul.w	r3, r2, r3
 8000cd8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3350      	adds	r3, #80	; 0x50
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fbd6 	bl	8002490 <pvPortMalloc>
 8000ce4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d00d      	beq.n	8000d08 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3350      	adds	r3, #80	; 0x50
 8000cf4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f000 f805 	bl	8000d12 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000d08:	69bb      	ldr	r3, [r7, #24]
	}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d103      	bne.n	8000d2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e002      	b.n	8000d34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d40:	2101      	movs	r1, #1
 8000d42:	69b8      	ldr	r0, [r7, #24]
 8000d44:	f7ff ff56 	bl	8000bf4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	78fa      	ldrb	r2, [r7, #3]
 8000d4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	68f9      	ldr	r1, [r7, #12]
 8000d56:	2073      	movs	r0, #115	; 0x73
 8000d58:	f002 fbea 	bl	8003530 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d109      	bne.n	8000d88 <xQueueCreateCountingSemaphore+0x24>
 8000d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d78:	f383 8811 	msr	BASEPRI, r3
 8000d7c:	f3bf 8f6f 	isb	sy
 8000d80:	f3bf 8f4f 	dsb	sy
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	e7fe      	b.n	8000d86 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d909      	bls.n	8000da4 <xQueueCreateCountingSemaphore+0x40>
 8000d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d94:	f383 8811 	msr	BASEPRI, r3
 8000d98:	f3bf 8f6f 	isb	sy
 8000d9c:	f3bf 8f4f 	dsb	sy
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	e7fe      	b.n	8000da2 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8000da4:	2202      	movs	r2, #2
 8000da6:	2100      	movs	r1, #0
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff7d 	bl	8000ca8 <xQueueGenericCreate>
 8000dae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8000dbc:	697b      	ldr	r3, [r7, #20]
	}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b08e      	sub	sp, #56	; 0x38
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8000dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d109      	bne.n	8000dee <xQueueGiveFromISR+0x28>
 8000dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dde:	f383 8811 	msr	BASEPRI, r3
 8000de2:	f3bf 8f6f 	isb	sy
 8000de6:	f3bf 8f4f 	dsb	sy
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	e7fe      	b.n	8000dec <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d009      	beq.n	8000e0a <xQueueGiveFromISR+0x44>
 8000df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dfa:	f383 8811 	msr	BASEPRI, r3
 8000dfe:	f3bf 8f6f 	isb	sy
 8000e02:	f3bf 8f4f 	dsb	sy
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	e7fe      	b.n	8000e08 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d103      	bne.n	8000e1a <xQueueGiveFromISR+0x54>
 8000e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <xQueueGiveFromISR+0x58>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <xQueueGiveFromISR+0x5a>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d109      	bne.n	8000e38 <xQueueGiveFromISR+0x72>
 8000e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e28:	f383 8811 	msr	BASEPRI, r3
 8000e2c:	f3bf 8f6f 	isb	sy
 8000e30:	f3bf 8f4f 	dsb	sy
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	e7fe      	b.n	8000e36 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000e38:	f001 faec 	bl	8002414 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000e3c:	f3ef 8211 	mrs	r2, BASEPRI
 8000e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e44:	f383 8811 	msr	BASEPRI, r3
 8000e48:	f3bf 8f6f 	isb	sy
 8000e4c:	f3bf 8f4f 	dsb	sy
 8000e50:	617a      	str	r2, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000e54:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d235      	bcs.n	8000ed4 <xQueueGiveFromISR+0x10e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 f8ef 	bl	8004058 <SEGGER_SYSVIEW_ShrinkId>
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2060      	movs	r0, #96	; 0x60
 8000e82:	f002 fafb 	bl	800347c <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000e8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e96:	d112      	bne.n	8000ebe <xQueueGiveFromISR+0xf8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d016      	beq.n	8000ece <xQueueGiveFromISR+0x108>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea2:	3324      	adds	r3, #36	; 0x24
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fd79 	bl	800199c <xTaskRemoveFromEventList>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00e      	beq.n	8000ece <xQueueGiveFromISR+0x108>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00b      	beq.n	8000ece <xQueueGiveFromISR+0x108>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e007      	b.n	8000ece <xQueueGiveFromISR+0x108>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	b25a      	sxtb	r2, r3
 8000ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ed2:	e00b      	b.n	8000eec <xQueueGiveFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 f8be 	bl	8004058 <SEGGER_SYSVIEW_ShrinkId>
 8000edc:	4601      	mov	r1, r0
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2060      	movs	r0, #96	; 0x60
 8000ee4:	f002 faca 	bl	800347c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	637b      	str	r3, [r7, #52]	; 0x34
 8000eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eee:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3738      	adds	r7, #56	; 0x38
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08f      	sub	sp, #60	; 0x3c
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d109      	bne.n	8000f30 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8000f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f20:	f383 8811 	msr	BASEPRI, r3
 8000f24:	f3bf 8f6f 	isb	sy
 8000f28:	f3bf 8f4f 	dsb	sy
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	e7fe      	b.n	8000f2e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d009      	beq.n	8000f4c <xQueueSemaphoreTake+0x4c>
 8000f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f3c:	f383 8811 	msr	BASEPRI, r3
 8000f40:	f3bf 8f6f 	isb	sy
 8000f44:	f3bf 8f4f 	dsb	sy
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e7fe      	b.n	8000f4a <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000f4c:	f001 f97e 	bl	800224c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f54:	623b      	str	r3, [r7, #32]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d02b      	beq.n	8000fb4 <xQueueSemaphoreTake+0xb4>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 f87a 	bl	8004058 <SEGGER_SYSVIEW_ShrinkId>
 8000f64:	4604      	mov	r4, r0
 8000f66:	2000      	movs	r0, #0
 8000f68:	f003 f876 	bl	8004058 <SEGGER_SYSVIEW_ShrinkId>
 8000f6c:	4601      	mov	r1, r0
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	4613      	mov	r3, r2
 8000f76:	460a      	mov	r2, r1
 8000f78:	4621      	mov	r1, r4
 8000f7a:	205c      	movs	r0, #92	; 0x5c
 8000f7c:	f002 fb4e 	bl	800361c <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d104      	bne.n	8000f9a <xQueueSemaphoreTake+0x9a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000f90:	f000 ffaa 	bl	8001ee8 <pvTaskIncrementMutexHeldCount>
 8000f94:	4602      	mov	r2, r0
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d004      	beq.n	8000fac <xQueueSemaphoreTake+0xac>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	3310      	adds	r3, #16
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fcf8 	bl	800199c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000fac:	f001 f97c 	bl	80022a8 <vPortExitCritical>
				return pdPASS;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e0ba      	b.n	800112a <xQueueSemaphoreTake+0x22a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d122      	bne.n	8001000 <xQueueSemaphoreTake+0x100>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8000fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d009      	beq.n	8000fd4 <xQueueSemaphoreTake+0xd4>
 8000fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc4:	f383 8811 	msr	BASEPRI, r3
 8000fc8:	f3bf 8f6f 	isb	sy
 8000fcc:	f3bf 8f4f 	dsb	sy
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	e7fe      	b.n	8000fd2 <xQueueSemaphoreTake+0xd2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8000fd4:	f001 f968 	bl	80022a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f003 f83c 	bl	8004058 <SEGGER_SYSVIEW_ShrinkId>
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f003 f838 	bl	8004058 <SEGGER_SYSVIEW_ShrinkId>
 8000fe8:	4601      	mov	r1, r0
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	205c      	movs	r0, #92	; 0x5c
 8000ff8:	f002 fb10 	bl	800361c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e094      	b.n	800112a <xQueueSemaphoreTake+0x22a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <xQueueSemaphoreTake+0x114>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fd2c 	bl	8001a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001010:	2301      	movs	r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001014:	f001 f948 	bl	80022a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001018:	f000 faea 	bl	80015f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800101c:	f001 f916 	bl	800224c <vPortEnterCritical>
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001026:	b25b      	sxtb	r3, r3
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d103      	bne.n	8001036 <xQueueSemaphoreTake+0x136>
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800103c:	b25b      	sxtb	r3, r3
 800103e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001042:	d103      	bne.n	800104c <xQueueSemaphoreTake+0x14c>
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800104c:	f001 f92c 	bl	80022a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001050:	463a      	mov	r2, r7
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fd1b 	bl	8001a94 <xTaskCheckForTimeOut>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d132      	bne.n	80010ca <xQueueSemaphoreTake+0x1ca>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001066:	f000 f8d1 	bl	800120c <prvIsQueueEmpty>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d026      	beq.n	80010be <xQueueSemaphoreTake+0x1be>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d109      	bne.n	800108c <xQueueSemaphoreTake+0x18c>
					{
						taskENTER_CRITICAL();
 8001078:	f001 f8e8 	bl	800224c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fe21 	bl	8001cc8 <xTaskPriorityInherit>
 8001086:	62b8      	str	r0, [r7, #40]	; 0x28
						}
						taskEXIT_CRITICAL();
 8001088:	f001 f90e 	bl	80022a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	3324      	adds	r3, #36	; 0x24
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fc5d 	bl	8001954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800109a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800109c:	f000 f864 	bl	8001168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80010a0:	f000 fab4 	bl	800160c <xTaskResumeAll>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f47f af50 	bne.w	8000f4c <xQueueSemaphoreTake+0x4c>
				{
					portYIELD_WITHIN_API();
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <xQueueSemaphoreTake+0x234>)
 80010ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	f3bf 8f4f 	dsb	sy
 80010b8:	f3bf 8f6f 	isb	sy
 80010bc:	e746      	b.n	8000f4c <xQueueSemaphoreTake+0x4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80010be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010c0:	f000 f852 	bl	8001168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80010c4:	f000 faa2 	bl	800160c <xTaskResumeAll>
 80010c8:	e740      	b.n	8000f4c <xQueueSemaphoreTake+0x4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80010ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010cc:	f000 f84c 	bl	8001168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80010d0:	f000 fa9c 	bl	800160c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010d6:	f000 f899 	bl	800120c <prvIsQueueEmpty>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f43f af35 	beq.w	8000f4c <xQueueSemaphoreTake+0x4c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80010e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00d      	beq.n	8001104 <xQueueSemaphoreTake+0x204>
					{
						taskENTER_CRITICAL();
 80010e8:	f001 f8b0 	bl	800224c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80010ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010ee:	f000 f823 	bl	8001138 <prvGetDisinheritPriorityAfterTimeout>
 80010f2:	61f8      	str	r0, [r7, #28]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	69f9      	ldr	r1, [r7, #28]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fe5e 	bl	8001dbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001100:	f001 f8d2 	bl	80022a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	4618      	mov	r0, r3
 8001108:	f002 ffa6 	bl	8004058 <SEGGER_SYSVIEW_ShrinkId>
 800110c:	4604      	mov	r4, r0
 800110e:	2000      	movs	r0, #0
 8001110:	f002 ffa2 	bl	8004058 <SEGGER_SYSVIEW_ShrinkId>
 8001114:	4601      	mov	r1, r0
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4613      	mov	r3, r2
 800111e:	460a      	mov	r2, r1
 8001120:	4621      	mov	r1, r4
 8001122:	205c      	movs	r0, #92	; 0x5c
 8001124:	f002 fa7a 	bl	800361c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8001128:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800112a:	4618      	mov	r0, r3
 800112c:	3734      	adds	r7, #52	; 0x34
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}
 8001132:	bf00      	nop
 8001134:	e000ed04 	.word	0xe000ed04

08001138 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1c3 0305 	rsb	r3, r3, #5
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e001      	b.n	800115a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800115a:	68fb      	ldr	r3, [r7, #12]
	}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001170:	f001 f86c 	bl	800224c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800117a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800117c:	e011      	b.n	80011a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	2b00      	cmp	r3, #0
 8001184:	d012      	beq.n	80011ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3324      	adds	r3, #36	; 0x24
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fc06 	bl	800199c <xTaskRemoveFromEventList>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001196:	f000 fcdd 	bl	8001b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	3b01      	subs	r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	dce9      	bgt.n	800117e <prvUnlockQueue+0x16>
 80011aa:	e000      	b.n	80011ae <prvUnlockQueue+0x46>
					break;
 80011ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	22ff      	movs	r2, #255	; 0xff
 80011b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80011b6:	f001 f877 	bl	80022a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80011ba:	f001 f847 	bl	800224c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80011c6:	e011      	b.n	80011ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d012      	beq.n	80011f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3310      	adds	r3, #16
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 fbe1 	bl	800199c <xTaskRemoveFromEventList>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80011e0:	f000 fcb8 	bl	8001b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80011ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	dce9      	bgt.n	80011c8 <prvUnlockQueue+0x60>
 80011f4:	e000      	b.n	80011f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80011f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	22ff      	movs	r2, #255	; 0xff
 80011fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001200:	f001 f852 	bl	80022a8 <vPortExitCritical>
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001214:	f001 f81a 	bl	800224c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001220:	2301      	movs	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e001      	b.n	800122a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800122a:	f001 f83d 	bl	80022a8 <vPortExitCritical>

	return xReturn;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af04      	add	r7, sp, #16
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	4613      	mov	r3, r2
 8001246:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f001 f91f 	bl	8002490 <pvPortMalloc>
 8001252:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00e      	beq.n	8001278 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800125a:	2058      	movs	r0, #88	; 0x58
 800125c:	f001 f918 	bl	8002490 <pvPortMalloc>
 8001260:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	631a      	str	r2, [r3, #48]	; 0x30
 800126e:	e005      	b.n	800127c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001270:	6978      	ldr	r0, [r7, #20]
 8001272:	f001 f9d5 	bl	8002620 <vPortFree>
 8001276:	e001      	b.n	800127c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d013      	beq.n	80012aa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001282:	88fa      	ldrh	r2, [r7, #6]
 8001284:	2300      	movs	r3, #0
 8001286:	9303      	str	r3, [sp, #12]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 f80e 	bl	80012ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800129e:	69f8      	ldr	r0, [r7, #28]
 80012a0:	f000 f89a 	bl	80013d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e002      	b.n	80012b0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80012b0:	69bb      	ldr	r3, [r7, #24]
	}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b088      	sub	sp, #32
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80012c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	461a      	mov	r2, r3
 80012d2:	21a5      	movs	r1, #165	; 0xa5
 80012d4:	f003 fc5e 	bl	8004b94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80012d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012e2:	3b01      	subs	r3, #1
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	f023 0307 	bic.w	r3, r3, #7
 80012f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d009      	beq.n	8001310 <prvInitialiseNewTask+0x56>
 80012fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001300:	f383 8811 	msr	BASEPRI, r3
 8001304:	f3bf 8f6f 	isb	sy
 8001308:	f3bf 8f4f 	dsb	sy
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e7fe      	b.n	800130e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01f      	beq.n	8001356 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	e012      	b.n	8001342 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	4413      	add	r3, r2
 8001322:	7819      	ldrb	r1, [r3, #0]
 8001324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	4413      	add	r3, r2
 800132a:	3334      	adds	r3, #52	; 0x34
 800132c:	460a      	mov	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	3301      	adds	r3, #1
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	2b09      	cmp	r3, #9
 8001346:	d9e9      	bls.n	800131c <prvInitialiseNewTask+0x62>
 8001348:	e000      	b.n	800134c <prvInitialiseNewTask+0x92>
			{
				break;
 800134a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800134c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134e:	2200      	movs	r2, #0
 8001350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001354:	e003      	b.n	800135e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800135e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001360:	2b04      	cmp	r3, #4
 8001362:	d901      	bls.n	8001368 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001364:	2304      	movs	r3, #4
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001372:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8001374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001376:	2200      	movs	r2, #0
 8001378:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800137a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137c:	3304      	adds	r3, #4
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fba4 	bl	8000acc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001386:	3318      	adds	r3, #24
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fb9f 	bl	8000acc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001392:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	f1c3 0205 	rsb	r2, r3, #5
 800139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80013a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a6:	2200      	movs	r2, #0
 80013a8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80013aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	68f9      	ldr	r1, [r7, #12]
 80013b6:	69b8      	ldr	r0, [r7, #24]
 80013b8:	f000 fe22 	bl	8002000 <pxPortInitialiseStack>
 80013bc:	4602      	mov	r2, r0
 80013be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80013c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af02      	add	r7, sp, #8
 80013de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80013e0:	f000 ff34 	bl	800224c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80013e4:	4b35      	ldr	r3, [pc, #212]	; (80014bc <prvAddNewTaskToReadyList+0xe4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a34      	ldr	r2, [pc, #208]	; (80014bc <prvAddNewTaskToReadyList+0xe4>)
 80013ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <prvAddNewTaskToReadyList+0xe8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80013f6:	4a32      	ldr	r2, [pc, #200]	; (80014c0 <prvAddNewTaskToReadyList+0xe8>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <prvAddNewTaskToReadyList+0xe4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d110      	bne.n	8001426 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001404:	f000 fbc4 	bl	8001b90 <prvInitialiseTaskLists>
 8001408:	e00d      	b.n	8001426 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <prvAddNewTaskToReadyList+0xec>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d109      	bne.n	8001426 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001412:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <prvAddNewTaskToReadyList+0xe8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	429a      	cmp	r2, r3
 800141e:	d802      	bhi.n	8001426 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001420:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <prvAddNewTaskToReadyList+0xe8>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001426:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <prvAddNewTaskToReadyList+0xf0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <prvAddNewTaskToReadyList+0xf0>)
 800142e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <prvAddNewTaskToReadyList+0xf0>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <prvAddNewTaskToReadyList+0x94>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fcdd 	bl	8003e00 <SEGGER_SYSVIEW_OnTaskCreate>
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	461d      	mov	r5, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	461c      	mov	r4, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	1ae3      	subs	r3, r4, r3
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	462b      	mov	r3, r5
 8001468:	f001 faa4 	bl	80029b4 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fd4e 	bl	8003f10 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	2201      	movs	r2, #1
 800147a:	409a      	lsls	r2, r3
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <prvAddNewTaskToReadyList+0xf4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4313      	orrs	r3, r2
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <prvAddNewTaskToReadyList+0xf4>)
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <prvAddNewTaskToReadyList+0xf8>)
 8001494:	441a      	add	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3304      	adds	r3, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f7ff fb22 	bl	8000ae6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80014a2:	f000 ff01 	bl	80022a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <prvAddNewTaskToReadyList+0xec>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <prvAddNewTaskToReadyList+0xda>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <prvAddNewTaskToReadyList+0xe8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bdb0      	pop	{r4, r5, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000011c 	.word	0x2000011c
 80014c0:	20000044 	.word	0x20000044
 80014c4:	20000128 	.word	0x20000128
 80014c8:	20000138 	.word	0x20000138
 80014cc:	20000124 	.word	0x20000124
 80014d0:	20000048 	.word	0x20000048

080014d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01a      	beq.n	800151c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <vTaskDelay+0x68>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <vTaskDelay+0x2e>
 80014ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f2:	f383 8811 	msr	BASEPRI, r3
 80014f6:	f3bf 8f6f 	isb	sy
 80014fa:	f3bf 8f4f 	dsb	sy
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	e7fe      	b.n	8001500 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001502:	f000 f875 	bl	80015f0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	2023      	movs	r0, #35	; 0x23
 800150a:	f001 ff7b 	bl	8003404 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800150e:	2100      	movs	r1, #0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fcfd 	bl	8001f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001516:	f000 f879 	bl	800160c <xTaskResumeAll>
 800151a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d107      	bne.n	8001532 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <vTaskDelay+0x6c>)
 8001524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f3bf 8f4f 	dsb	sy
 800152e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000144 	.word	0x20000144
 8001540:	e000ed04 	.word	0xe000ed04

08001544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <vTaskStartScheduler+0x90>)
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	2300      	movs	r3, #0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	2282      	movs	r2, #130	; 0x82
 8001556:	4920      	ldr	r1, [pc, #128]	; (80015d8 <vTaskStartScheduler+0x94>)
 8001558:	4820      	ldr	r0, [pc, #128]	; (80015dc <vTaskStartScheduler+0x98>)
 800155a:	f7ff fe6d 	bl	8001238 <xTaskCreate>
 800155e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d123      	bne.n	80015ae <vTaskStartScheduler+0x6a>
 8001566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800156a:	f383 8811 	msr	BASEPRI, r3
 800156e:	f3bf 8f6f 	isb	sy
 8001572:	f3bf 8f4f 	dsb	sy
 8001576:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <vTaskStartScheduler+0x9c>)
 800157a:	f04f 32ff 	mov.w	r2, #4294967295
 800157e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <vTaskStartScheduler+0xa0>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <vTaskStartScheduler+0xa4>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <vTaskStartScheduler+0xa8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <vTaskStartScheduler+0x90>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d102      	bne.n	800159e <vTaskStartScheduler+0x5a>
 8001598:	f002 fc16 	bl	8003dc8 <SEGGER_SYSVIEW_OnIdle>
 800159c:	e004      	b.n	80015a8 <vTaskStartScheduler+0x64>
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <vTaskStartScheduler+0xa8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fc70 	bl	8003e88 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80015a8:	f000 fdb2 	bl	8002110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80015ac:	e00d      	b.n	80015ca <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d109      	bne.n	80015ca <vTaskStartScheduler+0x86>
 80015b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ba:	f383 8811 	msr	BASEPRI, r3
 80015be:	f3bf 8f6f 	isb	sy
 80015c2:	f3bf 8f4f 	dsb	sy
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	e7fe      	b.n	80015c8 <vTaskStartScheduler+0x84>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000140 	.word	0x20000140
 80015d8:	08004bbc 	.word	0x08004bbc
 80015dc:	08001b6d 	.word	0x08001b6d
 80015e0:	2000013c 	.word	0x2000013c
 80015e4:	20000128 	.word	0x20000128
 80015e8:	20000120 	.word	0x20000120
 80015ec:	20000044 	.word	0x20000044

080015f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <vTaskSuspendAll+0x18>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a03      	ldr	r2, [pc, #12]	; (8001608 <vTaskSuspendAll+0x18>)
 80015fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	20000144 	.word	0x20000144

0800160c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800161a:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <xTaskResumeAll+0x104>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <xTaskResumeAll+0x2a>
 8001622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001626:	f383 8811 	msr	BASEPRI, r3
 800162a:	f3bf 8f6f 	isb	sy
 800162e:	f3bf 8f4f 	dsb	sy
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	e7fe      	b.n	8001634 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001636:	f000 fe09 	bl	800224c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800163a:	4b35      	ldr	r3, [pc, #212]	; (8001710 <xTaskResumeAll+0x104>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3b01      	subs	r3, #1
 8001640:	4a33      	ldr	r2, [pc, #204]	; (8001710 <xTaskResumeAll+0x104>)
 8001642:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001644:	4b32      	ldr	r3, [pc, #200]	; (8001710 <xTaskResumeAll+0x104>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d159      	bne.n	8001700 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800164c:	4b31      	ldr	r3, [pc, #196]	; (8001714 <xTaskResumeAll+0x108>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d055      	beq.n	8001700 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001654:	e032      	b.n	80016bc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <xTaskResumeAll+0x10c>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3318      	adds	r3, #24
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fa9c 	bl	8000ba0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3304      	adds	r3, #4
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fa97 	bl	8000ba0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4618      	mov	r0, r3
 8001676:	f002 fc4b 	bl	8003f10 <SEGGER_SYSVIEW_OnTaskStartReady>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	2201      	movs	r2, #1
 8001680:	409a      	lsls	r2, r3
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <xTaskResumeAll+0x110>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	4a24      	ldr	r2, [pc, #144]	; (800171c <xTaskResumeAll+0x110>)
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <xTaskResumeAll+0x114>)
 800169a:	441a      	add	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3304      	adds	r3, #4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f7ff fa1f 	bl	8000ae6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <xTaskResumeAll+0x118>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d302      	bcc.n	80016bc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <xTaskResumeAll+0x11c>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <xTaskResumeAll+0x10c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1c8      	bne.n	8001656 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80016ca:	f000 fadd 	bl	8001c88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <xTaskResumeAll+0x120>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d010      	beq.n	80016fc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80016da:	f000 f83b 	bl	8001754 <xTaskIncrementTick>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <xTaskResumeAll+0x11c>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f1      	bne.n	80016da <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <xTaskResumeAll+0x120>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <xTaskResumeAll+0x11c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001700:	f000 fdd2 	bl	80022a8 <vPortExitCritical>

	return xAlreadyYielded;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000144 	.word	0x20000144
 8001714:	2000011c 	.word	0x2000011c
 8001718:	200000dc 	.word	0x200000dc
 800171c:	20000124 	.word	0x20000124
 8001720:	20000048 	.word	0x20000048
 8001724:	20000044 	.word	0x20000044
 8001728:	20000130 	.word	0x20000130
 800172c:	2000012c 	.word	0x2000012c

08001730 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001736:	f000 fe6d 	bl	8002414 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <xTaskGetTickCountFromISR+0x20>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001744:	683b      	ldr	r3, [r7, #0]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000120 	.word	0x20000120

08001754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800175e:	4b40      	ldr	r3, [pc, #256]	; (8001860 <xTaskIncrementTick+0x10c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d172      	bne.n	800184c <xTaskIncrementTick+0xf8>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <xTaskIncrementTick+0x110>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800176e:	4a3d      	ldr	r2, [pc, #244]	; (8001864 <xTaskIncrementTick+0x110>)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d11f      	bne.n	80017ba <xTaskIncrementTick+0x66>
		{
			taskSWITCH_DELAYED_LISTS();
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <xTaskIncrementTick+0x114>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d009      	beq.n	8001798 <xTaskIncrementTick+0x44>
 8001784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001788:	f383 8811 	msr	BASEPRI, r3
 800178c:	f3bf 8f6f 	isb	sy
 8001790:	f3bf 8f4f 	dsb	sy
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	e7fe      	b.n	8001796 <xTaskIncrementTick+0x42>
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <xTaskIncrementTick+0x114>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <xTaskIncrementTick+0x118>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a31      	ldr	r2, [pc, #196]	; (8001868 <xTaskIncrementTick+0x114>)
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4a31      	ldr	r2, [pc, #196]	; (800186c <xTaskIncrementTick+0x118>)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <xTaskIncrementTick+0x11c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a2f      	ldr	r2, [pc, #188]	; (8001870 <xTaskIncrementTick+0x11c>)
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	f000 fa67 	bl	8001c88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <xTaskIncrementTick+0x120>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d348      	bcc.n	8001856 <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <xTaskIncrementTick+0x114>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d104      	bne.n	80017d8 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017ce:	4b29      	ldr	r3, [pc, #164]	; (8001874 <xTaskIncrementTick+0x120>)
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	601a      	str	r2, [r3, #0]
					break;
 80017d6:	e03e      	b.n	8001856 <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017d8:	4b23      	ldr	r3, [pc, #140]	; (8001868 <xTaskIncrementTick+0x114>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d203      	bcs.n	80017f8 <xTaskIncrementTick+0xa4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80017f0:	4a20      	ldr	r2, [pc, #128]	; (8001874 <xTaskIncrementTick+0x120>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80017f6:	e02e      	b.n	8001856 <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	3304      	adds	r3, #4
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff f9cf 	bl	8000ba0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <xTaskIncrementTick+0xc0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3318      	adds	r3, #24
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff f9c6 	bl	8000ba0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4618      	mov	r0, r3
 8001818:	f002 fb7a 	bl	8003f10 <SEGGER_SYSVIEW_OnTaskStartReady>
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	2201      	movs	r2, #1
 8001822:	409a      	lsls	r2, r3
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <xTaskIncrementTick+0x124>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4313      	orrs	r3, r2
 800182a:	4a13      	ldr	r2, [pc, #76]	; (8001878 <xTaskIncrementTick+0x124>)
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <xTaskIncrementTick+0x128>)
 800183c:	441a      	add	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3304      	adds	r3, #4
 8001842:	4619      	mov	r1, r3
 8001844:	4610      	mov	r0, r2
 8001846:	f7ff f94e 	bl	8000ae6 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800184a:	e7bb      	b.n	80017c4 <xTaskIncrementTick+0x70>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <xTaskIncrementTick+0x12c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <xTaskIncrementTick+0x12c>)
 8001854:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001856:	697b      	ldr	r3, [r7, #20]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000144 	.word	0x20000144
 8001864:	20000120 	.word	0x20000120
 8001868:	200000d4 	.word	0x200000d4
 800186c:	200000d8 	.word	0x200000d8
 8001870:	20000134 	.word	0x20000134
 8001874:	2000013c 	.word	0x2000013c
 8001878:	20000124 	.word	0x20000124
 800187c:	20000048 	.word	0x20000048
 8001880:	2000012c 	.word	0x2000012c

08001884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800188a:	4b2c      	ldr	r3, [pc, #176]	; (800193c <vTaskSwitchContext+0xb8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001892:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <vTaskSwitchContext+0xbc>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001898:	e04c      	b.n	8001934 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <vTaskSwitchContext+0xbc>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <vTaskSwitchContext+0xc0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80018ae:	7afb      	ldrb	r3, [r7, #11]
 80018b0:	f1c3 031f 	rsb	r3, r3, #31
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	4924      	ldr	r1, [pc, #144]	; (8001948 <vTaskSwitchContext+0xc4>)
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <vTaskSwitchContext+0x5a>
	__asm volatile
 80018ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ce:	f383 8811 	msr	BASEPRI, r3
 80018d2:	f3bf 8f6f 	isb	sy
 80018d6:	f3bf 8f4f 	dsb	sy
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	e7fe      	b.n	80018dc <vTaskSwitchContext+0x58>
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4a17      	ldr	r2, [pc, #92]	; (8001948 <vTaskSwitchContext+0xc4>)
 80018ea:	4413      	add	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	3308      	adds	r3, #8
 8001900:	429a      	cmp	r2, r3
 8001902:	d104      	bne.n	800190e <vTaskSwitchContext+0x8a>
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <vTaskSwitchContext+0xc8>)
 8001916:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <vTaskSwitchContext+0xc8>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <vTaskSwitchContext+0xcc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d102      	bne.n	800192a <vTaskSwitchContext+0xa6>
 8001924:	f002 fa50 	bl	8003dc8 <SEGGER_SYSVIEW_OnIdle>
}
 8001928:	e004      	b.n	8001934 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <vTaskSwitchContext+0xc8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f002 faaa 	bl	8003e88 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000144 	.word	0x20000144
 8001940:	20000130 	.word	0x20000130
 8001944:	20000124 	.word	0x20000124
 8001948:	20000048 	.word	0x20000048
 800194c:	20000044 	.word	0x20000044
 8001950:	20000140 	.word	0x20000140

08001954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <vTaskPlaceOnEventList+0x24>
 8001964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001968:	f383 8811 	msr	BASEPRI, r3
 800196c:	f3bf 8f6f 	isb	sy
 8001970:	f3bf 8f4f 	dsb	sy
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	e7fe      	b.n	8001976 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <vTaskPlaceOnEventList+0x44>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	3318      	adds	r3, #24
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff f8d4 	bl	8000b2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001986:	2101      	movs	r1, #1
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f000 fac1 	bl	8001f10 <prvAddCurrentTaskToDelayedList>
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000044 	.word	0x20000044

0800199c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <xTaskRemoveFromEventList+0x2a>
 80019b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b6:	f383 8811 	msr	BASEPRI, r3
 80019ba:	f3bf 8f6f 	isb	sy
 80019be:	f3bf 8f4f 	dsb	sy
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e7fe      	b.n	80019c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3318      	adds	r3, #24
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f8e8 	bl	8000ba0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <xTaskRemoveFromEventList+0xb4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d120      	bne.n	8001a1a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	3304      	adds	r3, #4
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f8df 	bl	8000ba0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fa93 	bl	8003f10 <SEGGER_SYSVIEW_OnTaskStartReady>
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	2201      	movs	r2, #1
 80019f0:	409a      	lsls	r2, r3
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <xTaskRemoveFromEventList+0xb8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	4a16      	ldr	r2, [pc, #88]	; (8001a54 <xTaskRemoveFromEventList+0xb8>)
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <xTaskRemoveFromEventList+0xbc>)
 8001a0a:	441a      	add	r2, r3
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f7ff f867 	bl	8000ae6 <vListInsertEnd>
 8001a18:	e005      	b.n	8001a26 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	3318      	adds	r3, #24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480e      	ldr	r0, [pc, #56]	; (8001a5c <xTaskRemoveFromEventList+0xc0>)
 8001a22:	f7ff f860 	bl	8000ae6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <xTaskRemoveFromEventList+0xc4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d905      	bls.n	8001a40 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001a34:	2301      	movs	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <xTaskRemoveFromEventList+0xc8>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e001      	b.n	8001a44 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001a44:	697b      	ldr	r3, [r7, #20]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000144 	.word	0x20000144
 8001a54:	20000124 	.word	0x20000124
 8001a58:	20000048 	.word	0x20000048
 8001a5c:	200000dc 	.word	0x200000dc
 8001a60:	20000044 	.word	0x20000044
 8001a64:	20000130 	.word	0x20000130

08001a68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <vTaskInternalSetTimeOutState+0x24>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <vTaskInternalSetTimeOutState+0x28>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	605a      	str	r2, [r3, #4]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	20000134 	.word	0x20000134
 8001a90:	20000120 	.word	0x20000120

08001a94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d109      	bne.n	8001ab8 <xTaskCheckForTimeOut+0x24>
 8001aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa8:	f383 8811 	msr	BASEPRI, r3
 8001aac:	f3bf 8f6f 	isb	sy
 8001ab0:	f3bf 8f4f 	dsb	sy
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	e7fe      	b.n	8001ab6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <xTaskCheckForTimeOut+0x3e>
 8001abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac2:	f383 8811 	msr	BASEPRI, r3
 8001ac6:	f3bf 8f6f 	isb	sy
 8001aca:	f3bf 8f4f 	dsb	sy
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e7fe      	b.n	8001ad0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001ad2:	f000 fbbb 	bl	800224c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <xTaskCheckForTimeOut+0xb8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aee:	d102      	bne.n	8001af6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	e023      	b.n	8001b3e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <xTaskCheckForTimeOut+0xbc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d007      	beq.n	8001b12 <xTaskCheckForTimeOut+0x7e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d302      	bcc.n	8001b12 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	e015      	b.n	8001b3e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d20b      	bcs.n	8001b34 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	1ad2      	subs	r2, r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff9d 	bl	8001a68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e004      	b.n	8001b3e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001b3e:	f000 fbb3 	bl	80022a8 <vPortExitCritical>

	return xReturn;
 8001b42:	69fb      	ldr	r3, [r7, #28]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000120 	.word	0x20000120
 8001b50:	20000134 	.word	0x20000134

08001b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <vTaskMissedYield+0x14>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	20000130 	.word	0x20000130

08001b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001b74:	f000 f84c 	bl	8001c10 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <prvIdleTask+0x20>)
 8001b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f3bf 8f4f 	dsb	sy
 8001b84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001b88:	e7f4      	b.n	8001b74 <prvIdleTask+0x8>
 8001b8a:	bf00      	nop
 8001b8c:	e000ed04 	.word	0xe000ed04

08001b90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	e00c      	b.n	8001bb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <prvInitialiseTaskLists+0x60>)
 8001ba8:	4413      	add	r3, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe ff6e 	bl	8000a8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d9ef      	bls.n	8001b9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <prvInitialiseTaskLists+0x64>)
 8001bbe:	f7fe ff65 	bl	8000a8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001bc2:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <prvInitialiseTaskLists+0x68>)
 8001bc4:	f7fe ff62 	bl	8000a8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <prvInitialiseTaskLists+0x6c>)
 8001bca:	f7fe ff5f 	bl	8000a8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001bce:	480c      	ldr	r0, [pc, #48]	; (8001c00 <prvInitialiseTaskLists+0x70>)
 8001bd0:	f7fe ff5c 	bl	8000a8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <prvInitialiseTaskLists+0x74>)
 8001bd6:	f7fe ff59 	bl	8000a8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <prvInitialiseTaskLists+0x78>)
 8001bdc:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <prvInitialiseTaskLists+0x64>)
 8001bde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <prvInitialiseTaskLists+0x7c>)
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <prvInitialiseTaskLists+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000048 	.word	0x20000048
 8001bf4:	200000ac 	.word	0x200000ac
 8001bf8:	200000c0 	.word	0x200000c0
 8001bfc:	200000dc 	.word	0x200000dc
 8001c00:	200000f0 	.word	0x200000f0
 8001c04:	20000108 	.word	0x20000108
 8001c08:	200000d4 	.word	0x200000d4
 8001c0c:	200000d8 	.word	0x200000d8

08001c10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c16:	e019      	b.n	8001c4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001c18:	f000 fb18 	bl	800224c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <prvCheckTasksWaitingTermination+0x4c>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe ffb9 	bl	8000ba0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <prvCheckTasksWaitingTermination+0x50>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <prvCheckTasksWaitingTermination+0x50>)
 8001c36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <prvCheckTasksWaitingTermination+0x54>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <prvCheckTasksWaitingTermination+0x54>)
 8001c40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001c42:	f000 fb31 	bl	80022a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f80e 	bl	8001c68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <prvCheckTasksWaitingTermination+0x54>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1e1      	bne.n	8001c18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200000f0 	.word	0x200000f0
 8001c60:	2000011c 	.word	0x2000011c
 8001c64:	20000104 	.word	0x20000104

08001c68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fcd3 	bl	8002620 <vPortFree>
			vPortFree( pxTCB );
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fcd0 	bl	8002620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <prvResetNextTaskUnblockTime+0x38>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d104      	bne.n	8001ca2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8001c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001ca0:	e008      	b.n	8001cb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <prvResetNextTaskUnblockTime+0x38>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	200000d4 	.word	0x200000d4
 8001cc4:	2000013c 	.word	0x2000013c

08001cc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d063      	beq.n	8001da6 <xTaskPriorityInherit+0xde>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce2:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <xTaskPriorityInherit+0xe8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d253      	bcs.n	8001d94 <xTaskPriorityInherit+0xcc>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db06      	blt.n	8001d02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cf4:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <xTaskPriorityInherit+0xe8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	f1c3 0205 	rsb	r2, r3, #5
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	6959      	ldr	r1, [r3, #20]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <xTaskPriorityInherit+0xec>)
 8001d14:	4413      	add	r3, r2
 8001d16:	4299      	cmp	r1, r3
 8001d18:	d12f      	bne.n	8001d7a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe ff3e 	bl	8000ba0 <uxListRemove>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10a      	bne.n	8001d40 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	2201      	movs	r2, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43da      	mvns	r2, r3
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <xTaskPriorityInherit+0xf0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <xTaskPriorityInherit+0xf0>)
 8001d3e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <xTaskPriorityInherit+0xe8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	2201      	movs	r2, #1
 8001d50:	409a      	lsls	r2, r3
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <xTaskPriorityInherit+0xf0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <xTaskPriorityInherit+0xf0>)
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <xTaskPriorityInherit+0xec>)
 8001d6a:	441a      	add	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f7fe feb7 	bl	8000ae6 <vListInsertEnd>
 8001d78:	e004      	b.n	8001d84 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <xTaskPriorityInherit+0xe8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4619      	mov	r1, r3
 8001d88:	2049      	movs	r0, #73	; 0x49
 8001d8a:	f001 fb3b 	bl	8003404 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e008      	b.n	8001da6 <xTaskPriorityInherit+0xde>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <xTaskPriorityInherit+0xe8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d201      	bcs.n	8001da6 <xTaskPriorityInherit+0xde>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8001da2:	2301      	movs	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001da6:	68fb      	ldr	r3, [r7, #12]
	}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000044 	.word	0x20000044
 8001db4:	20000048 	.word	0x20000048
 8001db8:	20000124 	.word	0x20000124

08001dbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d07e      	beq.n	8001ed2 <vTaskPriorityDisinheritAfterTimeout+0x116>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8001ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de0:	f383 8811 	msr	BASEPRI, r3
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	e7fe      	b.n	8001dee <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d902      	bls.n	8001e00 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	e002      	b.n	8001e06 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e04:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d060      	beq.n	8001ed2 <vTaskPriorityDisinheritAfterTimeout+0x116>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d15b      	bne.n	8001ed2 <vTaskPriorityDisinheritAfterTimeout+0x116>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <vTaskPriorityDisinheritAfterTimeout+0x120>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d109      	bne.n	8001e38 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8001e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e28:	f383 8811 	msr	BASEPRI, r3
 8001e2c:	f3bf 8f6f 	isb	sy
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	e7fe      	b.n	8001e36 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	204a      	movs	r0, #74	; 0x4a
 8001e3e:	f001 fae1 	bl	8003404 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db04      	blt.n	8001e60 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f1c3 0205 	rsb	r2, r3, #5
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6959      	ldr	r1, [r3, #20]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001e70:	4413      	add	r3, r2
 8001e72:	4299      	cmp	r1, r3
 8001e74:	d12d      	bne.n	8001ed2 <vTaskPriorityDisinheritAfterTimeout+0x116>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fe90 	bl	8000ba0 <uxListRemove>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10a      	bne.n	8001e9c <vTaskPriorityDisinheritAfterTimeout+0xe0>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43da      	mvns	r2, r3
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4013      	ands	r3, r2
 8001e98:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001e9a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 f836 	bl	8003f10 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001ec4:	441a      	add	r2, r3
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4610      	mov	r0, r2
 8001ece:	f7fe fe0a 	bl	8000ae6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001ed2:	bf00      	nop
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000044 	.word	0x20000044
 8001ee0:	20000048 	.word	0x20000048
 8001ee4:	20000124 	.word	0x20000124

08001ee8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001efa:	3201      	adds	r2, #1
 8001efc:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8001efe:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
	}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20000044 	.word	0x20000044

08001f10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3304      	adds	r3, #4
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fe3a 	bl	8000ba0 <uxListRemove>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10b      	bne.n	8001f4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001f32:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	2201      	movs	r2, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <prvAddCurrentTaskToDelayedList+0xdc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4013      	ands	r3, r2
 8001f46:	4a29      	ldr	r2, [pc, #164]	; (8001fec <prvAddCurrentTaskToDelayedList+0xdc>)
 8001f48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d110      	bne.n	8001f74 <prvAddCurrentTaskToDelayedList+0x64>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	211b      	movs	r1, #27
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 f81a 	bl	8003f98 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f64:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4820      	ldr	r0, [pc, #128]	; (8001ff0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001f6e:	f7fe fdba 	bl	8000ae6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f72:	e032      	b.n	8001fda <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d20f      	bcs.n	8001fac <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2104      	movs	r1, #4
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 f800 	bl	8003f98 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	f7fe fdc2 	bl	8000b2e <vListInsert>
}
 8001faa:	e016      	b.n	8001fda <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2104      	movs	r1, #4
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 fff0 	bl	8003f98 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	f7fe fdb2 	bl	8000b2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <prvAddCurrentTaskToDelayedList+0xec>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d202      	bcs.n	8001fda <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8001fd4:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <prvAddCurrentTaskToDelayedList+0xec>)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	6013      	str	r3, [r2, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000120 	.word	0x20000120
 8001fe8:	20000044 	.word	0x20000044
 8001fec:	20000124 	.word	0x20000124
 8001ff0:	20000108 	.word	0x20000108
 8001ff4:	200000d8 	.word	0x200000d8
 8001ff8:	200000d4 	.word	0x200000d4
 8001ffc:	2000013c 	.word	0x2000013c

08002000 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	3b04      	subs	r3, #4
 8002010:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3b04      	subs	r3, #4
 800201e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f023 0201 	bic.w	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3b04      	subs	r3, #4
 800202e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002030:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <pxPortInitialiseStack+0x64>)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3b14      	subs	r3, #20
 800203a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3b04      	subs	r3, #4
 8002046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f06f 0202 	mvn.w	r2, #2
 800204e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3b20      	subs	r3, #32
 8002054:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	08002069 	.word	0x08002069

08002068 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <prvTaskExitError+0x50>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207a:	d009      	beq.n	8002090 <prvTaskExitError+0x28>
 800207c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	e7fe      	b.n	800208e <prvTaskExitError+0x26>
 8002090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80020a2:	bf00      	nop
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0fc      	beq.n	80020a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000010 	.word	0x20000010
 80020bc:	00000000 	.word	0x00000000

080020c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <pxCurrentTCBConst2>)
 80020c2:	6819      	ldr	r1, [r3, #0]
 80020c4:	6808      	ldr	r0, [r1, #0]
 80020c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ca:	f380 8809 	msr	PSP, r0
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	f04f 0000 	mov.w	r0, #0
 80020d6:	f380 8811 	msr	BASEPRI, r0
 80020da:	4770      	bx	lr
 80020dc:	f3af 8000 	nop.w

080020e0 <pxCurrentTCBConst2>:
 80020e0:	20000044 	.word	0x20000044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop

080020e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80020e8:	4808      	ldr	r0, [pc, #32]	; (800210c <prvPortStartFirstTask+0x24>)
 80020ea:	6800      	ldr	r0, [r0, #0]
 80020ec:	6800      	ldr	r0, [r0, #0]
 80020ee:	f380 8808 	msr	MSP, r0
 80020f2:	f04f 0000 	mov.w	r0, #0
 80020f6:	f380 8814 	msr	CONTROL, r0
 80020fa:	b662      	cpsie	i
 80020fc:	b661      	cpsie	f
 80020fe:	f3bf 8f4f 	dsb	sy
 8002102:	f3bf 8f6f 	isb	sy
 8002106:	df00      	svc	0
 8002108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800210a:	bf00      	nop
 800210c:	e000ed08 	.word	0xe000ed08

08002110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002116:	4b44      	ldr	r3, [pc, #272]	; (8002228 <xPortStartScheduler+0x118>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a44      	ldr	r2, [pc, #272]	; (800222c <xPortStartScheduler+0x11c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d109      	bne.n	8002134 <xPortStartScheduler+0x24>
 8002120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002124:	f383 8811 	msr	BASEPRI, r3
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	f3bf 8f4f 	dsb	sy
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	e7fe      	b.n	8002132 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002134:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <xPortStartScheduler+0x118>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a3d      	ldr	r2, [pc, #244]	; (8002230 <xPortStartScheduler+0x120>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d109      	bne.n	8002152 <xPortStartScheduler+0x42>
 800213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002142:	f383 8811 	msr	BASEPRI, r3
 8002146:	f3bf 8f6f 	isb	sy
 800214a:	f3bf 8f4f 	dsb	sy
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e7fe      	b.n	8002150 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <xPortStartScheduler+0x124>)
 8002154:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	22ff      	movs	r2, #255	; 0xff
 8002162:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <xPortStartScheduler+0x128>)
 8002178:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <xPortStartScheduler+0x12c>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002180:	e009      	b.n	8002196 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002182:	4b2e      	ldr	r3, [pc, #184]	; (800223c <xPortStartScheduler+0x12c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3b01      	subs	r3, #1
 8002188:	4a2c      	ldr	r2, [pc, #176]	; (800223c <xPortStartScheduler+0x12c>)
 800218a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b80      	cmp	r3, #128	; 0x80
 80021a0:	d0ef      	beq.n	8002182 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80021a2:	4b26      	ldr	r3, [pc, #152]	; (800223c <xPortStartScheduler+0x12c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d009      	beq.n	80021c2 <xPortStartScheduler+0xb2>
 80021ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b2:	f383 8811 	msr	BASEPRI, r3
 80021b6:	f3bf 8f6f 	isb	sy
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	e7fe      	b.n	80021c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <xPortStartScheduler+0x12c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	4a1c      	ldr	r2, [pc, #112]	; (800223c <xPortStartScheduler+0x12c>)
 80021ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <xPortStartScheduler+0x12c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021d4:	4a19      	ldr	r2, [pc, #100]	; (800223c <xPortStartScheduler+0x12c>)
 80021d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <xPortStartScheduler+0x130>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a16      	ldr	r2, [pc, #88]	; (8002240 <xPortStartScheduler+0x130>)
 80021e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <xPortStartScheduler+0x130>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <xPortStartScheduler+0x130>)
 80021f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80021f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80021f8:	f000 f8de 	bl	80023b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <xPortStartScheduler+0x134>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002202:	f000 f8fd 	bl	8002400 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <xPortStartScheduler+0x138>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <xPortStartScheduler+0x138>)
 800220c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002210:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002212:	f7ff ff69 	bl	80020e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002216:	f7ff fb35 	bl	8001884 <vTaskSwitchContext>
	prvTaskExitError();
 800221a:	f7ff ff25 	bl	8002068 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	e000ed00 	.word	0xe000ed00
 800222c:	410fc271 	.word	0x410fc271
 8002230:	410fc270 	.word	0x410fc270
 8002234:	e000e400 	.word	0xe000e400
 8002238:	20000148 	.word	0x20000148
 800223c:	2000014c 	.word	0x2000014c
 8002240:	e000ed20 	.word	0xe000ed20
 8002244:	20000010 	.word	0x20000010
 8002248:	e000ef34 	.word	0xe000ef34

0800224c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <vPortEnterCritical+0x54>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <vPortEnterCritical+0x54>)
 800226c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <vPortEnterCritical+0x54>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10e      	bne.n	8002294 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <vPortEnterCritical+0x58>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <vPortEnterCritical+0x48>
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	e7fe      	b.n	8002292 <vPortEnterCritical+0x46>
	}
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	20000010 	.word	0x20000010
 80022a4:	e000ed04 	.word	0xe000ed04

080022a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <vPortExitCritical+0x4c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <vPortExitCritical+0x22>
 80022b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	e7fe      	b.n	80022c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <vPortExitCritical+0x4c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <vPortExitCritical+0x4c>)
 80022d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <vPortExitCritical+0x4c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d104      	bne.n	80022e6 <vPortExitCritical+0x3e>
 80022dc:	2300      	movs	r3, #0
 80022de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000010 	.word	0x20000010
	...

08002300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002300:	f3ef 8009 	mrs	r0, PSP
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <pxCurrentTCBConst>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	f01e 0f10 	tst.w	lr, #16
 8002310:	bf08      	it	eq
 8002312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800231a:	6010      	str	r0, [r2, #0]
 800231c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002324:	f380 8811 	msr	BASEPRI, r0
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f7ff faa8 	bl	8001884 <vTaskSwitchContext>
 8002334:	f04f 0000 	mov.w	r0, #0
 8002338:	f380 8811 	msr	BASEPRI, r0
 800233c:	bc09      	pop	{r0, r3}
 800233e:	6819      	ldr	r1, [r3, #0]
 8002340:	6808      	ldr	r0, [r1, #0]
 8002342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002346:	f01e 0f10 	tst.w	lr, #16
 800234a:	bf08      	it	eq
 800234c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002350:	f380 8809 	msr	PSP, r0
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	f3af 8000 	nop.w

08002360 <pxCurrentTCBConst>:
 8002360:	20000044 	.word	0x20000044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop

08002368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
	__asm volatile
 800236e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002372:	f383 8811 	msr	BASEPRI, r3
 8002376:	f3bf 8f6f 	isb	sy
 800237a:	f3bf 8f4f 	dsb	sy
 800237e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8002380:	f001 fca8 	bl	8003cd4 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002384:	f7ff f9e6 	bl	8001754 <xTaskIncrementTick>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800238e:	f001 fcff 	bl	8003d90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <SysTick_Handler+0x4c>)
 8002394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e001      	b.n	80023a0 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800239c:	f001 fcdc 	bl	8003d58 <SEGGER_SYSVIEW_RecordExitISR>
 80023a0:	2300      	movs	r3, #0
 80023a2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	e000ed04 	.word	0xe000ed04

080023b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <vPortSetupTimerInterrupt+0x34>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <vPortSetupTimerInterrupt+0x38>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <vPortSetupTimerInterrupt+0x3c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <vPortSetupTimerInterrupt+0x40>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	4a09      	ldr	r2, [pc, #36]	; (80023fc <vPortSetupTimerInterrupt+0x44>)
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <vPortSetupTimerInterrupt+0x34>)
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e010 	.word	0xe000e010
 80023f0:	e000e018 	.word	0xe000e018
 80023f4:	20000014 	.word	0x20000014
 80023f8:	10624dd3 	.word	0x10624dd3
 80023fc:	e000e014 	.word	0xe000e014

08002400 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002400:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002410 <vPortEnableVFP+0x10>
 8002404:	6801      	ldr	r1, [r0, #0]
 8002406:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800240a:	6001      	str	r1, [r0, #0]
 800240c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800240e:	bf00      	nop
 8002410:	e000ed88 	.word	0xe000ed88

08002414 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800241a:	f3ef 8305 	mrs	r3, IPSR
 800241e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	d913      	bls.n	800244e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002426:	4a16      	ldr	r2, [pc, #88]	; (8002480 <vPortValidateInterruptPriority+0x6c>)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <vPortValidateInterruptPriority+0x70>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	7afa      	ldrb	r2, [r7, #11]
 8002436:	429a      	cmp	r2, r3
 8002438:	d209      	bcs.n	800244e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	e7fe      	b.n	800244c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <vPortValidateInterruptPriority+0x74>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <vPortValidateInterruptPriority+0x78>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d909      	bls.n	8002472 <vPortValidateInterruptPriority+0x5e>
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	e7fe      	b.n	8002470 <vPortValidateInterruptPriority+0x5c>
	}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e3f0 	.word	0xe000e3f0
 8002484:	20000148 	.word	0x20000148
 8002488:	e000ed0c 	.word	0xe000ed0c
 800248c:	2000014c 	.word	0x2000014c

08002490 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800249c:	f7ff f8a8 	bl	80015f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80024a0:	4b59      	ldr	r3, [pc, #356]	; (8002608 <pvPortMalloc+0x178>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80024a8:	f000 f91a 	bl	80026e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024ac:	4b57      	ldr	r3, [pc, #348]	; (800260c <pvPortMalloc+0x17c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 8091 	bne.w	80025dc <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01c      	beq.n	80024fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80024c0:	2208      	movs	r2, #8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d013      	beq.n	80024fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f023 0307 	bic.w	r3, r3, #7
 80024d8:	3308      	adds	r3, #8
 80024da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <pvPortMalloc+0x6a>
 80024e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ea:	f383 8811 	msr	BASEPRI, r3
 80024ee:	f3bf 8f6f 	isb	sy
 80024f2:	f3bf 8f4f 	dsb	sy
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e7fe      	b.n	80024f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d06d      	beq.n	80025dc <pvPortMalloc+0x14c>
 8002500:	4b43      	ldr	r3, [pc, #268]	; (8002610 <pvPortMalloc+0x180>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	d868      	bhi.n	80025dc <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800250a:	4b42      	ldr	r3, [pc, #264]	; (8002614 <pvPortMalloc+0x184>)
 800250c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800250e:	4b41      	ldr	r3, [pc, #260]	; (8002614 <pvPortMalloc+0x184>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002514:	e004      	b.n	8002520 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d903      	bls.n	8002532 <pvPortMalloc+0xa2>
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f1      	bne.n	8002516 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002532:	4b35      	ldr	r3, [pc, #212]	; (8002608 <pvPortMalloc+0x178>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	429a      	cmp	r2, r3
 800253a:	d04f      	beq.n	80025dc <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2208      	movs	r2, #8
 8002542:	4413      	add	r3, r2
 8002544:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	1ad2      	subs	r2, r2, r3
 8002556:	2308      	movs	r3, #8
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	429a      	cmp	r2, r3
 800255c:	d91e      	bls.n	800259c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800255e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <pvPortMalloc+0xf4>
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	e7fe      	b.n	8002582 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	1ad2      	subs	r2, r2, r3
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002596:	69b8      	ldr	r0, [r7, #24]
 8002598:	f000 f904 	bl	80027a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800259c:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <pvPortMalloc+0x180>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	4a1a      	ldr	r2, [pc, #104]	; (8002610 <pvPortMalloc+0x180>)
 80025a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <pvPortMalloc+0x180>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <pvPortMalloc+0x188>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d203      	bcs.n	80025be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <pvPortMalloc+0x180>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a17      	ldr	r2, [pc, #92]	; (8002618 <pvPortMalloc+0x188>)
 80025bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <pvPortMalloc+0x17c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <pvPortMalloc+0x18c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a10      	ldr	r2, [pc, #64]	; (800261c <pvPortMalloc+0x18c>)
 80025da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80025dc:	f7ff f816 	bl	800160c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <pvPortMalloc+0x16e>
 80025ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ee:	f383 8811 	msr	BASEPRI, r3
 80025f2:	f3bf 8f6f 	isb	sy
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	e7fe      	b.n	80025fc <pvPortMalloc+0x16c>
	return pvReturn;
 80025fe:	69fb      	ldr	r3, [r7, #28]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3728      	adds	r7, #40	; 0x28
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20012d58 	.word	0x20012d58
 800260c:	20012d6c 	.word	0x20012d6c
 8002610:	20012d5c 	.word	0x20012d5c
 8002614:	20012d50 	.word	0x20012d50
 8002618:	20012d60 	.word	0x20012d60
 800261c:	20012d64 	.word	0x20012d64

08002620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d04b      	beq.n	80026ca <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002632:	2308      	movs	r3, #8
 8002634:	425b      	negs	r3, r3
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4413      	add	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <vPortFree+0xb4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <vPortFree+0x42>
 800264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002652:	f383 8811 	msr	BASEPRI, r3
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e7fe      	b.n	8002660 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <vPortFree+0x5e>
 800266a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266e:	f383 8811 	msr	BASEPRI, r3
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	f3bf 8f4f 	dsb	sy
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	e7fe      	b.n	800267c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <vPortFree+0xb4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01e      	beq.n	80026ca <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11a      	bne.n	80026ca <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <vPortFree+0xb4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80026a4:	f7fe ffa4 	bl	80015f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <vPortFree+0xb8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4413      	add	r3, r2
 80026b2:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <vPortFree+0xb8>)
 80026b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80026b6:	6938      	ldr	r0, [r7, #16]
 80026b8:	f000 f874 	bl	80027a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80026bc:	4b07      	ldr	r3, [pc, #28]	; (80026dc <vPortFree+0xbc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	4a06      	ldr	r2, [pc, #24]	; (80026dc <vPortFree+0xbc>)
 80026c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80026c6:	f7fe ffa1 	bl	800160c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20012d6c 	.word	0x20012d6c
 80026d8:	20012d5c 	.word	0x20012d5c
 80026dc:	20012d68 	.word	0x20012d68

080026e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80026e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80026ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <prvHeapInit+0xac>)
 80026ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3307      	adds	r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0307 	bic.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	4a1f      	ldr	r2, [pc, #124]	; (800278c <prvHeapInit+0xac>)
 8002710:	4413      	add	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002718:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <prvHeapInit+0xb0>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <prvHeapInit+0xb0>)
 8002720:	2200      	movs	r2, #0
 8002722:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	4413      	add	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800272c:	2208      	movs	r2, #8
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0307 	bic.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a15      	ldr	r2, [pc, #84]	; (8002794 <prvHeapInit+0xb4>)
 8002740:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <prvHeapInit+0xb4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <prvHeapInit+0xb4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	1ad2      	subs	r2, r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <prvHeapInit+0xb4>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <prvHeapInit+0xb8>)
 800276e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a09      	ldr	r2, [pc, #36]	; (800279c <prvHeapInit+0xbc>)
 8002776:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <prvHeapInit+0xc0>)
 800277a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800277e:	601a      	str	r2, [r3, #0]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	20000150 	.word	0x20000150
 8002790:	20012d50 	.word	0x20012d50
 8002794:	20012d58 	.word	0x20012d58
 8002798:	20012d60 	.word	0x20012d60
 800279c:	20012d5c 	.word	0x20012d5c
 80027a0:	20012d6c 	.word	0x20012d6c

080027a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <prvInsertBlockIntoFreeList+0xac>)
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e002      	b.n	80027b8 <prvInsertBlockIntoFreeList+0x14>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d8f7      	bhi.n	80027b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	4413      	add	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d108      	bne.n	80027e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	441a      	add	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	441a      	add	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d118      	bne.n	800282c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <prvInsertBlockIntoFreeList+0xb0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d00d      	beq.n	8002822 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	441a      	add	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e008      	b.n	8002834 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <prvInsertBlockIntoFreeList+0xb0>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e003      	b.n	8002834 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	d002      	beq.n	8002842 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20012d50 	.word	0x20012d50
 8002854:	20012d58 	.word	0x20012d58

08002858 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800285c:	4803      	ldr	r0, [pc, #12]	; (800286c <_cbSendSystemDesc+0x14>)
 800285e:	f001 f9e5 	bl	8003c2c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002862:	4803      	ldr	r0, [pc, #12]	; (8002870 <_cbSendSystemDesc+0x18>)
 8002864:	f001 f9e2 	bl	8003c2c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	08004bc4 	.word	0x08004bc4
 8002870:	08004c00 	.word	0x08004c00

08002874 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <SEGGER_SYSVIEW_Conf+0x20>)
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <SEGGER_SYSVIEW_Conf+0x20>)
 800287e:	6819      	ldr	r1, [r3, #0]
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <SEGGER_SYSVIEW_Conf+0x24>)
 8002882:	4a06      	ldr	r2, [pc, #24]	; (800289c <SEGGER_SYSVIEW_Conf+0x28>)
 8002884:	f000 fd52 	bl	800332c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002888:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800288c:	f000 fd8c 	bl	80033a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000014 	.word	0x20000014
 8002898:	08002859 	.word	0x08002859
 800289c:	08004d74 	.word	0x08004d74

080028a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80028a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	e034      	b.n	8002916 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80028ac:	491e      	ldr	r1, [pc, #120]	; (8002928 <_cbSendTaskList+0x88>)
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	491a      	ldr	r1, [pc, #104]	; (8002928 <_cbSendTaskList+0x88>)
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	3304      	adds	r3, #4
 80028cc:	681c      	ldr	r4, [r3, #0]
 80028ce:	4916      	ldr	r1, [pc, #88]	; (8002928 <_cbSendTaskList+0x88>)
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3308      	adds	r3, #8
 80028de:	681d      	ldr	r5, [r3, #0]
 80028e0:	4911      	ldr	r1, [pc, #68]	; (8002928 <_cbSendTaskList+0x88>)
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	330c      	adds	r3, #12
 80028f0:	681e      	ldr	r6, [r3, #0]
 80028f2:	490d      	ldr	r1, [pc, #52]	; (8002928 <_cbSendTaskList+0x88>)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3310      	adds	r3, #16
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	4633      	mov	r3, r6
 8002908:	462a      	mov	r2, r5
 800290a:	4621      	mov	r1, r4
 800290c:	f000 f8ba 	bl	8002a84 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3301      	adds	r3, #1
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <_cbSendTaskList+0x8c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	d3c5      	bcc.n	80028ac <_cbSendTaskList+0xc>
  }
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002928:	20012d70 	.word	0x20012d70
 800292c:	20012e10 	.word	0x20012e10

08002930 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002936:	f7fe fefb 	bl	8001730 <xTaskGetTickCountFromISR>
 800293a:	4603      	mov	r3, r0
 800293c:	f04f 0400 	mov.w	r4, #0
 8002940:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
 8002944:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002948:	184b      	adds	r3, r1, r1
 800294a:	eb42 0402 	adc.w	r4, r2, r2
 800294e:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= 1000;
 8002952:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002956:	462b      	mov	r3, r5
 8002958:	4634      	mov	r4, r6
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	0162      	lsls	r2, r4, #5
 8002964:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002968:	0159      	lsls	r1, r3, #5
 800296a:	460b      	mov	r3, r1
 800296c:	4614      	mov	r4, r2
 800296e:	1b5b      	subs	r3, r3, r5
 8002970:	eb64 0406 	sbc.w	r4, r4, r6
 8002974:	f04f 0100 	mov.w	r1, #0
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	00a2      	lsls	r2, r4, #2
 800297e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	460b      	mov	r3, r1
 8002986:	4614      	mov	r4, r2
 8002988:	195b      	adds	r3, r3, r5
 800298a:	eb44 0406 	adc.w	r4, r4, r6
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	00e2      	lsls	r2, r4, #3
 8002998:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800299c:	00d9      	lsls	r1, r3, #3
 800299e:	460b      	mov	r3, r1
 80029a0:	4614      	mov	r4, r2
 80029a2:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80029a6:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	4621      	mov	r1, r4
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029b4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80029c2:	2205      	movs	r2, #5
 80029c4:	492b      	ldr	r1, [pc, #172]	; (8002a74 <SYSVIEW_AddTask+0xc0>)
 80029c6:	68b8      	ldr	r0, [r7, #8]
 80029c8:	f002 f8ca 	bl	8004b60 <memcmp>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d04b      	beq.n	8002a6a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80029d2:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <SYSVIEW_AddTask+0xc4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b07      	cmp	r3, #7
 80029d8:	d903      	bls.n	80029e2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80029da:	4828      	ldr	r0, [pc, #160]	; (8002a7c <SYSVIEW_AddTask+0xc8>)
 80029dc:	f001 fc2a 	bl	8004234 <SEGGER_SYSVIEW_Warn>
    return;
 80029e0:	e044      	b.n	8002a6c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80029e2:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <SYSVIEW_AddTask+0xc4>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4926      	ldr	r1, [pc, #152]	; (8002a80 <SYSVIEW_AddTask+0xcc>)
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <SYSVIEW_AddTask+0xc4>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4921      	ldr	r1, [pc, #132]	; (8002a80 <SYSVIEW_AddTask+0xcc>)
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3304      	adds	r3, #4
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <SYSVIEW_AddTask+0xc4>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	491b      	ldr	r1, [pc, #108]	; (8002a80 <SYSVIEW_AddTask+0xcc>)
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <SYSVIEW_AddTask+0xc4>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4916      	ldr	r1, [pc, #88]	; (8002a80 <SYSVIEW_AddTask+0xcc>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	330c      	adds	r3, #12
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <SYSVIEW_AddTask+0xc4>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4910      	ldr	r1, [pc, #64]	; (8002a80 <SYSVIEW_AddTask+0xcc>)
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	3310      	adds	r3, #16
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <SYSVIEW_AddTask+0xc4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	4a08      	ldr	r2, [pc, #32]	; (8002a78 <SYSVIEW_AddTask+0xc4>)
 8002a56:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f80e 	bl	8002a84 <SYSVIEW_SendTaskInfo>
 8002a68:	e000      	b.n	8002a6c <SYSVIEW_AddTask+0xb8>
    return;
 8002a6a:	bf00      	nop

}
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	08004c10 	.word	0x08004c10
 8002a78:	20012e10 	.word	0x20012e10
 8002a7c:	08004c18 	.word	0x08004c18
 8002a80:	20012d70 	.word	0x20012d70

08002a84 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	2214      	movs	r2, #20
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f002 f87a 	bl	8004b94 <memset>
  TaskInfo.TaskID     = TaskID;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 ffbd 	bl	8003a38 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002abe:	bf00      	nop
 8002ac0:	3728      	adds	r7, #40	; 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <_DoInit+0x8c>)
 8002ad0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2203      	movs	r2, #3
 8002adc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <_DoInit+0x90>)
 8002ae2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <_DoInit+0x94>)
 8002ae8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002af0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <_DoInit+0x90>)
 8002b08:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <_DoInit+0x98>)
 8002b0e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2210      	movs	r2, #16
 8002b14:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3307      	adds	r3, #7
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <_DoInit+0x9c>)
 8002b2e:	6810      	ldr	r0, [r2, #0]
 8002b30:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a0c      	ldr	r2, [pc, #48]	; (8002b68 <_DoInit+0xa0>)
 8002b36:	6810      	ldr	r0, [r2, #0]
 8002b38:	6018      	str	r0, [r3, #0]
 8002b3a:	8891      	ldrh	r1, [r2, #4]
 8002b3c:	7992      	ldrb	r2, [r2, #6]
 8002b3e:	8099      	strh	r1, [r3, #4]
 8002b40:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	719a      	strb	r2, [r3, #6]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	20015348 	.word	0x20015348
 8002b58:	08004c68 	.word	0x08004c68
 8002b5c:	20012e14 	.word	0x20012e14
 8002b60:	20013214 	.word	0x20013214
 8002b64:	08004c74 	.word	0x08004c74
 8002b68:	08004c78 	.word	0x08004c78

08002b6c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002b78:	4b3c      	ldr	r3, [pc, #240]	; (8002c6c <SEGGER_RTT_ReadNoLock+0x100>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <SEGGER_RTT_ReadNoLock+0x18>
 8002b80:	f7ff ffa2 	bl	8002ac8 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	3360      	adds	r3, #96	; 0x60
 8002b90:	4a36      	ldr	r2, [pc, #216]	; (8002c6c <SEGGER_RTT_ReadNoLock+0x100>)
 8002b92:	4413      	add	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002baa:	6a3a      	ldr	r2, [r7, #32]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d92a      	bls.n	8002c08 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	bf28      	it	cs
 8002bc4:	4613      	movcs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	4413      	add	r3, r2
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	69f8      	ldr	r0, [r7, #28]
 8002bd6:	f001 ffd2 	bl	8004b7e <memcpy>
    NumBytesRead += NumBytesRem;
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002bf2:	6a3a      	ldr	r2, [r7, #32]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	6a3a      	ldr	r2, [r7, #32]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d101      	bne.n	8002c08 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4293      	cmp	r3, r2
 8002c16:	bf28      	it	cs
 8002c18:	4613      	movcs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d018      	beq.n	8002c54 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	4413      	add	r3, r2
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	69f8      	ldr	r0, [r7, #28]
 8002c30:	f001 ffa5 	bl	8004b7e <memcpy>
    NumBytesRead += NumBytesRem;
 8002c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4413      	add	r3, r2
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002c4c:	6a3a      	ldr	r2, [r7, #32]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	6a3a      	ldr	r2, [r7, #32]
 8002c5e:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3728      	adds	r7, #40	; 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20015348 	.word	0x20015348

08002c70 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	4613      	mov	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4a3f      	ldr	r2, [pc, #252]	; (8002d8c <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002c8e:	4413      	add	r3, r2
 8002c90:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d854      	bhi.n	8002d50 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d30f      	bcc.n	8002cda <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 ff59 	bl	8004b7e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e054      	b.n	8002d84 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	4413      	add	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d34b      	bcc.n	8002d82 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d90e      	bls.n	8002d1a <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	4413      	add	r3, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 ff38 	bl	8004b7e <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	441a      	add	r2, r3
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	60da      	str	r2, [r3, #12]
 8002d18:	e018      	b.n	8002d4c <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4413      	add	r3, r2
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d26:	4618      	mov	r0, r3
 8002d28:	f001 ff29 	bl	8004b7e <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	6858      	ldr	r0, [r3, #4]
 8002d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	18d1      	adds	r1, r2, r3
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f001 ff1e 	bl	8004b7e <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad2      	subs	r2, r2, r3
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e019      	b.n	8002d84 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d30f      	bcc.n	8002d82 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4413      	add	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 ff05 	bl	8004b7e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	441a      	add	r2, r3
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3728      	adds	r7, #40	; 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20015348 	.word	0x20015348

08002d90 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002d9e:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8002da6:	f7ff fe8f 	bl	8002ac8 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d24c      	bcs.n	8002e50 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8002db6:	f3ef 8311 	mrs	r3, BASEPRI
 8002dba:	f04f 0120 	mov.w	r1, #32
 8002dbe:	f381 8811 	msr	BASEPRI, r1
 8002dc2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d032      	beq.n	8002e30 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002dca:	4925      	ldr	r1, [pc, #148]	; (8002e60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002dde:	4920      	ldr	r1, [pc, #128]	; (8002e60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	3304      	adds	r3, #4
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002df4:	491a      	ldr	r1, [pc, #104]	; (8002e60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	3320      	adds	r3, #32
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002e08:	4915      	ldr	r1, [pc, #84]	; (8002e60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	440b      	add	r3, r1
 8002e16:	3328      	adds	r3, #40	; 0x28
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002e1c:	4910      	ldr	r1, [pc, #64]	; (8002e60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	3324      	adds	r3, #36	; 0x24
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002e30:	490b      	ldr	r1, [pc, #44]	; (8002e60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	332c      	adds	r3, #44	; 0x2c
 8002e40:	6a3a      	ldr	r2, [r7, #32]
 8002e42:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e002      	b.n	8002e56 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295
 8002e54:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002e56:	697b      	ldr	r3, [r7, #20]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20015348 	.word	0x20015348

08002e64 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002e72:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8002e7a:	f7ff fe25 	bl	8002ac8 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002e7e:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d24b      	bcs.n	8002f22 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8002e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8002e8e:	f04f 0120 	mov.w	r1, #32
 8002e92:	f381 8811 	msr	BASEPRI, r1
 8002e96:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d031      	beq.n	8002f02 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002e9e:	4925      	ldr	r1, [pc, #148]	; (8002f34 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	440b      	add	r3, r1
 8002eac:	3360      	adds	r3, #96	; 0x60
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002eb2:	4920      	ldr	r1, [pc, #128]	; (8002f34 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3364      	adds	r3, #100	; 0x64
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002ec6:	491b      	ldr	r1, [pc, #108]	; (8002f34 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3368      	adds	r3, #104	; 0x68
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002eda:	4916      	ldr	r1, [pc, #88]	; (8002f34 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3370      	adds	r3, #112	; 0x70
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002eee:	4911      	ldr	r1, [pc, #68]	; (8002f34 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	336c      	adds	r3, #108	; 0x6c
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8002f02:	490c      	ldr	r1, [pc, #48]	; (8002f34 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	3374      	adds	r3, #116	; 0x74
 8002f12:	6a3a      	ldr	r2, [r7, #32]
 8002f14:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e002      	b.n	8002f28 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002f28:	697b      	ldr	r3, [r7, #20]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20015348 	.word	0x20015348

08002f38 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002f48:	e002      	b.n	8002f50 <_EncodeStr+0x18>
    Len++;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f6      	bne.n	8002f4a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d901      	bls.n	8002f68 <_EncodeStr+0x30>
    Len = Limit;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2bfe      	cmp	r3, #254	; 0xfe
 8002f6c:	d806      	bhi.n	8002f7c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	60fa      	str	r2, [r7, #12]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e011      	b.n	8002fa0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	60fa      	str	r2, [r7, #12]
 8002f82:	22ff      	movs	r2, #255	; 0xff
 8002f84:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	60fa      	str	r2, [r7, #12]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	0a19      	lsrs	r1, r3, #8
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	60fa      	str	r2, [r7, #12]
 8002f9c:	b2ca      	uxtb	r2, r1
 8002f9e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002fa4:	e00a      	b.n	8002fbc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	1c53      	adds	r3, r2, #1
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	60f9      	str	r1, [r7, #12]
 8002fb2:	7812      	ldrb	r2, [r2, #0]
 8002fb4:	701a      	strb	r2, [r3, #0]
    n++;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d3f0      	bcc.n	8002fa6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3304      	adds	r3, #4
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002ff0:	1cfb      	adds	r3, r7, #3
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f7ff fdb8 	bl	8002b6c <SEGGER_RTT_ReadNoLock>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	dd44      	ble.n	8003090 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d01a      	beq.n	8003042 <_HandleIncomingPacket+0x58>
 800300c:	2b04      	cmp	r3, #4
 800300e:	dc06      	bgt.n	800301e <_HandleIncomingPacket+0x34>
 8003010:	2b02      	cmp	r3, #2
 8003012:	d010      	beq.n	8003036 <_HandleIncomingPacket+0x4c>
 8003014:	2b02      	cmp	r3, #2
 8003016:	dc11      	bgt.n	800303c <_HandleIncomingPacket+0x52>
 8003018:	2b01      	cmp	r3, #1
 800301a:	d009      	beq.n	8003030 <_HandleIncomingPacket+0x46>
 800301c:	e02d      	b.n	800307a <_HandleIncomingPacket+0x90>
 800301e:	2b06      	cmp	r3, #6
 8003020:	d015      	beq.n	800304e <_HandleIncomingPacket+0x64>
 8003022:	2b06      	cmp	r3, #6
 8003024:	db10      	blt.n	8003048 <_HandleIncomingPacket+0x5e>
 8003026:	2b07      	cmp	r3, #7
 8003028:	d014      	beq.n	8003054 <_HandleIncomingPacket+0x6a>
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	d015      	beq.n	800305a <_HandleIncomingPacket+0x70>
 800302e:	e024      	b.n	800307a <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003030:	f000 fb86 	bl	8003740 <SEGGER_SYSVIEW_Start>
      break;
 8003034:	e031      	b.n	800309a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003036:	f000 fc3f 	bl	80038b8 <SEGGER_SYSVIEW_Stop>
      break;
 800303a:	e02e      	b.n	800309a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800303c:	f000 fe1a 	bl	8003c74 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003040:	e02b      	b.n	800309a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003042:	f000 fddf 	bl	8003c04 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003046:	e028      	b.n	800309a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003048:	f000 fc5c 	bl	8003904 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800304c:	e025      	b.n	800309a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800304e:	f001 f8b3 	bl	80041b8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003052:	e022      	b.n	800309a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003054:	f001 f892 	bl	800417c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003058:	e01f      	b.n	800309a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800305a:	1cfb      	adds	r3, r7, #3
 800305c:	2201      	movs	r2, #1
 800305e:	4619      	mov	r1, r3
 8003060:	2001      	movs	r0, #1
 8003062:	f7ff fd83 	bl	8002b6c <SEGGER_RTT_ReadNoLock>
 8003066:	4603      	mov	r3, r0
 8003068:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	dd11      	ble.n	8003094 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	4618      	mov	r0, r3
 8003074:	f001 f802 	bl	800407c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003078:	e00c      	b.n	8003094 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	b25b      	sxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	da0a      	bge.n	8003098 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003082:	1cfb      	adds	r3, r7, #3
 8003084:	2201      	movs	r2, #1
 8003086:	4619      	mov	r1, r3
 8003088:	2001      	movs	r0, #1
 800308a:	f7ff fd6f 	bl	8002b6c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800308e:	e003      	b.n	8003098 <_HandleIncomingPacket+0xae>
    }
  }
 8003090:	bf00      	nop
 8003092:	e002      	b.n	800309a <_HandleIncomingPacket+0xb0>
      break;
 8003094:	bf00      	nop
 8003096:	e000      	b.n	800309a <_HandleIncomingPacket+0xb0>
      break;
 8003098:	bf00      	nop
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08c      	sub	sp, #48	; 0x30
 80030a8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80030aa:	2301      	movs	r3, #1
 80030ac:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b8:	4b30      	ldr	r3, [pc, #192]	; (800317c <_TrySendOverflowPacket+0xd8>)
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030be:	e00b      	b.n	80030d8 <_TrySendOverflowPacket+0x34>
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	1c59      	adds	r1, r3, #1
 80030c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80030ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	09db      	lsrs	r3, r3, #7
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	2b7f      	cmp	r3, #127	; 0x7f
 80030dc:	d8f0      	bhi.n	80030c0 <_TrySendOverflowPacket+0x1c>
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <_TrySendOverflowPacket+0xdc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80030f4:	4b21      	ldr	r3, [pc, #132]	; (800317c <_TrySendOverflowPacket+0xd8>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	623b      	str	r3, [r7, #32]
 8003106:	e00b      	b.n	8003120 <_TrySendOverflowPacket+0x7c>
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	1c59      	adds	r1, r3, #1
 8003110:	6279      	str	r1, [r7, #36]	; 0x24
 8003112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	09db      	lsrs	r3, r3, #7
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	2b7f      	cmp	r3, #127	; 0x7f
 8003124:	d8f0      	bhi.n	8003108 <_TrySendOverflowPacket+0x64>
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	627a      	str	r2, [r7, #36]	; 0x24
 800312c:	6a3a      	ldr	r2, [r7, #32]
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	461a      	mov	r2, r3
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	4619      	mov	r1, r3
 8003142:	2001      	movs	r0, #1
 8003144:	f7ff fd94 	bl	8002c70 <SEGGER_RTT_WriteSkipNoLock>
 8003148:	4603      	mov	r3, r0
 800314a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003152:	4a0a      	ldr	r2, [pc, #40]	; (800317c <_TrySendOverflowPacket+0xd8>)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <_TrySendOverflowPacket+0xd8>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	3b01      	subs	r3, #1
 800315e:	b2da      	uxtb	r2, r3
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <_TrySendOverflowPacket+0xd8>)
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e004      	b.n	8003170 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <_TrySendOverflowPacket+0xd8>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	3301      	adds	r3, #1
 800316c:	4a03      	ldr	r2, [pc, #12]	; (800317c <_TrySendOverflowPacket+0xd8>)
 800316e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003170:	693b      	ldr	r3, [r7, #16]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3730      	adds	r7, #48	; 0x30
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	2001522c 	.word	0x2001522c
 8003180:	e0001004 	.word	0xe0001004

08003184 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003190:	4b63      	ldr	r3, [pc, #396]	; (8003320 <_SendPacket+0x19c>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d010      	beq.n	80031ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003198:	4b61      	ldr	r3, [pc, #388]	; (8003320 <_SendPacket+0x19c>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a1 	beq.w	80032e4 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80031a2:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <_SendPacket+0x19c>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d109      	bne.n	80031be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80031aa:	f7ff ff7b 	bl	80030a4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80031ae:	4b5c      	ldr	r3, [pc, #368]	; (8003320 <_SendPacket+0x19c>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	f040 8098 	bne.w	80032e8 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 80031b8:	e001      	b.n	80031be <_SendPacket+0x3a>
    goto Send;
 80031ba:	bf00      	nop
 80031bc:	e000      	b.n	80031c0 <_SendPacket+0x3c>
Send:
 80031be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b1f      	cmp	r3, #31
 80031c4:	d809      	bhi.n	80031da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80031c6:	4b56      	ldr	r3, [pc, #344]	; (8003320 <_SendPacket+0x19c>)
 80031c8:	69da      	ldr	r2, [r3, #28]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f040 8089 	bne.w	80032ec <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b17      	cmp	r3, #23
 80031de:	d807      	bhi.n	80031f0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e03d      	b.n	800326c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b7f      	cmp	r3, #127	; 0x7f
 80031fc:	d912      	bls.n	8003224 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	09da      	lsrs	r2, r3, #7
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3b01      	subs	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	3a01      	subs	r2, #1
 8003216:	60fa      	str	r2, [r7, #12]
 8003218:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800321c:	b2da      	uxtb	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e006      	b.n	8003232 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3b01      	subs	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b7f      	cmp	r3, #127	; 0x7f
 8003236:	d912      	bls.n	800325e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	09da      	lsrs	r2, r3, #7
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3b01      	subs	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	3a01      	subs	r2, #1
 8003250:	60fa      	str	r2, [r7, #12]
 8003252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003256:	b2da      	uxtb	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e006      	b.n	800326c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3b01      	subs	r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800326c:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <_SendPacket+0x1a0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003272:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <_SendPacket+0x19c>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	e00b      	b.n	800329e <_SendPacket+0x11a>
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	1c59      	adds	r1, r3, #1
 800328e:	6279      	str	r1, [r7, #36]	; 0x24
 8003290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	09db      	lsrs	r3, r3, #7
 800329c:	623b      	str	r3, [r7, #32]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	2b7f      	cmp	r3, #127	; 0x7f
 80032a2:	d8f0      	bhi.n	8003286 <_SendPacket+0x102>
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	627a      	str	r2, [r7, #36]	; 0x24
 80032aa:	6a3a      	ldr	r2, [r7, #32]
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	2001      	movs	r0, #1
 80032c0:	f7ff fcd6 	bl	8002c70 <SEGGER_RTT_WriteSkipNoLock>
 80032c4:	4603      	mov	r3, r0
 80032c6:	613b      	str	r3, [r7, #16]
  if (Status) {
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80032ce:	4a14      	ldr	r2, [pc, #80]	; (8003320 <_SendPacket+0x19c>)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	60d3      	str	r3, [r2, #12]
 80032d4:	e00b      	b.n	80032ee <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <_SendPacket+0x19c>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	3301      	adds	r3, #1
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <_SendPacket+0x19c>)
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e004      	b.n	80032ee <_SendPacket+0x16a>
    goto SendDone;
 80032e4:	bf00      	nop
 80032e6:	e002      	b.n	80032ee <_SendPacket+0x16a>
      goto SendDone;
 80032e8:	bf00      	nop
 80032ea:	e000      	b.n	80032ee <_SendPacket+0x16a>
      goto SendDone;
 80032ec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <_SendPacket+0x1a4>)
 80032f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <_SendPacket+0x1a4>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d00b      	beq.n	8003316 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <_SendPacket+0x19c>)
 8003300:	789b      	ldrb	r3, [r3, #2]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <_SendPacket+0x19c>)
 8003308:	2201      	movs	r2, #1
 800330a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800330c:	f7ff fe6d 	bl	8002fea <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <_SendPacket+0x19c>)
 8003312:	2200      	movs	r2, #0
 8003314:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003316:	bf00      	nop
 8003318:	3728      	adds	r7, #40	; 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2001522c 	.word	0x2001522c
 8003324:	e0001004 	.word	0xe0001004
 8003328:	20015348 	.word	0x20015348

0800332c <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800333a:	2300      	movs	r3, #0
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <SEGGER_SYSVIEW_Init+0x68>)
 8003344:	4914      	ldr	r1, [pc, #80]	; (8003398 <SEGGER_SYSVIEW_Init+0x6c>)
 8003346:	2001      	movs	r0, #1
 8003348:	f7ff fd22 	bl	8002d90 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800334c:	2300      	movs	r3, #0
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	2308      	movs	r3, #8
 8003352:	4a12      	ldr	r2, [pc, #72]	; (800339c <SEGGER_SYSVIEW_Init+0x70>)
 8003354:	4910      	ldr	r1, [pc, #64]	; (8003398 <SEGGER_SYSVIEW_Init+0x6c>)
 8003356:	2001      	movs	r0, #1
 8003358:	f7ff fd84 	bl	8002e64 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800335c:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <SEGGER_SYSVIEW_Init+0x74>)
 800335e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003362:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <SEGGER_SYSVIEW_Init+0x78>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <SEGGER_SYSVIEW_Init+0x74>)
 800336a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800336c:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <SEGGER_SYSVIEW_Init+0x74>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003372:	4a0b      	ldr	r2, [pc, #44]	; (80033a0 <SEGGER_SYSVIEW_Init+0x74>)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003378:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <SEGGER_SYSVIEW_Init+0x74>)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800337e:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <SEGGER_SYSVIEW_Init+0x74>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <SEGGER_SYSVIEW_Init+0x74>)
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20013224 	.word	0x20013224
 8003398:	08004c80 	.word	0x08004c80
 800339c:	20015224 	.word	0x20015224
 80033a0:	2001522c 	.word	0x2001522c
 80033a4:	e0001004 	.word	0xe0001004

080033a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80033b0:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6113      	str	r3, [r2, #16]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	2001522c 	.word	0x2001522c

080033c8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80033d0:	f3ef 8311 	mrs	r3, BASEPRI
 80033d4:	f04f 0120 	mov.w	r1, #32
 80033d8:	f381 8811 	msr	BASEPRI, r1
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4808      	ldr	r0, [pc, #32]	; (8003400 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80033e0:	f7ff fdf7 	bl	8002fd2 <_PreparePacket>
 80033e4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68b8      	ldr	r0, [r7, #8]
 80033ec:	f7ff feca 	bl	8003184 <_SendPacket>
  RECORD_END();
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f383 8811 	msr	BASEPRI, r3
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	2001525c 	.word	0x2001525c

08003404 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800340e:	f3ef 8311 	mrs	r3, BASEPRI
 8003412:	f04f 0120 	mov.w	r1, #32
 8003416:	f381 8811 	msr	BASEPRI, r1
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	4816      	ldr	r0, [pc, #88]	; (8003478 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800341e:	f7ff fdd8 	bl	8002fd2 <_PreparePacket>
 8003422:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	e00b      	b.n	800344a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	1c59      	adds	r1, r3, #1
 800343a:	61f9      	str	r1, [r7, #28]
 800343c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	09db      	lsrs	r3, r3, #7
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b7f      	cmp	r3, #127	; 0x7f
 800344e:	d8f0      	bhi.n	8003432 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	61fa      	str	r2, [r7, #28]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68f9      	ldr	r1, [r7, #12]
 8003464:	6938      	ldr	r0, [r7, #16]
 8003466:	f7ff fe8d 	bl	8003184 <_SendPacket>
  RECORD_END();
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f383 8811 	msr	BASEPRI, r3
}
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	2001525c 	.word	0x2001525c

0800347c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b08c      	sub	sp, #48	; 0x30
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003488:	f3ef 8311 	mrs	r3, BASEPRI
 800348c:	f04f 0120 	mov.w	r1, #32
 8003490:	f381 8811 	msr	BASEPRI, r1
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	4825      	ldr	r0, [pc, #148]	; (800352c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003498:	f7ff fd9b 	bl	8002fd2 <_PreparePacket>
 800349c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034aa:	e00b      	b.n	80034c4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	1c59      	adds	r1, r3, #1
 80034b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80034b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	09db      	lsrs	r3, r3, #7
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	2b7f      	cmp	r3, #127	; 0x7f
 80034c8:	d8f0      	bhi.n	80034ac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	e00b      	b.n	80034fc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	1c59      	adds	r1, r3, #1
 80034ec:	6279      	str	r1, [r7, #36]	; 0x24
 80034ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	09db      	lsrs	r3, r3, #7
 80034fa:	623b      	str	r3, [r7, #32]
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003500:	d8f0      	bhi.n	80034e4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	627a      	str	r2, [r7, #36]	; 0x24
 8003508:	6a3a      	ldr	r2, [r7, #32]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	6979      	ldr	r1, [r7, #20]
 8003516:	69b8      	ldr	r0, [r7, #24]
 8003518:	f7ff fe34 	bl	8003184 <_SendPacket>
  RECORD_END();
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f383 8811 	msr	BASEPRI, r3
}
 8003522:	bf00      	nop
 8003524:	3730      	adds	r7, #48	; 0x30
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	2001525c 	.word	0x2001525c

08003530 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b08e      	sub	sp, #56	; 0x38
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800353e:	f3ef 8311 	mrs	r3, BASEPRI
 8003542:	f04f 0120 	mov.w	r1, #32
 8003546:	f381 8811 	msr	BASEPRI, r1
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	4832      	ldr	r0, [pc, #200]	; (8003618 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800354e:	f7ff fd40 	bl	8002fd2 <_PreparePacket>
 8003552:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
 8003560:	e00b      	b.n	800357a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	b2da      	uxtb	r2, r3
 8003566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003568:	1c59      	adds	r1, r3, #1
 800356a:	6379      	str	r1, [r7, #52]	; 0x34
 800356c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	09db      	lsrs	r3, r3, #7
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	2b7f      	cmp	r3, #127	; 0x7f
 800357e:	d8f0      	bhi.n	8003562 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	637a      	str	r2, [r7, #52]	; 0x34
 8003586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
 8003598:	e00b      	b.n	80035b2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359c:	b2da      	uxtb	r2, r3
 800359e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a0:	1c59      	adds	r1, r3, #1
 80035a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80035a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	09db      	lsrs	r3, r3, #7
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	2b7f      	cmp	r3, #127	; 0x7f
 80035b6:	d8f0      	bhi.n	800359a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	e00b      	b.n	80035ea <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	1c59      	adds	r1, r3, #1
 80035da:	6279      	str	r1, [r7, #36]	; 0x24
 80035dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	09db      	lsrs	r3, r3, #7
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	2b7f      	cmp	r3, #127	; 0x7f
 80035ee:	d8f0      	bhi.n	80035d2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	627a      	str	r2, [r7, #36]	; 0x24
 80035f6:	6a3a      	ldr	r2, [r7, #32]
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	6979      	ldr	r1, [r7, #20]
 8003604:	69b8      	ldr	r0, [r7, #24]
 8003606:	f7ff fdbd 	bl	8003184 <_SendPacket>
  RECORD_END();
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f383 8811 	msr	BASEPRI, r3
}
 8003610:	bf00      	nop
 8003612:	3738      	adds	r7, #56	; 0x38
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	2001525c 	.word	0x2001525c

0800361c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b090      	sub	sp, #64	; 0x40
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800362a:	f3ef 8311 	mrs	r3, BASEPRI
 800362e:	f04f 0120 	mov.w	r1, #32
 8003632:	f381 8811 	msr	BASEPRI, r1
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	4840      	ldr	r0, [pc, #256]	; (800373c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800363a:	f7ff fcca 	bl	8002fd2 <_PreparePacket>
 800363e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	63bb      	str	r3, [r7, #56]	; 0x38
 800364c:	e00b      	b.n	8003666 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	b2da      	uxtb	r2, r3
 8003652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003654:	1c59      	adds	r1, r3, #1
 8003656:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003658:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	09db      	lsrs	r3, r3, #7
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2b7f      	cmp	r3, #127	; 0x7f
 800366a:	d8f0      	bhi.n	800364e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800366c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
 8003684:	e00b      	b.n	800369e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	b2da      	uxtb	r2, r3
 800368a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368c:	1c59      	adds	r1, r3, #1
 800368e:	6379      	str	r1, [r7, #52]	; 0x34
 8003690:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	09db      	lsrs	r3, r3, #7
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	2b7f      	cmp	r3, #127	; 0x7f
 80036a2:	d8f0      	bhi.n	8003686 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80036a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	637a      	str	r2, [r7, #52]	; 0x34
 80036aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80036bc:	e00b      	b.n	80036d6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	1c59      	adds	r1, r3, #1
 80036c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80036c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	09db      	lsrs	r3, r3, #7
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	2b7f      	cmp	r3, #127	; 0x7f
 80036da:	d8f0      	bhi.n	80036be <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80036dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
 80036f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f2:	623b      	str	r3, [r7, #32]
 80036f4:	e00b      	b.n	800370e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	1c59      	adds	r1, r3, #1
 80036fe:	6279      	str	r1, [r7, #36]	; 0x24
 8003700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	09db      	lsrs	r3, r3, #7
 800370c:	623b      	str	r3, [r7, #32]
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	2b7f      	cmp	r3, #127	; 0x7f
 8003712:	d8f0      	bhi.n	80036f6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	627a      	str	r2, [r7, #36]	; 0x24
 800371a:	6a3a      	ldr	r2, [r7, #32]
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	6979      	ldr	r1, [r7, #20]
 8003728:	69b8      	ldr	r0, [r7, #24]
 800372a:	f7ff fd2b 	bl	8003184 <_SendPacket>
  RECORD_END();
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f383 8811 	msr	BASEPRI, r3
}
 8003734:	bf00      	nop
 8003736:	3740      	adds	r7, #64	; 0x40
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	2001525c 	.word	0x2001525c

08003740 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	; 0x30
 8003744:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003746:	4b59      	ldr	r3, [pc, #356]	; (80038ac <SEGGER_SYSVIEW_Start+0x16c>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 80aa 	bne.w	80038a4 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003750:	4b56      	ldr	r3, [pc, #344]	; (80038ac <SEGGER_SYSVIEW_Start+0x16c>)
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003756:	f3ef 8311 	mrs	r3, BASEPRI
 800375a:	f04f 0120 	mov.w	r1, #32
 800375e:	f381 8811 	msr	BASEPRI, r1
 8003762:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003764:	220a      	movs	r2, #10
 8003766:	4952      	ldr	r1, [pc, #328]	; (80038b0 <SEGGER_SYSVIEW_Start+0x170>)
 8003768:	2001      	movs	r0, #1
 800376a:	f7ff fa81 	bl	8002c70 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003774:	200a      	movs	r0, #10
 8003776:	f7ff fe27 	bl	80033c8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800377a:	f3ef 8311 	mrs	r3, BASEPRI
 800377e:	f04f 0120 	mov.w	r1, #32
 8003782:	f381 8811 	msr	BASEPRI, r1
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	484a      	ldr	r0, [pc, #296]	; (80038b4 <SEGGER_SYSVIEW_Start+0x174>)
 800378a:	f7ff fc22 	bl	8002fd2 <_PreparePacket>
 800378e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003798:	4b44      	ldr	r3, [pc, #272]	; (80038ac <SEGGER_SYSVIEW_Start+0x16c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
 800379e:	e00b      	b.n	80037b8 <SEGGER_SYSVIEW_Start+0x78>
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80037aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	09db      	lsrs	r3, r3, #7
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	2b7f      	cmp	r3, #127	; 0x7f
 80037bc:	d8f0      	bhi.n	80037a0 <SEGGER_SYSVIEW_Start+0x60>
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	4b36      	ldr	r3, [pc, #216]	; (80038ac <SEGGER_SYSVIEW_Start+0x16c>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	e00b      	b.n	80037f2 <SEGGER_SYSVIEW_Start+0xb2>
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	1c59      	adds	r1, r3, #1
 80037e2:	6279      	str	r1, [r7, #36]	; 0x24
 80037e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	09db      	lsrs	r3, r3, #7
 80037f0:	623b      	str	r3, [r7, #32]
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	2b7f      	cmp	r3, #127	; 0x7f
 80037f6:	d8f0      	bhi.n	80037da <SEGGER_SYSVIEW_Start+0x9a>
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	627a      	str	r2, [r7, #36]	; 0x24
 80037fe:	6a3a      	ldr	r2, [r7, #32]
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	4b27      	ldr	r3, [pc, #156]	; (80038ac <SEGGER_SYSVIEW_Start+0x16c>)
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e00b      	b.n	800382c <SEGGER_SYSVIEW_Start+0xec>
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	1c59      	adds	r1, r3, #1
 800381c:	61f9      	str	r1, [r7, #28]
 800381e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	09db      	lsrs	r3, r3, #7
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b7f      	cmp	r3, #127	; 0x7f
 8003830:	d8f0      	bhi.n	8003814 <SEGGER_SYSVIEW_Start+0xd4>
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	61fa      	str	r2, [r7, #28]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	2302      	movs	r3, #2
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	e00b      	b.n	8003864 <SEGGER_SYSVIEW_Start+0x124>
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	1c59      	adds	r1, r3, #1
 8003854:	6179      	str	r1, [r7, #20]
 8003856:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	09db      	lsrs	r3, r3, #7
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b7f      	cmp	r3, #127	; 0x7f
 8003868:	d8f0      	bhi.n	800384c <SEGGER_SYSVIEW_Start+0x10c>
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	617a      	str	r2, [r7, #20]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800387a:	2218      	movs	r2, #24
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fc80 	bl	8003184 <_SendPacket>
      RECORD_END();
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800388a:	4b08      	ldr	r3, [pc, #32]	; (80038ac <SEGGER_SYSVIEW_Start+0x16c>)
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <SEGGER_SYSVIEW_Start+0x16c>)
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003898:	f000 f9ec 	bl	8003c74 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800389c:	f000 f9b2 	bl	8003c04 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80038a0:	f000 fc8a 	bl	80041b8 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 80038a4:	bf00      	nop
 80038a6:	3730      	adds	r7, #48	; 0x30
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	2001522c 	.word	0x2001522c
 80038b0:	08004d7c 	.word	0x08004d7c
 80038b4:	2001525c 	.word	0x2001525c

080038b8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80038be:	f3ef 8311 	mrs	r3, BASEPRI
 80038c2:	f04f 0120 	mov.w	r1, #32
 80038c6:	f381 8811 	msr	BASEPRI, r1
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	480b      	ldr	r0, [pc, #44]	; (80038fc <SEGGER_SYSVIEW_Stop+0x44>)
 80038ce:	f7ff fb80 	bl	8002fd2 <_PreparePacket>
 80038d2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80038d4:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <SEGGER_SYSVIEW_Stop+0x48>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80038dc:	220b      	movs	r2, #11
 80038de:	6839      	ldr	r1, [r7, #0]
 80038e0:	6838      	ldr	r0, [r7, #0]
 80038e2:	f7ff fc4f 	bl	8003184 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <SEGGER_SYSVIEW_Stop+0x48>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f383 8811 	msr	BASEPRI, r3
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	2001525c 	.word	0x2001525c
 8003900:	2001522c 	.word	0x2001522c

08003904 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	; 0x30
 8003908:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800390a:	f3ef 8311 	mrs	r3, BASEPRI
 800390e:	f04f 0120 	mov.w	r1, #32
 8003912:	f381 8811 	msr	BASEPRI, r1
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	4845      	ldr	r0, [pc, #276]	; (8003a30 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800391a:	f7ff fb5a 	bl	8002fd2 <_PreparePacket>
 800391e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003928:	4b42      	ldr	r3, [pc, #264]	; (8003a34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
 800392e:	e00b      	b.n	8003948 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	b2da      	uxtb	r2, r3
 8003934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003936:	1c59      	adds	r1, r3, #1
 8003938:	62f9      	str	r1, [r7, #44]	; 0x2c
 800393a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	09db      	lsrs	r3, r3, #7
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	2b7f      	cmp	r3, #127	; 0x7f
 800394c:	d8f0      	bhi.n	8003930 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	e00b      	b.n	8003982 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	1c59      	adds	r1, r3, #1
 8003972:	6279      	str	r1, [r7, #36]	; 0x24
 8003974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	09db      	lsrs	r3, r3, #7
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	2b7f      	cmp	r3, #127	; 0x7f
 8003986:	d8f0      	bhi.n	800396a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	627a      	str	r2, [r7, #36]	; 0x24
 800398e:	6a3a      	ldr	r2, [r7, #32]
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	e00b      	b.n	80039bc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	1c59      	adds	r1, r3, #1
 80039ac:	61f9      	str	r1, [r7, #28]
 80039ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	09db      	lsrs	r3, r3, #7
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2b7f      	cmp	r3, #127	; 0x7f
 80039c0:	d8f0      	bhi.n	80039a4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	61fa      	str	r2, [r7, #28]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	2302      	movs	r3, #2
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	e00b      	b.n	80039f4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	1c59      	adds	r1, r3, #1
 80039e4:	6179      	str	r1, [r7, #20]
 80039e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	09db      	lsrs	r3, r3, #7
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	2b7f      	cmp	r3, #127	; 0x7f
 80039f8:	d8f0      	bhi.n	80039dc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	617a      	str	r2, [r7, #20]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003a0a:	2218      	movs	r2, #24
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	68b8      	ldr	r0, [r7, #8]
 8003a10:	f7ff fbb8 	bl	8003184 <_SendPacket>
  RECORD_END();
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003a22:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	4798      	blx	r3
  }
}
 8003a28:	bf00      	nop
 8003a2a:	3730      	adds	r7, #48	; 0x30
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	2001525c 	.word	0x2001525c
 8003a34:	2001522c 	.word	0x2001522c

08003a38 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b092      	sub	sp, #72	; 0x48
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003a40:	f3ef 8311 	mrs	r3, BASEPRI
 8003a44:	f04f 0120 	mov.w	r1, #32
 8003a48:	f381 8811 	msr	BASEPRI, r1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	486b      	ldr	r0, [pc, #428]	; (8003bfc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003a50:	f7ff fabf 	bl	8002fd2 <_PreparePacket>
 8003a54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b67      	ldr	r3, [pc, #412]	; (8003c00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a6c:	e00b      	b.n	8003a86 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a74:	1c59      	adds	r1, r3, #1
 8003a76:	6479      	str	r1, [r7, #68]	; 0x44
 8003a78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a82:	09db      	lsrs	r3, r3, #7
 8003a84:	643b      	str	r3, [r7, #64]	; 0x40
 8003a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a88:	2b7f      	cmp	r3, #127	; 0x7f
 8003a8a:	d8f0      	bhi.n	8003a6e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	647a      	str	r2, [r7, #68]	; 0x44
 8003a92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]
 8003a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa6:	e00b      	b.n	8003ac0 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aae:	1c59      	adds	r1, r3, #1
 8003ab0:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abc:	09db      	lsrs	r3, r3, #7
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ac4:	d8f0      	bhi.n	8003aa8 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad4:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	4619      	mov	r1, r3
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7ff fa2a 	bl	8002f38 <_EncodeStr>
 8003ae4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003ae6:	2209      	movs	r2, #9
 8003ae8:	68f9      	ldr	r1, [r7, #12]
 8003aea:	6938      	ldr	r0, [r7, #16]
 8003aec:	f7ff fb4a 	bl	8003184 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	637b      	str	r3, [r7, #52]	; 0x34
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b40      	ldr	r3, [pc, #256]	; (8003c00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	633b      	str	r3, [r7, #48]	; 0x30
 8003b06:	e00b      	b.n	8003b20 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0e:	1c59      	adds	r1, r3, #1
 8003b10:	6379      	str	r1, [r7, #52]	; 0x34
 8003b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	09db      	lsrs	r3, r3, #7
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	2b7f      	cmp	r3, #127	; 0x7f
 8003b24:	d8f0      	bhi.n	8003b08 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b40:	e00b      	b.n	8003b5a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	1c59      	adds	r1, r3, #1
 8003b4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	09db      	lsrs	r3, r3, #7
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b5e:	d8f0      	bhi.n	8003b42 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	623b      	str	r3, [r7, #32]
 8003b7a:	e00b      	b.n	8003b94 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	1c59      	adds	r1, r3, #1
 8003b84:	6279      	str	r1, [r7, #36]	; 0x24
 8003b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	09db      	lsrs	r3, r3, #7
 8003b92:	623b      	str	r3, [r7, #32]
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	2b7f      	cmp	r3, #127	; 0x7f
 8003b98:	d8f0      	bhi.n	8003b7c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	627a      	str	r2, [r7, #36]	; 0x24
 8003ba0:	6a3a      	ldr	r2, [r7, #32]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e00b      	b.n	8003bcc <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	1c59      	adds	r1, r3, #1
 8003bbc:	61f9      	str	r1, [r7, #28]
 8003bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	09db      	lsrs	r3, r3, #7
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b7f      	cmp	r3, #127	; 0x7f
 8003bd0:	d8f0      	bhi.n	8003bb4 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	61fa      	str	r2, [r7, #28]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003be2:	2215      	movs	r2, #21
 8003be4:	68f9      	ldr	r1, [r7, #12]
 8003be6:	6938      	ldr	r0, [r7, #16]
 8003be8:	f7ff facc 	bl	8003184 <_SendPacket>
  RECORD_END();
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f383 8811 	msr	BASEPRI, r3
}
 8003bf2:	bf00      	nop
 8003bf4:	3748      	adds	r7, #72	; 0x48
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2001525c 	.word	0x2001525c
 8003c00:	2001522c 	.word	0x2001522c

08003c04 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003c1a:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4798      	blx	r3
  }
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	2001522c 	.word	0x2001522c

08003c2c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003c34:	f3ef 8311 	mrs	r3, BASEPRI
 8003c38:	f04f 0120 	mov.w	r1, #32
 8003c3c:	f381 8811 	msr	BASEPRI, r1
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	480b      	ldr	r0, [pc, #44]	; (8003c70 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003c44:	f7ff f9c5 	bl	8002fd2 <_PreparePacket>
 8003c48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	6938      	ldr	r0, [r7, #16]
 8003c50:	f7ff f972 	bl	8002f38 <_EncodeStr>
 8003c54:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003c56:	220e      	movs	r2, #14
 8003c58:	68f9      	ldr	r1, [r7, #12]
 8003c5a:	6938      	ldr	r0, [r7, #16]
 8003c5c:	f7ff fa92 	bl	8003184 <_SendPacket>
  RECORD_END();
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f383 8811 	msr	BASEPRI, r3
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2001525c 	.word	0x2001525c

08003c74 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d019      	beq.n	8003cb6 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d014      	beq.n	8003cb6 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4798      	blx	r3
 8003c94:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003c98:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003c9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	f04f 0400 	mov.w	r4, #0
 8003ca6:	0013      	movs	r3, r2
 8003ca8:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003caa:	461a      	mov	r2, r3
 8003cac:	4601      	mov	r1, r0
 8003cae:	200d      	movs	r0, #13
 8003cb0:	f7ff fbe4 	bl	800347c <SEGGER_SYSVIEW_RecordU32x2>
 8003cb4:	e005      	b.n	8003cc2 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	200c      	movs	r0, #12
 8003cbe:	f7ff fba1 	bl	8003404 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd90      	pop	{r4, r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	2001522c 	.word	0x2001522c
 8003cd0:	e0001004 	.word	0xe0001004

08003cd4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003cda:	f3ef 8311 	mrs	r3, BASEPRI
 8003cde:	f04f 0120 	mov.w	r1, #32
 8003ce2:	f381 8811 	msr	BASEPRI, r1
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	4819      	ldr	r0, [pc, #100]	; (8003d50 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003cea:	f7ff f972 	bl	8002fd2 <_PreparePacket>
 8003cee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e00b      	b.n	8003d20 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	1c59      	adds	r1, r3, #1
 8003d10:	6179      	str	r1, [r7, #20]
 8003d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	09db      	lsrs	r3, r3, #7
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b7f      	cmp	r3, #127	; 0x7f
 8003d24:	d8f0      	bhi.n	8003d08 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	617a      	str	r2, [r7, #20]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003d36:	2202      	movs	r2, #2
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	68b8      	ldr	r0, [r7, #8]
 8003d3c:	f7ff fa22 	bl	8003184 <_SendPacket>
  RECORD_END();
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f383 8811 	msr	BASEPRI, r3
}
 8003d46:	bf00      	nop
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	2001525c 	.word	0x2001525c
 8003d54:	e000ed04 	.word	0xe000ed04

08003d58 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d62:	f04f 0120 	mov.w	r1, #32
 8003d66:	f381 8811 	msr	BASEPRI, r1
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	4807      	ldr	r0, [pc, #28]	; (8003d8c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003d6e:	f7ff f930 	bl	8002fd2 <_PreparePacket>
 8003d72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003d74:	2203      	movs	r2, #3
 8003d76:	6839      	ldr	r1, [r7, #0]
 8003d78:	6838      	ldr	r0, [r7, #0]
 8003d7a:	f7ff fa03 	bl	8003184 <_SendPacket>
  RECORD_END();
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f383 8811 	msr	BASEPRI, r3
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	2001525c 	.word	0x2001525c

08003d90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003d96:	f3ef 8311 	mrs	r3, BASEPRI
 8003d9a:	f04f 0120 	mov.w	r1, #32
 8003d9e:	f381 8811 	msr	BASEPRI, r1
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	4807      	ldr	r0, [pc, #28]	; (8003dc4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003da6:	f7ff f914 	bl	8002fd2 <_PreparePacket>
 8003daa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003dac:	2212      	movs	r2, #18
 8003dae:	6839      	ldr	r1, [r7, #0]
 8003db0:	6838      	ldr	r0, [r7, #0]
 8003db2:	f7ff f9e7 	bl	8003184 <_SendPacket>
  RECORD_END();
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f383 8811 	msr	BASEPRI, r3
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	2001525c 	.word	0x2001525c

08003dc8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003dce:	f3ef 8311 	mrs	r3, BASEPRI
 8003dd2:	f04f 0120 	mov.w	r1, #32
 8003dd6:	f381 8811 	msr	BASEPRI, r1
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	4807      	ldr	r0, [pc, #28]	; (8003dfc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003dde:	f7ff f8f8 	bl	8002fd2 <_PreparePacket>
 8003de2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003de4:	2211      	movs	r2, #17
 8003de6:	6839      	ldr	r1, [r7, #0]
 8003de8:	6838      	ldr	r0, [r7, #0]
 8003dea:	f7ff f9cb 	bl	8003184 <_SendPacket>
  RECORD_END();
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f383 8811 	msr	BASEPRI, r3
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	2001525c 	.word	0x2001525c

08003e00 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003e08:	f3ef 8311 	mrs	r3, BASEPRI
 8003e0c:	f04f 0120 	mov.w	r1, #32
 8003e10:	f381 8811 	msr	BASEPRI, r1
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	481a      	ldr	r0, [pc, #104]	; (8003e80 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003e18:	f7ff f8db 	bl	8002fd2 <_PreparePacket>
 8003e1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003e22:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	e00b      	b.n	8003e50 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	1c59      	adds	r1, r3, #1
 8003e40:	61f9      	str	r1, [r7, #28]
 8003e42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	09db      	lsrs	r3, r3, #7
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b7f      	cmp	r3, #127	; 0x7f
 8003e54:	d8f0      	bhi.n	8003e38 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	61fa      	str	r2, [r7, #28]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003e66:	2208      	movs	r2, #8
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	6938      	ldr	r0, [r7, #16]
 8003e6c:	f7ff f98a 	bl	8003184 <_SendPacket>
  RECORD_END();
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f383 8811 	msr	BASEPRI, r3
}
 8003e76:	bf00      	nop
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	2001525c 	.word	0x2001525c
 8003e84:	2001522c 	.word	0x2001522c

08003e88 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003e90:	f3ef 8311 	mrs	r3, BASEPRI
 8003e94:	f04f 0120 	mov.w	r1, #32
 8003e98:	f381 8811 	msr	BASEPRI, r1
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	481a      	ldr	r0, [pc, #104]	; (8003f08 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003ea0:	f7ff f897 	bl	8002fd2 <_PreparePacket>
 8003ea4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003eaa:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	089b      	lsrs	r3, r3, #2
 8003eb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e00b      	b.n	8003ed8 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	1c59      	adds	r1, r3, #1
 8003ec8:	61f9      	str	r1, [r7, #28]
 8003eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	09db      	lsrs	r3, r3, #7
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b7f      	cmp	r3, #127	; 0x7f
 8003edc:	d8f0      	bhi.n	8003ec0 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	61fa      	str	r2, [r7, #28]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003eee:	2204      	movs	r2, #4
 8003ef0:	68f9      	ldr	r1, [r7, #12]
 8003ef2:	6938      	ldr	r0, [r7, #16]
 8003ef4:	f7ff f946 	bl	8003184 <_SendPacket>
  RECORD_END();
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f383 8811 	msr	BASEPRI, r3
}
 8003efe:	bf00      	nop
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	2001525c 	.word	0x2001525c
 8003f0c:	2001522c 	.word	0x2001522c

08003f10 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f18:	f3ef 8311 	mrs	r3, BASEPRI
 8003f1c:	f04f 0120 	mov.w	r1, #32
 8003f20:	f381 8811 	msr	BASEPRI, r1
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	481a      	ldr	r0, [pc, #104]	; (8003f90 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003f28:	f7ff f853 	bl	8002fd2 <_PreparePacket>
 8003f2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003f32:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e00b      	b.n	8003f60 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	1c59      	adds	r1, r3, #1
 8003f50:	61f9      	str	r1, [r7, #28]
 8003f52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	09db      	lsrs	r3, r3, #7
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b7f      	cmp	r3, #127	; 0x7f
 8003f64:	d8f0      	bhi.n	8003f48 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	61fa      	str	r2, [r7, #28]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003f76:	2206      	movs	r2, #6
 8003f78:	68f9      	ldr	r1, [r7, #12]
 8003f7a:	6938      	ldr	r0, [r7, #16]
 8003f7c:	f7ff f902 	bl	8003184 <_SendPacket>
  RECORD_END();
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f383 8811 	msr	BASEPRI, r3
}
 8003f86:	bf00      	nop
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	2001525c 	.word	0x2001525c
 8003f94:	2001522c 	.word	0x2001522c

08003f98 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8003fa6:	f04f 0120 	mov.w	r1, #32
 8003faa:	f381 8811 	msr	BASEPRI, r1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	4827      	ldr	r0, [pc, #156]	; (8004050 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8003fb2:	f7ff f80e 	bl	8002fd2 <_PreparePacket>
 8003fb6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003fbc:	4b25      	ldr	r3, [pc, #148]	; (8004054 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	623b      	str	r3, [r7, #32]
 8003fd0:	e00b      	b.n	8003fea <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	1c59      	adds	r1, r3, #1
 8003fda:	6279      	str	r1, [r7, #36]	; 0x24
 8003fdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	09db      	lsrs	r3, r3, #7
 8003fe8:	623b      	str	r3, [r7, #32]
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	2b7f      	cmp	r3, #127	; 0x7f
 8003fee:	d8f0      	bhi.n	8003fd2 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ff6:	6a3a      	ldr	r2, [r7, #32]
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	e00b      	b.n	8004022 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	1c59      	adds	r1, r3, #1
 8004012:	61f9      	str	r1, [r7, #28]
 8004014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	09db      	lsrs	r3, r3, #7
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b7f      	cmp	r3, #127	; 0x7f
 8004026:	d8f0      	bhi.n	800400a <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	61fa      	str	r2, [r7, #28]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004038:	2207      	movs	r2, #7
 800403a:	68f9      	ldr	r1, [r7, #12]
 800403c:	6938      	ldr	r0, [r7, #16]
 800403e:	f7ff f8a1 	bl	8003184 <_SendPacket>
  RECORD_END();
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f383 8811 	msr	BASEPRI, r3
}
 8004048:	bf00      	nop
 800404a:	3728      	adds	r7, #40	; 0x28
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	2001525c 	.word	0x2001525c
 8004054:	2001522c 	.word	0x2001522c

08004058 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	089b      	lsrs	r3, r3, #2
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	2001522c 	.word	0x2001522c

0800407c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b08c      	sub	sp, #48	; 0x30
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004086:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d06d      	beq.n	800416a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800408e:	4b39      	ldr	r3, [pc, #228]	; (8004174 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004094:	2300      	movs	r3, #0
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
 8004098:	e008      	b.n	80040ac <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	3301      	adds	r3, #1
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d3f2      	bcc.n	800409a <SEGGER_SYSVIEW_SendModule+0x1e>
 80040b4:	e000      	b.n	80040b8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80040b6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d055      	beq.n	800416a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80040be:	f3ef 8311 	mrs	r3, BASEPRI
 80040c2:	f04f 0120 	mov.w	r1, #32
 80040c6:	f381 8811 	msr	BASEPRI, r1
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	482a      	ldr	r0, [pc, #168]	; (8004178 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80040ce:	f7fe ff80 	bl	8002fd2 <_PreparePacket>
 80040d2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	623b      	str	r3, [r7, #32]
 80040e0:	e00b      	b.n	80040fa <SEGGER_SYSVIEW_SendModule+0x7e>
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	1c59      	adds	r1, r3, #1
 80040ea:	6279      	str	r1, [r7, #36]	; 0x24
 80040ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	09db      	lsrs	r3, r3, #7
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	2b7f      	cmp	r3, #127	; 0x7f
 80040fe:	d8f0      	bhi.n	80040e2 <SEGGER_SYSVIEW_SendModule+0x66>
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	627a      	str	r2, [r7, #36]	; 0x24
 8004106:	6a3a      	ldr	r2, [r7, #32]
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e00b      	b.n	8004134 <SEGGER_SYSVIEW_SendModule+0xb8>
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	1c59      	adds	r1, r3, #1
 8004124:	61f9      	str	r1, [r7, #28]
 8004126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	09db      	lsrs	r3, r3, #7
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b7f      	cmp	r3, #127	; 0x7f
 8004138:	d8f0      	bhi.n	800411c <SEGGER_SYSVIEW_SendModule+0xa0>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	61fa      	str	r2, [r7, #28]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2280      	movs	r2, #128	; 0x80
 8004150:	4619      	mov	r1, r3
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7fe fef0 	bl	8002f38 <_EncodeStr>
 8004158:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800415a:	2216      	movs	r2, #22
 800415c:	68f9      	ldr	r1, [r7, #12]
 800415e:	6938      	ldr	r0, [r7, #16]
 8004160:	f7ff f810 	bl	8003184 <_SendPacket>
      RECORD_END();
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800416a:	bf00      	nop
 800416c:	3730      	adds	r7, #48	; 0x30
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20015254 	.word	0x20015254
 8004178:	2001525c 	.word	0x2001525c

0800417c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00f      	beq.n	80041aa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f2      	bne.n	8004190 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20015254 	.word	0x20015254

080041b8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80041be:	f3ef 8311 	mrs	r3, BASEPRI
 80041c2:	f04f 0120 	mov.w	r1, #32
 80041c6:	f381 8811 	msr	BASEPRI, r1
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	4817      	ldr	r0, [pc, #92]	; (800422c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80041ce:	f7fe ff00 	bl	8002fd2 <_PreparePacket>
 80041d2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	4b14      	ldr	r3, [pc, #80]	; (8004230 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	e00b      	b.n	80041fc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	1c59      	adds	r1, r3, #1
 80041ec:	6179      	str	r1, [r7, #20]
 80041ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	09db      	lsrs	r3, r3, #7
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004200:	d8f0      	bhi.n	80041e4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	617a      	str	r2, [r7, #20]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004212:	221b      	movs	r2, #27
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	68b8      	ldr	r0, [r7, #8]
 8004218:	f7fe ffb4 	bl	8003184 <_SendPacket>
  RECORD_END();
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f383 8811 	msr	BASEPRI, r3
}
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	2001525c 	.word	0x2001525c
 8004230:	20015258 	.word	0x20015258

08004234 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800423c:	f3ef 8311 	mrs	r3, BASEPRI
 8004240:	f04f 0120 	mov.w	r1, #32
 8004244:	f381 8811 	msr	BASEPRI, r1
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	4827      	ldr	r0, [pc, #156]	; (80042e8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800424c:	f7fe fec1 	bl	8002fd2 <_PreparePacket>
 8004250:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	6938      	ldr	r0, [r7, #16]
 8004258:	f7fe fe6e 	bl	8002f38 <_EncodeStr>
 800425c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
 8004262:	2301      	movs	r3, #1
 8004264:	623b      	str	r3, [r7, #32]
 8004266:	e00b      	b.n	8004280 <SEGGER_SYSVIEW_Warn+0x4c>
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	1c59      	adds	r1, r3, #1
 8004270:	6279      	str	r1, [r7, #36]	; 0x24
 8004272:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	09db      	lsrs	r3, r3, #7
 800427e:	623b      	str	r3, [r7, #32]
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2b7f      	cmp	r3, #127	; 0x7f
 8004284:	d8f0      	bhi.n	8004268 <SEGGER_SYSVIEW_Warn+0x34>
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	627a      	str	r2, [r7, #36]	; 0x24
 800428c:	6a3a      	ldr	r2, [r7, #32]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	e00b      	b.n	80042b8 <SEGGER_SYSVIEW_Warn+0x84>
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	1c59      	adds	r1, r3, #1
 80042a8:	61f9      	str	r1, [r7, #28]
 80042aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	09db      	lsrs	r3, r3, #7
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b7f      	cmp	r3, #127	; 0x7f
 80042bc:	d8f0      	bhi.n	80042a0 <SEGGER_SYSVIEW_Warn+0x6c>
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	61fa      	str	r2, [r7, #28]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80042ce:	221a      	movs	r2, #26
 80042d0:	68f9      	ldr	r1, [r7, #12]
 80042d2:	6938      	ldr	r0, [r7, #16]
 80042d4:	f7fe ff56 	bl	8003184 <_SendPacket>
  RECORD_END();
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f383 8811 	msr	BASEPRI, r3
}
 80042de:	bf00      	nop
 80042e0:	3728      	adds	r7, #40	; 0x28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	2001525c 	.word	0x2001525c

080042ec <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	f003 021f 	and.w	r2, r3, #31
 80042fc:	4907      	ldr	r1, [pc, #28]	; (800431c <NVIC_EnableIRQ+0x30>)
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2001      	movs	r0, #1
 8004306:	fa00 f202 	lsl.w	r2, r0, r2
 800430a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	e000e100 	.word	0xe000e100

08004320 <NVIC_SetPendingIRQ>:
    The function sets the pending bit of an external interrupt.

    \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	f003 021f 	and.w	r2, r3, #31
 8004330:	4907      	ldr	r1, [pc, #28]	; (8004350 <NVIC_SetPendingIRQ+0x30>)
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2001      	movs	r0, #1
 800433a:	fa00 f202 	lsl.w	r2, r0, r2
 800433e:	3340      	adds	r3, #64	; 0x40
 8004340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000e100 	.word	0xe000e100

08004354 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8004360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	da0b      	bge.n	8004380 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	490c      	ldr	r1, [pc, #48]	; (80043a0 <NVIC_SetPriority+0x4c>)
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	3b04      	subs	r3, #4
 8004376:	0112      	lsls	r2, r2, #4
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	440b      	add	r3, r1
 800437c:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800437e:	e009      	b.n	8004394 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	4907      	ldr	r1, [pc, #28]	; (80043a4 <NVIC_SetPriority+0x50>)
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	0112      	lsls	r2, r2, #4
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	440b      	add	r3, r1
 8004390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000ed00 	.word	0xe000ed00
 80043a4:	e000e100 	.word	0xe000e100

080043a8 <main>:
#ifdef USE_SEMIHOSTING
extern void initialise_monitor_handles();
#endif

int main(void)
{
 80043a8:	b5b0      	push	{r4, r5, r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
    printf("Its a hello world application\r\n");
#endif

    DWT->CTRL |= (1<<0);//Data watch point trace->cyccnt(cycle count) in arm technical rm,it keeps time stamp
 80043ae:	4b27      	ldr	r3, [pc, #156]	; (800444c <main+0xa4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a26      	ldr	r2, [pc, #152]	; (800444c <main+0xa4>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6013      	str	r3, [r2, #0]

    //reset the RCC clock cconfiguration to default reset state
	//reset state is hsi=on,pll=off,hse=off, sysclk=16MHz

    RCC_DeInit();
 80043ba:	f7fc f88b 	bl	80004d4 <RCC_DeInit>

    //update the system core clock variable
    SystemCoreClockUpdate();
 80043be:	f000 fa1d 	bl	80047fc <SystemCoreClockUpdate>

    pvtHardwareSetup();
 80043c2:	f000 f95f 	bl	8004684 <pvtHardwareSetup>

    sprintf(user_msg,"\rDemo of counting semaphore for sync between isr-tasks,event latch\r\n");
 80043c6:	4a22      	ldr	r2, [pc, #136]	; (8004450 <main+0xa8>)
 80043c8:	4b22      	ldr	r3, [pc, #136]	; (8004454 <main+0xac>)
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	2345      	movs	r3, #69	; 0x45
 80043d0:	461a      	mov	r2, r3
 80043d2:	f000 fbd4 	bl	8004b7e <memcpy>
    printmsg(user_msg);
 80043d6:	481e      	ldr	r0, [pc, #120]	; (8004450 <main+0xa8>)
 80043d8:	f000 f95c 	bl	8004694 <printmsg>

    //Start recording
    SEGGER_SYSVIEW_Conf();
 80043dc:	f7fe fa4a 	bl	8002874 <SEGGER_SYSVIEW_Conf>
    SEGGER_SYSVIEW_Start();
 80043e0:	f7ff f9ae 	bl	8003740 <SEGGER_SYSVIEW_Start>

    //before a semaphore is used it should be explicitly created-create counting semaphore
    xCountingSemaphore=xSemaphoreCreateCounting(10,0);
 80043e4:	2100      	movs	r1, #0
 80043e6:	200a      	movs	r0, #10
 80043e8:	f7fc fcbc 	bl	8000d64 <xQueueCreateCountingSemaphore>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <main+0xb0>)
 80043f0:	601a      	str	r2, [r3, #0]



    //check if semaphore created successfully
    if(xCountingSemaphore !=NULL){
 80043f2:	4b19      	ldr	r3, [pc, #100]	; (8004458 <main+0xb0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d017      	beq.n	800442a <main+0x82>
    	//CREATE THE MANAGER AND EMPLOYEE TASK
        xTaskCreate(vHandlerTask, "HANDLER", 500, NULL,1, &xTask1Handle);
 80043fa:	4b18      	ldr	r3, [pc, #96]	; (800445c <main+0xb4>)
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	2301      	movs	r3, #1
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2300      	movs	r3, #0
 8004404:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004408:	4915      	ldr	r1, [pc, #84]	; (8004460 <main+0xb8>)
 800440a:	4816      	ldr	r0, [pc, #88]	; (8004464 <main+0xbc>)
 800440c:	f7fc ff14 	bl	8001238 <xTaskCreate>
        xTaskCreate(vPeriodicTask, "PERIODIC", 500, NULL,3, &xTask2Handle);
 8004410:	4b15      	ldr	r3, [pc, #84]	; (8004468 <main+0xc0>)
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	2303      	movs	r3, #3
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2300      	movs	r3, #0
 800441a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800441e:	4913      	ldr	r1, [pc, #76]	; (800446c <main+0xc4>)
 8004420:	4813      	ldr	r0, [pc, #76]	; (8004470 <main+0xc8>)
 8004422:	f7fc ff09 	bl	8001238 <xTaskCreate>
        //start the scheduler
		vTaskStartScheduler();
 8004426:	f7fd f88d 	bl	8001544 <vTaskStartScheduler>


    }

    sprintf(user_msg,"\rsema creation failed\r\n");
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <main+0xa8>)
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <main+0xcc>)
 800442e:	4615      	mov	r5, r2
 8004430:	461c      	mov	r4, r3
 8004432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004434:	6028      	str	r0, [r5, #0]
 8004436:	6069      	str	r1, [r5, #4]
 8004438:	60aa      	str	r2, [r5, #8]
 800443a:	60eb      	str	r3, [r5, #12]
 800443c:	cc03      	ldmia	r4!, {r0, r1}
 800443e:	6128      	str	r0, [r5, #16]
 8004440:	6169      	str	r1, [r5, #20]
	printmsg(user_msg);
 8004442:	4803      	ldr	r0, [pc, #12]	; (8004450 <main+0xa8>)
 8004444:	f000 f926 	bl	8004694 <printmsg>



    for(;;);
 8004448:	e7fe      	b.n	8004448 <main+0xa0>
 800444a:	bf00      	nop
 800444c:	e0001000 	.word	0xe0001000
 8004450:	200153f4 	.word	0x200153f4
 8004454:	08004c88 	.word	0x08004c88
 8004458:	200153f0 	.word	0x200153f0
 800445c:	20015340 	.word	0x20015340
 8004460:	08004cd0 	.word	0x08004cd0
 8004464:	08004479 	.word	0x08004479
 8004468:	20015344 	.word	0x20015344
 800446c:	08004cd8 	.word	0x08004cd8
 8004470:	080044c1 	.word	0x080044c1
 8004474:	08004ce4 	.word	0x08004ce4

08004478 <vHandlerTask>:
}

void vHandlerTask(void* params){
 8004478:	b5b0      	push	{r4, r5, r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	while(1){

		//task gets blocked on unavailability of semaphore and waits for signal by semaphore count
		xSemaphoreTake(xCountingSemaphore,portMAX_DELAY);
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <vHandlerTask+0x3c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f04f 31ff 	mov.w	r1, #4294967295
 8004488:	4618      	mov	r0, r3
 800448a:	f7fc fd39 	bl	8000f00 <xQueueSemaphoreTake>

		/* To get here the event must have occurred.  Process the event (in this
		case we just print out a message). */

		sprintf(user_msg,"Handler Task-processing event\r\n");
 800448e:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <vHandlerTask+0x40>)
 8004490:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <vHandlerTask+0x44>)
 8004492:	4614      	mov	r4, r2
 8004494:	461d      	mov	r5, r3
 8004496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004498:	6020      	str	r0, [r4, #0]
 800449a:	6061      	str	r1, [r4, #4]
 800449c:	60a2      	str	r2, [r4, #8]
 800449e:	60e3      	str	r3, [r4, #12]
 80044a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044a2:	6120      	str	r0, [r4, #16]
 80044a4:	6161      	str	r1, [r4, #20]
 80044a6:	61a2      	str	r2, [r4, #24]
 80044a8:	61e3      	str	r3, [r4, #28]
		printmsg(user_msg);
 80044aa:	4803      	ldr	r0, [pc, #12]	; (80044b8 <vHandlerTask+0x40>)
 80044ac:	f000 f8f2 	bl	8004694 <printmsg>
		xSemaphoreTake(xCountingSemaphore,portMAX_DELAY);
 80044b0:	e7e6      	b.n	8004480 <vHandlerTask+0x8>
 80044b2:	bf00      	nop
 80044b4:	200153f0 	.word	0x200153f0
 80044b8:	200153f4 	.word	0x200153f4
 80044bc:	08004cfc 	.word	0x08004cfc

080044c0 <vPeriodicTask>:

	}

}
void vPeriodicTask(void* params){
 80044c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	while(1){

		//this task makes a software interrupt periodically fo every 500 ms
		vTaskDelay(pdMS_TO_TICKS(500));
 80044c8:	20fa      	movs	r0, #250	; 0xfa
 80044ca:	f7fd f803 	bl	80014d4 <vTaskDelay>

		/* Generate the interrupt, printing a message both before hand and
		afterwards so the sequence of execution is evident from the output. */
		sprintf(user_msg,"periodic task pending the interrupt\r\n");
 80044ce:	4b17      	ldr	r3, [pc, #92]	; (800452c <vPeriodicTask+0x6c>)
 80044d0:	4a17      	ldr	r2, [pc, #92]	; (8004530 <vPeriodicTask+0x70>)
 80044d2:	4614      	mov	r4, r2
 80044d4:	469c      	mov	ip, r3
 80044d6:	f104 0e20 	add.w	lr, r4, #32
 80044da:	4665      	mov	r5, ip
 80044dc:	4626      	mov	r6, r4
 80044de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80044e0:	6028      	str	r0, [r5, #0]
 80044e2:	6069      	str	r1, [r5, #4]
 80044e4:	60aa      	str	r2, [r5, #8]
 80044e6:	60eb      	str	r3, [r5, #12]
 80044e8:	3410      	adds	r4, #16
 80044ea:	f10c 0c10 	add.w	ip, ip, #16
 80044ee:	4574      	cmp	r4, lr
 80044f0:	d1f3      	bne.n	80044da <vPeriodicTask+0x1a>
 80044f2:	4663      	mov	r3, ip
 80044f4:	4622      	mov	r2, r4
 80044f6:	6810      	ldr	r0, [r2, #0]
 80044f8:	6018      	str	r0, [r3, #0]
 80044fa:	8892      	ldrh	r2, [r2, #4]
 80044fc:	809a      	strh	r2, [r3, #4]
		printmsg(user_msg);
 80044fe:	480b      	ldr	r0, [pc, #44]	; (800452c <vPeriodicTask+0x6c>)
 8004500:	f000 f8c8 	bl	8004694 <printmsg>

		//pend the interrupt
		NVIC_SetPendingIRQ(EXTI15_10_IRQn);
 8004504:	2028      	movs	r0, #40	; 0x28
 8004506:	f7ff ff0b 	bl	8004320 <NVIC_SetPendingIRQ>

		sprintf(user_msg, "Periodic task - Resuming.\r\n" );
 800450a:	4a08      	ldr	r2, [pc, #32]	; (800452c <vPeriodicTask+0x6c>)
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <vPeriodicTask+0x74>)
 800450e:	4615      	mov	r5, r2
 8004510:	461c      	mov	r4, r3
 8004512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004514:	6028      	str	r0, [r5, #0]
 8004516:	6069      	str	r1, [r5, #4]
 8004518:	60aa      	str	r2, [r5, #8]
 800451a:	60eb      	str	r3, [r5, #12]
 800451c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800451e:	6128      	str	r0, [r5, #16]
 8004520:	6169      	str	r1, [r5, #20]
 8004522:	61aa      	str	r2, [r5, #24]
		printmsg(user_msg);
 8004524:	4801      	ldr	r0, [pc, #4]	; (800452c <vPeriodicTask+0x6c>)
 8004526:	f000 f8b5 	bl	8004694 <printmsg>
		vTaskDelay(pdMS_TO_TICKS(500));
 800452a:	e7cd      	b.n	80044c8 <vPeriodicTask+0x8>
 800452c:	200153f4 	.word	0x200153f4
 8004530:	08004d1c 	.word	0x08004d1c
 8004534:	08004d44 	.word	0x08004d44

08004538 <GPIO_Setup>:

	}
}


static void GPIO_Setup(void){
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef buttonGPIO,LED_GPIO;
	memset(&buttonGPIO,0,sizeof(buttonGPIO));
 800453e:	f107 0310 	add.w	r3, r7, #16
 8004542:	2208      	movs	r2, #8
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fb24 	bl	8004b94 <memset>
	memset(&LED_GPIO,0,sizeof(LED_GPIO));
 800454c:	f107 0308 	add.w	r3, r7, #8
 8004550:	2208      	movs	r2, #8
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fb1d 	bl	8004b94 <memset>

	//enable clock for gpioa and gpioc and syscfg
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800455a:	2101      	movs	r1, #1
 800455c:	2001      	movs	r0, #1
 800455e:	f7fc f8eb 	bl	8000738 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004562:	2101      	movs	r1, #1
 8004564:	2004      	movs	r0, #4
 8004566:	f7fc f8e7 	bl	8000738 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800456a:	2101      	movs	r1, #1
 800456c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004570:	f7fc f922 	bl	80007b8 <RCC_APB2PeriphClockCmd>

	//configure led pin pa5 as output
	LED_GPIO.GPIO_Pin=GPIO_Pin_5;
 8004574:	2320      	movs	r3, #32
 8004576:	60bb      	str	r3, [r7, #8]
	LED_GPIO.GPIO_Mode=GPIO_Mode_OUT;
 8004578:	2301      	movs	r3, #1
 800457a:	733b      	strb	r3, [r7, #12]
	LED_GPIO.GPIO_OType=GPIO_OType_PP;
 800457c:	2300      	movs	r3, #0
 800457e:	73bb      	strb	r3, [r7, #14]
	LED_GPIO.GPIO_PuPd=GPIO_PuPd_NOPULL;
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]

	GPIO_Init(GPIOA, &LED_GPIO);
 8004584:	f107 0308 	add.w	r3, r7, #8
 8004588:	4619      	mov	r1, r3
 800458a:	4815      	ldr	r0, [pc, #84]	; (80045e0 <GPIO_Setup+0xa8>)
 800458c:	f7fb feca 	bl	8000324 <GPIO_Init>

	//configure button gpio pc13 as input
	buttonGPIO.GPIO_Pin=GPIO_Pin_13;
 8004590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004594:	613b      	str	r3, [r7, #16]
	buttonGPIO.GPIO_Mode=GPIO_Mode_IN;
 8004596:	2300      	movs	r3, #0
 8004598:	753b      	strb	r3, [r7, #20]

	GPIO_Init(GPIOC, &buttonGPIO);
 800459a:	f107 0310 	add.w	r3, r7, #16
 800459e:	4619      	mov	r1, r3
 80045a0:	4810      	ldr	r0, [pc, #64]	; (80045e4 <GPIO_Setup+0xac>)
 80045a2:	f7fb febf 	bl	8000324 <GPIO_Init>
	//interrupt configuration for the button pc13
	//1.system configuration for exti lines
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource13);
 80045a6:	210d      	movs	r1, #13
 80045a8:	2002      	movs	r0, #2
 80045aa:	f7fc f925 	bl	80007f8 <SYSCFG_EXTILineConfig>
    //2.exti configuration(peripheral side)-13 th line,interrupt mode,falling edge
	EXTI_InitTypeDef EXTI_pc13;
	EXTI_pc13.EXTI_Mode=EXTI_Mode_Interrupt;
 80045ae:	2300      	movs	r3, #0
 80045b0:	713b      	strb	r3, [r7, #4]
	EXTI_pc13.EXTI_Line=EXTI_Line13;
 80045b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045b6:	603b      	str	r3, [r7, #0]
	EXTI_pc13.EXTI_Trigger=EXTI_Trigger_Falling;
 80045b8:	230c      	movs	r3, #12
 80045ba:	717b      	strb	r3, [r7, #5]
	EXTI_pc13.EXTI_LineCmd=ENABLE;
 80045bc:	2301      	movs	r3, #1
 80045be:	71bb      	strb	r3, [r7, #6]

	EXTI_Init(&EXTI_pc13);
 80045c0:	463b      	mov	r3, r7
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fb fe2c 	bl	8000220 <EXTI_Init>
	//3.nvic configuration(processor side),for exti 13 line
	NVIC_SetPriority(EXTI15_10_IRQn, 15);
 80045c8:	210f      	movs	r1, #15
 80045ca:	2028      	movs	r0, #40	; 0x28
 80045cc:	f7ff fec2 	bl	8004354 <NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045d0:	2028      	movs	r0, #40	; 0x28
 80045d2:	f7ff fe8b 	bl	80042ec <NVIC_EnableIRQ>

}
 80045d6:	bf00      	nop
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40020000 	.word	0x40020000
 80045e4:	40020800 	.word	0x40020800

080045e8 <UART_Setup>:

static void UART_Setup(void){
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef UART_Gpio;
		memset(&UART_Gpio,0,sizeof(UART_Gpio));
 80045ee:	f107 0310 	add.w	r3, r7, #16
 80045f2:	2208      	movs	r2, #8
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 facc 	bl	8004b94 <memset>
		USART_InitTypeDef UART_Handle;
		memset(&UART_Handle,0,sizeof(UART_Handle));
 80045fc:	463b      	mov	r3, r7
 80045fe:	2210      	movs	r2, #16
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fac6 	bl	8004b94 <memset>

	//enable clock for uart peripheral and gpioa peripheral
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8004608:	2101      	movs	r1, #1
 800460a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800460e:	f7fc f8b3 	bl	8000778 <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004612:	2101      	movs	r1, #1
 8004614:	2001      	movs	r0, #1
 8004616:	f7fc f88f 	bl	8000738 <RCC_AHB1PeriphClockCmd>

		//configure pa2 as uart_tx and pa3 as uart_rx

		UART_Gpio.GPIO_Pin=GPIO_Pin_2 | GPIO_Pin_3;
 800461a:	230c      	movs	r3, #12
 800461c:	613b      	str	r3, [r7, #16]
		UART_Gpio.GPIO_Mode=GPIO_Mode_AF;
 800461e:	2302      	movs	r3, #2
 8004620:	753b      	strb	r3, [r7, #20]
		UART_Gpio.GPIO_PuPd=GPIO_PuPd_UP;
 8004622:	2301      	movs	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
		GPIO_Init(GPIOA, &UART_Gpio);
 8004626:	f107 0310 	add.w	r3, r7, #16
 800462a:	4619      	mov	r1, r3
 800462c:	4813      	ldr	r0, [pc, #76]	; (800467c <UART_Setup+0x94>)
 800462e:	f7fb fe79 	bl	8000324 <GPIO_Init>

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);//PA2 CONFIG AF7
 8004632:	2207      	movs	r2, #7
 8004634:	2102      	movs	r1, #2
 8004636:	4811      	ldr	r0, [pc, #68]	; (800467c <UART_Setup+0x94>)
 8004638:	f7fb ff02 	bl	8000440 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);//PA3 CONFIG AF7
 800463c:	2207      	movs	r2, #7
 800463e:	2103      	movs	r1, #3
 8004640:	480e      	ldr	r0, [pc, #56]	; (800467c <UART_Setup+0x94>)
 8004642:	f7fb fefd 	bl	8000440 <GPIO_PinAFConfig>

		//UART PERIPHERAL CONFIGURATION
		UART_Handle.USART_BaudRate=115200;
 8004646:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800464a:	603b      	str	r3, [r7, #0]
		UART_Handle.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 800464c:	2300      	movs	r3, #0
 800464e:	81bb      	strh	r3, [r7, #12]
		UART_Handle.USART_Mode=USART_Mode_Tx | USART_Mode_Rx;
 8004650:	230c      	movs	r3, #12
 8004652:	817b      	strh	r3, [r7, #10]
		UART_Handle.USART_Parity=USART_Parity_No;
 8004654:	2300      	movs	r3, #0
 8004656:	813b      	strh	r3, [r7, #8]
		UART_Handle.USART_StopBits=USART_StopBits_1;
 8004658:	2300      	movs	r3, #0
 800465a:	80fb      	strh	r3, [r7, #6]
		UART_Handle.USART_WordLength=USART_WordLength_8b;
 800465c:	2300      	movs	r3, #0
 800465e:	80bb      	strh	r3, [r7, #4]

		USART_Init(USART2, &UART_Handle);
 8004660:	463b      	mov	r3, r7
 8004662:	4619      	mov	r1, r3
 8004664:	4806      	ldr	r0, [pc, #24]	; (8004680 <UART_Setup+0x98>)
 8004666:	f7fc f909 	bl	800087c <USART_Init>
		USART_Cmd(USART2, ENABLE);
 800466a:	2101      	movs	r1, #1
 800466c:	4804      	ldr	r0, [pc, #16]	; (8004680 <UART_Setup+0x98>)
 800466e:	f7fc f9bf 	bl	80009f0 <USART_Cmd>

}
 8004672:	bf00      	nop
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40020000 	.word	0x40020000
 8004680:	40004400 	.word	0x40004400

08004684 <pvtHardwareSetup>:

static void pvtHardwareSetup(void){
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
	UART_Setup();
 8004688:	f7ff ffae 	bl	80045e8 <UART_Setup>
	GPIO_Setup();
 800468c:	f7ff ff54 	bl	8004538 <GPIO_Setup>



}
 8004690:	bf00      	nop
 8004692:	bd80      	pop	{r7, pc}

08004694 <printmsg>:

void printmsg(char* msg){
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

	for(uint32_t i=0;i<strlen(msg);i++){
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e013      	b.n	80046ca <printmsg+0x36>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)==RESET);
 80046a2:	bf00      	nop
 80046a4:	2180      	movs	r1, #128	; 0x80
 80046a6:	480e      	ldr	r0, [pc, #56]	; (80046e0 <printmsg+0x4c>)
 80046a8:	f7fc f9d4 	bl	8000a54 <USART_GetFlagStatus>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f8      	beq.n	80046a4 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	4808      	ldr	r0, [pc, #32]	; (80046e0 <printmsg+0x4c>)
 80046c0:	f7fc f9b6 	bl	8000a30 <USART_SendData>
	for(uint32_t i=0;i<strlen(msg);i++){
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3301      	adds	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fb fda0 	bl	8000210 <strlen>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d3e4      	bcc.n	80046a2 <printmsg+0xe>
	}

}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40004400 	.word	0x40004400

080046e4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80046e4:	b5b0      	push	{r4, r5, r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0

	//1.clear pending bit in exti_Pr, if it is not cleared by writing 1 to it it will produce cont. interrupt
	EXTI_ClearITPendingBit(EXTI_Line13);
 80046ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80046ee:	f7fb fe09 	bl	8000304 <EXTI_ClearITPendingBit>

	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]

	sprintf(user_msg,"==>Button_Handler\r\n");
 80046f6:	4a22      	ldr	r2, [pc, #136]	; (8004780 <EXTI15_10_IRQHandler+0x9c>)
 80046f8:	4b22      	ldr	r3, [pc, #136]	; (8004784 <EXTI15_10_IRQHandler+0xa0>)
 80046fa:	4615      	mov	r5, r2
 80046fc:	461c      	mov	r4, r3
 80046fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004700:	6028      	str	r0, [r5, #0]
 8004702:	6069      	str	r1, [r5, #4]
 8004704:	60aa      	str	r2, [r5, #8]
 8004706:	60eb      	str	r3, [r5, #12]
 8004708:	6820      	ldr	r0, [r4, #0]
 800470a:	6128      	str	r0, [r5, #16]
	printmsg(user_msg);
 800470c:	481c      	ldr	r0, [pc, #112]	; (8004780 <EXTI15_10_IRQHandler+0x9c>)
 800470e:	f7ff ffc1 	bl	8004694 <printmsg>

	xSemaphoreGiveFromISR(xCountingSemaphore,&xHigherPriorityTaskWoken);
 8004712:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <EXTI15_10_IRQHandler+0xa4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	1d3a      	adds	r2, r7, #4
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f7fc fb53 	bl	8000dc6 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore,&xHigherPriorityTaskWoken);
 8004720:	4b19      	ldr	r3, [pc, #100]	; (8004788 <EXTI15_10_IRQHandler+0xa4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	1d3a      	adds	r2, r7, #4
 8004726:	4611      	mov	r1, r2
 8004728:	4618      	mov	r0, r3
 800472a:	f7fc fb4c 	bl	8000dc6 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore,&xHigherPriorityTaskWoken);
 800472e:	4b16      	ldr	r3, [pc, #88]	; (8004788 <EXTI15_10_IRQHandler+0xa4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	1d3a      	adds	r2, r7, #4
 8004734:	4611      	mov	r1, r2
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc fb45 	bl	8000dc6 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore,&xHigherPriorityTaskWoken);
 800473c:	4b12      	ldr	r3, [pc, #72]	; (8004788 <EXTI15_10_IRQHandler+0xa4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	1d3a      	adds	r2, r7, #4
 8004742:	4611      	mov	r1, r2
 8004744:	4618      	mov	r0, r3
 8004746:	f7fc fb3e 	bl	8000dc6 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore,&xHigherPriorityTaskWoken);
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <EXTI15_10_IRQHandler+0xa4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	1d3a      	adds	r2, r7, #4
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc fb37 	bl	8000dc6 <xQueueGiveFromISR>
	    NOTE: The syntax for forcing a context switch within an ISR varies between
	    FreeRTOS ports.  The portEND_SWITCHING_ISR() macro is provided as part of
	    the Cortex M3 port layer for this purpose.  taskYIELD() must never be called
	    from an ISR! */

	    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <EXTI15_10_IRQHandler+0x90>
 800475e:	f7ff fb17 	bl	8003d90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8004762:	4b0a      	ldr	r3, [pc, #40]	; (800478c <EXTI15_10_IRQHandler+0xa8>)
 8004764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	f3bf 8f6f 	isb	sy




}
 8004772:	e001      	b.n	8004778 <EXTI15_10_IRQHandler+0x94>
	    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8004774:	f7ff faf0 	bl	8003d58 <SEGGER_SYSVIEW_RecordExitISR>
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bdb0      	pop	{r4, r5, r7, pc}
 8004780:	200153f4 	.word	0x200153f4
 8004784:	08004d60 	.word	0x08004d60
 8004788:	200153f0 	.word	0x200153f0
 800478c:	e000ed04 	.word	0xe000ed04

08004790 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004794:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <SystemInit+0x60>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479a:	4a15      	ldr	r2, [pc, #84]	; (80047f0 <SystemInit+0x60>)
 800479c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80047a4:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <SystemInit+0x64>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <SystemInit+0x64>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <SystemInit+0x64>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80047b6:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <SystemInit+0x64>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <SystemInit+0x64>)
 80047bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80047c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <SystemInit+0x64>)
 80047c8:	4a0b      	ldr	r2, [pc, #44]	; (80047f8 <SystemInit+0x68>)
 80047ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <SystemInit+0x64>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <SystemInit+0x64>)
 80047d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <SystemInit+0x64>)
 80047da:	2200      	movs	r2, #0
 80047dc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80047de:	f000 f8db 	bl	8004998 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047e2:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <SystemInit+0x60>)
 80047e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047e8:	609a      	str	r2, [r3, #8]
#endif
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	e000ed00 	.word	0xe000ed00
 80047f4:	40023800 	.word	0x40023800
 80047f8:	24003010 	.word	0x24003010

080047fc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	2302      	movs	r3, #2
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	2300      	movs	r3, #0
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	2302      	movs	r3, #2
 8004814:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8004816:	2302      	movs	r3, #2
 8004818:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800481a:	4b5a      	ldr	r3, [pc, #360]	; (8004984 <SystemCoreClockUpdate+0x188>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b0c      	cmp	r3, #12
 8004828:	f200 8092 	bhi.w	8004950 <SystemCoreClockUpdate+0x154>
 800482c:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <SystemCoreClockUpdate+0x38>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004869 	.word	0x08004869
 8004838:	08004951 	.word	0x08004951
 800483c:	08004951 	.word	0x08004951
 8004840:	08004951 	.word	0x08004951
 8004844:	08004871 	.word	0x08004871
 8004848:	08004951 	.word	0x08004951
 800484c:	08004951 	.word	0x08004951
 8004850:	08004951 	.word	0x08004951
 8004854:	08004879 	.word	0x08004879
 8004858:	08004951 	.word	0x08004951
 800485c:	08004951 	.word	0x08004951
 8004860:	08004951 	.word	0x08004951
 8004864:	080048e5 	.word	0x080048e5
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004868:	4b47      	ldr	r3, [pc, #284]	; (8004988 <SystemCoreClockUpdate+0x18c>)
 800486a:	4a48      	ldr	r2, [pc, #288]	; (800498c <SystemCoreClockUpdate+0x190>)
 800486c:	601a      	str	r2, [r3, #0]
      break;
 800486e:	e073      	b.n	8004958 <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004870:	4b45      	ldr	r3, [pc, #276]	; (8004988 <SystemCoreClockUpdate+0x18c>)
 8004872:	4a47      	ldr	r2, [pc, #284]	; (8004990 <SystemCoreClockUpdate+0x194>)
 8004874:	601a      	str	r2, [r3, #0]
      break;
 8004876:	e06f      	b.n	8004958 <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004878:	4b42      	ldr	r3, [pc, #264]	; (8004984 <SystemCoreClockUpdate+0x188>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	0d9b      	lsrs	r3, r3, #22
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004884:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <SystemCoreClockUpdate+0x188>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800488c:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00c      	beq.n	80048ae <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004894:	4a3e      	ldr	r2, [pc, #248]	; (8004990 <SystemCoreClockUpdate+0x194>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	4a39      	ldr	r2, [pc, #228]	; (8004984 <SystemCoreClockUpdate+0x188>)
 800489e:	6852      	ldr	r2, [r2, #4]
 80048a0:	0992      	lsrs	r2, r2, #6
 80048a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e00b      	b.n	80048c6 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80048ae:	4a37      	ldr	r2, [pc, #220]	; (800498c <SystemCoreClockUpdate+0x190>)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	4a33      	ldr	r2, [pc, #204]	; (8004984 <SystemCoreClockUpdate+0x188>)
 80048b8:	6852      	ldr	r2, [r2, #4]
 80048ba:	0992      	lsrs	r2, r2, #6
 80048bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c0:	fb02 f303 	mul.w	r3, r2, r3
 80048c4:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <SystemCoreClockUpdate+0x188>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	0c1b      	lsrs	r3, r3, #16
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	3301      	adds	r3, #1
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	4a2a      	ldr	r2, [pc, #168]	; (8004988 <SystemCoreClockUpdate+0x18c>)
 80048e0:	6013      	str	r3, [r2, #0]
      break;
 80048e2:	e039      	b.n	8004958 <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80048e4:	4b27      	ldr	r3, [pc, #156]	; (8004984 <SystemCoreClockUpdate+0x188>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	0d9b      	lsrs	r3, r3, #22
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f0:	4b24      	ldr	r3, [pc, #144]	; (8004984 <SystemCoreClockUpdate+0x188>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f8:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00c      	beq.n	800491a <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004900:	4a23      	ldr	r2, [pc, #140]	; (8004990 <SystemCoreClockUpdate+0x194>)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	4a1e      	ldr	r2, [pc, #120]	; (8004984 <SystemCoreClockUpdate+0x188>)
 800490a:	6852      	ldr	r2, [r2, #4]
 800490c:	0992      	lsrs	r2, r2, #6
 800490e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	e00b      	b.n	8004932 <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800491a:	4a1c      	ldr	r2, [pc, #112]	; (800498c <SystemCoreClockUpdate+0x190>)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	4a18      	ldr	r2, [pc, #96]	; (8004984 <SystemCoreClockUpdate+0x188>)
 8004924:	6852      	ldr	r2, [r2, #4]
 8004926:	0992      	lsrs	r2, r2, #6
 8004928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <SystemCoreClockUpdate+0x188>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	0f1b      	lsrs	r3, r3, #28
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	3301      	adds	r3, #1
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	4a0f      	ldr	r2, [pc, #60]	; (8004988 <SystemCoreClockUpdate+0x18c>)
 800494c:	6013      	str	r3, [r2, #0]
      break;
 800494e:	e003      	b.n	8004958 <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8004950:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <SystemCoreClockUpdate+0x18c>)
 8004952:	4a0e      	ldr	r2, [pc, #56]	; (800498c <SystemCoreClockUpdate+0x190>)
 8004954:	601a      	str	r2, [r3, #0]
      break;
 8004956:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <SystemCoreClockUpdate+0x188>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	4a0c      	ldr	r2, [pc, #48]	; (8004994 <SystemCoreClockUpdate+0x198>)
 8004964:	5cd3      	ldrb	r3, [r2, r3]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <SystemCoreClockUpdate+0x18c>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
 8004974:	4a04      	ldr	r2, [pc, #16]	; (8004988 <SystemCoreClockUpdate+0x18c>)
 8004976:	6013      	str	r3, [r2, #0]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40023800 	.word	0x40023800
 8004988:	20000014 	.word	0x20000014
 800498c:	00f42400 	.word	0x00f42400
 8004990:	007a1200 	.word	0x007a1200
 8004994:	20000018 	.word	0x20000018

08004998 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	2300      	movs	r3, #0
 80049a4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80049a6:	4b43      	ldr	r3, [pc, #268]	; (8004ab4 <SetSysClock+0x11c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a42      	ldr	r2, [pc, #264]	; (8004ab4 <SetSysClock+0x11c>)
 80049ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80049b2:	4b40      	ldr	r3, [pc, #256]	; (8004ab4 <SetSysClock+0x11c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3301      	adds	r3, #1
 80049c0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <SetSysClock+0x38>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80049ce:	d1f0      	bne.n	80049b2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80049d0:	4b38      	ldr	r3, [pc, #224]	; (8004ab4 <SetSysClock+0x11c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80049dc:	2301      	movs	r3, #1
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	e001      	b.n	80049e6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80049e2:	2300      	movs	r3, #0
 80049e4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d15c      	bne.n	8004aa6 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80049ec:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <SetSysClock+0x11c>)
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	4a30      	ldr	r2, [pc, #192]	; (8004ab4 <SetSysClock+0x11c>)
 80049f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80049f8:	4b2f      	ldr	r3, [pc, #188]	; (8004ab8 <SetSysClock+0x120>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2e      	ldr	r2, [pc, #184]	; (8004ab8 <SetSysClock+0x120>)
 80049fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a02:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004a04:	4b2b      	ldr	r3, [pc, #172]	; (8004ab4 <SetSysClock+0x11c>)
 8004a06:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <SetSysClock+0x11c>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004a0c:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <SetSysClock+0x11c>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a28      	ldr	r2, [pc, #160]	; (8004ab4 <SetSysClock+0x11c>)
 8004a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a16:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004a18:	4b26      	ldr	r3, [pc, #152]	; (8004ab4 <SetSysClock+0x11c>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <SetSysClock+0x11c>)
 8004a1e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004a22:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004a24:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <SetSysClock+0x11c>)
 8004a26:	4a25      	ldr	r2, [pc, #148]	; (8004abc <SetSysClock+0x124>)
 8004a28:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004a2a:	4b22      	ldr	r3, [pc, #136]	; (8004ab4 <SetSysClock+0x11c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a21      	ldr	r2, [pc, #132]	; (8004ab4 <SetSysClock+0x11c>)
 8004a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a34:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004a36:	bf00      	nop
 8004a38:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <SetSysClock+0x11c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f9      	beq.n	8004a38 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8004a44:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <SetSysClock+0x120>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <SetSysClock+0x120>)
 8004a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4e:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8004a50:	bf00      	nop
 8004a52:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <SetSysClock+0x120>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f9      	beq.n	8004a52 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8004a5e:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <SetSysClock+0x120>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <SetSysClock+0x120>)
 8004a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a68:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8004a6a:	bf00      	nop
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <SetSysClock+0x120>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f9      	beq.n	8004a6c <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004a78:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <SetSysClock+0x128>)
 8004a7a:	f240 7205 	movw	r2, #1797	; 0x705
 8004a7e:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <SetSysClock+0x11c>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a0b      	ldr	r2, [pc, #44]	; (8004ab4 <SetSysClock+0x11c>)
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004a8c:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <SetSysClock+0x11c>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a08      	ldr	r2, [pc, #32]	; (8004ab4 <SetSysClock+0x11c>)
 8004a92:	f043 0302 	orr.w	r3, r3, #2
 8004a96:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004a98:	bf00      	nop
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <SetSysClock+0x11c>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d1f9      	bne.n	8004a9a <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	77405a08 	.word	0x77405a08
 8004ac0:	40023c00 	.word	0x40023c00

08004ac4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ac4:	480d      	ldr	r0, [pc, #52]	; (8004afc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ac6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ac8:	480d      	ldr	r0, [pc, #52]	; (8004b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8004aca:	490e      	ldr	r1, [pc, #56]	; (8004b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004acc:	4a0e      	ldr	r2, [pc, #56]	; (8004b08 <LoopForever+0xe>)
  movs r3, #0
 8004ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ad0:	e002      	b.n	8004ad8 <LoopCopyDataInit>

08004ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ad6:	3304      	adds	r3, #4

08004ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004adc:	d3f9      	bcc.n	8004ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ade:	4a0b      	ldr	r2, [pc, #44]	; (8004b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ae0:	4c0b      	ldr	r4, [pc, #44]	; (8004b10 <LoopForever+0x16>)
  movs r3, #0
 8004ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ae4:	e001      	b.n	8004aea <LoopFillZerobss>

08004ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ae8:	3204      	adds	r2, #4

08004aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aec:	d3fb      	bcc.n	8004ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004aee:	f7ff fe4f 	bl	8004790 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004af2:	f000 f811 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004af6:	f7ff fc57 	bl	80043a8 <main>

08004afa <LoopForever>:

LoopForever:
    b LoopForever
 8004afa:	e7fe      	b.n	8004afa <LoopForever>
  ldr   r0, =_estack
 8004afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b04:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8004b08:	08004d90 	.word	0x08004d90
  ldr r2, =_sbss
 8004b0c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8004b10:	20015458 	.word	0x20015458

08004b14 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b14:	e7fe      	b.n	8004b14 <ADC_IRQHandler>
	...

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4e0d      	ldr	r6, [pc, #52]	; (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	; (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1ba4      	subs	r4, r4, r6
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2500      	movs	r5, #0
 8004b24:	42a5      	cmp	r5, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4e0b      	ldr	r6, [pc, #44]	; (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	; (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f000 f83a 	bl	8004ba4 <_init>
 8004b30:	1ba4      	subs	r4, r4, r6
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2500      	movs	r5, #0
 8004b36:	42a5      	cmp	r5, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b40:	4798      	blx	r3
 8004b42:	3501      	adds	r5, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b4a:	4798      	blx	r3
 8004b4c:	3501      	adds	r5, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	08004d88 	.word	0x08004d88
 8004b54:	08004d88 	.word	0x08004d88
 8004b58:	08004d88 	.word	0x08004d88
 8004b5c:	08004d8c 	.word	0x08004d8c

08004b60 <memcmp>:
 8004b60:	b530      	push	{r4, r5, lr}
 8004b62:	2400      	movs	r4, #0
 8004b64:	42a2      	cmp	r2, r4
 8004b66:	d101      	bne.n	8004b6c <memcmp+0xc>
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e007      	b.n	8004b7c <memcmp+0x1c>
 8004b6c:	5d03      	ldrb	r3, [r0, r4]
 8004b6e:	3401      	adds	r4, #1
 8004b70:	190d      	adds	r5, r1, r4
 8004b72:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004b76:	42ab      	cmp	r3, r5
 8004b78:	d0f4      	beq.n	8004b64 <memcmp+0x4>
 8004b7a:	1b58      	subs	r0, r3, r5
 8004b7c:	bd30      	pop	{r4, r5, pc}

08004b7e <memcpy>:
 8004b7e:	b510      	push	{r4, lr}
 8004b80:	1e43      	subs	r3, r0, #1
 8004b82:	440a      	add	r2, r1
 8004b84:	4291      	cmp	r1, r2
 8004b86:	d100      	bne.n	8004b8a <memcpy+0xc>
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b92:	e7f7      	b.n	8004b84 <memcpy+0x6>

08004b94 <memset>:
 8004b94:	4402      	add	r2, r0
 8004b96:	4603      	mov	r3, r0
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d100      	bne.n	8004b9e <memset+0xa>
 8004b9c:	4770      	bx	lr
 8004b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba2:	e7f9      	b.n	8004b98 <memset+0x4>

08004ba4 <_init>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr

08004bb0 <_fini>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	bf00      	nop
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr
