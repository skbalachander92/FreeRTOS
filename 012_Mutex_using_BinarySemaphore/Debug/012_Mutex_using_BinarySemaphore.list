
012_Mutex_using_BinarySemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004860  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bac  08004bac  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08004bac  08004bac  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bac  08004bac  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08004bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015430  20000028  08004bdc  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015458  08004bdc  00025458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5c1  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e1f  00000000  00000000  0002f619  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  00031438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  00032068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ea8  00000000  00000000  00032bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acc3  00000000  00000000  00035a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080244  00000000  00000000  0004071b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c095f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003460  00000000  00000000  000c09dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000028 	.word	0x20000028
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004a18 	.word	0x08004a18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000002c 	.word	0x2000002c
 800020c:	08004a18 	.word	0x08004a18

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000220:	b480      	push	{r7}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e076      	b.n	800032a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800023c:	2201      	movs	r2, #1
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	fa02 f303 	lsl.w	r3, r2, r3
 8000244:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	4013      	ands	r3, r2
 800024e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	429a      	cmp	r2, r3
 8000256:	d165      	bne.n	8000324 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	2103      	movs	r1, #3
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	43db      	mvns	r3, r3
 8000268:	401a      	ands	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	791b      	ldrb	r3, [r3, #4]
 8000276:	4619      	mov	r1, r3
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	791b      	ldrb	r3, [r3, #4]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d003      	beq.n	8000296 <GPIO_Init+0x76>
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	2b02      	cmp	r3, #2
 8000294:	d12e      	bne.n	80002f4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	2103      	movs	r1, #3
 80002a0:	fa01 f303 	lsl.w	r3, r1, r3
 80002a4:	43db      	mvns	r3, r3
 80002a6:	401a      	ands	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	795b      	ldrb	r3, [r3, #5]
 80002b4:	4619      	mov	r1, r3
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	431a      	orrs	r2, r3
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	685a      	ldr	r2, [r3, #4]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	2301      	movs	r3, #1
 80002d0:	408b      	lsls	r3, r1
 80002d2:	43db      	mvns	r3, r3
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	683a      	ldr	r2, [r7, #0]
 80002e0:	7992      	ldrb	r2, [r2, #6]
 80002e2:	4611      	mov	r1, r2
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	b292      	uxth	r2, r2
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	b292      	uxth	r2, r2
 80002ee:	431a      	orrs	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	68da      	ldr	r2, [r3, #12]
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	2103      	movs	r1, #3
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	43db      	mvns	r3, r3
 8000306:	401a      	ands	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68da      	ldr	r2, [r3, #12]
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	79db      	ldrb	r3, [r3, #7]
 8000314:	4619      	mov	r1, r3
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	431a      	orrs	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	3301      	adds	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	2b0f      	cmp	r3, #15
 800032e:	d985      	bls.n	800023c <GPIO_Init+0x1c>
    }
  }
}
 8000330:	bf00      	nop
 8000332:	371c      	adds	r7, #28
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	807b      	strh	r3, [r7, #2]
 8000348:	4613      	mov	r3, r2
 800034a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000350:	2300      	movs	r3, #0
 8000352:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000354:	787a      	ldrb	r2, [r7, #1]
 8000356:	887b      	ldrh	r3, [r7, #2]
 8000358:	f003 0307 	and.w	r3, r3, #7
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	fa02 f303 	lsl.w	r3, r2, r3
 8000362:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000364:	887b      	ldrh	r3, [r7, #2]
 8000366:	08db      	lsrs	r3, r3, #3
 8000368:	b29b      	uxth	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3208      	adds	r2, #8
 8000370:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000374:	887b      	ldrh	r3, [r7, #2]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	210f      	movs	r1, #15
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43db      	mvns	r3, r3
 8000384:	8879      	ldrh	r1, [r7, #2]
 8000386:	08c9      	lsrs	r1, r1, #3
 8000388:	b289      	uxth	r1, r1
 800038a:	4608      	mov	r0, r1
 800038c:	ea02 0103 	and.w	r1, r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f100 0208 	add.w	r2, r0, #8
 8000396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800039a:	887b      	ldrh	r3, [r7, #2]
 800039c:	08db      	lsrs	r3, r3, #3
 800039e:	b29b      	uxth	r3, r3
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3208      	adds	r2, #8
 80003a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003b0:	887b      	ldrh	r3, [r7, #2]
 80003b2:	08db      	lsrs	r3, r3, #3
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3208      	adds	r2, #8
 80003bc:	68b9      	ldr	r1, [r7, #8]
 80003be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <RCC_DeInit+0x60>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <RCC_DeInit+0x60>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <RCC_DeInit+0x60>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <RCC_DeInit+0x60>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a11      	ldr	r2, [pc, #68]	; (8000430 <RCC_DeInit+0x60>)
 80003ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80003f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80003f4:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <RCC_DeInit+0x60>)
 80003f8:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <RCC_DeInit+0x64>)
 80003fa:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <RCC_DeInit+0x60>)
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <RCC_DeInit+0x68>)
 8000400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <RCC_DeInit+0x60>)
 8000406:	4a0d      	ldr	r2, [pc, #52]	; (800043c <RCC_DeInit+0x6c>)
 8000408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <RCC_DeInit+0x60>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a07      	ldr	r2, [pc, #28]	; (8000430 <RCC_DeInit+0x60>)
 8000412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000416:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <RCC_DeInit+0x60>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <RCC_DeInit+0x60>)
 8000420:	2200      	movs	r2, #0
 8000422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40023800 	.word	0x40023800
 8000434:	24003010 	.word	0x24003010
 8000438:	20003000 	.word	0x20003000
 800043c:	24003000 	.word	0x24003000

08000440 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000440:	b480      	push	{r7}
 8000442:	b08b      	sub	sp, #44	; 0x2c
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]
 800044c:	2300      	movs	r3, #0
 800044e:	61fb      	str	r3, [r7, #28]
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
 8000454:	2302      	movs	r3, #2
 8000456:	61bb      	str	r3, [r7, #24]
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	2302      	movs	r3, #2
 800045e:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000460:	2302      	movs	r3, #2
 8000462:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000464:	4b6f      	ldr	r3, [pc, #444]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f003 030c 	and.w	r3, r3, #12
 800046c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800046e:	6a3b      	ldr	r3, [r7, #32]
 8000470:	2b0c      	cmp	r3, #12
 8000472:	f200 8091 	bhi.w	8000598 <RCC_GetClocksFreq+0x158>
 8000476:	a201      	add	r2, pc, #4	; (adr r2, 800047c <RCC_GetClocksFreq+0x3c>)
 8000478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047c:	080004b1 	.word	0x080004b1
 8000480:	08000599 	.word	0x08000599
 8000484:	08000599 	.word	0x08000599
 8000488:	08000599 	.word	0x08000599
 800048c:	080004b9 	.word	0x080004b9
 8000490:	08000599 	.word	0x08000599
 8000494:	08000599 	.word	0x08000599
 8000498:	08000599 	.word	0x08000599
 800049c:	080004c1 	.word	0x080004c1
 80004a0:	08000599 	.word	0x08000599
 80004a4:	08000599 	.word	0x08000599
 80004a8:	08000599 	.word	0x08000599
 80004ac:	0800052d 	.word	0x0800052d
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a5d      	ldr	r2, [pc, #372]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 80004b4:	601a      	str	r2, [r3, #0]
    break;
 80004b6:	e073      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a5c      	ldr	r2, [pc, #368]	; (800062c <RCC_GetClocksFreq+0x1ec>)
 80004bc:	601a      	str	r2, [r3, #0]
    break;
 80004be:	e06f      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004c0:	4b58      	ldr	r3, [pc, #352]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	0d9b      	lsrs	r3, r3, #22
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004cc:	4b55      	ldr	r3, [pc, #340]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004d4:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d00c      	beq.n	80004f6 <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004dc:	4a53      	ldr	r2, [pc, #332]	; (800062c <RCC_GetClocksFreq+0x1ec>)
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e4:	4a4f      	ldr	r2, [pc, #316]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80004e6:	6852      	ldr	r2, [r2, #4]
 80004e8:	0992      	lsrs	r2, r2, #6
 80004ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004ee:	fb02 f303 	mul.w	r3, r2, r3
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
 80004f4:	e00b      	b.n	800050e <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004f6:	4a4c      	ldr	r2, [pc, #304]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fe:	4a49      	ldr	r2, [pc, #292]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000500:	6852      	ldr	r2, [r2, #4]
 8000502:	0992      	lsrs	r2, r2, #6
 8000504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000508:	fb02 f303 	mul.w	r3, r2, r3
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800050e:	4b45      	ldr	r3, [pc, #276]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	0c1b      	lsrs	r3, r3, #16
 8000514:	f003 0303 	and.w	r3, r3, #3
 8000518:	3301      	adds	r3, #1
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800051e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000520:	69bb      	ldr	r3, [r7, #24]
 8000522:	fbb2 f2f3 	udiv	r2, r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	601a      	str	r2, [r3, #0]
    break;
 800052a:	e039      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800052c:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	0d9b      	lsrs	r3, r3, #22
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000538:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000540:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d00c      	beq.n	8000562 <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000548:	4a38      	ldr	r2, [pc, #224]	; (800062c <RCC_GetClocksFreq+0x1ec>)
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000550:	4a34      	ldr	r2, [pc, #208]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000552:	6852      	ldr	r2, [r2, #4]
 8000554:	0992      	lsrs	r2, r2, #6
 8000556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800055a:	fb02 f303 	mul.w	r3, r2, r3
 800055e:	627b      	str	r3, [r7, #36]	; 0x24
 8000560:	e00b      	b.n	800057a <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000562:	4a31      	ldr	r2, [pc, #196]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	fbb2 f3f3 	udiv	r3, r2, r3
 800056a:	4a2e      	ldr	r2, [pc, #184]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800056c:	6852      	ldr	r2, [r2, #4]
 800056e:	0992      	lsrs	r2, r2, #6
 8000570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000574:	fb02 f303 	mul.w	r3, r2, r3
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 800057a:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	0f1b      	lsrs	r3, r3, #28
 8000580:	f003 0307 	and.w	r3, r3, #7
 8000584:	3301      	adds	r3, #1
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 800058a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	601a      	str	r2, [r3, #0]
    break;
 8000596:	e003      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a23      	ldr	r2, [pc, #140]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 800059c:	601a      	str	r2, [r3, #0]
    break;
 800059e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005a8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80005aa:	6a3b      	ldr	r3, [r7, #32]
 80005ac:	091b      	lsrs	r3, r3, #4
 80005ae:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005b0:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <RCC_GetClocksFreq+0x1f0>)
 80005b2:	6a3b      	ldr	r3, [r7, #32]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	40da      	lsrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80005d0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	0a9b      	lsrs	r3, r3, #10
 80005d6:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005d8:	4a15      	ldr	r2, [pc, #84]	; (8000630 <RCC_GetClocksFreq+0x1f0>)
 80005da:	6a3b      	ldr	r3, [r7, #32]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005f8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 80005fa:	6a3b      	ldr	r3, [r7, #32]
 80005fc:	0b5b      	lsrs	r3, r3, #13
 80005fe:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000600:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <RCC_GetClocksFreq+0x1f0>)
 8000602:	6a3b      	ldr	r3, [r7, #32]
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	40da      	lsrs	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	60da      	str	r2, [r3, #12]
}
 8000618:	bf00      	nop
 800061a:	372c      	adds	r7, #44	; 0x2c
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40023800 	.word	0x40023800
 8000628:	00f42400 	.word	0x00f42400
 800062c:	007a1200 	.word	0x007a1200
 8000630:	20000000 	.word	0x20000000

08000634 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000652:	e006      	b.n	8000662 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	43db      	mvns	r3, r3
 800065c:	4904      	ldr	r1, [pc, #16]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 800065e:	4013      	ands	r3, r2
 8000660:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d006      	beq.n	8000694 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800068a:	4909      	ldr	r1, [pc, #36]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000692:	e006      	b.n	80006a2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	43db      	mvns	r3, r3
 800069c:	4904      	ldr	r1, [pc, #16]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 800069e:	4013      	ands	r3, r2
 80006a0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	8a1b      	ldrh	r3, [r3, #16]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	88db      	ldrh	r3, [r3, #6]
 80006e2:	461a      	mov	r2, r3
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	4313      	orrs	r3, r2
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80006ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000700:	f023 030c 	bic.w	r3, r3, #12
 8000704:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	889a      	ldrh	r2, [r3, #4]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	891b      	ldrh	r3, [r3, #8]
 800070e:	4313      	orrs	r3, r2
 8000710:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000716:	4313      	orrs	r3, r2
 8000718:	b29b      	uxth	r3, r3
 800071a:	461a      	mov	r2, r3
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	4313      	orrs	r3, r2
 8000720:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	b29a      	uxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	8a9b      	ldrh	r3, [r3, #20]
 800072e:	b29b      	uxth	r3, r3
 8000730:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000738:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	899b      	ldrh	r3, [r3, #12]
 800073e:	461a      	mov	r2, r3
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	4313      	orrs	r3, r2
 8000744:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	b29a      	uxth	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe74 	bl	8000440 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a30      	ldr	r2, [pc, #192]	; (800081c <USART_Init+0x168>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d003      	beq.n	8000768 <USART_Init+0xb4>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <USART_Init+0x16c>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d102      	bne.n	800076e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	623b      	str	r3, [r7, #32]
 800076c:	e001      	b.n	8000772 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	899b      	ldrh	r3, [r3, #12]
 8000776:	b29b      	uxth	r3, r3
 8000778:	b21b      	sxth	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	da0c      	bge.n	8000798 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800077e:	6a3a      	ldr	r2, [r7, #32]
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	009a      	lsls	r2, r3, #2
 8000788:	441a      	add	r2, r3
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	fbb2 f3f3 	udiv	r3, r2, r3
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	e00b      	b.n	80007b0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000798:	6a3a      	ldr	r2, [r7, #32]
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	009a      	lsls	r2, r3, #2
 80007a2:	441a      	add	r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <USART_Init+0x170>)
 80007b4:	fba2 2303 	umull	r2, r3, r2, r3
 80007b8:	095b      	lsrs	r3, r3, #5
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	091b      	lsrs	r3, r3, #4
 80007c2:	2264      	movs	r2, #100	; 0x64
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	69fa      	ldr	r2, [r7, #28]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	899b      	ldrh	r3, [r3, #12]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da0c      	bge.n	80007f4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	3332      	adds	r3, #50	; 0x32
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <USART_Init+0x170>)
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	f003 0307 	and.w	r3, r3, #7
 80007ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ee:	4313      	orrs	r3, r2
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
 80007f2:	e00b      	b.n	800080c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	3332      	adds	r3, #50	; 0x32
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <USART_Init+0x170>)
 80007fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000800:	095b      	lsrs	r3, r3, #5
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000808:	4313      	orrs	r3, r2
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	b29a      	uxth	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	811a      	strh	r2, [r3, #8]
}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40011000 	.word	0x40011000
 8000820:	40011400 	.word	0x40011400
 8000824:	51eb851f 	.word	0x51eb851f

08000828 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d008      	beq.n	800084c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	899b      	ldrh	r3, [r3, #12]
 800083e:	b29b      	uxth	r3, r3
 8000840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000844:	b29a      	uxth	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800084a:	e007      	b.n	800085c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	899b      	ldrh	r3, [r3, #12]
 8000850:	b29b      	uxth	r3, r3
 8000852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000856:	b29a      	uxth	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	819a      	strh	r2, [r3, #12]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000874:	887b      	ldrh	r3, [r7, #2]
 8000876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800087a:	b29a      	uxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	809a      	strh	r2, [r3, #4]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	4013      	ands	r3, r2
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e001      	b.n	80008b6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f103 0208 	add.w	r2, r3, #8
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295
 80008dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f103 0208 	add.w	r2, r3, #8
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f103 0208 	add.w	r2, r3, #8
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800091e:	b480      	push	{r7}
 8000920:	b085      	sub	sp, #20
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800097c:	d103      	bne.n	8000986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	e00c      	b.n	80009a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3308      	adds	r3, #8
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e002      	b.n	8000994 <vListInsert+0x2e>
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	429a      	cmp	r2, r3
 800099e:	d2f6      	bcs.n	800098e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6892      	ldr	r2, [r2, #8]
 80009ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	6852      	ldr	r2, [r2, #4]
 80009f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d103      	bne.n	8000a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1e5a      	subs	r2, r3, #1
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d109      	bne.n	8000a54 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a44:	f383 8811 	msr	BASEPRI, r3
 8000a48:	f3bf 8f6f 	isb	sy
 8000a4c:	f3bf 8f4f 	dsb	sy
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	e7fe      	b.n	8000a52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000a54:	f001 fc4a 	bl	80022ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a60:	68f9      	ldr	r1, [r7, #12]
 8000a62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a64:	fb01 f303 	mul.w	r3, r1, r3
 8000a68:	441a      	add	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2200      	movs	r2, #0
 8000a72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a84:	3b01      	subs	r3, #1
 8000a86:	68f9      	ldr	r1, [r7, #12]
 8000a88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a8a:	fb01 f303 	mul.w	r3, r1, r3
 8000a8e:	441a      	add	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	22ff      	movs	r2, #255	; 0xff
 8000a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	22ff      	movs	r2, #255	; 0xff
 8000aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d109      	bne.n	8000abe <xQueueGenericReset+0x92>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00f      	beq.n	8000ad2 <xQueueGenericReset+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3310      	adds	r3, #16
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 ff34 	bl	8001924 <xTaskRemoveFromEventList>
 8000abc:	e009      	b.n	8000ad2 <xQueueGenericReset+0xa6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3310      	adds	r3, #16
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fefe 	bl	80008c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3324      	adds	r3, #36	; 0x24
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fef9 	bl	80008c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000ad2:	f001 fc39 	bl	8002348 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	4613      	mov	r3, r2
 8000aec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d109      	bne.n	8000b08 <xQueueGenericCreate+0x28>
 8000af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af8:	f383 8811 	msr	BASEPRI, r3
 8000afc:	f3bf 8f6f 	isb	sy
 8000b00:	f3bf 8f4f 	dsb	sy
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	e7fe      	b.n	8000b06 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	fb02 f303 	mul.w	r3, r2, r3
 8000b10:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3350      	adds	r3, #80	; 0x50
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 fd0a 	bl	8002530 <pvPortMalloc>
 8000b1c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00d      	beq.n	8000b40 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3350      	adds	r3, #80	; 0x50
 8000b2c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	4613      	mov	r3, r2
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	68b9      	ldr	r1, [r7, #8]
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f000 f805 	bl	8000b4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000b40:	69bb      	ldr	r3, [r7, #24]
	}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b084      	sub	sp, #16
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d103      	bne.n	8000b66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	e002      	b.n	8000b6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000b78:	2101      	movs	r1, #1
 8000b7a:	69b8      	ldr	r0, [r7, #24]
 8000b7c:	f7ff ff56 	bl	8000a2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	78fa      	ldrb	r2, [r7, #3]
 8000b84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	68f9      	ldr	r1, [r7, #12]
 8000b8e:	2073      	movs	r0, #115	; 0x73
 8000b90:	f002 fd1e 	bl	80035d0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	; 0x38
 8000ba0:	af02      	add	r7, sp, #8
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8000bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d109      	bne.n	8000bcc <xQueueGenericSend+0x30>
 8000bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bbc:	f383 8811 	msr	BASEPRI, r3
 8000bc0:	f3bf 8f6f 	isb	sy
 8000bc4:	f3bf 8f4f 	dsb	sy
 8000bc8:	623b      	str	r3, [r7, #32]
 8000bca:	e7fe      	b.n	8000bca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d103      	bne.n	8000bda <xQueueGenericSend+0x3e>
 8000bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <xQueueGenericSend+0x42>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e000      	b.n	8000be0 <xQueueGenericSend+0x44>
 8000bde:	2300      	movs	r3, #0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d109      	bne.n	8000bf8 <xQueueGenericSend+0x5c>
 8000be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be8:	f383 8811 	msr	BASEPRI, r3
 8000bec:	f3bf 8f6f 	isb	sy
 8000bf0:	f3bf 8f4f 	dsb	sy
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	e7fe      	b.n	8000bf6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d103      	bne.n	8000c06 <xQueueGenericSend+0x6a>
 8000bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d101      	bne.n	8000c0a <xQueueGenericSend+0x6e>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e000      	b.n	8000c0c <xQueueGenericSend+0x70>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <xQueueGenericSend+0x88>
 8000c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c14:	f383 8811 	msr	BASEPRI, r3
 8000c18:	f3bf 8f6f 	isb	sy
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	e7fe      	b.n	8000c22 <xQueueGenericSend+0x86>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000c24:	f001 fb62 	bl	80022ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d302      	bcc.n	8000c3a <xQueueGenericSend+0x9e>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d11f      	bne.n	8000c7a <xQueueGenericSend+0xde>
			{
				traceQUEUE_SEND( pxQueue );
 8000c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fa5b 	bl	80040f8 <SEGGER_SYSVIEW_ShrinkId>
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	205a      	movs	r0, #90	; 0x5a
 8000c50:	f002 fd34 	bl	80036bc <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c5a:	f000 f9c7 	bl	8000fec <prvCopyDataToQueue>
 8000c5e:	6278      	str	r0, [r7, #36]	; 0x24

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d004      	beq.n	8000c72 <xQueueGenericSend+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6a:	3324      	adds	r3, #36	; 0x24
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fe59 	bl	8001924 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000c72:	f001 fb69 	bl	8002348 <vPortExitCritical>
				return pdPASS;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e07d      	b.n	8000d76 <xQueueGenericSend+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d110      	bne.n	8000ca2 <xQueueGenericSend+0x106>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000c80:	f001 fb62 	bl	8002348 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8000c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 fa36 	bl	80040f8 <SEGGER_SYSVIEW_ShrinkId>
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	460b      	mov	r3, r1
 8000c96:	4601      	mov	r1, r0
 8000c98:	205a      	movs	r0, #90	; 0x5a
 8000c9a:	f002 fd0f 	bl	80036bc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e069      	b.n	8000d76 <xQueueGenericSend+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d106      	bne.n	8000cb6 <xQueueGenericSend+0x11a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fe9f 	bl	80019f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000cb6:	f001 fb47 	bl	8002348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000cba:	f000 fc5d 	bl	8001578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000cbe:	f001 fb15 	bl	80022ec <vPortEnterCritical>
 8000cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cce:	d103      	bne.n	8000cd8 <xQueueGenericSend+0x13c>
 8000cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d103      	bne.n	8000cee <xQueueGenericSend+0x152>
 8000ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000cee:	f001 fb2b 	bl	8002348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000cf2:	1d3a      	adds	r2, r7, #4
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fe8e 	bl	8001a1c <xTaskCheckForTimeOut>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d124      	bne.n	8000d50 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d08:	f000 fa42 	bl	8001190 <prvIsQueueFull>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d018      	beq.n	8000d44 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d14:	3310      	adds	r3, #16
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fdde 	bl	80018dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d22:	f000 f9cd 	bl	80010c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000d26:	f000 fc35 	bl	8001594 <xTaskResumeAll>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f47f af79 	bne.w	8000c24 <xQueueGenericSend+0x88>
				{
					portYIELD_WITHIN_API();
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <xQueueGenericSend+0x1e4>)
 8000d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	f3bf 8f4f 	dsb	sy
 8000d3e:	f3bf 8f6f 	isb	sy
 8000d42:	e76f      	b.n	8000c24 <xQueueGenericSend+0x88>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d46:	f000 f9bb 	bl	80010c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000d4a:	f000 fc23 	bl	8001594 <xTaskResumeAll>
 8000d4e:	e769      	b.n	8000c24 <xQueueGenericSend+0x88>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d52:	f000 f9b5 	bl	80010c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000d56:	f000 fc1d 	bl	8001594 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8000d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 f9cb 	bl	80040f8 <SEGGER_SYSVIEW_ShrinkId>
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4601      	mov	r1, r0
 8000d6e:	205a      	movs	r0, #90	; 0x5a
 8000d70:	f002 fca4 	bl	80036bc <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8000d74:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3730      	adds	r7, #48	; 0x30
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000ed04 	.word	0xe000ed04

08000d84 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b08f      	sub	sp, #60	; 0x3c
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d109      	bne.n	8000db4 <xQueueSemaphoreTake+0x30>
 8000da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da4:	f383 8811 	msr	BASEPRI, r3
 8000da8:	f3bf 8f6f 	isb	sy
 8000dac:	f3bf 8f4f 	dsb	sy
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	e7fe      	b.n	8000db2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d009      	beq.n	8000dd0 <xQueueSemaphoreTake+0x4c>
 8000dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc0:	f383 8811 	msr	BASEPRI, r3
 8000dc4:	f3bf 8f6f 	isb	sy
 8000dc8:	f3bf 8f4f 	dsb	sy
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	e7fe      	b.n	8000dce <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000dd0:	f001 fa8c 	bl	80022ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd8:	623b      	str	r3, [r7, #32]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d02b      	beq.n	8000e38 <xQueueSemaphoreTake+0xb4>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 f988 	bl	80040f8 <SEGGER_SYSVIEW_ShrinkId>
 8000de8:	4604      	mov	r4, r0
 8000dea:	2000      	movs	r0, #0
 8000dec:	f003 f984 	bl	80040f8 <SEGGER_SYSVIEW_ShrinkId>
 8000df0:	4601      	mov	r1, r0
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	2301      	movs	r3, #1
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	460a      	mov	r2, r1
 8000dfc:	4621      	mov	r1, r4
 8000dfe:	205c      	movs	r0, #92	; 0x5c
 8000e00:	f002 fc5c 	bl	80036bc <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	1e5a      	subs	r2, r3, #1
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d104      	bne.n	8000e1e <xQueueSemaphoreTake+0x9a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000e14:	f001 f8b4 	bl	8001f80 <pvTaskIncrementMutexHeldCount>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d004      	beq.n	8000e30 <xQueueSemaphoreTake+0xac>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	3310      	adds	r3, #16
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fd7a 	bl	8001924 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000e30:	f001 fa8a 	bl	8002348 <vPortExitCritical>
				return pdPASS;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e0ba      	b.n	8000fae <xQueueSemaphoreTake+0x22a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d122      	bne.n	8000e84 <xQueueSemaphoreTake+0x100>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8000e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d009      	beq.n	8000e58 <xQueueSemaphoreTake+0xd4>
 8000e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e48:	f383 8811 	msr	BASEPRI, r3
 8000e4c:	f3bf 8f6f 	isb	sy
 8000e50:	f3bf 8f4f 	dsb	sy
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	e7fe      	b.n	8000e56 <xQueueSemaphoreTake+0xd2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8000e58:	f001 fa76 	bl	8002348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 f94a 	bl	80040f8 <SEGGER_SYSVIEW_ShrinkId>
 8000e64:	4604      	mov	r4, r0
 8000e66:	2000      	movs	r0, #0
 8000e68:	f003 f946 	bl	80040f8 <SEGGER_SYSVIEW_ShrinkId>
 8000e6c:	4601      	mov	r1, r0
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	2301      	movs	r3, #1
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4613      	mov	r3, r2
 8000e76:	460a      	mov	r2, r1
 8000e78:	4621      	mov	r1, r4
 8000e7a:	205c      	movs	r0, #92	; 0x5c
 8000e7c:	f002 fc1e 	bl	80036bc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8000e80:	2300      	movs	r3, #0
 8000e82:	e094      	b.n	8000fae <xQueueSemaphoreTake+0x22a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d106      	bne.n	8000e98 <xQueueSemaphoreTake+0x114>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fdae 	bl	80019f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e94:	2301      	movs	r3, #1
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e98:	f001 fa56 	bl	8002348 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e9c:	f000 fb6c 	bl	8001578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ea0:	f001 fa24 	bl	80022ec <vPortEnterCritical>
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d103      	bne.n	8000eba <xQueueSemaphoreTake+0x136>
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec6:	d103      	bne.n	8000ed0 <xQueueSemaphoreTake+0x14c>
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ed0:	f001 fa3a 	bl	8002348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ed4:	463a      	mov	r2, r7
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fd9d 	bl	8001a1c <xTaskCheckForTimeOut>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d132      	bne.n	8000f4e <xQueueSemaphoreTake+0x1ca>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000eea:	f000 f93b 	bl	8001164 <prvIsQueueEmpty>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d026      	beq.n	8000f42 <xQueueSemaphoreTake+0x1be>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d109      	bne.n	8000f10 <xQueueSemaphoreTake+0x18c>
					{
						taskENTER_CRITICAL();
 8000efc:	f001 f9f6 	bl	80022ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fea3 	bl	8001c50 <xTaskPriorityInherit>
 8000f0a:	62b8      	str	r0, [r7, #40]	; 0x28
						}
						taskEXIT_CRITICAL();
 8000f0c:	f001 fa1c 	bl	8002348 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	3324      	adds	r3, #36	; 0x24
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fcdf 	bl	80018dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000f1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f20:	f000 f8ce 	bl	80010c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000f24:	f000 fb36 	bl	8001594 <xTaskResumeAll>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f47f af50 	bne.w	8000dd0 <xQueueSemaphoreTake+0x4c>
				{
					portYIELD_WITHIN_API();
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <xQueueSemaphoreTake+0x234>)
 8000f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	f3bf 8f4f 	dsb	sy
 8000f3c:	f3bf 8f6f 	isb	sy
 8000f40:	e746      	b.n	8000dd0 <xQueueSemaphoreTake+0x4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8000f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f44:	f000 f8bc 	bl	80010c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f48:	f000 fb24 	bl	8001594 <xTaskResumeAll>
 8000f4c:	e740      	b.n	8000dd0 <xQueueSemaphoreTake+0x4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8000f4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f50:	f000 f8b6 	bl	80010c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f54:	f000 fb1e 	bl	8001594 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f5a:	f000 f903 	bl	8001164 <prvIsQueueEmpty>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f43f af35 	beq.w	8000dd0 <xQueueSemaphoreTake+0x4c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8000f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00d      	beq.n	8000f88 <xQueueSemaphoreTake+0x204>
					{
						taskENTER_CRITICAL();
 8000f6c:	f001 f9be 	bl	80022ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000f70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f72:	f000 f823 	bl	8000fbc <prvGetDisinheritPriorityAfterTimeout>
 8000f76:	61f8      	str	r0, [r7, #28]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	69f9      	ldr	r1, [r7, #28]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 ff68 	bl	8001e54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8000f84:	f001 f9e0 	bl	8002348 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 f8b4 	bl	80040f8 <SEGGER_SYSVIEW_ShrinkId>
 8000f90:	4604      	mov	r4, r0
 8000f92:	2000      	movs	r0, #0
 8000f94:	f003 f8b0 	bl	80040f8 <SEGGER_SYSVIEW_ShrinkId>
 8000f98:	4601      	mov	r1, r0
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	4621      	mov	r1, r4
 8000fa6:	205c      	movs	r0, #92	; 0x5c
 8000fa8:	f002 fb88 	bl	80036bc <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8000fac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3734      	adds	r7, #52	; 0x34
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000ed04 	.word	0xe000ed04

08000fbc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f1c3 0305 	rsb	r3, r3, #5
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e001      	b.n	8000fde <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8000fde:	68fb      	ldr	r3, [r7, #12]
	}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001000:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10d      	bne.n	8001026 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d14d      	bne.n	80010ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fe94 	bl	8001d44 <xTaskPriorityDisinherit>
 800101c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	e043      	b.n	80010ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d119      	bne.n	8001060 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6858      	ldr	r0, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	461a      	mov	r2, r3
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	f003 fcdb 	bl	80049f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	441a      	add	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	429a      	cmp	r2, r3
 8001054:	d32b      	bcc.n	80010ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	e026      	b.n	80010ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	68d8      	ldr	r0, [r3, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	461a      	mov	r2, r3
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	f003 fcc1 	bl	80049f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	425b      	negs	r3, r3
 800107a:	441a      	add	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	425b      	negs	r3, r3
 8001096:	441a      	add	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d105      	bne.n	80010ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80010b6:	697b      	ldr	r3, [r7, #20]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80010c8:	f001 f910 	bl	80022ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010d4:	e011      	b.n	80010fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d012      	beq.n	8001104 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3324      	adds	r3, #36	; 0x24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fc1e 	bl	8001924 <xTaskRemoveFromEventList>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80010ee:	f000 fcf5 	bl	8001adc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	dce9      	bgt.n	80010d6 <prvUnlockQueue+0x16>
 8001102:	e000      	b.n	8001106 <prvUnlockQueue+0x46>
					break;
 8001104:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	22ff      	movs	r2, #255	; 0xff
 800110a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800110e:	f001 f91b 	bl	8002348 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001112:	f001 f8eb 	bl	80022ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800111c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800111e:	e011      	b.n	8001144 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d012      	beq.n	800114e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3310      	adds	r3, #16
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fbf9 	bl	8001924 <xTaskRemoveFromEventList>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001138:	f000 fcd0 	bl	8001adc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	3b01      	subs	r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dce9      	bgt.n	8001120 <prvUnlockQueue+0x60>
 800114c:	e000      	b.n	8001150 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800114e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001158:	f001 f8f6 	bl	8002348 <vPortExitCritical>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800116c:	f001 f8be 	bl	80022ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001178:	2301      	movs	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e001      	b.n	8001182 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001182:	f001 f8e1 	bl	8002348 <vPortExitCritical>

	return xReturn;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001198:	f001 f8a8 	bl	80022ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d102      	bne.n	80011ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80011a8:	2301      	movs	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e001      	b.n	80011b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80011b2:	f001 f8c9 	bl	8002348 <vPortExitCritical>

	return xReturn;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 f9ab 	bl	8002530 <pvPortMalloc>
 80011da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00e      	beq.n	8001200 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011e2:	2058      	movs	r0, #88	; 0x58
 80011e4:	f001 f9a4 	bl	8002530 <pvPortMalloc>
 80011e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
 80011f6:	e005      	b.n	8001204 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f001 fa61 	bl	80026c0 <vPortFree>
 80011fe:	e001      	b.n	8001204 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d013      	beq.n	8001232 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800120a:	88fa      	ldrh	r2, [r7, #6]
 800120c:	2300      	movs	r3, #0
 800120e:	9303      	str	r3, [sp, #12]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 f80e 	bl	8001242 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001226:	69f8      	ldr	r0, [r7, #28]
 8001228:	f000 f89a 	bl	8001360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	e002      	b.n	8001238 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001238:	69bb      	ldr	r3, [r7, #24]
	}
 800123a:	4618      	mov	r0, r3
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b088      	sub	sp, #32
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001252:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	461a      	mov	r2, r3
 800125a:	21a5      	movs	r1, #165	; 0xa5
 800125c:	f003 fbd4 	bl	8004a08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800126a:	3b01      	subs	r3, #1
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f023 0307 	bic.w	r3, r3, #7
 8001278:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	2b00      	cmp	r3, #0
 8001282:	d009      	beq.n	8001298 <prvInitialiseNewTask+0x56>
 8001284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001288:	f383 8811 	msr	BASEPRI, r3
 800128c:	f3bf 8f6f 	isb	sy
 8001290:	f3bf 8f4f 	dsb	sy
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e7fe      	b.n	8001296 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d01f      	beq.n	80012de <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	e012      	b.n	80012ca <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	4413      	add	r3, r2
 80012aa:	7819      	ldrb	r1, [r3, #0]
 80012ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	4413      	add	r3, r2
 80012b2:	3334      	adds	r3, #52	; 0x34
 80012b4:	460a      	mov	r2, r1
 80012b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	3301      	adds	r3, #1
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	d9e9      	bls.n	80012a4 <prvInitialiseNewTask+0x62>
 80012d0:	e000      	b.n	80012d4 <prvInitialiseNewTask+0x92>
			{
				break;
 80012d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80012dc:	e003      	b.n	80012e6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80012de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d901      	bls.n	80012f0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012ec:	2304      	movs	r3, #4
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80012f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80012f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fa:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	2200      	movs	r2, #0
 8001300:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001304:	3304      	adds	r3, #4
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fafc 	bl	8000904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130e:	3318      	adds	r3, #24
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff faf7 	bl	8000904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800131a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	f1c3 0205 	rsb	r2, r3, #5
 8001322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001324:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132e:	2200      	movs	r2, #0
 8001330:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	69b8      	ldr	r0, [r7, #24]
 8001340:	f000 feaa 	bl	8002098 <pxPortInitialiseStack>
 8001344:	4602      	mov	r2, r0
 8001346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001348:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af02      	add	r7, sp, #8
 8001366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001368:	f000 ffc0 	bl	80022ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <prvAddNewTaskToReadyList+0xe4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	4a34      	ldr	r2, [pc, #208]	; (8001444 <prvAddNewTaskToReadyList+0xe4>)
 8001374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001376:	4b34      	ldr	r3, [pc, #208]	; (8001448 <prvAddNewTaskToReadyList+0xe8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d109      	bne.n	8001392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800137e:	4a32      	ldr	r2, [pc, #200]	; (8001448 <prvAddNewTaskToReadyList+0xe8>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001384:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <prvAddNewTaskToReadyList+0xe4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d110      	bne.n	80013ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800138c:	f000 fbc4 	bl	8001b18 <prvInitialiseTaskLists>
 8001390:	e00d      	b.n	80013ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <prvAddNewTaskToReadyList+0xec>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d109      	bne.n	80013ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800139a:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <prvAddNewTaskToReadyList+0xe8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d802      	bhi.n	80013ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80013a8:	4a27      	ldr	r2, [pc, #156]	; (8001448 <prvAddNewTaskToReadyList+0xe8>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <prvAddNewTaskToReadyList+0xf0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a26      	ldr	r2, [pc, #152]	; (8001450 <prvAddNewTaskToReadyList+0xf0>)
 80013b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80013b8:	4b25      	ldr	r3, [pc, #148]	; (8001450 <prvAddNewTaskToReadyList+0xf0>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d016      	beq.n	80013f4 <prvAddNewTaskToReadyList+0x94>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fd69 	bl	8003ea0 <SEGGER_SYSVIEW_OnTaskCreate>
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	461d      	mov	r5, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	461c      	mov	r4, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	1ae3      	subs	r3, r4, r3
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	462b      	mov	r3, r5
 80013f0:	f001 fb30 	bl	8002a54 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 fdda 	bl	8003fb0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	2201      	movs	r2, #1
 8001402:	409a      	lsls	r2, r3
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <prvAddNewTaskToReadyList+0xf4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4313      	orrs	r3, r2
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <prvAddNewTaskToReadyList+0xf4>)
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <prvAddNewTaskToReadyList+0xf8>)
 800141c:	441a      	add	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3304      	adds	r3, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f7ff fa7a 	bl	800091e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800142a:	f000 ff8d 	bl	8002348 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <prvAddNewTaskToReadyList+0xec>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <prvAddNewTaskToReadyList+0xda>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <prvAddNewTaskToReadyList+0xe8>)
 8001438:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bdb0      	pop	{r4, r5, r7, pc}
 8001442:	bf00      	nop
 8001444:	2000011c 	.word	0x2000011c
 8001448:	20000044 	.word	0x20000044
 800144c:	20000128 	.word	0x20000128
 8001450:	20000138 	.word	0x20000138
 8001454:	20000124 	.word	0x20000124
 8001458:	20000048 	.word	0x20000048

0800145c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d01a      	beq.n	80014a4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <vTaskDelay+0x68>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <vTaskDelay+0x2e>
 8001476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147a:	f383 8811 	msr	BASEPRI, r3
 800147e:	f3bf 8f6f 	isb	sy
 8001482:	f3bf 8f4f 	dsb	sy
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	e7fe      	b.n	8001488 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800148a:	f000 f875 	bl	8001578 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2023      	movs	r0, #35	; 0x23
 8001492:	f002 f807 	bl	80034a4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001496:	2100      	movs	r1, #0
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fd85 	bl	8001fa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800149e:	f000 f879 	bl	8001594 <xTaskResumeAll>
 80014a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d107      	bne.n	80014ba <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <vTaskDelay+0x6c>)
 80014ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	f3bf 8f4f 	dsb	sy
 80014b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000144 	.word	0x20000144
 80014c8:	e000ed04 	.word	0xe000ed04

080014cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <vTaskStartScheduler+0x90>)
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	2300      	movs	r3, #0
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2300      	movs	r3, #0
 80014dc:	2282      	movs	r2, #130	; 0x82
 80014de:	4920      	ldr	r1, [pc, #128]	; (8001560 <vTaskStartScheduler+0x94>)
 80014e0:	4820      	ldr	r0, [pc, #128]	; (8001564 <vTaskStartScheduler+0x98>)
 80014e2:	f7ff fe6d 	bl	80011c0 <xTaskCreate>
 80014e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d123      	bne.n	8001536 <vTaskStartScheduler+0x6a>
 80014ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f2:	f383 8811 	msr	BASEPRI, r3
 80014f6:	f3bf 8f6f 	isb	sy
 80014fa:	f3bf 8f4f 	dsb	sy
 80014fe:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <vTaskStartScheduler+0x9c>)
 8001502:	f04f 32ff 	mov.w	r2, #4294967295
 8001506:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <vTaskStartScheduler+0xa0>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <vTaskStartScheduler+0xa4>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <vTaskStartScheduler+0xa8>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <vTaskStartScheduler+0x90>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d102      	bne.n	8001526 <vTaskStartScheduler+0x5a>
 8001520:	f002 fca2 	bl	8003e68 <SEGGER_SYSVIEW_OnIdle>
 8001524:	e004      	b.n	8001530 <vTaskStartScheduler+0x64>
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <vTaskStartScheduler+0xa8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f002 fcfc 	bl	8003f28 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001530:	f000 fe3e 	bl	80021b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001534:	e00d      	b.n	8001552 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d109      	bne.n	8001552 <vTaskStartScheduler+0x86>
 800153e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001542:	f383 8811 	msr	BASEPRI, r3
 8001546:	f3bf 8f6f 	isb	sy
 800154a:	f3bf 8f4f 	dsb	sy
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	e7fe      	b.n	8001550 <vTaskStartScheduler+0x84>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000140 	.word	0x20000140
 8001560:	08004a30 	.word	0x08004a30
 8001564:	08001af5 	.word	0x08001af5
 8001568:	2000013c 	.word	0x2000013c
 800156c:	20000128 	.word	0x20000128
 8001570:	20000120 	.word	0x20000120
 8001574:	20000044 	.word	0x20000044

08001578 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <vTaskSuspendAll+0x18>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	4a03      	ldr	r2, [pc, #12]	; (8001590 <vTaskSuspendAll+0x18>)
 8001584:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000144 	.word	0x20000144

08001594 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <xTaskResumeAll+0x104>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <xTaskResumeAll+0x2a>
 80015aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ae:	f383 8811 	msr	BASEPRI, r3
 80015b2:	f3bf 8f6f 	isb	sy
 80015b6:	f3bf 8f4f 	dsb	sy
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	e7fe      	b.n	80015bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80015be:	f000 fe95 	bl	80022ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <xTaskResumeAll+0x104>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	4a33      	ldr	r2, [pc, #204]	; (8001698 <xTaskResumeAll+0x104>)
 80015ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <xTaskResumeAll+0x104>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d159      	bne.n	8001688 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80015d4:	4b31      	ldr	r3, [pc, #196]	; (800169c <xTaskResumeAll+0x108>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d055      	beq.n	8001688 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015dc:	e032      	b.n	8001644 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <xTaskResumeAll+0x10c>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3318      	adds	r3, #24
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff f9f4 	bl	80009d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3304      	adds	r3, #4
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff f9ef 	bl	80009d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 fcd7 	bl	8003fb0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	2201      	movs	r2, #1
 8001608:	409a      	lsls	r2, r3
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <xTaskResumeAll+0x110>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4313      	orrs	r3, r2
 8001610:	4a24      	ldr	r2, [pc, #144]	; (80016a4 <xTaskResumeAll+0x110>)
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <xTaskResumeAll+0x114>)
 8001622:	441a      	add	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3304      	adds	r3, #4
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f7ff f977 	bl	800091e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <xTaskResumeAll+0x118>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	429a      	cmp	r2, r3
 800163c:	d302      	bcc.n	8001644 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <xTaskResumeAll+0x11c>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <xTaskResumeAll+0x10c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1c8      	bne.n	80015de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001652:	f000 fadd 	bl	8001c10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <xTaskResumeAll+0x120>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d010      	beq.n	8001684 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001662:	f000 f83b 	bl	80016dc <xTaskIncrementTick>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <xTaskResumeAll+0x11c>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3b01      	subs	r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f1      	bne.n	8001662 <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <xTaskResumeAll+0x120>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <xTaskResumeAll+0x11c>)
 8001686:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001688:	f000 fe5e 	bl	8002348 <vPortExitCritical>

	return xAlreadyYielded;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000144 	.word	0x20000144
 800169c:	2000011c 	.word	0x2000011c
 80016a0:	200000dc 	.word	0x200000dc
 80016a4:	20000124 	.word	0x20000124
 80016a8:	20000048 	.word	0x20000048
 80016ac:	20000044 	.word	0x20000044
 80016b0:	20000130 	.word	0x20000130
 80016b4:	2000012c 	.word	0x2000012c

080016b8 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80016be:	f000 fef9 	bl	80024b4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <xTaskGetTickCountFromISR+0x20>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80016cc:	683b      	ldr	r3, [r7, #0]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000120 	.word	0x20000120

080016dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <xTaskIncrementTick+0x10c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d172      	bne.n	80017d4 <xTaskIncrementTick+0xf8>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80016ee:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <xTaskIncrementTick+0x110>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80016f6:	4a3d      	ldr	r2, [pc, #244]	; (80017ec <xTaskIncrementTick+0x110>)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d11f      	bne.n	8001742 <xTaskIncrementTick+0x66>
		{
			taskSWITCH_DELAYED_LISTS();
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <xTaskIncrementTick+0x114>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <xTaskIncrementTick+0x44>
 800170c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001710:	f383 8811 	msr	BASEPRI, r3
 8001714:	f3bf 8f6f 	isb	sy
 8001718:	f3bf 8f4f 	dsb	sy
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	e7fe      	b.n	800171e <xTaskIncrementTick+0x42>
 8001720:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <xTaskIncrementTick+0x114>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <xTaskIncrementTick+0x118>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a31      	ldr	r2, [pc, #196]	; (80017f0 <xTaskIncrementTick+0x114>)
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <xTaskIncrementTick+0x118>)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <xTaskIncrementTick+0x11c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <xTaskIncrementTick+0x11c>)
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	f000 fa67 	bl	8001c10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <xTaskIncrementTick+0x120>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d348      	bcc.n	80017de <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <xTaskIncrementTick+0x114>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d104      	bne.n	8001760 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <xTaskIncrementTick+0x120>)
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	601a      	str	r2, [r3, #0]
					break;
 800175e:	e03e      	b.n	80017de <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <xTaskIncrementTick+0x114>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d203      	bcs.n	8001780 <xTaskIncrementTick+0xa4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001778:	4a20      	ldr	r2, [pc, #128]	; (80017fc <xTaskIncrementTick+0x120>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800177e:	e02e      	b.n	80017de <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3304      	adds	r3, #4
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f927 	bl	80009d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <xTaskIncrementTick+0xc0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	3318      	adds	r3, #24
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f91e 	bl	80009d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 fc06 	bl	8003fb0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	2201      	movs	r2, #1
 80017aa:	409a      	lsls	r2, r3
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <xTaskIncrementTick+0x124>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <xTaskIncrementTick+0x124>)
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <xTaskIncrementTick+0x128>)
 80017c4:	441a      	add	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3304      	adds	r3, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4610      	mov	r0, r2
 80017ce:	f7ff f8a6 	bl	800091e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017d2:	e7bb      	b.n	800174c <xTaskIncrementTick+0x70>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <xTaskIncrementTick+0x12c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <xTaskIncrementTick+0x12c>)
 80017dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80017de:	697b      	ldr	r3, [r7, #20]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000144 	.word	0x20000144
 80017ec:	20000120 	.word	0x20000120
 80017f0:	200000d4 	.word	0x200000d4
 80017f4:	200000d8 	.word	0x200000d8
 80017f8:	20000134 	.word	0x20000134
 80017fc:	2000013c 	.word	0x2000013c
 8001800:	20000124 	.word	0x20000124
 8001804:	20000048 	.word	0x20000048
 8001808:	2000012c 	.word	0x2000012c

0800180c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <vTaskSwitchContext+0xb8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800181a:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <vTaskSwitchContext+0xbc>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001820:	e04c      	b.n	80018bc <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <vTaskSwitchContext+0xbc>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001828:	4b28      	ldr	r3, [pc, #160]	; (80018cc <vTaskSwitchContext+0xc0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001836:	7afb      	ldrb	r3, [r7, #11]
 8001838:	f1c3 031f 	rsb	r3, r3, #31
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	4924      	ldr	r1, [pc, #144]	; (80018d0 <vTaskSwitchContext+0xc4>)
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <vTaskSwitchContext+0x5a>
	__asm volatile
 8001852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001856:	f383 8811 	msr	BASEPRI, r3
 800185a:	f3bf 8f6f 	isb	sy
 800185e:	f3bf 8f4f 	dsb	sy
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	e7fe      	b.n	8001864 <vTaskSwitchContext+0x58>
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <vTaskSwitchContext+0xc4>)
 8001872:	4413      	add	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	3308      	adds	r3, #8
 8001888:	429a      	cmp	r2, r3
 800188a:	d104      	bne.n	8001896 <vTaskSwitchContext+0x8a>
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <vTaskSwitchContext+0xc8>)
 800189e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <vTaskSwitchContext+0xc8>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <vTaskSwitchContext+0xcc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d102      	bne.n	80018b2 <vTaskSwitchContext+0xa6>
 80018ac:	f002 fadc 	bl	8003e68 <SEGGER_SYSVIEW_OnIdle>
}
 80018b0:	e004      	b.n	80018bc <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <vTaskSwitchContext+0xc8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 fb36 	bl	8003f28 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000144 	.word	0x20000144
 80018c8:	20000130 	.word	0x20000130
 80018cc:	20000124 	.word	0x20000124
 80018d0:	20000048 	.word	0x20000048
 80018d4:	20000044 	.word	0x20000044
 80018d8:	20000140 	.word	0x20000140

080018dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <vTaskPlaceOnEventList+0x24>
 80018ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f0:	f383 8811 	msr	BASEPRI, r3
 80018f4:	f3bf 8f6f 	isb	sy
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	e7fe      	b.n	80018fe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <vTaskPlaceOnEventList+0x44>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3318      	adds	r3, #24
 8001906:	4619      	mov	r1, r3
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff f82c 	bl	8000966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800190e:	2101      	movs	r1, #1
 8001910:	6838      	ldr	r0, [r7, #0]
 8001912:	f000 fb49 	bl	8001fa8 <prvAddCurrentTaskToDelayedList>
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000044 	.word	0x20000044

08001924 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <xTaskRemoveFromEventList+0x2a>
 800193a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193e:	f383 8811 	msr	BASEPRI, r3
 8001942:	f3bf 8f6f 	isb	sy
 8001946:	f3bf 8f4f 	dsb	sy
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e7fe      	b.n	800194c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	3318      	adds	r3, #24
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f840 	bl	80009d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <xTaskRemoveFromEventList+0xb4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d120      	bne.n	80019a2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	3304      	adds	r3, #4
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f837 	bl	80009d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fb1f 	bl	8003fb0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	2201      	movs	r2, #1
 8001978:	409a      	lsls	r2, r3
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <xTaskRemoveFromEventList+0xb8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	4a16      	ldr	r2, [pc, #88]	; (80019dc <xTaskRemoveFromEventList+0xb8>)
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <xTaskRemoveFromEventList+0xbc>)
 8001992:	441a      	add	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	3304      	adds	r3, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f7fe ffbf 	bl	800091e <vListInsertEnd>
 80019a0:	e005      	b.n	80019ae <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	3318      	adds	r3, #24
 80019a6:	4619      	mov	r1, r3
 80019a8:	480e      	ldr	r0, [pc, #56]	; (80019e4 <xTaskRemoveFromEventList+0xc0>)
 80019aa:	f7fe ffb8 	bl	800091e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <xTaskRemoveFromEventList+0xc4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d905      	bls.n	80019c8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80019bc:	2301      	movs	r3, #1
 80019be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <xTaskRemoveFromEventList+0xc8>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	e001      	b.n	80019cc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80019cc:	697b      	ldr	r3, [r7, #20]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000144 	.word	0x20000144
 80019dc:	20000124 	.word	0x20000124
 80019e0:	20000048 	.word	0x20000048
 80019e4:	200000dc 	.word	0x200000dc
 80019e8:	20000044 	.word	0x20000044
 80019ec:	20000130 	.word	0x20000130

080019f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <vTaskInternalSetTimeOutState+0x24>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <vTaskInternalSetTimeOutState+0x28>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	605a      	str	r2, [r3, #4]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	20000134 	.word	0x20000134
 8001a18:	20000120 	.word	0x20000120

08001a1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <xTaskCheckForTimeOut+0x24>
 8001a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a30:	f383 8811 	msr	BASEPRI, r3
 8001a34:	f3bf 8f6f 	isb	sy
 8001a38:	f3bf 8f4f 	dsb	sy
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	e7fe      	b.n	8001a3e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <xTaskCheckForTimeOut+0x3e>
 8001a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4a:	f383 8811 	msr	BASEPRI, r3
 8001a4e:	f3bf 8f6f 	isb	sy
 8001a52:	f3bf 8f4f 	dsb	sy
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e7fe      	b.n	8001a58 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001a5a:	f000 fc47 	bl	80022ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <xTaskCheckForTimeOut+0xb8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a76:	d102      	bne.n	8001a7e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	e023      	b.n	8001ac6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <xTaskCheckForTimeOut+0xbc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d007      	beq.n	8001a9a <xTaskCheckForTimeOut+0x7e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d302      	bcc.n	8001a9a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	e015      	b.n	8001ac6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d20b      	bcs.n	8001abc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	1ad2      	subs	r2, r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff9d 	bl	80019f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e004      	b.n	8001ac6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001ac6:	f000 fc3f 	bl	8002348 <vPortExitCritical>

	return xReturn;
 8001aca:	69fb      	ldr	r3, [r7, #28]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000120 	.word	0x20000120
 8001ad8:	20000134 	.word	0x20000134

08001adc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <vTaskMissedYield+0x14>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	20000130 	.word	0x20000130

08001af4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001afc:	f000 f84c 	bl	8001b98 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <prvIdleTask+0x20>)
 8001b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001b10:	e7f4      	b.n	8001afc <prvIdleTask+0x8>
 8001b12:	bf00      	nop
 8001b14:	e000ed04 	.word	0xe000ed04

08001b18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	e00c      	b.n	8001b3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <prvInitialiseTaskLists+0x60>)
 8001b30:	4413      	add	r3, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fec6 	bl	80008c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d9ef      	bls.n	8001b24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <prvInitialiseTaskLists+0x64>)
 8001b46:	f7fe febd 	bl	80008c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <prvInitialiseTaskLists+0x68>)
 8001b4c:	f7fe feba 	bl	80008c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <prvInitialiseTaskLists+0x6c>)
 8001b52:	f7fe feb7 	bl	80008c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001b56:	480c      	ldr	r0, [pc, #48]	; (8001b88 <prvInitialiseTaskLists+0x70>)
 8001b58:	f7fe feb4 	bl	80008c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001b5c:	480b      	ldr	r0, [pc, #44]	; (8001b8c <prvInitialiseTaskLists+0x74>)
 8001b5e:	f7fe feb1 	bl	80008c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <prvInitialiseTaskLists+0x78>)
 8001b64:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <prvInitialiseTaskLists+0x64>)
 8001b66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <prvInitialiseTaskLists+0x7c>)
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <prvInitialiseTaskLists+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000048 	.word	0x20000048
 8001b7c:	200000ac 	.word	0x200000ac
 8001b80:	200000c0 	.word	0x200000c0
 8001b84:	200000dc 	.word	0x200000dc
 8001b88:	200000f0 	.word	0x200000f0
 8001b8c:	20000108 	.word	0x20000108
 8001b90:	200000d4 	.word	0x200000d4
 8001b94:	200000d8 	.word	0x200000d8

08001b98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b9e:	e019      	b.n	8001bd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001ba0:	f000 fba4 	bl	80022ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <prvCheckTasksWaitingTermination+0x4c>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe ff11 	bl	80009d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <prvCheckTasksWaitingTermination+0x50>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <prvCheckTasksWaitingTermination+0x50>)
 8001bbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <prvCheckTasksWaitingTermination+0x54>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <prvCheckTasksWaitingTermination+0x54>)
 8001bc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001bca:	f000 fbbd 	bl	8002348 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f80e 	bl	8001bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <prvCheckTasksWaitingTermination+0x54>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e1      	bne.n	8001ba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200000f0 	.word	0x200000f0
 8001be8:	2000011c 	.word	0x2000011c
 8001bec:	20000104 	.word	0x20000104

08001bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fd5f 	bl	80026c0 <vPortFree>
			vPortFree( pxTCB );
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fd5c 	bl	80026c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <prvResetNextTaskUnblockTime+0x38>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d104      	bne.n	8001c2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <prvResetNextTaskUnblockTime+0x3c>)
 8001c22:	f04f 32ff 	mov.w	r2, #4294967295
 8001c26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001c28:	e008      	b.n	8001c3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <prvResetNextTaskUnblockTime+0x38>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <prvResetNextTaskUnblockTime+0x3c>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	200000d4 	.word	0x200000d4
 8001c4c:	2000013c 	.word	0x2000013c

08001c50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d063      	beq.n	8001d2e <xTaskPriorityInherit+0xde>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <xTaskPriorityInherit+0xe8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d253      	bcs.n	8001d1c <xTaskPriorityInherit+0xcc>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db06      	blt.n	8001c8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <xTaskPriorityInherit+0xe8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	f1c3 0205 	rsb	r2, r3, #5
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	6959      	ldr	r1, [r3, #20]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <xTaskPriorityInherit+0xec>)
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4299      	cmp	r1, r3
 8001ca0:	d12f      	bne.n	8001d02 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fe96 	bl	80009d8 <uxListRemove>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10a      	bne.n	8001cc8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <xTaskPriorityInherit+0xf0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <xTaskPriorityInherit+0xf0>)
 8001cc6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <xTaskPriorityInherit+0xe8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <xTaskPriorityInherit+0xf0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <xTaskPriorityInherit+0xf0>)
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <xTaskPriorityInherit+0xec>)
 8001cf2:	441a      	add	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f7fe fe0f 	bl	800091e <vListInsertEnd>
 8001d00:	e004      	b.n	8001d0c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <xTaskPriorityInherit+0xe8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	2049      	movs	r0, #73	; 0x49
 8001d12:	f001 fbc7 	bl	80034a4 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e008      	b.n	8001d2e <xTaskPriorityInherit+0xde>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <xTaskPriorityInherit+0xe8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d201      	bcs.n	8001d2e <xTaskPriorityInherit+0xde>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
	}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000044 	.word	0x20000044
 8001d3c:	20000048 	.word	0x20000048
 8001d40:	20000124 	.word	0x20000124

08001d44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d071      	beq.n	8001e3e <xTaskPriorityDisinherit+0xfa>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <xTaskPriorityDisinherit+0x104>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d009      	beq.n	8001d78 <xTaskPriorityDisinherit+0x34>
 8001d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d68:	f383 8811 	msr	BASEPRI, r3
 8001d6c:	f3bf 8f6f 	isb	sy
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	e7fe      	b.n	8001d76 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <xTaskPriorityDisinherit+0x50>
 8001d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	e7fe      	b.n	8001d92 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	1e5a      	subs	r2, r3, #1
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d049      	beq.n	8001e3e <xTaskPriorityDisinherit+0xfa>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d145      	bne.n	8001e3e <xTaskPriorityDisinherit+0xfa>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	3304      	adds	r3, #4
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fe0e 	bl	80009d8 <uxListRemove>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d115      	bne.n	8001dee <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc6:	4921      	ldr	r1, [pc, #132]	; (8001e4c <xTaskPriorityDisinherit+0x108>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <xTaskPriorityDisinherit+0xaa>
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	2201      	movs	r2, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <xTaskPriorityDisinherit+0x10c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4013      	ands	r3, r2
 8001dea:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <xTaskPriorityDisinherit+0x10c>)
 8001dec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4619      	mov	r1, r3
 8001df2:	204a      	movs	r0, #74	; 0x4a
 8001df4:	f001 fb56 	bl	80034a4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	f1c3 0205 	rsb	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	2201      	movs	r2, #1
 8001e12:	409a      	lsls	r2, r3
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <xTaskPriorityDisinherit+0x10c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <xTaskPriorityDisinherit+0x10c>)
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <xTaskPriorityDisinherit+0x108>)
 8001e2c:	441a      	add	r2, r3
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	3304      	adds	r3, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4610      	mov	r0, r2
 8001e36:	f7fe fd72 	bl	800091e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001e3e:	697b      	ldr	r3, [r7, #20]
	}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000044 	.word	0x20000044
 8001e4c:	20000048 	.word	0x20000048
 8001e50:	20000124 	.word	0x20000124

08001e54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d07e      	beq.n	8001f6a <vTaskPriorityDisinheritAfterTimeout+0x116>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8001e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e78:	f383 8811 	msr	BASEPRI, r3
 8001e7c:	f3bf 8f6f 	isb	sy
 8001e80:	f3bf 8f4f 	dsb	sy
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	e7fe      	b.n	8001e86 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d902      	bls.n	8001e98 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e002      	b.n	8001e9e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d060      	beq.n	8001f6a <vTaskPriorityDisinheritAfterTimeout+0x116>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d15b      	bne.n	8001f6a <vTaskPriorityDisinheritAfterTimeout+0x116>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <vTaskPriorityDisinheritAfterTimeout+0x120>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d109      	bne.n	8001ed0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8001ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec0:	f383 8811 	msr	BASEPRI, r3
 8001ec4:	f3bf 8f6f 	isb	sy
 8001ec8:	f3bf 8f4f 	dsb	sy
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	e7fe      	b.n	8001ece <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	204a      	movs	r0, #74	; 0x4a
 8001ed6:	f001 fae5 	bl	80034a4 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db04      	blt.n	8001ef8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f1c3 0205 	rsb	r2, r3, #5
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6959      	ldr	r1, [r3, #20]
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001f08:	4413      	add	r3, r2
 8001f0a:	4299      	cmp	r1, r3
 8001f0c:	d12d      	bne.n	8001f6a <vTaskPriorityDisinheritAfterTimeout+0x116>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	3304      	adds	r3, #4
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fd60 	bl	80009d8 <uxListRemove>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10a      	bne.n	8001f34 <vTaskPriorityDisinheritAfterTimeout+0xe0>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	2201      	movs	r2, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001f32:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 f83a 	bl	8003fb0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	2201      	movs	r2, #1
 8001f42:	409a      	lsls	r2, r3
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001f5c:	441a      	add	r2, r3
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	3304      	adds	r3, #4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f7fe fcda 	bl	800091e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f6a:	bf00      	nop
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000044 	.word	0x20000044
 8001f78:	20000048 	.word	0x20000048
 8001f7c:	20000124 	.word	0x20000124

08001f80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d004      	beq.n	8001f96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f92:	3201      	adds	r2, #1
 8001f94:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8001f96:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f98:	681b      	ldr	r3, [r3, #0]
	}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20000044 	.word	0x20000044

08001fa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001fb2:	4b32      	ldr	r3, [pc, #200]	; (800207c <prvAddCurrentTaskToDelayedList+0xd4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fb8:	4b31      	ldr	r3, [pc, #196]	; (8002080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fd0a 	bl	80009d8 <uxListRemove>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10b      	bne.n	8001fe2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001fca:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	4a29      	ldr	r2, [pc, #164]	; (8002084 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001fe0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d110      	bne.n	800200c <prvAddCurrentTaskToDelayedList+0x64>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00d      	beq.n	800200c <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	211b      	movs	r1, #27
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f002 f81e 	bl	8004038 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ffc:	4b20      	ldr	r3, [pc, #128]	; (8002080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3304      	adds	r3, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4820      	ldr	r0, [pc, #128]	; (8002088 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002006:	f7fe fc8a 	bl	800091e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800200a:	e032      	b.n	8002072 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d20f      	bcs.n	8002044 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2104      	movs	r1, #4
 800202a:	4618      	mov	r0, r3
 800202c:	f002 f804 	bl	8004038 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <prvAddCurrentTaskToDelayedList+0xe4>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3304      	adds	r3, #4
 800203a:	4619      	mov	r1, r3
 800203c:	4610      	mov	r0, r2
 800203e:	f7fe fc92 	bl	8000966 <vListInsert>
}
 8002042:	e016      	b.n	8002072 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2104      	movs	r1, #4
 800204a:	4618      	mov	r0, r3
 800204c:	f001 fff4 	bl	8004038 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3304      	adds	r3, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f7fe fc82 	bl	8000966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <prvAddCurrentTaskToDelayedList+0xec>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	429a      	cmp	r2, r3
 800206a:	d202      	bcs.n	8002072 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 800206c:	4a09      	ldr	r2, [pc, #36]	; (8002094 <prvAddCurrentTaskToDelayedList+0xec>)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	6013      	str	r3, [r2, #0]
}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000120 	.word	0x20000120
 8002080:	20000044 	.word	0x20000044
 8002084:	20000124 	.word	0x20000124
 8002088:	20000108 	.word	0x20000108
 800208c:	200000d8 	.word	0x200000d8
 8002090:	200000d4 	.word	0x200000d4
 8002094:	2000013c 	.word	0x2000013c

08002098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	3b04      	subs	r3, #4
 80020a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3b04      	subs	r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f023 0201 	bic.w	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3b04      	subs	r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80020c8:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <pxPortInitialiseStack+0x64>)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3b14      	subs	r3, #20
 80020d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3b04      	subs	r3, #4
 80020de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f06f 0202 	mvn.w	r2, #2
 80020e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3b20      	subs	r3, #32
 80020ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	08002101 	.word	0x08002101

08002100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <prvTaskExitError+0x50>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002112:	d009      	beq.n	8002128 <prvTaskExitError+0x28>
 8002114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e7fe      	b.n	8002126 <prvTaskExitError+0x26>
 8002128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212c:	f383 8811 	msr	BASEPRI, r3
 8002130:	f3bf 8f6f 	isb	sy
 8002134:	f3bf 8f4f 	dsb	sy
 8002138:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800213a:	bf00      	nop
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0fc      	beq.n	800213c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000010 	.word	0x20000010
	...

08002160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <pxCurrentTCBConst2>)
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	6808      	ldr	r0, [r1, #0]
 8002166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800216a:	f380 8809 	msr	PSP, r0
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	f04f 0000 	mov.w	r0, #0
 8002176:	f380 8811 	msr	BASEPRI, r0
 800217a:	4770      	bx	lr
 800217c:	f3af 8000 	nop.w

08002180 <pxCurrentTCBConst2>:
 8002180:	20000044 	.word	0x20000044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop

08002188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002188:	4808      	ldr	r0, [pc, #32]	; (80021ac <prvPortStartFirstTask+0x24>)
 800218a:	6800      	ldr	r0, [r0, #0]
 800218c:	6800      	ldr	r0, [r0, #0]
 800218e:	f380 8808 	msr	MSP, r0
 8002192:	f04f 0000 	mov.w	r0, #0
 8002196:	f380 8814 	msr	CONTROL, r0
 800219a:	b662      	cpsie	i
 800219c:	b661      	cpsie	f
 800219e:	f3bf 8f4f 	dsb	sy
 80021a2:	f3bf 8f6f 	isb	sy
 80021a6:	df00      	svc	0
 80021a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80021aa:	bf00      	nop
 80021ac:	e000ed08 	.word	0xe000ed08

080021b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80021b6:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <xPortStartScheduler+0x118>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a44      	ldr	r2, [pc, #272]	; (80022cc <xPortStartScheduler+0x11c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d109      	bne.n	80021d4 <xPortStartScheduler+0x24>
 80021c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c4:	f383 8811 	msr	BASEPRI, r3
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	e7fe      	b.n	80021d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <xPortStartScheduler+0x118>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a3d      	ldr	r2, [pc, #244]	; (80022d0 <xPortStartScheduler+0x120>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d109      	bne.n	80021f2 <xPortStartScheduler+0x42>
 80021de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e7fe      	b.n	80021f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80021f2:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <xPortStartScheduler+0x124>)
 80021f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	22ff      	movs	r2, #255	; 0xff
 8002202:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <xPortStartScheduler+0x128>)
 8002218:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800221a:	4b30      	ldr	r3, [pc, #192]	; (80022dc <xPortStartScheduler+0x12c>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002220:	e009      	b.n	8002236 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002222:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <xPortStartScheduler+0x12c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3b01      	subs	r3, #1
 8002228:	4a2c      	ldr	r2, [pc, #176]	; (80022dc <xPortStartScheduler+0x12c>)
 800222a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	2b80      	cmp	r3, #128	; 0x80
 8002240:	d0ef      	beq.n	8002222 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <xPortStartScheduler+0x12c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	d009      	beq.n	8002262 <xPortStartScheduler+0xb2>
 800224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	e7fe      	b.n	8002260 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <xPortStartScheduler+0x12c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <xPortStartScheduler+0x12c>)
 800226a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <xPortStartScheduler+0x12c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002274:	4a19      	ldr	r2, [pc, #100]	; (80022dc <xPortStartScheduler+0x12c>)
 8002276:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <xPortStartScheduler+0x130>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <xPortStartScheduler+0x130>)
 8002286:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800228a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <xPortStartScheduler+0x130>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <xPortStartScheduler+0x130>)
 8002292:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002296:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002298:	f000 f8de 	bl	8002458 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <xPortStartScheduler+0x134>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80022a2:	f000 f8fd 	bl	80024a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <xPortStartScheduler+0x138>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <xPortStartScheduler+0x138>)
 80022ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80022b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80022b2:	f7ff ff69 	bl	8002188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80022b6:	f7ff faa9 	bl	800180c <vTaskSwitchContext>
	prvTaskExitError();
 80022ba:	f7ff ff21 	bl	8002100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	e000ed00 	.word	0xe000ed00
 80022cc:	410fc271 	.word	0x410fc271
 80022d0:	410fc270 	.word	0x410fc270
 80022d4:	e000e400 	.word	0xe000e400
 80022d8:	20000148 	.word	0x20000148
 80022dc:	2000014c 	.word	0x2000014c
 80022e0:	e000ed20 	.word	0xe000ed20
 80022e4:	20000010 	.word	0x20000010
 80022e8:	e000ef34 	.word	0xe000ef34

080022ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <vPortEnterCritical+0x54>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <vPortEnterCritical+0x54>)
 800230c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <vPortEnterCritical+0x54>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d10e      	bne.n	8002334 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <vPortEnterCritical+0x58>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d009      	beq.n	8002334 <vPortEnterCritical+0x48>
 8002320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	e7fe      	b.n	8002332 <vPortEnterCritical+0x46>
	}
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	20000010 	.word	0x20000010
 8002344:	e000ed04 	.word	0xe000ed04

08002348 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <vPortExitCritical+0x4c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <vPortExitCritical+0x22>
 8002356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235a:	f383 8811 	msr	BASEPRI, r3
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	e7fe      	b.n	8002368 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <vPortExitCritical+0x4c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3b01      	subs	r3, #1
 8002370:	4a08      	ldr	r2, [pc, #32]	; (8002394 <vPortExitCritical+0x4c>)
 8002372:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <vPortExitCritical+0x4c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d104      	bne.n	8002386 <vPortExitCritical+0x3e>
 800237c:	2300      	movs	r3, #0
 800237e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000010 	.word	0x20000010
	...

080023a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80023a0:	f3ef 8009 	mrs	r0, PSP
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <pxCurrentTCBConst>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	f01e 0f10 	tst.w	lr, #16
 80023b0:	bf08      	it	eq
 80023b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80023b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ba:	6010      	str	r0, [r2, #0]
 80023bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80023c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80023c4:	f380 8811 	msr	BASEPRI, r0
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f7ff fa1c 	bl	800180c <vTaskSwitchContext>
 80023d4:	f04f 0000 	mov.w	r0, #0
 80023d8:	f380 8811 	msr	BASEPRI, r0
 80023dc:	bc09      	pop	{r0, r3}
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	6808      	ldr	r0, [r1, #0]
 80023e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e6:	f01e 0f10 	tst.w	lr, #16
 80023ea:	bf08      	it	eq
 80023ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80023f0:	f380 8809 	msr	PSP, r0
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	f3af 8000 	nop.w

08002400 <pxCurrentTCBConst>:
 8002400:	20000044 	.word	0x20000044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop

08002408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
	__asm volatile
 800240e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002412:	f383 8811 	msr	BASEPRI, r3
 8002416:	f3bf 8f6f 	isb	sy
 800241a:	f3bf 8f4f 	dsb	sy
 800241e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8002420:	f001 fca8 	bl	8003d74 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002424:	f7ff f95a 	bl	80016dc <xTaskIncrementTick>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d006      	beq.n	800243c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800242e:	f001 fcff 	bl	8003e30 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <SysTick_Handler+0x4c>)
 8002434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	e001      	b.n	8002440 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800243c:	f001 fcdc 	bl	8003df8 <SEGGER_SYSVIEW_RecordExitISR>
 8002440:	2300      	movs	r3, #0
 8002442:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	e000ed04 	.word	0xe000ed04

08002458 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <vPortSetupTimerInterrupt+0x34>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <vPortSetupTimerInterrupt+0x38>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <vPortSetupTimerInterrupt+0x3c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <vPortSetupTimerInterrupt+0x40>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	4a09      	ldr	r2, [pc, #36]	; (800249c <vPortSetupTimerInterrupt+0x44>)
 8002476:	3b01      	subs	r3, #1
 8002478:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <vPortSetupTimerInterrupt+0x34>)
 800247c:	2207      	movs	r2, #7
 800247e:	601a      	str	r2, [r3, #0]
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000e010 	.word	0xe000e010
 8002490:	e000e018 	.word	0xe000e018
 8002494:	20000014 	.word	0x20000014
 8002498:	10624dd3 	.word	0x10624dd3
 800249c:	e000e014 	.word	0xe000e014

080024a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80024a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80024b0 <vPortEnableVFP+0x10>
 80024a4:	6801      	ldr	r1, [r0, #0]
 80024a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80024aa:	6001      	str	r1, [r0, #0]
 80024ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80024ae:	bf00      	nop
 80024b0:	e000ed88 	.word	0xe000ed88

080024b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80024ba:	f3ef 8305 	mrs	r3, IPSR
 80024be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b0f      	cmp	r3, #15
 80024c4:	d913      	bls.n	80024ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80024c6:	4a16      	ldr	r2, [pc, #88]	; (8002520 <vPortValidateInterruptPriority+0x6c>)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <vPortValidateInterruptPriority+0x70>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	7afa      	ldrb	r2, [r7, #11]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d209      	bcs.n	80024ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80024da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	e7fe      	b.n	80024ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80024ee:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <vPortValidateInterruptPriority+0x74>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <vPortValidateInterruptPriority+0x78>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d909      	bls.n	8002512 <vPortValidateInterruptPriority+0x5e>
 80024fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	e7fe      	b.n	8002510 <vPortValidateInterruptPriority+0x5c>
	}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e3f0 	.word	0xe000e3f0
 8002524:	20000148 	.word	0x20000148
 8002528:	e000ed0c 	.word	0xe000ed0c
 800252c:	2000014c 	.word	0x2000014c

08002530 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800253c:	f7ff f81c 	bl	8001578 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002540:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <pvPortMalloc+0x178>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002548:	f000 f91a 	bl	8002780 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800254c:	4b57      	ldr	r3, [pc, #348]	; (80026ac <pvPortMalloc+0x17c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 8091 	bne.w	800267c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01c      	beq.n	800259a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002560:	2208      	movs	r2, #8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	2b00      	cmp	r3, #0
 8002570:	d013      	beq.n	800259a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f023 0307 	bic.w	r3, r3, #7
 8002578:	3308      	adds	r3, #8
 800257a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <pvPortMalloc+0x6a>
 8002586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258a:	f383 8811 	msr	BASEPRI, r3
 800258e:	f3bf 8f6f 	isb	sy
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e7fe      	b.n	8002598 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d06d      	beq.n	800267c <pvPortMalloc+0x14c>
 80025a0:	4b43      	ldr	r3, [pc, #268]	; (80026b0 <pvPortMalloc+0x180>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d868      	bhi.n	800267c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80025aa:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <pvPortMalloc+0x184>)
 80025ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <pvPortMalloc+0x184>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025b4:	e004      	b.n	80025c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d903      	bls.n	80025d2 <pvPortMalloc+0xa2>
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f1      	bne.n	80025b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80025d2:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <pvPortMalloc+0x178>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d8:	429a      	cmp	r2, r3
 80025da:	d04f      	beq.n	800267c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2208      	movs	r2, #8
 80025e2:	4413      	add	r3, r2
 80025e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	1ad2      	subs	r2, r2, r3
 80025f6:	2308      	movs	r3, #8
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d91e      	bls.n	800263c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80025fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <pvPortMalloc+0xf4>
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	e7fe      	b.n	8002622 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	1ad2      	subs	r2, r2, r3
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002636:	69b8      	ldr	r0, [r7, #24]
 8002638:	f000 f904 	bl	8002844 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800263c:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <pvPortMalloc+0x180>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	4a1a      	ldr	r2, [pc, #104]	; (80026b0 <pvPortMalloc+0x180>)
 8002648:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <pvPortMalloc+0x180>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <pvPortMalloc+0x188>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d203      	bcs.n	800265e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <pvPortMalloc+0x180>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <pvPortMalloc+0x188>)
 800265c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <pvPortMalloc+0x17c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	431a      	orrs	r2, r3
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <pvPortMalloc+0x18c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	4a10      	ldr	r2, [pc, #64]	; (80026bc <pvPortMalloc+0x18c>)
 800267a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800267c:	f7fe ff8a 	bl	8001594 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <pvPortMalloc+0x16e>
 800268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e7fe      	b.n	800269c <pvPortMalloc+0x16c>
	return pvReturn;
 800269e:	69fb      	ldr	r3, [r7, #28]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20012d58 	.word	0x20012d58
 80026ac:	20012d6c 	.word	0x20012d6c
 80026b0:	20012d5c 	.word	0x20012d5c
 80026b4:	20012d50 	.word	0x20012d50
 80026b8:	20012d60 	.word	0x20012d60
 80026bc:	20012d64 	.word	0x20012d64

080026c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d04b      	beq.n	800276a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80026d2:	2308      	movs	r3, #8
 80026d4:	425b      	negs	r3, r3
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4413      	add	r3, r2
 80026da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <vPortFree+0xb4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <vPortFree+0x42>
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e7fe      	b.n	8002700 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <vPortFree+0x5e>
 800270a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270e:	f383 8811 	msr	BASEPRI, r3
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	e7fe      	b.n	800271c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <vPortFree+0xb4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01e      	beq.n	800276a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d11a      	bne.n	800276a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <vPortFree+0xb4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	43db      	mvns	r3, r3
 800273e:	401a      	ands	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002744:	f7fe ff18 	bl	8001578 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <vPortFree+0xb8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4413      	add	r3, r2
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <vPortFree+0xb8>)
 8002754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002756:	6938      	ldr	r0, [r7, #16]
 8002758:	f000 f874 	bl	8002844 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <vPortFree+0xbc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	4a06      	ldr	r2, [pc, #24]	; (800277c <vPortFree+0xbc>)
 8002764:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002766:	f7fe ff15 	bl	8001594 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20012d6c 	.word	0x20012d6c
 8002778:	20012d5c 	.word	0x20012d5c
 800277c:	20012d68 	.word	0x20012d68

08002780 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002786:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800278a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <prvHeapInit+0xac>)
 800278e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00c      	beq.n	80027b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3307      	adds	r3, #7
 800279e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0307 	bic.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	4a1f      	ldr	r2, [pc, #124]	; (800282c <prvHeapInit+0xac>)
 80027b0:	4413      	add	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <prvHeapInit+0xb0>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <prvHeapInit+0xb0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	4413      	add	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80027cc:	2208      	movs	r2, #8
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a15      	ldr	r2, [pc, #84]	; (8002834 <prvHeapInit+0xb4>)
 80027e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80027e2:	4b14      	ldr	r3, [pc, #80]	; (8002834 <prvHeapInit+0xb4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <prvHeapInit+0xb4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	1ad2      	subs	r2, r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <prvHeapInit+0xb4>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <prvHeapInit+0xb8>)
 800280e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a09      	ldr	r2, [pc, #36]	; (800283c <prvHeapInit+0xbc>)
 8002816:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <prvHeapInit+0xc0>)
 800281a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800281e:	601a      	str	r2, [r3, #0]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	20000150 	.word	0x20000150
 8002830:	20012d50 	.word	0x20012d50
 8002834:	20012d58 	.word	0x20012d58
 8002838:	20012d60 	.word	0x20012d60
 800283c:	20012d5c 	.word	0x20012d5c
 8002840:	20012d6c 	.word	0x20012d6c

08002844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <prvInsertBlockIntoFreeList+0xac>)
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	e002      	b.n	8002858 <prvInsertBlockIntoFreeList+0x14>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	d8f7      	bhi.n	8002852 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	4413      	add	r3, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	d108      	bne.n	8002886 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	441a      	add	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	441a      	add	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d118      	bne.n	80028cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <prvInsertBlockIntoFreeList+0xb0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d00d      	beq.n	80028c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	441a      	add	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e008      	b.n	80028d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <prvInsertBlockIntoFreeList+0xb0>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e003      	b.n	80028d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d002      	beq.n	80028e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20012d50 	.word	0x20012d50
 80028f4:	20012d58 	.word	0x20012d58

080028f8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80028fc:	4803      	ldr	r0, [pc, #12]	; (800290c <_cbSendSystemDesc+0x14>)
 80028fe:	f001 f9e5 	bl	8003ccc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002902:	4803      	ldr	r0, [pc, #12]	; (8002910 <_cbSendSystemDesc+0x18>)
 8002904:	f001 f9e2 	bl	8003ccc <SEGGER_SYSVIEW_SendSysDesc>
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	08004a38 	.word	0x08004a38
 8002910:	08004a74 	.word	0x08004a74

08002914 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <SEGGER_SYSVIEW_Conf+0x20>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <SEGGER_SYSVIEW_Conf+0x20>)
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <SEGGER_SYSVIEW_Conf+0x24>)
 8002922:	4a06      	ldr	r2, [pc, #24]	; (800293c <SEGGER_SYSVIEW_Conf+0x28>)
 8002924:	f000 fd52 	bl	80033cc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002928:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800292c:	f000 fd8c 	bl	8003448 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000014 	.word	0x20000014
 8002938:	080028f9 	.word	0x080028f9
 800293c:	08004b98 	.word	0x08004b98

08002940 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	b085      	sub	sp, #20
 8002944:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	e034      	b.n	80029b6 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800294c:	491e      	ldr	r1, [pc, #120]	; (80029c8 <_cbSendTaskList+0x88>)
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	491a      	ldr	r1, [pc, #104]	; (80029c8 <_cbSendTaskList+0x88>)
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	3304      	adds	r3, #4
 800296c:	681c      	ldr	r4, [r3, #0]
 800296e:	4916      	ldr	r1, [pc, #88]	; (80029c8 <_cbSendTaskList+0x88>)
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3308      	adds	r3, #8
 800297e:	681d      	ldr	r5, [r3, #0]
 8002980:	4911      	ldr	r1, [pc, #68]	; (80029c8 <_cbSendTaskList+0x88>)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	330c      	adds	r3, #12
 8002990:	681e      	ldr	r6, [r3, #0]
 8002992:	490d      	ldr	r1, [pc, #52]	; (80029c8 <_cbSendTaskList+0x88>)
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3310      	adds	r3, #16
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	4633      	mov	r3, r6
 80029a8:	462a      	mov	r2, r5
 80029aa:	4621      	mov	r1, r4
 80029ac:	f000 f8ba 	bl	8002b24 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3301      	adds	r3, #1
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <_cbSendTaskList+0x8c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d3c5      	bcc.n	800294c <_cbSendTaskList+0xc>
  }
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c8:	20012d70 	.word	0x20012d70
 80029cc:	20012e10 	.word	0x20012e10

080029d0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80029d6:	f7fe fe6f 	bl	80016b8 <xTaskGetTickCountFromISR>
 80029da:	4603      	mov	r3, r0
 80029dc:	f04f 0400 	mov.w	r4, #0
 80029e0:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
 80029e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80029e8:	184b      	adds	r3, r1, r1
 80029ea:	eb42 0402 	adc.w	r4, r2, r2
 80029ee:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= 1000;
 80029f2:	e9d7 5600 	ldrd	r5, r6, [r7]
 80029f6:	462b      	mov	r3, r5
 80029f8:	4634      	mov	r4, r6
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	0162      	lsls	r2, r4, #5
 8002a04:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002a08:	0159      	lsls	r1, r3, #5
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4614      	mov	r4, r2
 8002a0e:	1b5b      	subs	r3, r3, r5
 8002a10:	eb64 0406 	sbc.w	r4, r4, r6
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	00a2      	lsls	r2, r4, #2
 8002a1e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002a22:	0099      	lsls	r1, r3, #2
 8002a24:	460b      	mov	r3, r1
 8002a26:	4614      	mov	r4, r2
 8002a28:	195b      	adds	r3, r3, r5
 8002a2a:	eb44 0406 	adc.w	r4, r4, r6
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	00e2      	lsls	r2, r4, #3
 8002a38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a3c:	00d9      	lsls	r1, r3, #3
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8002a46:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a54 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002a62:	2205      	movs	r2, #5
 8002a64:	492b      	ldr	r1, [pc, #172]	; (8002b14 <SYSVIEW_AddTask+0xc0>)
 8002a66:	68b8      	ldr	r0, [r7, #8]
 8002a68:	f001 ffb4 	bl	80049d4 <memcmp>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d04b      	beq.n	8002b0a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002a72:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <SYSVIEW_AddTask+0xc4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b07      	cmp	r3, #7
 8002a78:	d903      	bls.n	8002a82 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002a7a:	4828      	ldr	r0, [pc, #160]	; (8002b1c <SYSVIEW_AddTask+0xc8>)
 8002a7c:	f001 fc2a 	bl	80042d4 <SEGGER_SYSVIEW_Warn>
    return;
 8002a80:	e044      	b.n	8002b0c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002a82:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <SYSVIEW_AddTask+0xc4>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4926      	ldr	r1, [pc, #152]	; (8002b20 <SYSVIEW_AddTask+0xcc>)
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <SYSVIEW_AddTask+0xc4>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4921      	ldr	r1, [pc, #132]	; (8002b20 <SYSVIEW_AddTask+0xcc>)
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <SYSVIEW_AddTask+0xc4>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	491b      	ldr	r1, [pc, #108]	; (8002b20 <SYSVIEW_AddTask+0xcc>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	3308      	adds	r3, #8
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <SYSVIEW_AddTask+0xc4>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4916      	ldr	r1, [pc, #88]	; (8002b20 <SYSVIEW_AddTask+0xcc>)
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <SYSVIEW_AddTask+0xc4>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4910      	ldr	r1, [pc, #64]	; (8002b20 <SYSVIEW_AddTask+0xcc>)
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3310      	adds	r3, #16
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <SYSVIEW_AddTask+0xc4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3301      	adds	r3, #1
 8002af4:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <SYSVIEW_AddTask+0xc4>)
 8002af6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f80e 	bl	8002b24 <SYSVIEW_SendTaskInfo>
 8002b08:	e000      	b.n	8002b0c <SYSVIEW_AddTask+0xb8>
    return;
 8002b0a:	bf00      	nop

}
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	08004a84 	.word	0x08004a84
 8002b18:	20012e10 	.word	0x20012e10
 8002b1c:	08004a8c 	.word	0x08004a8c
 8002b20:	20012d70 	.word	0x20012d70

08002b24 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	2214      	movs	r2, #20
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 ff64 	bl	8004a08 <memset>
  TaskInfo.TaskID     = TaskID;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 ffbd 	bl	8003ad8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	; 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002b6e:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <_DoInit+0x8c>)
 8002b70:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2203      	movs	r2, #3
 8002b76:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <_DoInit+0x90>)
 8002b82:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <_DoInit+0x94>)
 8002b88:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b90:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <_DoInit+0x90>)
 8002ba8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <_DoInit+0x98>)
 8002bae:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3307      	adds	r3, #7
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <_DoInit+0x9c>)
 8002bce:	6810      	ldr	r0, [r2, #0]
 8002bd0:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <_DoInit+0xa0>)
 8002bd6:	6810      	ldr	r0, [r2, #0]
 8002bd8:	6018      	str	r0, [r3, #0]
 8002bda:	8891      	ldrh	r1, [r2, #4]
 8002bdc:	7992      	ldrb	r2, [r2, #6]
 8002bde:	8099      	strh	r1, [r3, #4]
 8002be0:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	719a      	strb	r2, [r3, #6]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	2001534c 	.word	0x2001534c
 8002bf8:	08004adc 	.word	0x08004adc
 8002bfc:	20012e14 	.word	0x20012e14
 8002c00:	20013214 	.word	0x20013214
 8002c04:	08004ae8 	.word	0x08004ae8
 8002c08:	08004aec 	.word	0x08004aec

08002c0c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002c18:	4b3c      	ldr	r3, [pc, #240]	; (8002d0c <SEGGER_RTT_ReadNoLock+0x100>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <SEGGER_RTT_ReadNoLock+0x18>
 8002c20:	f7ff ffa2 	bl	8002b68 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	3360      	adds	r3, #96	; 0x60
 8002c30:	4a36      	ldr	r2, [pc, #216]	; (8002d0c <SEGGER_RTT_ReadNoLock+0x100>)
 8002c32:	4413      	add	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002c4a:	6a3a      	ldr	r2, [r7, #32]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d92a      	bls.n	8002ca8 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bf28      	it	cs
 8002c64:	4613      	movcs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	4413      	add	r3, r2
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4619      	mov	r1, r3
 8002c74:	69f8      	ldr	r0, [r7, #28]
 8002c76:	f001 febc 	bl	80049f2 <memcpy>
    NumBytesRead += NumBytesRem;
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002c92:	6a3a      	ldr	r2, [r7, #32]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	6a3a      	ldr	r2, [r7, #32]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d101      	bne.n	8002ca8 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	bf28      	it	cs
 8002cb8:	4613      	movcs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d018      	beq.n	8002cf4 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	4413      	add	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	69f8      	ldr	r0, [r7, #28]
 8002cd0:	f001 fe8f 	bl	80049f2 <memcpy>
    NumBytesRead += NumBytesRem;
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	6a3a      	ldr	r2, [r7, #32]
 8002cfe:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3728      	adds	r7, #40	; 0x28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	2001534c 	.word	0x2001534c

08002d10 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002d2e:	4413      	add	r3, r2
 8002d30:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d854      	bhi.n	8002df0 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d30f      	bcc.n	8002d7a <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4413      	add	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 fe43 	bl	80049f2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	441a      	add	r2, r3
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e054      	b.n	8002e24 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	4413      	add	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d34b      	bcc.n	8002e22 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d90e      	bls.n	8002dba <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	4413      	add	r3, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 fe22 	bl	80049f2 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	441a      	add	r2, r3
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	60da      	str	r2, [r3, #12]
 8002db8:	e018      	b.n	8002dec <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 fe13 	bl	80049f2 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	6858      	ldr	r0, [r3, #4]
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	18d1      	adds	r1, r2, r3
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f001 fe08 	bl	80049f2 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad2      	subs	r2, r2, r3
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e019      	b.n	8002e24 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d30f      	bcc.n	8002e22 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4413      	add	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 fdef 	bl	80049f2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	441a      	add	r2, r3
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3728      	adds	r7, #40	; 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	2001534c 	.word	0x2001534c

08002e30 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002e3e:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8002e46:	f7ff fe8f 	bl	8002b68 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002e4a:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d24c      	bcs.n	8002ef0 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8002e56:	f3ef 8311 	mrs	r3, BASEPRI
 8002e5a:	f04f 0120 	mov.w	r1, #32
 8002e5e:	f381 8811 	msr	BASEPRI, r1
 8002e62:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d032      	beq.n	8002ed0 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002e6a:	4925      	ldr	r1, [pc, #148]	; (8002f00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002e7e:	4920      	ldr	r1, [pc, #128]	; (8002f00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3304      	adds	r3, #4
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002e94:	491a      	ldr	r1, [pc, #104]	; (8002f00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3320      	adds	r3, #32
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002ea8:	4915      	ldr	r1, [pc, #84]	; (8002f00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3328      	adds	r3, #40	; 0x28
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002ebc:	4910      	ldr	r1, [pc, #64]	; (8002f00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	440b      	add	r3, r1
 8002eca:	3324      	adds	r3, #36	; 0x24
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002ed0:	490b      	ldr	r1, [pc, #44]	; (8002f00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	440b      	add	r3, r1
 8002ede:	332c      	adds	r3, #44	; 0x2c
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e002      	b.n	8002ef6 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002ef6:	697b      	ldr	r3, [r7, #20]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	2001534c 	.word	0x2001534c

08002f04 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002f12:	4b30      	ldr	r3, [pc, #192]	; (8002fd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8002f1a:	f7ff fe25 	bl	8002b68 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d24b      	bcs.n	8002fc2 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8002f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f2e:	f04f 0120 	mov.w	r1, #32
 8002f32:	f381 8811 	msr	BASEPRI, r1
 8002f36:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d031      	beq.n	8002fa2 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002f3e:	4925      	ldr	r1, [pc, #148]	; (8002fd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3360      	adds	r3, #96	; 0x60
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002f52:	4920      	ldr	r1, [pc, #128]	; (8002fd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	440b      	add	r3, r1
 8002f60:	3364      	adds	r3, #100	; 0x64
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002f66:	491b      	ldr	r1, [pc, #108]	; (8002fd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	3368      	adds	r3, #104	; 0x68
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002f7a:	4916      	ldr	r1, [pc, #88]	; (8002fd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	3370      	adds	r3, #112	; 0x70
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002f8e:	4911      	ldr	r1, [pc, #68]	; (8002fd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	440b      	add	r3, r1
 8002f9c:	336c      	adds	r3, #108	; 0x6c
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8002fa2:	490c      	ldr	r1, [pc, #48]	; (8002fd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	440b      	add	r3, r1
 8002fb0:	3374      	adds	r3, #116	; 0x74
 8002fb2:	6a3a      	ldr	r2, [r7, #32]
 8002fb4:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e002      	b.n	8002fc8 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002fc8:	697b      	ldr	r3, [r7, #20]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	2001534c 	.word	0x2001534c

08002fd8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002fe8:	e002      	b.n	8002ff0 <_EncodeStr+0x18>
    Len++;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	3301      	adds	r3, #1
 8002fee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f6      	bne.n	8002fea <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	d901      	bls.n	8003008 <_EncodeStr+0x30>
    Len = Limit;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2bfe      	cmp	r3, #254	; 0xfe
 800300c:	d806      	bhi.n	800301c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	60fa      	str	r2, [r7, #12]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	e011      	b.n	8003040 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	60fa      	str	r2, [r7, #12]
 8003022:	22ff      	movs	r2, #255	; 0xff
 8003024:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	60fa      	str	r2, [r7, #12]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	0a19      	lsrs	r1, r3, #8
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	60fa      	str	r2, [r7, #12]
 800303c:	b2ca      	uxtb	r2, r1
 800303e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003044:	e00a      	b.n	800305c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	1c53      	adds	r3, r2, #1
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	60f9      	str	r1, [r7, #12]
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	701a      	strb	r2, [r3, #0]
    n++;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3301      	adds	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d3f0      	bcc.n	8003046 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003064:	68fb      	ldr	r3, [r7, #12]
}
 8003066:	4618      	mov	r0, r3
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003090:	1cfb      	adds	r3, r7, #3
 8003092:	2201      	movs	r2, #1
 8003094:	4619      	mov	r1, r3
 8003096:	2001      	movs	r0, #1
 8003098:	f7ff fdb8 	bl	8002c0c <SEGGER_RTT_ReadNoLock>
 800309c:	4603      	mov	r3, r0
 800309e:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	dd44      	ble.n	8003130 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d01a      	beq.n	80030e2 <_HandleIncomingPacket+0x58>
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	dc06      	bgt.n	80030be <_HandleIncomingPacket+0x34>
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d010      	beq.n	80030d6 <_HandleIncomingPacket+0x4c>
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	dc11      	bgt.n	80030dc <_HandleIncomingPacket+0x52>
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d009      	beq.n	80030d0 <_HandleIncomingPacket+0x46>
 80030bc:	e02d      	b.n	800311a <_HandleIncomingPacket+0x90>
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d015      	beq.n	80030ee <_HandleIncomingPacket+0x64>
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	db10      	blt.n	80030e8 <_HandleIncomingPacket+0x5e>
 80030c6:	2b07      	cmp	r3, #7
 80030c8:	d014      	beq.n	80030f4 <_HandleIncomingPacket+0x6a>
 80030ca:	2b80      	cmp	r3, #128	; 0x80
 80030cc:	d015      	beq.n	80030fa <_HandleIncomingPacket+0x70>
 80030ce:	e024      	b.n	800311a <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80030d0:	f000 fb86 	bl	80037e0 <SEGGER_SYSVIEW_Start>
      break;
 80030d4:	e031      	b.n	800313a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80030d6:	f000 fc3f 	bl	8003958 <SEGGER_SYSVIEW_Stop>
      break;
 80030da:	e02e      	b.n	800313a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80030dc:	f000 fe1a 	bl	8003d14 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80030e0:	e02b      	b.n	800313a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80030e2:	f000 fddf 	bl	8003ca4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80030e6:	e028      	b.n	800313a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80030e8:	f000 fc5c 	bl	80039a4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80030ec:	e025      	b.n	800313a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80030ee:	f001 f8b3 	bl	8004258 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80030f2:	e022      	b.n	800313a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80030f4:	f001 f892 	bl	800421c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80030f8:	e01f      	b.n	800313a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80030fa:	1cfb      	adds	r3, r7, #3
 80030fc:	2201      	movs	r2, #1
 80030fe:	4619      	mov	r1, r3
 8003100:	2001      	movs	r0, #1
 8003102:	f7ff fd83 	bl	8002c0c <SEGGER_RTT_ReadNoLock>
 8003106:	4603      	mov	r3, r0
 8003108:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	dd11      	ble.n	8003134 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	4618      	mov	r0, r3
 8003114:	f001 f802 	bl	800411c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003118:	e00c      	b.n	8003134 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	b25b      	sxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	da0a      	bge.n	8003138 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003122:	1cfb      	adds	r3, r7, #3
 8003124:	2201      	movs	r2, #1
 8003126:	4619      	mov	r1, r3
 8003128:	2001      	movs	r0, #1
 800312a:	f7ff fd6f 	bl	8002c0c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800312e:	e003      	b.n	8003138 <_HandleIncomingPacket+0xae>
    }
  }
 8003130:	bf00      	nop
 8003132:	e002      	b.n	800313a <_HandleIncomingPacket+0xb0>
      break;
 8003134:	bf00      	nop
 8003136:	e000      	b.n	800313a <_HandleIncomingPacket+0xb0>
      break;
 8003138:	bf00      	nop
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b08c      	sub	sp, #48	; 0x30
 8003148:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800314a:	2301      	movs	r3, #1
 800314c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	3301      	adds	r3, #1
 8003152:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003158:	4b30      	ldr	r3, [pc, #192]	; (800321c <_TrySendOverflowPacket+0xd8>)
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
 800315e:	e00b      	b.n	8003178 <_TrySendOverflowPacket+0x34>
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	b2da      	uxtb	r2, r3
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	1c59      	adds	r1, r3, #1
 8003168:	62f9      	str	r1, [r7, #44]	; 0x2c
 800316a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	09db      	lsrs	r3, r3, #7
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	2b7f      	cmp	r3, #127	; 0x7f
 800317c:	d8f0      	bhi.n	8003160 <_TrySendOverflowPacket+0x1c>
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800318e:	4b24      	ldr	r3, [pc, #144]	; (8003220 <_TrySendOverflowPacket+0xdc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003194:	4b21      	ldr	r3, [pc, #132]	; (800321c <_TrySendOverflowPacket+0xd8>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	e00b      	b.n	80031c0 <_TrySendOverflowPacket+0x7c>
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	1c59      	adds	r1, r3, #1
 80031b0:	6279      	str	r1, [r7, #36]	; 0x24
 80031b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	09db      	lsrs	r3, r3, #7
 80031be:	623b      	str	r3, [r7, #32]
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	2b7f      	cmp	r3, #127	; 0x7f
 80031c4:	d8f0      	bhi.n	80031a8 <_TrySendOverflowPacket+0x64>
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	627a      	str	r2, [r7, #36]	; 0x24
 80031cc:	6a3a      	ldr	r2, [r7, #32]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	4619      	mov	r1, r3
 80031e2:	2001      	movs	r0, #1
 80031e4:	f7ff fd94 	bl	8002d10 <SEGGER_RTT_WriteSkipNoLock>
 80031e8:	4603      	mov	r3, r0
 80031ea:	613b      	str	r3, [r7, #16]
  if (Status) {
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80031f2:	4a0a      	ldr	r2, [pc, #40]	; (800321c <_TrySendOverflowPacket+0xd8>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <_TrySendOverflowPacket+0xd8>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <_TrySendOverflowPacket+0xd8>)
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	e004      	b.n	8003210 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <_TrySendOverflowPacket+0xd8>)
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	3301      	adds	r3, #1
 800320c:	4a03      	ldr	r2, [pc, #12]	; (800321c <_TrySendOverflowPacket+0xd8>)
 800320e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003210:	693b      	ldr	r3, [r7, #16]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3730      	adds	r7, #48	; 0x30
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	2001522c 	.word	0x2001522c
 8003220:	e0001004 	.word	0xe0001004

08003224 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003230:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <_SendPacket+0x19c>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d010      	beq.n	800325a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003238:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <_SendPacket+0x19c>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80a1 	beq.w	8003384 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003242:	4b5f      	ldr	r3, [pc, #380]	; (80033c0 <_SendPacket+0x19c>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d109      	bne.n	800325e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800324a:	f7ff ff7b 	bl	8003144 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800324e:	4b5c      	ldr	r3, [pc, #368]	; (80033c0 <_SendPacket+0x19c>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	f040 8098 	bne.w	8003388 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8003258:	e001      	b.n	800325e <_SendPacket+0x3a>
    goto Send;
 800325a:	bf00      	nop
 800325c:	e000      	b.n	8003260 <_SendPacket+0x3c>
Send:
 800325e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b1f      	cmp	r3, #31
 8003264:	d809      	bhi.n	800327a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003266:	4b56      	ldr	r3, [pc, #344]	; (80033c0 <_SendPacket+0x19c>)
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	f040 8089 	bne.w	800338c <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b17      	cmp	r3, #23
 800327e:	d807      	bhi.n	8003290 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3b01      	subs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e03d      	b.n	800330c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b7f      	cmp	r3, #127	; 0x7f
 800329c:	d912      	bls.n	80032c4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	09da      	lsrs	r2, r3, #7
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	3a01      	subs	r2, #1
 80032b6:	60fa      	str	r2, [r7, #12]
 80032b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e006      	b.n	80032d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b7f      	cmp	r3, #127	; 0x7f
 80032d6:	d912      	bls.n	80032fe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	09da      	lsrs	r2, r3, #7
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3b01      	subs	r3, #1
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	3a01      	subs	r2, #1
 80032f0:	60fa      	str	r2, [r7, #12]
 80032f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e006      	b.n	800330c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3b01      	subs	r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800330c:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <_SendPacket+0x1a0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003312:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <_SendPacket+0x19c>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	623b      	str	r3, [r7, #32]
 8003324:	e00b      	b.n	800333e <_SendPacket+0x11a>
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	1c59      	adds	r1, r3, #1
 800332e:	6279      	str	r1, [r7, #36]	; 0x24
 8003330:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	09db      	lsrs	r3, r3, #7
 800333c:	623b      	str	r3, [r7, #32]
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	2b7f      	cmp	r3, #127	; 0x7f
 8003342:	d8f0      	bhi.n	8003326 <_SendPacket+0x102>
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	627a      	str	r2, [r7, #36]	; 0x24
 800334a:	6a3a      	ldr	r2, [r7, #32]
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	461a      	mov	r2, r3
 800335c:	68f9      	ldr	r1, [r7, #12]
 800335e:	2001      	movs	r0, #1
 8003360:	f7ff fcd6 	bl	8002d10 <SEGGER_RTT_WriteSkipNoLock>
 8003364:	4603      	mov	r3, r0
 8003366:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800336e:	4a14      	ldr	r2, [pc, #80]	; (80033c0 <_SendPacket+0x19c>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	60d3      	str	r3, [r2, #12]
 8003374:	e00b      	b.n	800338e <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <_SendPacket+0x19c>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	3301      	adds	r3, #1
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <_SendPacket+0x19c>)
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e004      	b.n	800338e <_SendPacket+0x16a>
    goto SendDone;
 8003384:	bf00      	nop
 8003386:	e002      	b.n	800338e <_SendPacket+0x16a>
      goto SendDone;
 8003388:	bf00      	nop
 800338a:	e000      	b.n	800338e <_SendPacket+0x16a>
      goto SendDone;
 800338c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <_SendPacket+0x1a4>)
 8003390:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <_SendPacket+0x1a4>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	429a      	cmp	r2, r3
 800339c:	d00b      	beq.n	80033b6 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800339e:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <_SendPacket+0x19c>)
 80033a0:	789b      	ldrb	r3, [r3, #2]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d107      	bne.n	80033b6 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <_SendPacket+0x19c>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80033ac:	f7ff fe6d 	bl	800308a <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <_SendPacket+0x19c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80033b6:	bf00      	nop
 80033b8:	3728      	adds	r7, #40	; 0x28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2001522c 	.word	0x2001522c
 80033c4:	e0001004 	.word	0xe0001004
 80033c8:	2001534c 	.word	0x2001534c

080033cc <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80033da:	2300      	movs	r3, #0
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033e2:	4a14      	ldr	r2, [pc, #80]	; (8003434 <SEGGER_SYSVIEW_Init+0x68>)
 80033e4:	4914      	ldr	r1, [pc, #80]	; (8003438 <SEGGER_SYSVIEW_Init+0x6c>)
 80033e6:	2001      	movs	r0, #1
 80033e8:	f7ff fd22 	bl	8002e30 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80033ec:	2300      	movs	r3, #0
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	2308      	movs	r3, #8
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <SEGGER_SYSVIEW_Init+0x70>)
 80033f4:	4910      	ldr	r1, [pc, #64]	; (8003438 <SEGGER_SYSVIEW_Init+0x6c>)
 80033f6:	2001      	movs	r0, #1
 80033f8:	f7ff fd84 	bl	8002f04 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <SEGGER_SYSVIEW_Init+0x74>)
 80033fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003402:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <SEGGER_SYSVIEW_Init+0x78>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <SEGGER_SYSVIEW_Init+0x74>)
 800340a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800340c:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <SEGGER_SYSVIEW_Init+0x74>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <SEGGER_SYSVIEW_Init+0x74>)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003418:	4a09      	ldr	r2, [pc, #36]	; (8003440 <SEGGER_SYSVIEW_Init+0x74>)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800341e:	4a08      	ldr	r2, [pc, #32]	; (8003440 <SEGGER_SYSVIEW_Init+0x74>)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <SEGGER_SYSVIEW_Init+0x74>)
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20013224 	.word	0x20013224
 8003438:	08004af4 	.word	0x08004af4
 800343c:	20015224 	.word	0x20015224
 8003440:	2001522c 	.word	0x2001522c
 8003444:	e0001004 	.word	0xe0001004

08003448 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003450:	4a04      	ldr	r2, [pc, #16]	; (8003464 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6113      	str	r3, [r2, #16]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	2001522c 	.word	0x2001522c

08003468 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003470:	f3ef 8311 	mrs	r3, BASEPRI
 8003474:	f04f 0120 	mov.w	r1, #32
 8003478:	f381 8811 	msr	BASEPRI, r1
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	4808      	ldr	r0, [pc, #32]	; (80034a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003480:	f7ff fdf7 	bl	8003072 <_PreparePacket>
 8003484:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	68b8      	ldr	r0, [r7, #8]
 800348c:	f7ff feca 	bl	8003224 <_SendPacket>
  RECORD_END();
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f383 8811 	msr	BASEPRI, r3
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	2001525c 	.word	0x2001525c

080034a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80034ae:	f3ef 8311 	mrs	r3, BASEPRI
 80034b2:	f04f 0120 	mov.w	r1, #32
 80034b6:	f381 8811 	msr	BASEPRI, r1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	4816      	ldr	r0, [pc, #88]	; (8003518 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80034be:	f7ff fdd8 	bl	8003072 <_PreparePacket>
 80034c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	e00b      	b.n	80034ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	1c59      	adds	r1, r3, #1
 80034da:	61f9      	str	r1, [r7, #28]
 80034dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	09db      	lsrs	r3, r3, #7
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b7f      	cmp	r3, #127	; 0x7f
 80034ee:	d8f0      	bhi.n	80034d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	61fa      	str	r2, [r7, #28]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	6938      	ldr	r0, [r7, #16]
 8003506:	f7ff fe8d 	bl	8003224 <_SendPacket>
  RECORD_END();
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f383 8811 	msr	BASEPRI, r3
}
 8003510:	bf00      	nop
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	2001525c 	.word	0x2001525c

0800351c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b08c      	sub	sp, #48	; 0x30
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003528:	f3ef 8311 	mrs	r3, BASEPRI
 800352c:	f04f 0120 	mov.w	r1, #32
 8003530:	f381 8811 	msr	BASEPRI, r1
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	4825      	ldr	r0, [pc, #148]	; (80035cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003538:	f7ff fd9b 	bl	8003072 <_PreparePacket>
 800353c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
 800354a:	e00b      	b.n	8003564 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	b2da      	uxtb	r2, r3
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	1c59      	adds	r1, r3, #1
 8003554:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003556:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	09db      	lsrs	r3, r3, #7
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	2b7f      	cmp	r3, #127	; 0x7f
 8003568:	d8f0      	bhi.n	800354c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	623b      	str	r3, [r7, #32]
 8003582:	e00b      	b.n	800359c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	6279      	str	r1, [r7, #36]	; 0x24
 800358e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	09db      	lsrs	r3, r3, #7
 800359a:	623b      	str	r3, [r7, #32]
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	2b7f      	cmp	r3, #127	; 0x7f
 80035a0:	d8f0      	bhi.n	8003584 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	627a      	str	r2, [r7, #36]	; 0x24
 80035a8:	6a3a      	ldr	r2, [r7, #32]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	6979      	ldr	r1, [r7, #20]
 80035b6:	69b8      	ldr	r0, [r7, #24]
 80035b8:	f7ff fe34 	bl	8003224 <_SendPacket>
  RECORD_END();
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f383 8811 	msr	BASEPRI, r3
}
 80035c2:	bf00      	nop
 80035c4:	3730      	adds	r7, #48	; 0x30
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2001525c 	.word	0x2001525c

080035d0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08e      	sub	sp, #56	; 0x38
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80035de:	f3ef 8311 	mrs	r3, BASEPRI
 80035e2:	f04f 0120 	mov.w	r1, #32
 80035e6:	f381 8811 	msr	BASEPRI, r1
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	4832      	ldr	r0, [pc, #200]	; (80036b8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80035ee:	f7ff fd40 	bl	8003072 <_PreparePacket>
 80035f2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003600:	e00b      	b.n	800361a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	b2da      	uxtb	r2, r3
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003608:	1c59      	adds	r1, r3, #1
 800360a:	6379      	str	r1, [r7, #52]	; 0x34
 800360c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	09db      	lsrs	r3, r3, #7
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	2b7f      	cmp	r3, #127	; 0x7f
 800361e:	d8f0      	bhi.n	8003602 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	637a      	str	r2, [r7, #52]	; 0x34
 8003626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]
 800362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
 8003638:	e00b      	b.n	8003652 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	b2da      	uxtb	r2, r3
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	1c59      	adds	r1, r3, #1
 8003642:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	09db      	lsrs	r3, r3, #7
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	2b7f      	cmp	r3, #127	; 0x7f
 8003656:	d8f0      	bhi.n	800363a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800365e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	e00b      	b.n	800368a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	1c59      	adds	r1, r3, #1
 800367a:	6279      	str	r1, [r7, #36]	; 0x24
 800367c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	09db      	lsrs	r3, r3, #7
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	2b7f      	cmp	r3, #127	; 0x7f
 800368e:	d8f0      	bhi.n	8003672 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	627a      	str	r2, [r7, #36]	; 0x24
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	6979      	ldr	r1, [r7, #20]
 80036a4:	69b8      	ldr	r0, [r7, #24]
 80036a6:	f7ff fdbd 	bl	8003224 <_SendPacket>
  RECORD_END();
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f383 8811 	msr	BASEPRI, r3
}
 80036b0:	bf00      	nop
 80036b2:	3738      	adds	r7, #56	; 0x38
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	2001525c 	.word	0x2001525c

080036bc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b090      	sub	sp, #64	; 0x40
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80036ca:	f3ef 8311 	mrs	r3, BASEPRI
 80036ce:	f04f 0120 	mov.w	r1, #32
 80036d2:	f381 8811 	msr	BASEPRI, r1
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	4840      	ldr	r0, [pc, #256]	; (80037dc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80036da:	f7ff fcca 	bl	8003072 <_PreparePacket>
 80036de:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80036ec:	e00b      	b.n	8003706 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f4:	1c59      	adds	r1, r3, #1
 80036f6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80036f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	09db      	lsrs	r3, r3, #7
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2b7f      	cmp	r3, #127	; 0x7f
 800370a:	d8f0      	bhi.n	80036ee <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800370c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	633b      	str	r3, [r7, #48]	; 0x30
 8003724:	e00b      	b.n	800373e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	b2da      	uxtb	r2, r3
 800372a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372c:	1c59      	adds	r1, r3, #1
 800372e:	6379      	str	r1, [r7, #52]	; 0x34
 8003730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	09db      	lsrs	r3, r3, #7
 800373c:	633b      	str	r3, [r7, #48]	; 0x30
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	2b7f      	cmp	r3, #127	; 0x7f
 8003742:	d8f0      	bhi.n	8003726 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	637a      	str	r2, [r7, #52]	; 0x34
 800374a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003752:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
 800375c:	e00b      	b.n	8003776 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003760:	b2da      	uxtb	r2, r3
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	1c59      	adds	r1, r3, #1
 8003766:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003768:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	09db      	lsrs	r3, r3, #7
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	2b7f      	cmp	r3, #127	; 0x7f
 800377a:	d8f0      	bhi.n	800375e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003792:	623b      	str	r3, [r7, #32]
 8003794:	e00b      	b.n	80037ae <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	1c59      	adds	r1, r3, #1
 800379e:	6279      	str	r1, [r7, #36]	; 0x24
 80037a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	09db      	lsrs	r3, r3, #7
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2b7f      	cmp	r3, #127	; 0x7f
 80037b2:	d8f0      	bhi.n	8003796 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	627a      	str	r2, [r7, #36]	; 0x24
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	69b8      	ldr	r0, [r7, #24]
 80037ca:	f7ff fd2b 	bl	8003224 <_SendPacket>
  RECORD_END();
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f383 8811 	msr	BASEPRI, r3
}
 80037d4:	bf00      	nop
 80037d6:	3740      	adds	r7, #64	; 0x40
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	2001525c 	.word	0x2001525c

080037e0 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	; 0x30
 80037e4:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80037e6:	4b59      	ldr	r3, [pc, #356]	; (800394c <SEGGER_SYSVIEW_Start+0x16c>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f040 80aa 	bne.w	8003944 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80037f0:	4b56      	ldr	r3, [pc, #344]	; (800394c <SEGGER_SYSVIEW_Start+0x16c>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80037f6:	f3ef 8311 	mrs	r3, BASEPRI
 80037fa:	f04f 0120 	mov.w	r1, #32
 80037fe:	f381 8811 	msr	BASEPRI, r1
 8003802:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003804:	220a      	movs	r2, #10
 8003806:	4952      	ldr	r1, [pc, #328]	; (8003950 <SEGGER_SYSVIEW_Start+0x170>)
 8003808:	2001      	movs	r0, #1
 800380a:	f7ff fa81 	bl	8002d10 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003814:	200a      	movs	r0, #10
 8003816:	f7ff fe27 	bl	8003468 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800381a:	f3ef 8311 	mrs	r3, BASEPRI
 800381e:	f04f 0120 	mov.w	r1, #32
 8003822:	f381 8811 	msr	BASEPRI, r1
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	484a      	ldr	r0, [pc, #296]	; (8003954 <SEGGER_SYSVIEW_Start+0x174>)
 800382a:	f7ff fc22 	bl	8003072 <_PreparePacket>
 800382e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003838:	4b44      	ldr	r3, [pc, #272]	; (800394c <SEGGER_SYSVIEW_Start+0x16c>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
 800383e:	e00b      	b.n	8003858 <SEGGER_SYSVIEW_Start+0x78>
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	b2da      	uxtb	r2, r3
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	62f9      	str	r1, [r7, #44]	; 0x2c
 800384a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	09db      	lsrs	r3, r3, #7
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	2b7f      	cmp	r3, #127	; 0x7f
 800385c:	d8f0      	bhi.n	8003840 <SEGGER_SYSVIEW_Start+0x60>
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <SEGGER_SYSVIEW_Start+0x16c>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	e00b      	b.n	8003892 <SEGGER_SYSVIEW_Start+0xb2>
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	1c59      	adds	r1, r3, #1
 8003882:	6279      	str	r1, [r7, #36]	; 0x24
 8003884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	09db      	lsrs	r3, r3, #7
 8003890:	623b      	str	r3, [r7, #32]
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	2b7f      	cmp	r3, #127	; 0x7f
 8003896:	d8f0      	bhi.n	800387a <SEGGER_SYSVIEW_Start+0x9a>
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	627a      	str	r2, [r7, #36]	; 0x24
 800389e:	6a3a      	ldr	r2, [r7, #32]
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <SEGGER_SYSVIEW_Start+0x16c>)
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e00b      	b.n	80038cc <SEGGER_SYSVIEW_Start+0xec>
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	1c59      	adds	r1, r3, #1
 80038bc:	61f9      	str	r1, [r7, #28]
 80038be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	09db      	lsrs	r3, r3, #7
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b7f      	cmp	r3, #127	; 0x7f
 80038d0:	d8f0      	bhi.n	80038b4 <SEGGER_SYSVIEW_Start+0xd4>
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	61fa      	str	r2, [r7, #28]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	2302      	movs	r3, #2
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	e00b      	b.n	8003904 <SEGGER_SYSVIEW_Start+0x124>
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	1c59      	adds	r1, r3, #1
 80038f4:	6179      	str	r1, [r7, #20]
 80038f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	09db      	lsrs	r3, r3, #7
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b7f      	cmp	r3, #127	; 0x7f
 8003908:	d8f0      	bhi.n	80038ec <SEGGER_SYSVIEW_Start+0x10c>
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	617a      	str	r2, [r7, #20]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800391a:	2218      	movs	r2, #24
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff fc80 	bl	8003224 <_SendPacket>
      RECORD_END();
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800392a:	4b08      	ldr	r3, [pc, #32]	; (800394c <SEGGER_SYSVIEW_Start+0x16c>)
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <SEGGER_SYSVIEW_Start+0x16c>)
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003938:	f000 f9ec 	bl	8003d14 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800393c:	f000 f9b2 	bl	8003ca4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003940:	f000 fc8a 	bl	8004258 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003944:	bf00      	nop
 8003946:	3730      	adds	r7, #48	; 0x30
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	2001522c 	.word	0x2001522c
 8003950:	08004ba0 	.word	0x08004ba0
 8003954:	2001525c 	.word	0x2001525c

08003958 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800395e:	f3ef 8311 	mrs	r3, BASEPRI
 8003962:	f04f 0120 	mov.w	r1, #32
 8003966:	f381 8811 	msr	BASEPRI, r1
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	480b      	ldr	r0, [pc, #44]	; (800399c <SEGGER_SYSVIEW_Stop+0x44>)
 800396e:	f7ff fb80 	bl	8003072 <_PreparePacket>
 8003972:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800397c:	220b      	movs	r2, #11
 800397e:	6839      	ldr	r1, [r7, #0]
 8003980:	6838      	ldr	r0, [r7, #0]
 8003982:	f7ff fc4f 	bl	8003224 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f383 8811 	msr	BASEPRI, r3
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2001525c 	.word	0x2001525c
 80039a0:	2001522c 	.word	0x2001522c

080039a4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	; 0x30
 80039a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80039aa:	f3ef 8311 	mrs	r3, BASEPRI
 80039ae:	f04f 0120 	mov.w	r1, #32
 80039b2:	f381 8811 	msr	BASEPRI, r1
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	4845      	ldr	r0, [pc, #276]	; (8003ad0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80039ba:	f7ff fb5a 	bl	8003072 <_PreparePacket>
 80039be:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c8:	4b42      	ldr	r3, [pc, #264]	; (8003ad4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ce:	e00b      	b.n	80039e8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	1c59      	adds	r1, r3, #1
 80039d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	09db      	lsrs	r3, r3, #7
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	2b7f      	cmp	r3, #127	; 0x7f
 80039ec:	d8f0      	bhi.n	80039d0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
 8003a02:	4b34      	ldr	r3, [pc, #208]	; (8003ad4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	623b      	str	r3, [r7, #32]
 8003a08:	e00b      	b.n	8003a22 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	1c59      	adds	r1, r3, #1
 8003a12:	6279      	str	r1, [r7, #36]	; 0x24
 8003a14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	09db      	lsrs	r3, r3, #7
 8003a20:	623b      	str	r3, [r7, #32]
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	2b7f      	cmp	r3, #127	; 0x7f
 8003a26:	d8f0      	bhi.n	8003a0a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a2e:	6a3a      	ldr	r2, [r7, #32]
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	e00b      	b.n	8003a5c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	1c59      	adds	r1, r3, #1
 8003a4c:	61f9      	str	r1, [r7, #28]
 8003a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	09db      	lsrs	r3, r3, #7
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a60:	d8f0      	bhi.n	8003a44 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	61fa      	str	r2, [r7, #28]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	2302      	movs	r3, #2
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	e00b      	b.n	8003a94 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	1c59      	adds	r1, r3, #1
 8003a84:	6179      	str	r1, [r7, #20]
 8003a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	09db      	lsrs	r3, r3, #7
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b7f      	cmp	r3, #127	; 0x7f
 8003a98:	d8f0      	bhi.n	8003a7c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	617a      	str	r2, [r7, #20]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003aaa:	2218      	movs	r2, #24
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	68b8      	ldr	r0, [r7, #8]
 8003ab0:	f7ff fbb8 	bl	8003224 <_SendPacket>
  RECORD_END();
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	4798      	blx	r3
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3730      	adds	r7, #48	; 0x30
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	2001525c 	.word	0x2001525c
 8003ad4:	2001522c 	.word	0x2001522c

08003ad8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b092      	sub	sp, #72	; 0x48
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ae4:	f04f 0120 	mov.w	r1, #32
 8003ae8:	f381 8811 	msr	BASEPRI, r1
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	486b      	ldr	r0, [pc, #428]	; (8003c9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003af0:	f7ff fabf 	bl	8003072 <_PreparePacket>
 8003af4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	647b      	str	r3, [r7, #68]	; 0x44
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b67      	ldr	r3, [pc, #412]	; (8003ca0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b0c:	e00b      	b.n	8003b26 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b14:	1c59      	adds	r1, r3, #1
 8003b16:	6479      	str	r1, [r7, #68]	; 0x44
 8003b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b22:	09db      	lsrs	r3, r3, #7
 8003b24:	643b      	str	r3, [r7, #64]	; 0x40
 8003b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b28:	2b7f      	cmp	r3, #127	; 0x7f
 8003b2a:	d8f0      	bhi.n	8003b0e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	647a      	str	r2, [r7, #68]	; 0x44
 8003b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b46:	e00b      	b.n	8003b60 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4e:	1c59      	adds	r1, r3, #1
 8003b50:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	09db      	lsrs	r3, r3, #7
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	2b7f      	cmp	r3, #127	; 0x7f
 8003b64:	d8f0      	bhi.n	8003b48 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b74:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7ff fa2a 	bl	8002fd8 <_EncodeStr>
 8003b84:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003b86:	2209      	movs	r2, #9
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	6938      	ldr	r0, [r7, #16]
 8003b8c:	f7ff fb4a 	bl	8003224 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba6:	e00b      	b.n	8003bc0 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bae:	1c59      	adds	r1, r3, #1
 8003bb0:	6379      	str	r1, [r7, #52]	; 0x34
 8003bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	09db      	lsrs	r3, r3, #7
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8003bc4:	d8f0      	bhi.n	8003ba8 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	637a      	str	r2, [r7, #52]	; 0x34
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be0:	e00b      	b.n	8003bfa <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	1c59      	adds	r1, r3, #1
 8003bea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003bec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	09db      	lsrs	r3, r3, #7
 8003bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8003bfe:	d8f0      	bhi.n	8003be2 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	623b      	str	r3, [r7, #32]
 8003c1a:	e00b      	b.n	8003c34 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	1c59      	adds	r1, r3, #1
 8003c24:	6279      	str	r1, [r7, #36]	; 0x24
 8003c26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	09db      	lsrs	r3, r3, #7
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	2b7f      	cmp	r3, #127	; 0x7f
 8003c38:	d8f0      	bhi.n	8003c1c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	627a      	str	r2, [r7, #36]	; 0x24
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e00b      	b.n	8003c6c <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	1c59      	adds	r1, r3, #1
 8003c5c:	61f9      	str	r1, [r7, #28]
 8003c5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	09db      	lsrs	r3, r3, #7
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c70:	d8f0      	bhi.n	8003c54 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	61fa      	str	r2, [r7, #28]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003c82:	2215      	movs	r2, #21
 8003c84:	68f9      	ldr	r1, [r7, #12]
 8003c86:	6938      	ldr	r0, [r7, #16]
 8003c88:	f7ff facc 	bl	8003224 <_SendPacket>
  RECORD_END();
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f383 8811 	msr	BASEPRI, r3
}
 8003c92:	bf00      	nop
 8003c94:	3748      	adds	r7, #72	; 0x48
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	2001525c 	.word	0x2001525c
 8003ca0:	2001522c 	.word	0x2001522c

08003ca4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003cba:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4798      	blx	r3
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2001522c 	.word	0x2001522c

08003ccc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003cd4:	f3ef 8311 	mrs	r3, BASEPRI
 8003cd8:	f04f 0120 	mov.w	r1, #32
 8003cdc:	f381 8811 	msr	BASEPRI, r1
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	480b      	ldr	r0, [pc, #44]	; (8003d10 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003ce4:	f7ff f9c5 	bl	8003072 <_PreparePacket>
 8003ce8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003cea:	2280      	movs	r2, #128	; 0x80
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	6938      	ldr	r0, [r7, #16]
 8003cf0:	f7ff f972 	bl	8002fd8 <_EncodeStr>
 8003cf4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003cf6:	220e      	movs	r2, #14
 8003cf8:	68f9      	ldr	r1, [r7, #12]
 8003cfa:	6938      	ldr	r0, [r7, #16]
 8003cfc:	f7ff fa92 	bl	8003224 <_SendPacket>
  RECORD_END();
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f383 8811 	msr	BASEPRI, r3
}
 8003d06:	bf00      	nop
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	2001525c 	.word	0x2001525c

08003d14 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003d1a:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d019      	beq.n	8003d56 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d014      	beq.n	8003d56 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4798      	blx	r3
 8003d34:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003d38:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003d3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	f04f 0400 	mov.w	r4, #0
 8003d46:	0013      	movs	r3, r2
 8003d48:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4601      	mov	r1, r0
 8003d4e:	200d      	movs	r0, #13
 8003d50:	f7ff fbe4 	bl	800351c <SEGGER_SYSVIEW_RecordU32x2>
 8003d54:	e005      	b.n	8003d62 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	200c      	movs	r0, #12
 8003d5e:	f7ff fba1 	bl	80034a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd90      	pop	{r4, r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	2001522c 	.word	0x2001522c
 8003d70:	e0001004 	.word	0xe0001004

08003d74 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d7e:	f04f 0120 	mov.w	r1, #32
 8003d82:	f381 8811 	msr	BASEPRI, r1
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	4819      	ldr	r0, [pc, #100]	; (8003df0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003d8a:	f7ff f972 	bl	8003072 <_PreparePacket>
 8003d8e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003d94:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	e00b      	b.n	8003dc0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	1c59      	adds	r1, r3, #1
 8003db0:	6179      	str	r1, [r7, #20]
 8003db2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	09db      	lsrs	r3, r3, #7
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc4:	d8f0      	bhi.n	8003da8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	617a      	str	r2, [r7, #20]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	68b8      	ldr	r0, [r7, #8]
 8003ddc:	f7ff fa22 	bl	8003224 <_SendPacket>
  RECORD_END();
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f383 8811 	msr	BASEPRI, r3
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2001525c 	.word	0x2001525c
 8003df4:	e000ed04 	.word	0xe000ed04

08003df8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8003e02:	f04f 0120 	mov.w	r1, #32
 8003e06:	f381 8811 	msr	BASEPRI, r1
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	4807      	ldr	r0, [pc, #28]	; (8003e2c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003e0e:	f7ff f930 	bl	8003072 <_PreparePacket>
 8003e12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003e14:	2203      	movs	r2, #3
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	6838      	ldr	r0, [r7, #0]
 8003e1a:	f7ff fa03 	bl	8003224 <_SendPacket>
  RECORD_END();
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f383 8811 	msr	BASEPRI, r3
}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	2001525c 	.word	0x2001525c

08003e30 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003e36:	f3ef 8311 	mrs	r3, BASEPRI
 8003e3a:	f04f 0120 	mov.w	r1, #32
 8003e3e:	f381 8811 	msr	BASEPRI, r1
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	4807      	ldr	r0, [pc, #28]	; (8003e64 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003e46:	f7ff f914 	bl	8003072 <_PreparePacket>
 8003e4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003e4c:	2212      	movs	r2, #18
 8003e4e:	6839      	ldr	r1, [r7, #0]
 8003e50:	6838      	ldr	r0, [r7, #0]
 8003e52:	f7ff f9e7 	bl	8003224 <_SendPacket>
  RECORD_END();
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f383 8811 	msr	BASEPRI, r3
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	2001525c 	.word	0x2001525c

08003e68 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e72:	f04f 0120 	mov.w	r1, #32
 8003e76:	f381 8811 	msr	BASEPRI, r1
 8003e7a:	607b      	str	r3, [r7, #4]
 8003e7c:	4807      	ldr	r0, [pc, #28]	; (8003e9c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003e7e:	f7ff f8f8 	bl	8003072 <_PreparePacket>
 8003e82:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003e84:	2211      	movs	r2, #17
 8003e86:	6839      	ldr	r1, [r7, #0]
 8003e88:	6838      	ldr	r0, [r7, #0]
 8003e8a:	f7ff f9cb 	bl	8003224 <_SendPacket>
  RECORD_END();
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f383 8811 	msr	BASEPRI, r3
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	2001525c 	.word	0x2001525c

08003ea0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003ea8:	f3ef 8311 	mrs	r3, BASEPRI
 8003eac:	f04f 0120 	mov.w	r1, #32
 8003eb0:	f381 8811 	msr	BASEPRI, r1
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	481a      	ldr	r0, [pc, #104]	; (8003f20 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003eb8:	f7ff f8db 	bl	8003072 <_PreparePacket>
 8003ebc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003ec2:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	e00b      	b.n	8003ef0 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	61f9      	str	r1, [r7, #28]
 8003ee2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	09db      	lsrs	r3, r3, #7
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ef4:	d8f0      	bhi.n	8003ed8 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	61fa      	str	r2, [r7, #28]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003f06:	2208      	movs	r2, #8
 8003f08:	68f9      	ldr	r1, [r7, #12]
 8003f0a:	6938      	ldr	r0, [r7, #16]
 8003f0c:	f7ff f98a 	bl	8003224 <_SendPacket>
  RECORD_END();
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f383 8811 	msr	BASEPRI, r3
}
 8003f16:	bf00      	nop
 8003f18:	3720      	adds	r7, #32
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	2001525c 	.word	0x2001525c
 8003f24:	2001522c 	.word	0x2001522c

08003f28 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f30:	f3ef 8311 	mrs	r3, BASEPRI
 8003f34:	f04f 0120 	mov.w	r1, #32
 8003f38:	f381 8811 	msr	BASEPRI, r1
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	481a      	ldr	r0, [pc, #104]	; (8003fa8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003f40:	f7ff f897 	bl	8003072 <_PreparePacket>
 8003f44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e00b      	b.n	8003f78 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	1c59      	adds	r1, r3, #1
 8003f68:	61f9      	str	r1, [r7, #28]
 8003f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	09db      	lsrs	r3, r3, #7
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f7c:	d8f0      	bhi.n	8003f60 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	61fa      	str	r2, [r7, #28]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003f8e:	2204      	movs	r2, #4
 8003f90:	68f9      	ldr	r1, [r7, #12]
 8003f92:	6938      	ldr	r0, [r7, #16]
 8003f94:	f7ff f946 	bl	8003224 <_SendPacket>
  RECORD_END();
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f383 8811 	msr	BASEPRI, r3
}
 8003f9e:	bf00      	nop
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2001525c 	.word	0x2001525c
 8003fac:	2001522c 	.word	0x2001522c

08003fb0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8003fbc:	f04f 0120 	mov.w	r1, #32
 8003fc0:	f381 8811 	msr	BASEPRI, r1
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	481a      	ldr	r0, [pc, #104]	; (8004030 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003fc8:	f7ff f853 	bl	8003072 <_PreparePacket>
 8003fcc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003fd2:	4b18      	ldr	r3, [pc, #96]	; (8004034 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	e00b      	b.n	8004000 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	61f9      	str	r1, [r7, #28]
 8003ff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	09db      	lsrs	r3, r3, #7
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b7f      	cmp	r3, #127	; 0x7f
 8004004:	d8f0      	bhi.n	8003fe8 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	61fa      	str	r2, [r7, #28]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004016:	2206      	movs	r2, #6
 8004018:	68f9      	ldr	r1, [r7, #12]
 800401a:	6938      	ldr	r0, [r7, #16]
 800401c:	f7ff f902 	bl	8003224 <_SendPacket>
  RECORD_END();
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f383 8811 	msr	BASEPRI, r3
}
 8004026:	bf00      	nop
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2001525c 	.word	0x2001525c
 8004034:	2001522c 	.word	0x2001522c

08004038 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	; 0x28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004042:	f3ef 8311 	mrs	r3, BASEPRI
 8004046:	f04f 0120 	mov.w	r1, #32
 800404a:	f381 8811 	msr	BASEPRI, r1
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	4827      	ldr	r0, [pc, #156]	; (80040f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004052:	f7ff f80e 	bl	8003072 <_PreparePacket>
 8004056:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800405c:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	089b      	lsrs	r3, r3, #2
 8004066:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	e00b      	b.n	800408a <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	1c59      	adds	r1, r3, #1
 800407a:	6279      	str	r1, [r7, #36]	; 0x24
 800407c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	09db      	lsrs	r3, r3, #7
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	2b7f      	cmp	r3, #127	; 0x7f
 800408e:	d8f0      	bhi.n	8004072 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	627a      	str	r2, [r7, #36]	; 0x24
 8004096:	6a3a      	ldr	r2, [r7, #32]
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	e00b      	b.n	80040c2 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	1c59      	adds	r1, r3, #1
 80040b2:	61f9      	str	r1, [r7, #28]
 80040b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	09db      	lsrs	r3, r3, #7
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b7f      	cmp	r3, #127	; 0x7f
 80040c6:	d8f0      	bhi.n	80040aa <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	61fa      	str	r2, [r7, #28]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80040d8:	2207      	movs	r2, #7
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	6938      	ldr	r0, [r7, #16]
 80040de:	f7ff f8a1 	bl	8003224 <_SendPacket>
  RECORD_END();
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f383 8811 	msr	BASEPRI, r3
}
 80040e8:	bf00      	nop
 80040ea:	3728      	adds	r7, #40	; 0x28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	2001525c 	.word	0x2001525c
 80040f4:	2001522c 	.word	0x2001522c

080040f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	089b      	lsrs	r3, r3, #2
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	2001522c 	.word	0x2001522c

0800411c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b08c      	sub	sp, #48	; 0x30
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004126:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d06d      	beq.n	800420a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800412e:	4b39      	ldr	r3, [pc, #228]	; (8004214 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004134:	2300      	movs	r3, #0
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
 8004138:	e008      	b.n	800414c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	3301      	adds	r3, #1
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004150:	429a      	cmp	r2, r3
 8004152:	d3f2      	bcc.n	800413a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004154:	e000      	b.n	8004158 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004156:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d055      	beq.n	800420a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800415e:	f3ef 8311 	mrs	r3, BASEPRI
 8004162:	f04f 0120 	mov.w	r1, #32
 8004166:	f381 8811 	msr	BASEPRI, r1
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	482a      	ldr	r0, [pc, #168]	; (8004218 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800416e:	f7fe ff80 	bl	8003072 <_PreparePacket>
 8004172:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	e00b      	b.n	800419a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	1c59      	adds	r1, r3, #1
 800418a:	6279      	str	r1, [r7, #36]	; 0x24
 800418c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	09db      	lsrs	r3, r3, #7
 8004198:	623b      	str	r3, [r7, #32]
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	2b7f      	cmp	r3, #127	; 0x7f
 800419e:	d8f0      	bhi.n	8004182 <SEGGER_SYSVIEW_SendModule+0x66>
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	627a      	str	r2, [r7, #36]	; 0x24
 80041a6:	6a3a      	ldr	r2, [r7, #32]
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	e00b      	b.n	80041d4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	1c59      	adds	r1, r3, #1
 80041c4:	61f9      	str	r1, [r7, #28]
 80041c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	09db      	lsrs	r3, r3, #7
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b7f      	cmp	r3, #127	; 0x7f
 80041d8:	d8f0      	bhi.n	80041bc <SEGGER_SYSVIEW_SendModule+0xa0>
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	61fa      	str	r2, [r7, #28]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2280      	movs	r2, #128	; 0x80
 80041f0:	4619      	mov	r1, r3
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7fe fef0 	bl	8002fd8 <_EncodeStr>
 80041f8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80041fa:	2216      	movs	r2, #22
 80041fc:	68f9      	ldr	r1, [r7, #12]
 80041fe:	6938      	ldr	r0, [r7, #16]
 8004200:	f7ff f810 	bl	8003224 <_SendPacket>
      RECORD_END();
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800420a:	bf00      	nop
 800420c:	3730      	adds	r7, #48	; 0x30
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20015254 	.word	0x20015254
 8004218:	2001525c 	.word	0x2001525c

0800421c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00f      	beq.n	800424a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f2      	bne.n	8004230 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20015254 	.word	0x20015254

08004258 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800425e:	f3ef 8311 	mrs	r3, BASEPRI
 8004262:	f04f 0120 	mov.w	r1, #32
 8004266:	f381 8811 	msr	BASEPRI, r1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	4817      	ldr	r0, [pc, #92]	; (80042cc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800426e:	f7fe ff00 	bl	8003072 <_PreparePacket>
 8004272:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	e00b      	b.n	800429c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1c59      	adds	r1, r3, #1
 800428c:	6179      	str	r1, [r7, #20]
 800428e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	09db      	lsrs	r3, r3, #7
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b7f      	cmp	r3, #127	; 0x7f
 80042a0:	d8f0      	bhi.n	8004284 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	617a      	str	r2, [r7, #20]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80042b2:	221b      	movs	r2, #27
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	68b8      	ldr	r0, [r7, #8]
 80042b8:	f7fe ffb4 	bl	8003224 <_SendPacket>
  RECORD_END();
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f383 8811 	msr	BASEPRI, r3
}
 80042c2:	bf00      	nop
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	2001525c 	.word	0x2001525c
 80042d0:	20015258 	.word	0x20015258

080042d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042dc:	f3ef 8311 	mrs	r3, BASEPRI
 80042e0:	f04f 0120 	mov.w	r1, #32
 80042e4:	f381 8811 	msr	BASEPRI, r1
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	4827      	ldr	r0, [pc, #156]	; (8004388 <SEGGER_SYSVIEW_Warn+0xb4>)
 80042ec:	f7fe fec1 	bl	8003072 <_PreparePacket>
 80042f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042f2:	2280      	movs	r2, #128	; 0x80
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	6938      	ldr	r0, [r7, #16]
 80042f8:	f7fe fe6e 	bl	8002fd8 <_EncodeStr>
 80042fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	2301      	movs	r3, #1
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	e00b      	b.n	8004320 <SEGGER_SYSVIEW_Warn+0x4c>
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	6279      	str	r1, [r7, #36]	; 0x24
 8004312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	09db      	lsrs	r3, r3, #7
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	2b7f      	cmp	r3, #127	; 0x7f
 8004324:	d8f0      	bhi.n	8004308 <SEGGER_SYSVIEW_Warn+0x34>
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	627a      	str	r2, [r7, #36]	; 0x24
 800432c:	6a3a      	ldr	r2, [r7, #32]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	e00b      	b.n	8004358 <SEGGER_SYSVIEW_Warn+0x84>
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	b2da      	uxtb	r2, r3
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	1c59      	adds	r1, r3, #1
 8004348:	61f9      	str	r1, [r7, #28]
 800434a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	09db      	lsrs	r3, r3, #7
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b7f      	cmp	r3, #127	; 0x7f
 800435c:	d8f0      	bhi.n	8004340 <SEGGER_SYSVIEW_Warn+0x6c>
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	61fa      	str	r2, [r7, #28]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800436e:	221a      	movs	r2, #26
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	6938      	ldr	r0, [r7, #16]
 8004374:	f7fe ff56 	bl	8003224 <_SendPacket>
  RECORD_END();
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f383 8811 	msr	BASEPRI, r3
}
 800437e:	bf00      	nop
 8004380:	3728      	adds	r7, #40	; 0x28
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	2001525c 	.word	0x2001525c

0800438c <main>:
#ifdef USE_SEMIHOSTING
extern void initialise_monitor_handles();
#endif

int main(void)
{
 800438c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438e:	b083      	sub	sp, #12
 8004390:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
    printf("Its a hello world application\r\n");
#endif

    DWT->CTRL |= (1<<0);//Data watch point trace->cyccnt(cycle count) in arm technical rm,it keeps time stamp
 8004392:	4b35      	ldr	r3, [pc, #212]	; (8004468 <main+0xdc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a34      	ldr	r2, [pc, #208]	; (8004468 <main+0xdc>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6013      	str	r3, [r2, #0]

    //reset the RCC clock cconfiguration to default reset state
	//reset state is hsi=on,pll=off,hse=off, sysclk=16MHz

    RCC_DeInit();
 800439e:	f7fc f817 	bl	80003d0 <RCC_DeInit>

    //update the system core clock variable
    SystemCoreClockUpdate();
 80043a2:	f000 f965 	bl	8004670 <SystemCoreClockUpdate>

    pvtHardwareSetup();
 80043a6:	f000 f8ff 	bl	80045a8 <pvtHardwareSetup>

    sprintf(user_msg,"\rmutual exclusion using binary semaphore demo\r\n");
 80043aa:	4b30      	ldr	r3, [pc, #192]	; (800446c <main+0xe0>)
 80043ac:	4a30      	ldr	r2, [pc, #192]	; (8004470 <main+0xe4>)
 80043ae:	4614      	mov	r4, r2
 80043b0:	469c      	mov	ip, r3
 80043b2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80043b6:	4665      	mov	r5, ip
 80043b8:	4626      	mov	r6, r4
 80043ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80043bc:	6028      	str	r0, [r5, #0]
 80043be:	6069      	str	r1, [r5, #4]
 80043c0:	60aa      	str	r2, [r5, #8]
 80043c2:	60eb      	str	r3, [r5, #12]
 80043c4:	3410      	adds	r4, #16
 80043c6:	f10c 0c10 	add.w	ip, ip, #16
 80043ca:	4574      	cmp	r4, lr
 80043cc:	d1f3      	bne.n	80043b6 <main+0x2a>
    printmsg(user_msg);
 80043ce:	4827      	ldr	r0, [pc, #156]	; (800446c <main+0xe0>)
 80043d0:	f000 f8f0 	bl	80045b4 <printmsg>

    //Start recording
    SEGGER_SYSVIEW_Conf();
 80043d4:	f7fe fa9e 	bl	8002914 <SEGGER_SYSVIEW_Conf>
    SEGGER_SYSVIEW_Start();
 80043d8:	f7ff fa02 	bl	80037e0 <SEGGER_SYSVIEW_Start>

    //create binary semaphore explicitly before starting to use it
    xBinarySemaphore=xSemaphoreCreateBinary();
 80043dc:	2203      	movs	r2, #3
 80043de:	2100      	movs	r1, #0
 80043e0:	2001      	movs	r0, #1
 80043e2:	f7fc fb7d 	bl	8000ae0 <xQueueGenericCreate>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4b22      	ldr	r3, [pc, #136]	; (8004474 <main+0xe8>)
 80043ea:	601a      	str	r2, [r3, #0]

    if(xBinarySemaphore !=NULL){
 80043ec:	4b21      	ldr	r3, [pc, #132]	; (8004474 <main+0xe8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01f      	beq.n	8004434 <main+0xa8>
    //create two tasks:task-1 and task-2
    xTaskCreate(vTask1_handler, "Task-1", 500, NULL, 2, &xTask1Handle);
 80043f4:	4b20      	ldr	r3, [pc, #128]	; (8004478 <main+0xec>)
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	2302      	movs	r3, #2
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2300      	movs	r3, #0
 80043fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004402:	491e      	ldr	r1, [pc, #120]	; (800447c <main+0xf0>)
 8004404:	481e      	ldr	r0, [pc, #120]	; (8004480 <main+0xf4>)
 8004406:	f7fc fedb 	bl	80011c0 <xTaskCreate>
    xTaskCreate(vTask2_handler, "Task-2", 500, NULL, 2, &xTask2Handle);
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <main+0xf8>)
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	2302      	movs	r3, #2
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	2300      	movs	r3, #0
 8004414:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004418:	491b      	ldr	r1, [pc, #108]	; (8004488 <main+0xfc>)
 800441a:	481c      	ldr	r0, [pc, #112]	; (800448c <main+0x100>)
 800441c:	f7fc fed0 	bl	80011c0 <xTaskCreate>
    //before tak can take semaphore should be given to make the count as 1
    xSemaphoreGive(xBinarySemaphore);
 8004420:	4b14      	ldr	r3, [pc, #80]	; (8004474 <main+0xe8>)
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	2300      	movs	r3, #0
 8004426:	2200      	movs	r2, #0
 8004428:	2100      	movs	r1, #0
 800442a:	f7fc fbb7 	bl	8000b9c <xQueueGenericSend>

    //start the scheduler
    vTaskStartScheduler();
 800442e:	f7fd f84d 	bl	80014cc <vTaskStartScheduler>
 8004432:	e018      	b.n	8004466 <main+0xda>
    }else{
        sprintf(user_msg,"\rbinary semaphore creation failed\r\n");
 8004434:	4b0d      	ldr	r3, [pc, #52]	; (800446c <main+0xe0>)
 8004436:	4a16      	ldr	r2, [pc, #88]	; (8004490 <main+0x104>)
 8004438:	4614      	mov	r4, r2
 800443a:	469c      	mov	ip, r3
 800443c:	f104 0e20 	add.w	lr, r4, #32
 8004440:	4665      	mov	r5, ip
 8004442:	4626      	mov	r6, r4
 8004444:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004446:	6028      	str	r0, [r5, #0]
 8004448:	6069      	str	r1, [r5, #4]
 800444a:	60aa      	str	r2, [r5, #8]
 800444c:	60eb      	str	r3, [r5, #12]
 800444e:	3410      	adds	r4, #16
 8004450:	f10c 0c10 	add.w	ip, ip, #16
 8004454:	4574      	cmp	r4, lr
 8004456:	d1f3      	bne.n	8004440 <main+0xb4>
 8004458:	4663      	mov	r3, ip
 800445a:	4622      	mov	r2, r4
 800445c:	6810      	ldr	r0, [r2, #0]
 800445e:	6018      	str	r0, [r3, #0]
        printmsg(user_msg);
 8004460:	4802      	ldr	r0, [pc, #8]	; (800446c <main+0xe0>)
 8004462:	f000 f8a7 	bl	80045b4 <printmsg>



    }
	for(;;);
 8004466:	e7fe      	b.n	8004466 <main+0xda>
 8004468:	e0001000 	.word	0xe0001000
 800446c:	200153f4 	.word	0x200153f4
 8004470:	08004afc 	.word	0x08004afc
 8004474:	20015348 	.word	0x20015348
 8004478:	20015340 	.word	0x20015340
 800447c:	08004b2c 	.word	0x08004b2c
 8004480:	08004495 	.word	0x08004495
 8004484:	20015344 	.word	0x20015344
 8004488:	08004b34 	.word	0x08004b34
 800448c:	080044d1 	.word	0x080044d1
 8004490:	08004b3c 	.word	0x08004b3c

08004494 <vTask1_handler>:
}

void vTask1_handler(void* params){
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	while(1){

			xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <vTask1_handler+0x34>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f04f 31ff 	mov.w	r1, #4294967295
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fc fc6d 	bl	8000d84 <xQueueSemaphoreTake>
			printmsg("UART message from task-1\r\n");
 80044aa:	4808      	ldr	r0, [pc, #32]	; (80044cc <vTask1_handler+0x38>)
 80044ac:	f000 f882 	bl	80045b4 <printmsg>
		    xSemaphoreGive(xBinarySemaphore);
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <vTask1_handler+0x34>)
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	2200      	movs	r2, #0
 80044b8:	2100      	movs	r1, #0
 80044ba:	f7fc fb6f 	bl	8000b9c <xQueueGenericSend>

		    vTaskDelay(pdMS_TO_TICKS(10));
 80044be:	2005      	movs	r0, #5
 80044c0:	f7fc ffcc 	bl	800145c <vTaskDelay>
			xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 80044c4:	e7ea      	b.n	800449c <vTask1_handler+0x8>
 80044c6:	bf00      	nop
 80044c8:	20015348 	.word	0x20015348
 80044cc:	08004b60 	.word	0x08004b60

080044d0 <vTask2_handler>:

	}

}
void vTask2_handler(void* params){
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <vTask2_handler+0x34>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f04f 31ff 	mov.w	r1, #4294967295
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fc fc4f 	bl	8000d84 <xQueueSemaphoreTake>
		printmsg("UART message from task-2\r\n");
 80044e6:	4808      	ldr	r0, [pc, #32]	; (8004508 <vTask2_handler+0x38>)
 80044e8:	f000 f864 	bl	80045b4 <printmsg>
		xSemaphoreGive(xBinarySemaphore);
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <vTask2_handler+0x34>)
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	2300      	movs	r3, #0
 80044f2:	2200      	movs	r2, #0
 80044f4:	2100      	movs	r1, #0
 80044f6:	f7fc fb51 	bl	8000b9c <xQueueGenericSend>
	    vTaskDelay(pdMS_TO_TICKS(10));
 80044fa:	2005      	movs	r0, #5
 80044fc:	f7fc ffae 	bl	800145c <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 8004500:	e7ea      	b.n	80044d8 <vTask2_handler+0x8>
 8004502:	bf00      	nop
 8004504:	20015348 	.word	0x20015348
 8004508:	08004b7c 	.word	0x08004b7c

0800450c <UART_Setup>:

	}
}
static void UART_Setup(void){
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef UART_Gpio;
		memset(&UART_Gpio,0,sizeof(UART_Gpio));
 8004512:	f107 0310 	add.w	r3, r7, #16
 8004516:	2208      	movs	r2, #8
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fa74 	bl	8004a08 <memset>
		USART_InitTypeDef UART_Handle;
		memset(&UART_Handle,0,sizeof(UART_Handle));
 8004520:	463b      	mov	r3, r7
 8004522:	2210      	movs	r2, #16
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fa6e 	bl	8004a08 <memset>

	//enable clock for uart peripheral and gpioa peripheral
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 800452c:	2101      	movs	r1, #1
 800452e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004532:	f7fc f89f 	bl	8000674 <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004536:	2101      	movs	r1, #1
 8004538:	2001      	movs	r0, #1
 800453a:	f7fc f87b 	bl	8000634 <RCC_AHB1PeriphClockCmd>

		//configure pa2 as uart_tx and pa3 as uart_rx

		UART_Gpio.GPIO_Pin=GPIO_Pin_2 | GPIO_Pin_3;
 800453e:	230c      	movs	r3, #12
 8004540:	613b      	str	r3, [r7, #16]
		UART_Gpio.GPIO_Mode=GPIO_Mode_AF;
 8004542:	2302      	movs	r3, #2
 8004544:	753b      	strb	r3, [r7, #20]
		UART_Gpio.GPIO_PuPd=GPIO_PuPd_UP;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
		GPIO_Init(GPIOA, &UART_Gpio);
 800454a:	f107 0310 	add.w	r3, r7, #16
 800454e:	4619      	mov	r1, r3
 8004550:	4813      	ldr	r0, [pc, #76]	; (80045a0 <UART_Setup+0x94>)
 8004552:	f7fb fe65 	bl	8000220 <GPIO_Init>

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);//PA2 CONFIG AF7
 8004556:	2207      	movs	r2, #7
 8004558:	2102      	movs	r1, #2
 800455a:	4811      	ldr	r0, [pc, #68]	; (80045a0 <UART_Setup+0x94>)
 800455c:	f7fb feee 	bl	800033c <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);//PA3 CONFIG AF7
 8004560:	2207      	movs	r2, #7
 8004562:	2103      	movs	r1, #3
 8004564:	480e      	ldr	r0, [pc, #56]	; (80045a0 <UART_Setup+0x94>)
 8004566:	f7fb fee9 	bl	800033c <GPIO_PinAFConfig>

		//UART PERIPHERAL CONFIGURATION
		UART_Handle.USART_BaudRate=115200;
 800456a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800456e:	603b      	str	r3, [r7, #0]
		UART_Handle.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 8004570:	2300      	movs	r3, #0
 8004572:	81bb      	strh	r3, [r7, #12]
		UART_Handle.USART_Mode=USART_Mode_Tx | USART_Mode_Rx;
 8004574:	230c      	movs	r3, #12
 8004576:	817b      	strh	r3, [r7, #10]
		UART_Handle.USART_Parity=USART_Parity_No;
 8004578:	2300      	movs	r3, #0
 800457a:	813b      	strh	r3, [r7, #8]
		UART_Handle.USART_StopBits=USART_StopBits_1;
 800457c:	2300      	movs	r3, #0
 800457e:	80fb      	strh	r3, [r7, #6]
		UART_Handle.USART_WordLength=USART_WordLength_8b;
 8004580:	2300      	movs	r3, #0
 8004582:	80bb      	strh	r3, [r7, #4]

		USART_Init(USART2, &UART_Handle);
 8004584:	463b      	mov	r3, r7
 8004586:	4619      	mov	r1, r3
 8004588:	4806      	ldr	r0, [pc, #24]	; (80045a4 <UART_Setup+0x98>)
 800458a:	f7fc f893 	bl	80006b4 <USART_Init>
		USART_Cmd(USART2, ENABLE);
 800458e:	2101      	movs	r1, #1
 8004590:	4804      	ldr	r0, [pc, #16]	; (80045a4 <UART_Setup+0x98>)
 8004592:	f7fc f949 	bl	8000828 <USART_Cmd>

}
 8004596:	bf00      	nop
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40020000 	.word	0x40020000
 80045a4:	40004400 	.word	0x40004400

080045a8 <pvtHardwareSetup>:

static void pvtHardwareSetup(void){
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
	UART_Setup();
 80045ac:	f7ff ffae 	bl	800450c <UART_Setup>


}
 80045b0:	bf00      	nop
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <printmsg>:

void printmsg(char* msg){
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

	for(uint32_t i=0;i<strlen(msg);i++){
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e013      	b.n	80045ea <printmsg+0x36>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)==RESET);
 80045c2:	bf00      	nop
 80045c4:	2180      	movs	r1, #128	; 0x80
 80045c6:	480e      	ldr	r0, [pc, #56]	; (8004600 <printmsg+0x4c>)
 80045c8:	f7fc f960 	bl	800088c <USART_GetFlagStatus>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f8      	beq.n	80045c4 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	4619      	mov	r1, r3
 80045de:	4808      	ldr	r0, [pc, #32]	; (8004600 <printmsg+0x4c>)
 80045e0:	f7fc f942 	bl	8000868 <USART_SendData>
	for(uint32_t i=0;i<strlen(msg);i++){
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3301      	adds	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fb fe10 	bl	8000210 <strlen>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d3e4      	bcc.n	80045c2 <printmsg+0xe>
	}

}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40004400 	.word	0x40004400

08004604 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004608:	4b16      	ldr	r3, [pc, #88]	; (8004664 <SystemInit+0x60>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	4a15      	ldr	r2, [pc, #84]	; (8004664 <SystemInit+0x60>)
 8004610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004618:	4b13      	ldr	r3, [pc, #76]	; (8004668 <SystemInit+0x64>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a12      	ldr	r2, [pc, #72]	; (8004668 <SystemInit+0x64>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <SystemInit+0x64>)
 8004626:	2200      	movs	r2, #0
 8004628:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <SystemInit+0x64>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a0e      	ldr	r2, [pc, #56]	; (8004668 <SystemInit+0x64>)
 8004630:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004638:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800463a:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <SystemInit+0x64>)
 800463c:	4a0b      	ldr	r2, [pc, #44]	; (800466c <SystemInit+0x68>)
 800463e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004640:	4b09      	ldr	r3, [pc, #36]	; (8004668 <SystemInit+0x64>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a08      	ldr	r2, [pc, #32]	; (8004668 <SystemInit+0x64>)
 8004646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800464a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <SystemInit+0x64>)
 800464e:	2200      	movs	r2, #0
 8004650:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004652:	f000 f8db 	bl	800480c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004656:	4b03      	ldr	r3, [pc, #12]	; (8004664 <SystemInit+0x60>)
 8004658:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800465c:	609a      	str	r2, [r3, #8]
#endif
}
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	e000ed00 	.word	0xe000ed00
 8004668:	40023800 	.word	0x40023800
 800466c:	24003010 	.word	0x24003010

08004670 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	2302      	movs	r3, #2
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	2302      	movs	r3, #2
 8004688:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 800468a:	2302      	movs	r3, #2
 800468c:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800468e:	4b5a      	ldr	r3, [pc, #360]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b0c      	cmp	r3, #12
 800469c:	f200 8092 	bhi.w	80047c4 <SystemCoreClockUpdate+0x154>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <SystemCoreClockUpdate+0x38>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080047c5 	.word	0x080047c5
 80046b0:	080047c5 	.word	0x080047c5
 80046b4:	080047c5 	.word	0x080047c5
 80046b8:	080046e5 	.word	0x080046e5
 80046bc:	080047c5 	.word	0x080047c5
 80046c0:	080047c5 	.word	0x080047c5
 80046c4:	080047c5 	.word	0x080047c5
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	080047c5 	.word	0x080047c5
 80046d0:	080047c5 	.word	0x080047c5
 80046d4:	080047c5 	.word	0x080047c5
 80046d8:	08004759 	.word	0x08004759
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80046dc:	4b47      	ldr	r3, [pc, #284]	; (80047fc <SystemCoreClockUpdate+0x18c>)
 80046de:	4a48      	ldr	r2, [pc, #288]	; (8004800 <SystemCoreClockUpdate+0x190>)
 80046e0:	601a      	str	r2, [r3, #0]
      break;
 80046e2:	e073      	b.n	80047cc <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80046e4:	4b45      	ldr	r3, [pc, #276]	; (80047fc <SystemCoreClockUpdate+0x18c>)
 80046e6:	4a47      	ldr	r2, [pc, #284]	; (8004804 <SystemCoreClockUpdate+0x194>)
 80046e8:	601a      	str	r2, [r3, #0]
      break;
 80046ea:	e06f      	b.n	80047cc <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80046ec:	4b42      	ldr	r3, [pc, #264]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	0d9b      	lsrs	r3, r3, #22
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f8:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004700:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00c      	beq.n	8004722 <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004708:	4a3e      	ldr	r2, [pc, #248]	; (8004804 <SystemCoreClockUpdate+0x194>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	4a39      	ldr	r2, [pc, #228]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 8004712:	6852      	ldr	r2, [r2, #4]
 8004714:	0992      	lsrs	r2, r2, #6
 8004716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	e00b      	b.n	800473a <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004722:	4a37      	ldr	r2, [pc, #220]	; (8004800 <SystemCoreClockUpdate+0x190>)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	4a33      	ldr	r2, [pc, #204]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 800472c:	6852      	ldr	r2, [r2, #4]
 800472e:	0992      	lsrs	r2, r2, #6
 8004730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800473a:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	3301      	adds	r3, #1
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004752:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <SystemCoreClockUpdate+0x18c>)
 8004754:	6013      	str	r3, [r2, #0]
      break;
 8004756:	e039      	b.n	80047cc <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004758:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	0d9b      	lsrs	r3, r3, #22
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800476c:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00c      	beq.n	800478e <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004774:	4a23      	ldr	r2, [pc, #140]	; (8004804 <SystemCoreClockUpdate+0x194>)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 800477e:	6852      	ldr	r2, [r2, #4]
 8004780:	0992      	lsrs	r2, r2, #6
 8004782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	e00b      	b.n	80047a6 <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800478e:	4a1c      	ldr	r2, [pc, #112]	; (8004800 <SystemCoreClockUpdate+0x190>)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 8004798:	6852      	ldr	r2, [r2, #4]
 800479a:	0992      	lsrs	r2, r2, #6
 800479c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	0f1b      	lsrs	r3, r3, #28
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	3301      	adds	r3, #1
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80047be:	4a0f      	ldr	r2, [pc, #60]	; (80047fc <SystemCoreClockUpdate+0x18c>)
 80047c0:	6013      	str	r3, [r2, #0]
      break;
 80047c2:	e003      	b.n	80047cc <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 80047c4:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <SystemCoreClockUpdate+0x18c>)
 80047c6:	4a0e      	ldr	r2, [pc, #56]	; (8004800 <SystemCoreClockUpdate+0x190>)
 80047c8:	601a      	str	r2, [r3, #0]
      break;
 80047ca:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <SystemCoreClockUpdate+0x188>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <SystemCoreClockUpdate+0x198>)
 80047d8:	5cd3      	ldrb	r3, [r2, r3]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <SystemCoreClockUpdate+0x18c>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
 80047e8:	4a04      	ldr	r2, [pc, #16]	; (80047fc <SystemCoreClockUpdate+0x18c>)
 80047ea:	6013      	str	r3, [r2, #0]
}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40023800 	.word	0x40023800
 80047fc:	20000014 	.word	0x20000014
 8004800:	00f42400 	.word	0x00f42400
 8004804:	007a1200 	.word	0x007a1200
 8004808:	20000018 	.word	0x20000018

0800480c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	2300      	movs	r3, #0
 8004818:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800481a:	4b43      	ldr	r3, [pc, #268]	; (8004928 <SetSysClock+0x11c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a42      	ldr	r2, [pc, #264]	; (8004928 <SetSysClock+0x11c>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004826:	4b40      	ldr	r3, [pc, #256]	; (8004928 <SetSysClock+0x11c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3301      	adds	r3, #1
 8004834:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <SetSysClock+0x38>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004842:	d1f0      	bne.n	8004826 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004844:	4b38      	ldr	r3, [pc, #224]	; (8004928 <SetSysClock+0x11c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004850:	2301      	movs	r3, #1
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	e001      	b.n	800485a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004856:	2300      	movs	r3, #0
 8004858:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d15c      	bne.n	800491a <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004860:	4b31      	ldr	r3, [pc, #196]	; (8004928 <SetSysClock+0x11c>)
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	4a30      	ldr	r2, [pc, #192]	; (8004928 <SetSysClock+0x11c>)
 8004866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800486c:	4b2f      	ldr	r3, [pc, #188]	; (800492c <SetSysClock+0x120>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2e      	ldr	r2, [pc, #184]	; (800492c <SetSysClock+0x120>)
 8004872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004876:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004878:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <SetSysClock+0x11c>)
 800487a:	4a2b      	ldr	r2, [pc, #172]	; (8004928 <SetSysClock+0x11c>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004880:	4b29      	ldr	r3, [pc, #164]	; (8004928 <SetSysClock+0x11c>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a28      	ldr	r2, [pc, #160]	; (8004928 <SetSysClock+0x11c>)
 8004886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800488c:	4b26      	ldr	r3, [pc, #152]	; (8004928 <SetSysClock+0x11c>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4a25      	ldr	r2, [pc, #148]	; (8004928 <SetSysClock+0x11c>)
 8004892:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004896:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004898:	4b23      	ldr	r3, [pc, #140]	; (8004928 <SetSysClock+0x11c>)
 800489a:	4a25      	ldr	r2, [pc, #148]	; (8004930 <SetSysClock+0x124>)
 800489c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800489e:	4b22      	ldr	r3, [pc, #136]	; (8004928 <SetSysClock+0x11c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a21      	ldr	r2, [pc, #132]	; (8004928 <SetSysClock+0x11c>)
 80048a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80048aa:	bf00      	nop
 80048ac:	4b1e      	ldr	r3, [pc, #120]	; (8004928 <SetSysClock+0x11c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f9      	beq.n	80048ac <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 80048b8:	4b1c      	ldr	r3, [pc, #112]	; (800492c <SetSysClock+0x120>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1b      	ldr	r2, [pc, #108]	; (800492c <SetSysClock+0x120>)
 80048be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c2:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 80048c4:	bf00      	nop
 80048c6:	4b19      	ldr	r3, [pc, #100]	; (800492c <SetSysClock+0x120>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f9      	beq.n	80048c6 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 80048d2:	4b16      	ldr	r3, [pc, #88]	; (800492c <SetSysClock+0x120>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a15      	ldr	r2, [pc, #84]	; (800492c <SetSysClock+0x120>)
 80048d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048dc:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 80048de:	bf00      	nop
 80048e0:	4b12      	ldr	r3, [pc, #72]	; (800492c <SetSysClock+0x120>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f9      	beq.n	80048e0 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <SetSysClock+0x128>)
 80048ee:	f240 7205 	movw	r2, #1797	; 0x705
 80048f2:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <SetSysClock+0x11c>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a0b      	ldr	r2, [pc, #44]	; (8004928 <SetSysClock+0x11c>)
 80048fa:	f023 0303 	bic.w	r3, r3, #3
 80048fe:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004900:	4b09      	ldr	r3, [pc, #36]	; (8004928 <SetSysClock+0x11c>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a08      	ldr	r2, [pc, #32]	; (8004928 <SetSysClock+0x11c>)
 8004906:	f043 0302 	orr.w	r3, r3, #2
 800490a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800490c:	bf00      	nop
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <SetSysClock+0x11c>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b08      	cmp	r3, #8
 8004918:	d1f9      	bne.n	800490e <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800
 800492c:	40007000 	.word	0x40007000
 8004930:	77405a08 	.word	0x77405a08
 8004934:	40023c00 	.word	0x40023c00

08004938 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004938:	480d      	ldr	r0, [pc, #52]	; (8004970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800493a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800493c:	480d      	ldr	r0, [pc, #52]	; (8004974 <LoopForever+0x6>)
  ldr r1, =_edata
 800493e:	490e      	ldr	r1, [pc, #56]	; (8004978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004940:	4a0e      	ldr	r2, [pc, #56]	; (800497c <LoopForever+0xe>)
  movs r3, #0
 8004942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004944:	e002      	b.n	800494c <LoopCopyDataInit>

08004946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800494a:	3304      	adds	r3, #4

0800494c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800494c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800494e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004950:	d3f9      	bcc.n	8004946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004952:	4a0b      	ldr	r2, [pc, #44]	; (8004980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004954:	4c0b      	ldr	r4, [pc, #44]	; (8004984 <LoopForever+0x16>)
  movs r3, #0
 8004956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004958:	e001      	b.n	800495e <LoopFillZerobss>

0800495a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800495a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800495c:	3204      	adds	r2, #4

0800495e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800495e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004960:	d3fb      	bcc.n	800495a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004962:	f7ff fe4f 	bl	8004604 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004966:	f000 f811 	bl	800498c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800496a:	f7ff fd0f 	bl	800438c <main>

0800496e <LoopForever>:

LoopForever:
    b LoopForever
 800496e:	e7fe      	b.n	800496e <LoopForever>
  ldr   r0, =_estack
 8004970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004978:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800497c:	08004bb4 	.word	0x08004bb4
  ldr r2, =_sbss
 8004980:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8004984:	20015458 	.word	0x20015458

08004988 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004988:	e7fe      	b.n	8004988 <ADC_IRQHandler>
	...

0800498c <__libc_init_array>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	4e0d      	ldr	r6, [pc, #52]	; (80049c4 <__libc_init_array+0x38>)
 8004990:	4c0d      	ldr	r4, [pc, #52]	; (80049c8 <__libc_init_array+0x3c>)
 8004992:	1ba4      	subs	r4, r4, r6
 8004994:	10a4      	asrs	r4, r4, #2
 8004996:	2500      	movs	r5, #0
 8004998:	42a5      	cmp	r5, r4
 800499a:	d109      	bne.n	80049b0 <__libc_init_array+0x24>
 800499c:	4e0b      	ldr	r6, [pc, #44]	; (80049cc <__libc_init_array+0x40>)
 800499e:	4c0c      	ldr	r4, [pc, #48]	; (80049d0 <__libc_init_array+0x44>)
 80049a0:	f000 f83a 	bl	8004a18 <_init>
 80049a4:	1ba4      	subs	r4, r4, r6
 80049a6:	10a4      	asrs	r4, r4, #2
 80049a8:	2500      	movs	r5, #0
 80049aa:	42a5      	cmp	r5, r4
 80049ac:	d105      	bne.n	80049ba <__libc_init_array+0x2e>
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049b4:	4798      	blx	r3
 80049b6:	3501      	adds	r5, #1
 80049b8:	e7ee      	b.n	8004998 <__libc_init_array+0xc>
 80049ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049be:	4798      	blx	r3
 80049c0:	3501      	adds	r5, #1
 80049c2:	e7f2      	b.n	80049aa <__libc_init_array+0x1e>
 80049c4:	08004bac 	.word	0x08004bac
 80049c8:	08004bac 	.word	0x08004bac
 80049cc:	08004bac 	.word	0x08004bac
 80049d0:	08004bb0 	.word	0x08004bb0

080049d4 <memcmp>:
 80049d4:	b530      	push	{r4, r5, lr}
 80049d6:	2400      	movs	r4, #0
 80049d8:	42a2      	cmp	r2, r4
 80049da:	d101      	bne.n	80049e0 <memcmp+0xc>
 80049dc:	2000      	movs	r0, #0
 80049de:	e007      	b.n	80049f0 <memcmp+0x1c>
 80049e0:	5d03      	ldrb	r3, [r0, r4]
 80049e2:	3401      	adds	r4, #1
 80049e4:	190d      	adds	r5, r1, r4
 80049e6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80049ea:	42ab      	cmp	r3, r5
 80049ec:	d0f4      	beq.n	80049d8 <memcmp+0x4>
 80049ee:	1b58      	subs	r0, r3, r5
 80049f0:	bd30      	pop	{r4, r5, pc}

080049f2 <memcpy>:
 80049f2:	b510      	push	{r4, lr}
 80049f4:	1e43      	subs	r3, r0, #1
 80049f6:	440a      	add	r2, r1
 80049f8:	4291      	cmp	r1, r2
 80049fa:	d100      	bne.n	80049fe <memcpy+0xc>
 80049fc:	bd10      	pop	{r4, pc}
 80049fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a06:	e7f7      	b.n	80049f8 <memcpy+0x6>

08004a08 <memset>:
 8004a08:	4402      	add	r2, r0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <_init>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr

08004a24 <_fini>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr
