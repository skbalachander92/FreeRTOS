
004_LED_Button_TaskNotify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a48  08004a48  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004a48  08004a48  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a48  08004a48  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001543c  20000090  08004ae0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200154cc  08004ae0  000254cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7f8  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b03  00000000  00000000  0002d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b18  00000000  00000000  0002f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  0002fed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ae0  00000000  00000000  00030918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d5a  00000000  00000000  000333f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ecc3  00000000  00000000  0003d152  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bbe15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003770  00000000  00000000  000bbe90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004858 	.word	0x08004858

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08004858 	.word	0x08004858

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	e076      	b.n	80003ca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002dc:	2201      	movs	r2, #1
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	693a      	ldr	r2, [r7, #16]
 80002ec:	4013      	ands	r3, r2
 80002ee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d165      	bne.n	80003c4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43db      	mvns	r3, r3
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	4619      	mov	r1, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d003      	beq.n	8000336 <GPIO_Init+0x76>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d12e      	bne.n	8000394 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689a      	ldr	r2, [r3, #8]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	2103      	movs	r1, #3
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	4619      	mov	r1, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	b29b      	uxth	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	2301      	movs	r3, #1
 8000370:	408b      	lsls	r3, r1
 8000372:	43db      	mvns	r3, r3
 8000374:	401a      	ands	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	7992      	ldrb	r2, [r2, #6]
 8000382:	4611      	mov	r1, r2
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	b292      	uxth	r2, r2
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	b292      	uxth	r2, r2
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	b29b      	uxth	r3, r3
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	401a      	ands	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	79db      	ldrb	r3, [r3, #7]
 80003b4:	4619      	mov	r1, r3
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2b0f      	cmp	r3, #15
 80003ce:	d985      	bls.n	80002dc <GPIO_Init+0x1c>
    }
  }
}
 80003d0:	bf00      	nop
 80003d2:	371c      	adds	r7, #28
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003e8:	2300      	movs	r3, #0
 80003ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	691a      	ldr	r2, [r3, #16]
 80003f0:	887b      	ldrh	r3, [r7, #2]
 80003f2:	4013      	ands	r3, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003f8:	2301      	movs	r3, #1
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e001      	b.n	8000402 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000402:	7bfb      	ldrb	r3, [r7, #15]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	887b      	ldrh	r3, [r7, #2]
 8000422:	405a      	eors	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	615a      	str	r2, [r3, #20]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	807b      	strh	r3, [r7, #2]
 8000440:	4613      	mov	r3, r2
 8000442:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000448:	2300      	movs	r3, #0
 800044a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800044c:	787a      	ldrb	r2, [r7, #1]
 800044e:	887b      	ldrh	r3, [r7, #2]
 8000450:	f003 0307 	and.w	r3, r3, #7
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800045c:	887b      	ldrh	r3, [r7, #2]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b29b      	uxth	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3208      	adds	r2, #8
 8000468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046c:	887b      	ldrh	r3, [r7, #2]
 800046e:	f003 0307 	and.w	r3, r3, #7
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	210f      	movs	r1, #15
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	43db      	mvns	r3, r3
 800047c:	8879      	ldrh	r1, [r7, #2]
 800047e:	08c9      	lsrs	r1, r1, #3
 8000480:	b289      	uxth	r1, r1
 8000482:	4608      	mov	r0, r1
 8000484:	ea02 0103 	and.w	r1, r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f100 0208 	add.w	r2, r0, #8
 800048e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000492:	887b      	ldrh	r3, [r7, #2]
 8000494:	08db      	lsrs	r3, r3, #3
 8000496:	b29b      	uxth	r3, r3
 8000498:	461a      	mov	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3208      	adds	r2, #8
 800049e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004a8:	887b      	ldrh	r3, [r7, #2]
 80004aa:	08db      	lsrs	r3, r3, #3
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3208      	adds	r2, #8
 80004b4:	68b9      	ldr	r1, [r7, #8]
 80004b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <RCC_DeInit+0x60>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <RCC_DeInit+0x60>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <RCC_DeInit+0x60>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <RCC_DeInit+0x60>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <RCC_DeInit+0x60>)
 80004e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004ec:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <RCC_DeInit+0x60>)
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <RCC_DeInit+0x64>)
 80004f2:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <RCC_DeInit+0x60>)
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <RCC_DeInit+0x68>)
 80004f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <RCC_DeInit+0x60>)
 80004fe:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <RCC_DeInit+0x6c>)
 8000500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <RCC_DeInit+0x60>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <RCC_DeInit+0x60>)
 800050a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800050e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <RCC_DeInit+0x60>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <RCC_DeInit+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40023800 	.word	0x40023800
 800052c:	24003010 	.word	0x24003010
 8000530:	20003000 	.word	0x20003000
 8000534:	24003000 	.word	0x24003000

08000538 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000538:	b480      	push	{r7}
 800053a:	b08b      	sub	sp, #44	; 0x2c
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	2300      	movs	r3, #0
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
 800054c:	2302      	movs	r3, #2
 800054e:	61bb      	str	r3, [r7, #24]
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	2302      	movs	r3, #2
 8000556:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000558:	2302      	movs	r3, #2
 800055a:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800055c:	4b6f      	ldr	r3, [pc, #444]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	f003 030c 	and.w	r3, r3, #12
 8000564:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000566:	6a3b      	ldr	r3, [r7, #32]
 8000568:	2b0c      	cmp	r3, #12
 800056a:	f200 8091 	bhi.w	8000690 <RCC_GetClocksFreq+0x158>
 800056e:	a201      	add	r2, pc, #4	; (adr r2, 8000574 <RCC_GetClocksFreq+0x3c>)
 8000570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000574:	080005a9 	.word	0x080005a9
 8000578:	08000691 	.word	0x08000691
 800057c:	08000691 	.word	0x08000691
 8000580:	08000691 	.word	0x08000691
 8000584:	080005b1 	.word	0x080005b1
 8000588:	08000691 	.word	0x08000691
 800058c:	08000691 	.word	0x08000691
 8000590:	08000691 	.word	0x08000691
 8000594:	080005b9 	.word	0x080005b9
 8000598:	08000691 	.word	0x08000691
 800059c:	08000691 	.word	0x08000691
 80005a0:	08000691 	.word	0x08000691
 80005a4:	08000625 	.word	0x08000625
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a5d      	ldr	r2, [pc, #372]	; (8000720 <RCC_GetClocksFreq+0x1e8>)
 80005ac:	601a      	str	r2, [r3, #0]
    break;
 80005ae:	e073      	b.n	8000698 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a5c      	ldr	r2, [pc, #368]	; (8000724 <RCC_GetClocksFreq+0x1ec>)
 80005b4:	601a      	str	r2, [r3, #0]
    break;
 80005b6:	e06f      	b.n	8000698 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005b8:	4b58      	ldr	r3, [pc, #352]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	0d9b      	lsrs	r3, r3, #22
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005c4:	4b55      	ldr	r3, [pc, #340]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005cc:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00c      	beq.n	80005ee <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005d4:	4a53      	ldr	r2, [pc, #332]	; (8000724 <RCC_GetClocksFreq+0x1ec>)
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005dc:	4a4f      	ldr	r2, [pc, #316]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80005de:	6852      	ldr	r2, [r2, #4]
 80005e0:	0992      	lsrs	r2, r2, #6
 80005e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
 80005ec:	e00b      	b.n	8000606 <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005ee:	4a4c      	ldr	r2, [pc, #304]	; (8000720 <RCC_GetClocksFreq+0x1e8>)
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4a49      	ldr	r2, [pc, #292]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80005f8:	6852      	ldr	r2, [r2, #4]
 80005fa:	0992      	lsrs	r2, r2, #6
 80005fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000600:	fb02 f303 	mul.w	r3, r2, r3
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000606:	4b45      	ldr	r3, [pc, #276]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	0c1b      	lsrs	r3, r3, #16
 800060c:	f003 0303 	and.w	r3, r3, #3
 8000610:	3301      	adds	r3, #1
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	fbb2 f2f3 	udiv	r2, r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
    break;
 8000622:	e039      	b.n	8000698 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000624:	4b3d      	ldr	r3, [pc, #244]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	0d9b      	lsrs	r3, r3, #22
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000630:	4b3a      	ldr	r3, [pc, #232]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000638:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00c      	beq.n	800065a <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000640:	4a38      	ldr	r2, [pc, #224]	; (8000724 <RCC_GetClocksFreq+0x1ec>)
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	fbb2 f3f3 	udiv	r3, r2, r3
 8000648:	4a34      	ldr	r2, [pc, #208]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 800064a:	6852      	ldr	r2, [r2, #4]
 800064c:	0992      	lsrs	r2, r2, #6
 800064e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000652:	fb02 f303 	mul.w	r3, r2, r3
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
 8000658:	e00b      	b.n	8000672 <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <RCC_GetClocksFreq+0x1e8>)
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000662:	4a2e      	ldr	r2, [pc, #184]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 8000664:	6852      	ldr	r2, [r2, #4]
 8000666:	0992      	lsrs	r2, r2, #6
 8000668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	0f1b      	lsrs	r3, r3, #28
 8000678:	f003 0307 	and.w	r3, r3, #7
 800067c:	3301      	adds	r3, #1
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 8000682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	fbb2 f2f3 	udiv	r2, r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	601a      	str	r2, [r3, #0]
    break;
 800068e:	e003      	b.n	8000698 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a23      	ldr	r2, [pc, #140]	; (8000720 <RCC_GetClocksFreq+0x1e8>)
 8000694:	601a      	str	r2, [r3, #0]
    break;
 8000696:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006a0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80006a2:	6a3b      	ldr	r3, [r7, #32]
 80006a4:	091b      	lsrs	r3, r3, #4
 80006a6:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006a8:	4a1f      	ldr	r2, [pc, #124]	; (8000728 <RCC_GetClocksFreq+0x1f0>)
 80006aa:	6a3b      	ldr	r3, [r7, #32]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	40da      	lsrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80006c8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	0a9b      	lsrs	r3, r3, #10
 80006ce:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006d0:	4a15      	ldr	r2, [pc, #84]	; (8000728 <RCC_GetClocksFreq+0x1f0>)
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	40da      	lsrs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80006f0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	0b5b      	lsrs	r3, r3, #13
 80006f6:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <RCC_GetClocksFreq+0x1f0>)
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	4413      	add	r3, r2
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	40da      	lsrs	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
}
 8000710:	bf00      	nop
 8000712:	372c      	adds	r7, #44	; 0x2c
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40023800 	.word	0x40023800
 8000720:	00f42400 	.word	0x00f42400
 8000724:	007a1200 	.word	0x007a1200
 8000728:	20000000 	.word	0x20000000

0800072c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d006      	beq.n	800074c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000742:	4909      	ldr	r1, [pc, #36]	; (8000768 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4313      	orrs	r3, r2
 8000748:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800074a:	e006      	b.n	800075a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <RCC_AHB1PeriphClockCmd+0x3c>)
 800074e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	43db      	mvns	r3, r3
 8000754:	4904      	ldr	r1, [pc, #16]	; (8000768 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000756:	4013      	ands	r3, r2
 8000758:	630b      	str	r3, [r1, #48]	; 0x30
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d006      	beq.n	800078c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000782:	4909      	ldr	r1, [pc, #36]	; (80007a8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4313      	orrs	r3, r2
 8000788:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800078a:	e006      	b.n	800079a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <RCC_APB1PeriphClockCmd+0x3c>)
 800078e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	43db      	mvns	r3, r3
 8000794:	4904      	ldr	r1, [pc, #16]	; (80007a8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000796:	4013      	ands	r3, r2
 8000798:	640b      	str	r3, [r1, #64]	; 0x40
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	8a1b      	ldrh	r3, [r3, #16]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80007ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	88db      	ldrh	r3, [r3, #6]
 80007da:	461a      	mov	r2, r3
 80007dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007de:	4313      	orrs	r3, r2
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	899b      	ldrh	r3, [r3, #12]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80007f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80007f8:	f023 030c 	bic.w	r3, r3, #12
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	889a      	ldrh	r2, [r3, #4]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	891b      	ldrh	r3, [r3, #8]
 8000806:	4313      	orrs	r3, r2
 8000808:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800080e:	4313      	orrs	r3, r2
 8000810:	b29b      	uxth	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	4313      	orrs	r3, r2
 8000818:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	8a9b      	ldrh	r3, [r3, #20]
 8000826:	b29b      	uxth	r3, r3
 8000828:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000830:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	899b      	ldrh	r3, [r3, #12]
 8000836:	461a      	mov	r2, r3
 8000838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083a:	4313      	orrs	r3, r2
 800083c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000840:	b29a      	uxth	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fe74 	bl	8000538 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a30      	ldr	r2, [pc, #192]	; (8000914 <USART_Init+0x168>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d003      	beq.n	8000860 <USART_Init+0xb4>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <USART_Init+0x16c>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d102      	bne.n	8000866 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	623b      	str	r3, [r7, #32]
 8000864:	e001      	b.n	800086a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	899b      	ldrh	r3, [r3, #12]
 800086e:	b29b      	uxth	r3, r3
 8000870:	b21b      	sxth	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	da0c      	bge.n	8000890 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000876:	6a3a      	ldr	r2, [r7, #32]
 8000878:	4613      	mov	r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	4413      	add	r3, r2
 800087e:	009a      	lsls	r2, r3, #2
 8000880:	441a      	add	r2, r3
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	fbb2 f3f3 	udiv	r3, r2, r3
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	e00b      	b.n	80008a8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000890:	6a3a      	ldr	r2, [r7, #32]
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	009a      	lsls	r2, r3, #2
 800089a:	441a      	add	r2, r3
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <USART_Init+0x170>)
 80008ac:	fba2 2303 	umull	r2, r3, r2, r3
 80008b0:	095b      	lsrs	r3, r3, #5
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	091b      	lsrs	r3, r3, #4
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	fb02 f303 	mul.w	r3, r2, r3
 80008c0:	69fa      	ldr	r2, [r7, #28]
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	899b      	ldrh	r3, [r3, #12]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	da0c      	bge.n	80008ec <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	3332      	adds	r3, #50	; 0x32
 80008d8:	4a10      	ldr	r2, [pc, #64]	; (800091c <USART_Init+0x170>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	f003 0307 	and.w	r3, r3, #7
 80008e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e6:	4313      	orrs	r3, r2
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ea:	e00b      	b.n	8000904 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	011b      	lsls	r3, r3, #4
 80008f0:	3332      	adds	r3, #50	; 0x32
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <USART_Init+0x170>)
 80008f4:	fba2 2303 	umull	r2, r3, r2, r3
 80008f8:	095b      	lsrs	r3, r3, #5
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000900:	4313      	orrs	r3, r2
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000906:	b29a      	uxth	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	811a      	strh	r2, [r3, #8]
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40011000 	.word	0x40011000
 8000918:	40011400 	.word	0x40011400
 800091c:	51eb851f 	.word	0x51eb851f

08000920 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800092c:	78fb      	ldrb	r3, [r7, #3]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d008      	beq.n	8000944 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	899b      	ldrh	r3, [r3, #12]
 8000936:	b29b      	uxth	r3, r3
 8000938:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800093c:	b29a      	uxth	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000942:	e007      	b.n	8000954 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	899b      	ldrh	r3, [r3, #12]
 8000948:	b29b      	uxth	r3, r3
 800094a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800094e:	b29a      	uxth	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	819a      	strh	r2, [r3, #12]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000972:	b29a      	uxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	809a      	strh	r2, [r3, #4]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	b29a      	uxth	r2, r3
 800099a:	887b      	ldrh	r3, [r7, #2]
 800099c:	4013      	ands	r3, r2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80009a4:	2301      	movs	r3, #1
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e001      	b.n	80009ae <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f103 0208 	add.w	r2, r3, #8
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f103 0208 	add.w	r2, r3, #8
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f103 0208 	add.w	r2, r3, #8
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a16:	b480      	push	{r7}
 8000a18:	b085      	sub	sp, #20
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b085      	sub	sp, #20
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d103      	bne.n	8000a7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e00c      	b.n	8000a98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3308      	adds	r3, #8
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <vListInsert+0x2e>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d2f6      	bcs.n	8000a86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	601a      	str	r2, [r3, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	691b      	ldr	r3, [r3, #16]
 8000adc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	6892      	ldr	r2, [r2, #8]
 8000ae6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	6852      	ldr	r2, [r2, #4]
 8000af0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d103      	bne.n	8000b04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	; 0x30
 8000b28:	af04      	add	r7, sp, #16
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	4613      	mov	r3, r2
 8000b32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 f839 	bl	8001bb0 <pvPortMalloc>
 8000b3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00e      	beq.n	8000b64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000b46:	2058      	movs	r0, #88	; 0x58
 8000b48:	f001 f832 	bl	8001bb0 <pvPortMalloc>
 8000b4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	631a      	str	r2, [r3, #48]	; 0x30
 8000b5a:	e005      	b.n	8000b68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000b5c:	6978      	ldr	r0, [r7, #20]
 8000b5e:	f001 f8ef 	bl	8001d40 <vPortFree>
 8000b62:	e001      	b.n	8000b68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d013      	beq.n	8000b96 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000b6e:	88fa      	ldrh	r2, [r7, #6]
 8000b70:	2300      	movs	r3, #0
 8000b72:	9303      	str	r3, [sp, #12]
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	9302      	str	r3, [sp, #8]
 8000b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f000 f80e 	bl	8000ba6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000b8a:	69f8      	ldr	r0, [r7, #28]
 8000b8c:	f000 f89a 	bl	8000cc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	e002      	b.n	8000b9c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000b9c:	69bb      	ldr	r3, [r7, #24]
	}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b088      	sub	sp, #32
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	21a5      	movs	r1, #165	; 0xa5
 8000bc0:	f003 fa1c 	bl	8003ffc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	f023 0307 	bic.w	r3, r3, #7
 8000bdc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d009      	beq.n	8000bfc <prvInitialiseNewTask+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bec:	f383 8811 	msr	BASEPRI, r3
 8000bf0:	f3bf 8f6f 	isb	sy
 8000bf4:	f3bf 8f4f 	dsb	sy
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e7fe      	b.n	8000bfa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d01f      	beq.n	8000c42 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	e012      	b.n	8000c2e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	7819      	ldrb	r1, [r3, #0]
 8000c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	4413      	add	r3, r2
 8000c16:	3334      	adds	r3, #52	; 0x34
 8000c18:	460a      	mov	r2, r1
 8000c1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	4413      	add	r3, r2
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d006      	beq.n	8000c36 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	2b09      	cmp	r3, #9
 8000c32:	d9e9      	bls.n	8000c08 <prvInitialiseNewTask+0x62>
 8000c34:	e000      	b.n	8000c38 <prvInitialiseNewTask+0x92>
			{
				break;
 8000c36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000c40:	e003      	b.n	8000c4a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d901      	bls.n	8000c54 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000c50:	2304      	movs	r3, #4
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c5e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c62:	2200      	movs	r2, #0
 8000c64:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c68:	3304      	adds	r3, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fec6 	bl	80009fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c72:	3318      	adds	r3, #24
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fec1 	bl	80009fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c82:	f1c3 0205 	rsb	r2, r3, #5
 8000c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c92:	2200      	movs	r2, #0
 8000c94:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	68f9      	ldr	r1, [r7, #12]
 8000ca2:	69b8      	ldr	r0, [r7, #24]
 8000ca4:	f000 fd38 	bl	8001718 <pxPortInitialiseStack>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000cba:	bf00      	nop
 8000cbc:	3720      	adds	r7, #32
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000cc4:	b5b0      	push	{r4, r5, r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000ccc:	f000 fe4e 	bl	800196c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000cd0:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <prvAddNewTaskToReadyList+0xfc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a3a      	ldr	r2, [pc, #232]	; (8000dc0 <prvAddNewTaskToReadyList+0xfc>)
 8000cd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000cda:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <prvAddNewTaskToReadyList+0x100>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d109      	bne.n	8000cf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000ce2:	4a38      	ldr	r2, [pc, #224]	; (8000dc4 <prvAddNewTaskToReadyList+0x100>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <prvAddNewTaskToReadyList+0xfc>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d110      	bne.n	8000d12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000cf0:	f000 fad6 	bl	80012a0 <prvInitialiseTaskLists>
 8000cf4:	e00d      	b.n	8000d12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <prvAddNewTaskToReadyList+0x104>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d109      	bne.n	8000d12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <prvAddNewTaskToReadyList+0x100>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d802      	bhi.n	8000d12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000d0c:	4a2d      	ldr	r2, [pc, #180]	; (8000dc4 <prvAddNewTaskToReadyList+0x100>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000d12:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <prvAddNewTaskToReadyList+0x108>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a2c      	ldr	r2, [pc, #176]	; (8000dcc <prvAddNewTaskToReadyList+0x108>)
 8000d1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <prvAddNewTaskToReadyList+0x108>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d016      	beq.n	8000d58 <prvAddNewTaskToReadyList+0x94>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 fb7b 	bl	8003428 <SEGGER_SYSVIEW_OnTaskCreate>
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	461d      	mov	r5, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	461c      	mov	r4, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	1ae3      	subs	r3, r4, r3
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	462b      	mov	r3, r5
 8000d54:	f001 f9b8 	bl	80020c8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fbec 	bl	8003538 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d64:	2201      	movs	r2, #1
 8000d66:	409a      	lsls	r2, r3
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <prvAddNewTaskToReadyList+0x10c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <prvAddNewTaskToReadyList+0x10c>)
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4a15      	ldr	r2, [pc, #84]	; (8000dd4 <prvAddNewTaskToReadyList+0x110>)
 8000d80:	441a      	add	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3304      	adds	r3, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4610      	mov	r0, r2
 8000d8a:	f7ff fe44 	bl	8000a16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000d8e:	f000 fe1b 	bl	80019c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <prvAddNewTaskToReadyList+0x104>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00e      	beq.n	8000db8 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <prvAddNewTaskToReadyList+0x100>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <prvAddNewTaskToReadyList+0x114>)
 8000daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	f3bf 8f4f 	dsb	sy
 8000db4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc0:	20000184 	.word	0x20000184
 8000dc4:	200000ac 	.word	0x200000ac
 8000dc8:	20000190 	.word	0x20000190
 8000dcc:	200001a0 	.word	0x200001a0
 8000dd0:	2000018c 	.word	0x2000018c
 8000dd4:	200000b0 	.word	0x200000b0
 8000dd8:	e000ed04 	.word	0xe000ed04

08000ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <vTaskStartScheduler+0x90>)
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	2300      	movs	r3, #0
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2300      	movs	r3, #0
 8000dec:	2282      	movs	r2, #130	; 0x82
 8000dee:	4920      	ldr	r1, [pc, #128]	; (8000e70 <vTaskStartScheduler+0x94>)
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <vTaskStartScheduler+0x98>)
 8000df2:	f7ff fe97 	bl	8000b24 <xTaskCreate>
 8000df6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d123      	bne.n	8000e46 <vTaskStartScheduler+0x6a>
 8000dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e02:	f383 8811 	msr	BASEPRI, r3
 8000e06:	f3bf 8f6f 	isb	sy
 8000e0a:	f3bf 8f4f 	dsb	sy
 8000e0e:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <vTaskStartScheduler+0x9c>)
 8000e12:	f04f 32ff 	mov.w	r2, #4294967295
 8000e16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <vTaskStartScheduler+0xa0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <vTaskStartScheduler+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <vTaskStartScheduler+0xa8>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <vTaskStartScheduler+0x90>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d102      	bne.n	8000e36 <vTaskStartScheduler+0x5a>
 8000e30:	f002 fade 	bl	80033f0 <SEGGER_SYSVIEW_OnIdle>
 8000e34:	e004      	b.n	8000e40 <vTaskStartScheduler+0x64>
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <vTaskStartScheduler+0xa8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 fb38 	bl	80034b0 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000e40:	f000 fcf6 	bl	8001830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000e44:	e00d      	b.n	8000e62 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d109      	bne.n	8000e62 <vTaskStartScheduler+0x86>
 8000e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e52:	f383 8811 	msr	BASEPRI, r3
 8000e56:	f3bf 8f6f 	isb	sy
 8000e5a:	f3bf 8f4f 	dsb	sy
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	e7fe      	b.n	8000e60 <vTaskStartScheduler+0x84>
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001a8 	.word	0x200001a8
 8000e70:	08004870 	.word	0x08004870
 8000e74:	08001271 	.word	0x08001271
 8000e78:	200001a4 	.word	0x200001a4
 8000e7c:	20000190 	.word	0x20000190
 8000e80:	20000188 	.word	0x20000188
 8000e84:	200000ac 	.word	0x200000ac

08000e88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <vTaskSuspendAll+0x18>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <vTaskSuspendAll+0x18>)
 8000e94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	200001ac 	.word	0x200001ac

08000ea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000eb2:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <xTaskResumeAll+0x11c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d109      	bne.n	8000ece <xTaskResumeAll+0x2a>
 8000eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ebe:	f383 8811 	msr	BASEPRI, r3
 8000ec2:	f3bf 8f6f 	isb	sy
 8000ec6:	f3bf 8f4f 	dsb	sy
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	e7fe      	b.n	8000ecc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000ece:	f000 fd4d 	bl	800196c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <xTaskResumeAll+0x11c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	4a39      	ldr	r2, [pc, #228]	; (8000fc0 <xTaskResumeAll+0x11c>)
 8000eda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000edc:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <xTaskResumeAll+0x11c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d165      	bne.n	8000fb0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000ee4:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <xTaskResumeAll+0x120>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d061      	beq.n	8000fb0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000eec:	e032      	b.n	8000f54 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000eee:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <xTaskResumeAll+0x124>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3318      	adds	r3, #24
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fde8 	bl	8000ad0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3304      	adds	r3, #4
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fde3 	bl	8000ad0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fb13 	bl	8003538 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	2201      	movs	r2, #1
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <xTaskResumeAll+0x128>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <xTaskResumeAll+0x128>)
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <xTaskResumeAll+0x12c>)
 8000f32:	441a      	add	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3304      	adds	r3, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	f7ff fd6b 	bl	8000a16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <xTaskResumeAll+0x130>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d302      	bcc.n	8000f54 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <xTaskResumeAll+0x134>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <xTaskResumeAll+0x124>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1c8      	bne.n	8000eee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000f62:	f000 fa19 	bl	8001398 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <xTaskResumeAll+0x138>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d010      	beq.n	8000f94 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000f72:	f000 f859 	bl	8001028 <xTaskIncrementTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <xTaskResumeAll+0x134>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f1      	bne.n	8000f72 <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <xTaskResumeAll+0x138>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <xTaskResumeAll+0x134>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d009      	beq.n	8000fb0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <xTaskResumeAll+0x13c>)
 8000fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	f3bf 8f4f 	dsb	sy
 8000fac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000fb0:	f000 fd0a 	bl	80019c8 <vPortExitCritical>

	return xAlreadyYielded;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200001ac 	.word	0x200001ac
 8000fc4:	20000184 	.word	0x20000184
 8000fc8:	20000144 	.word	0x20000144
 8000fcc:	2000018c 	.word	0x2000018c
 8000fd0:	200000b0 	.word	0x200000b0
 8000fd4:	200000ac 	.word	0x200000ac
 8000fd8:	20000198 	.word	0x20000198
 8000fdc:	20000194 	.word	0x20000194
 8000fe0:	e000ed04 	.word	0xe000ed04

08000fe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <xTaskGetTickCount+0x1c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000188 	.word	0x20000188

08001004 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800100a:	f000 fd93 	bl	8001b34 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <xTaskGetTickCountFromISR+0x20>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001018:	683b      	ldr	r3, [r7, #0]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000188 	.word	0x20000188

08001028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001032:	4b50      	ldr	r3, [pc, #320]	; (8001174 <xTaskIncrementTick+0x14c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f040 8091 	bne.w	800115e <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800103c:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <xTaskIncrementTick+0x150>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001044:	4a4c      	ldr	r2, [pc, #304]	; (8001178 <xTaskIncrementTick+0x150>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d11f      	bne.n	8001090 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001050:	4b4a      	ldr	r3, [pc, #296]	; (800117c <xTaskIncrementTick+0x154>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d009      	beq.n	800106e <xTaskIncrementTick+0x46>
 800105a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105e:	f383 8811 	msr	BASEPRI, r3
 8001062:	f3bf 8f6f 	isb	sy
 8001066:	f3bf 8f4f 	dsb	sy
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	e7fe      	b.n	800106c <xTaskIncrementTick+0x44>
 800106e:	4b43      	ldr	r3, [pc, #268]	; (800117c <xTaskIncrementTick+0x154>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	4b42      	ldr	r3, [pc, #264]	; (8001180 <xTaskIncrementTick+0x158>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a40      	ldr	r2, [pc, #256]	; (800117c <xTaskIncrementTick+0x154>)
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4a40      	ldr	r2, [pc, #256]	; (8001180 <xTaskIncrementTick+0x158>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b40      	ldr	r3, [pc, #256]	; (8001184 <xTaskIncrementTick+0x15c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	4a3e      	ldr	r2, [pc, #248]	; (8001184 <xTaskIncrementTick+0x15c>)
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	f000 f984 	bl	8001398 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001090:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <xTaskIncrementTick+0x160>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	429a      	cmp	r2, r3
 8001098:	d34c      	bcc.n	8001134 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <xTaskIncrementTick+0x154>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d104      	bne.n	80010ae <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010a4:	4b38      	ldr	r3, [pc, #224]	; (8001188 <xTaskIncrementTick+0x160>)
 80010a6:	f04f 32ff 	mov.w	r2, #4294967295
 80010aa:	601a      	str	r2, [r3, #0]
					break;
 80010ac:	e042      	b.n	8001134 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010ae:	4b33      	ldr	r3, [pc, #204]	; (800117c <xTaskIncrementTick+0x154>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d203      	bcs.n	80010ce <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80010c6:	4a30      	ldr	r2, [pc, #192]	; (8001188 <xTaskIncrementTick+0x160>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80010cc:	e032      	b.n	8001134 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3304      	adds	r3, #4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fcfc 	bl	8000ad0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	3318      	adds	r3, #24
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fcf3 	bl	8000ad0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fa23 	bl	8003538 <SEGGER_SYSVIEW_OnTaskStartReady>
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	2201      	movs	r2, #1
 80010f8:	409a      	lsls	r2, r3
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <xTaskIncrementTick+0x164>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4313      	orrs	r3, r2
 8001100:	4a22      	ldr	r2, [pc, #136]	; (800118c <xTaskIncrementTick+0x164>)
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <xTaskIncrementTick+0x168>)
 8001112:	441a      	add	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	3304      	adds	r3, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4610      	mov	r0, r2
 800111c:	f7ff fc7b 	bl	8000a16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <xTaskIncrementTick+0x16c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	429a      	cmp	r2, r3
 800112c:	d3b5      	bcc.n	800109a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800112e:	2301      	movs	r3, #1
 8001130:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001132:	e7b2      	b.n	800109a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <xTaskIncrementTick+0x16c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800113a:	4915      	ldr	r1, [pc, #84]	; (8001190 <xTaskIncrementTick+0x168>)
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d901      	bls.n	8001150 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <xTaskIncrementTick+0x170>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d007      	beq.n	8001168 <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 8001158:	2301      	movs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e004      	b.n	8001168 <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <xTaskIncrementTick+0x174>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <xTaskIncrementTick+0x174>)
 8001166:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001168:	697b      	ldr	r3, [r7, #20]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001ac 	.word	0x200001ac
 8001178:	20000188 	.word	0x20000188
 800117c:	2000013c 	.word	0x2000013c
 8001180:	20000140 	.word	0x20000140
 8001184:	2000019c 	.word	0x2000019c
 8001188:	200001a4 	.word	0x200001a4
 800118c:	2000018c 	.word	0x2000018c
 8001190:	200000b0 	.word	0x200000b0
 8001194:	200000ac 	.word	0x200000ac
 8001198:	20000198 	.word	0x20000198
 800119c:	20000194 	.word	0x20000194

080011a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <vTaskSwitchContext+0xb8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <vTaskSwitchContext+0xbc>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80011b4:	e04c      	b.n	8001250 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <vTaskSwitchContext+0xbc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <vTaskSwitchContext+0xc0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	fab3 f383 	clz	r3, r3
 80011c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	f1c3 031f 	rsb	r3, r3, #31
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	4924      	ldr	r1, [pc, #144]	; (8001264 <vTaskSwitchContext+0xc4>)
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d109      	bne.n	80011fa <vTaskSwitchContext+0x5a>
	__asm volatile
 80011e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ea:	f383 8811 	msr	BASEPRI, r3
 80011ee:	f3bf 8f6f 	isb	sy
 80011f2:	f3bf 8f4f 	dsb	sy
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	e7fe      	b.n	80011f8 <vTaskSwitchContext+0x58>
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <vTaskSwitchContext+0xc4>)
 8001206:	4413      	add	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	3308      	adds	r3, #8
 800121c:	429a      	cmp	r2, r3
 800121e:	d104      	bne.n	800122a <vTaskSwitchContext+0x8a>
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <vTaskSwitchContext+0xc8>)
 8001232:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <vTaskSwitchContext+0xc8>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <vTaskSwitchContext+0xcc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d102      	bne.n	8001246 <vTaskSwitchContext+0xa6>
 8001240:	f002 f8d6 	bl	80033f0 <SEGGER_SYSVIEW_OnIdle>
}
 8001244:	e004      	b.n	8001250 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <vTaskSwitchContext+0xc8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f002 f930 	bl	80034b0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200001ac 	.word	0x200001ac
 800125c:	20000198 	.word	0x20000198
 8001260:	2000018c 	.word	0x2000018c
 8001264:	200000b0 	.word	0x200000b0
 8001268:	200000ac 	.word	0x200000ac
 800126c:	200001a8 	.word	0x200001a8

08001270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001278:	f000 f852 	bl	8001320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <prvIdleTask+0x28>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d9f9      	bls.n	8001278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <prvIdleTask+0x2c>)
 8001286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	f3bf 8f4f 	dsb	sy
 8001290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001294:	e7f0      	b.n	8001278 <prvIdleTask+0x8>
 8001296:	bf00      	nop
 8001298:	200000b0 	.word	0x200000b0
 800129c:	e000ed04 	.word	0xe000ed04

080012a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	e00c      	b.n	80012c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <prvInitialiseTaskLists+0x60>)
 80012b8:	4413      	add	r3, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fb7e 	bl	80009bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d9ef      	bls.n	80012ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <prvInitialiseTaskLists+0x64>)
 80012ce:	f7ff fb75 	bl	80009bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <prvInitialiseTaskLists+0x68>)
 80012d4:	f7ff fb72 	bl	80009bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <prvInitialiseTaskLists+0x6c>)
 80012da:	f7ff fb6f 	bl	80009bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <prvInitialiseTaskLists+0x70>)
 80012e0:	f7ff fb6c 	bl	80009bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80012e4:	480b      	ldr	r0, [pc, #44]	; (8001314 <prvInitialiseTaskLists+0x74>)
 80012e6:	f7ff fb69 	bl	80009bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <prvInitialiseTaskLists+0x78>)
 80012ec:	4a05      	ldr	r2, [pc, #20]	; (8001304 <prvInitialiseTaskLists+0x64>)
 80012ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <prvInitialiseTaskLists+0x7c>)
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <prvInitialiseTaskLists+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200000b0 	.word	0x200000b0
 8001304:	20000114 	.word	0x20000114
 8001308:	20000128 	.word	0x20000128
 800130c:	20000144 	.word	0x20000144
 8001310:	20000158 	.word	0x20000158
 8001314:	20000170 	.word	0x20000170
 8001318:	2000013c 	.word	0x2000013c
 800131c:	20000140 	.word	0x20000140

08001320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001326:	e019      	b.n	800135c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001328:	f000 fb20 	bl	800196c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <prvCheckTasksWaitingTermination+0x4c>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3304      	adds	r3, #4
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fbc9 	bl	8000ad0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <prvCheckTasksWaitingTermination+0x50>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <prvCheckTasksWaitingTermination+0x50>)
 8001346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <prvCheckTasksWaitingTermination+0x54>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <prvCheckTasksWaitingTermination+0x54>)
 8001350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001352:	f000 fb39 	bl	80019c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f80e 	bl	8001378 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <prvCheckTasksWaitingTermination+0x54>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1e1      	bne.n	8001328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000158 	.word	0x20000158
 8001370:	20000184 	.word	0x20000184
 8001374:	2000016c 	.word	0x2000016c

08001378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fcdb 	bl	8001d40 <vPortFree>
			vPortFree( pxTCB );
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fcd8 	bl	8001d40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <prvResetNextTaskUnblockTime+0x38>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d104      	bne.n	80013b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <prvResetNextTaskUnblockTime+0x3c>)
 80013aa:	f04f 32ff 	mov.w	r2, #4294967295
 80013ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80013b0:	e008      	b.n	80013c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <prvResetNextTaskUnblockTime+0x38>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <prvResetNextTaskUnblockTime+0x3c>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	2000013c 	.word	0x2000013c
 80013d4:	200001a4 	.word	0x200001a4

080013d8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af02      	add	r7, sp, #8
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80013e6:	f000 fac1 	bl	800196c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <xTaskNotifyWait+0xc0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d01a      	beq.n	800142e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <xTaskNotifyWait+0xc0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	43d2      	mvns	r2, r2
 8001402:	400a      	ands	r2, r1
 8001404:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <xTaskNotifyWait+0xc0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001416:	2101      	movs	r1, #1
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f000 f905 	bl	8001628 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800141e:	4b1f      	ldr	r3, [pc, #124]	; (800149c <xTaskNotifyWait+0xc4>)
 8001420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f3bf 8f4f 	dsb	sy
 800142a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800142e:	f000 facb 	bl	80019c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8001432:	f000 fa9b 	bl	800196c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	4613      	mov	r3, r2
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	68f9      	ldr	r1, [r7, #12]
 8001442:	2040      	movs	r0, #64	; 0x40
 8001444:	f001 fbfe 	bl	8002c44 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <xTaskNotifyWait+0xc0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <xTaskNotifyWait+0xc0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d002      	beq.n	800146c <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	e008      	b.n	800147e <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <xTaskNotifyWait+0xc0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	43d2      	mvns	r2, r2
 8001476:	400a      	ands	r2, r1
 8001478:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 800147a:	2301      	movs	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <xTaskNotifyWait+0xc0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8001488:	f000 fa9e 	bl	80019c8 <vPortExitCritical>

		return xReturn;
 800148c:	697b      	ldr	r3, [r7, #20]
	}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000ac 	.word	0x200000ac
 800149c:	e000ed04 	.word	0xe000ed04

080014a0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80014b0:	2301      	movs	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <xTaskGenericNotify+0x2e>
 80014ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014be:	f383 8811 	msr	BASEPRI, r3
 80014c2:	f3bf 8f6f 	isb	sy
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	e7fe      	b.n	80014cc <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80014d2:	f000 fa4b 	bl	800196c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014ea:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	2202      	movs	r2, #2
 80014f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d827      	bhi.n	800154a <xTaskGenericNotify+0xaa>
 80014fa:	a201      	add	r2, pc, #4	; (adr r2, 8001500 <xTaskGenericNotify+0x60>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	08001569 	.word	0x08001569
 8001504:	08001515 	.word	0x08001515
 8001508:	08001523 	.word	0x08001523
 800150c:	0800152f 	.word	0x0800152f
 8001510:	08001537 	.word	0x08001537
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	431a      	orrs	r2, r3
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8001520:	e025      	b.n	800156e <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800152c:	e01f      	b.n	800156e <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8001534:	e01b      	b.n	800156e <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001536:	7ffb      	ldrb	r3, [r7, #31]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d003      	beq.n	8001544 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8001542:	e014      	b.n	800156e <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001548:	e011      	b.n	800156e <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800154e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001552:	d00b      	beq.n	800156c <xTaskGenericNotify+0xcc>
 8001554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001558:	f383 8811 	msr	BASEPRI, r3
 800155c:	f3bf 8f6f 	isb	sy
 8001560:	f3bf 8f4f 	dsb	sy
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e7fe      	b.n	8001566 <xTaskGenericNotify+0xc6>
					break;
 8001568:	bf00      	nop
 800156a:	e000      	b.n	800156e <xTaskGenericNotify+0xce>

					break;
 800156c:	bf00      	nop
			}

			traceTASK_NOTIFY();
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	4618      	mov	r0, r3
 8001572:	f002 f885 	bl	8003680 <SEGGER_SYSVIEW_ShrinkId>
 8001576:	4601      	mov	r1, r0
 8001578:	79fa      	ldrb	r2, [r7, #7]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4613      	mov	r3, r2
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	203e      	movs	r0, #62	; 0x3e
 8001584:	f001 fb5e 	bl	8002c44 <SEGGER_SYSVIEW_RecordU32x4>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001588:	7ffb      	ldrb	r3, [r7, #31]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d13c      	bne.n	8001608 <xTaskGenericNotify+0x168>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	3304      	adds	r3, #4
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fa9c 	bl	8000ad0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	4618      	mov	r0, r3
 800159c:	f001 ffcc 	bl	8003538 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	2201      	movs	r2, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <xTaskGenericNotify+0x178>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <xTaskGenericNotify+0x178>)
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <xTaskGenericNotify+0x17c>)
 80015c0:	441a      	add	r2, r3
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	3304      	adds	r3, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4610      	mov	r0, r2
 80015ca:	f7ff fa24 	bl	8000a16 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <xTaskGenericNotify+0x14a>
 80015d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015da:	f383 8811 	msr	BASEPRI, r3
 80015de:	f3bf 8f6f 	isb	sy
 80015e2:	f3bf 8f4f 	dsb	sy
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	e7fe      	b.n	80015e8 <xTaskGenericNotify+0x148>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <xTaskGenericNotify+0x180>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d907      	bls.n	8001608 <xTaskGenericNotify+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <xTaskGenericNotify+0x184>)
 80015fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	f3bf 8f4f 	dsb	sy
 8001604:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8001608:	f000 f9de 	bl	80019c8 <vPortExitCritical>

		return xReturn;
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800160e:	4618      	mov	r0, r3
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000018c 	.word	0x2000018c
 800161c:	200000b0 	.word	0x200000b0
 8001620:	200000ac 	.word	0x200000ac
 8001624:	e000ed04 	.word	0xe000ed04

08001628 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001632:	4b32      	ldr	r3, [pc, #200]	; (80016fc <prvAddCurrentTaskToDelayedList+0xd4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <prvAddCurrentTaskToDelayedList+0xd8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3304      	adds	r3, #4
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fa46 	bl	8000ad0 <uxListRemove>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10b      	bne.n	8001662 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800164a:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <prvAddCurrentTaskToDelayedList+0xd8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	2201      	movs	r2, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <prvAddCurrentTaskToDelayedList+0xdc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4013      	ands	r3, r2
 800165e:	4a29      	ldr	r2, [pc, #164]	; (8001704 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001660:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d110      	bne.n	800168c <prvAddCurrentTaskToDelayedList+0x64>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00d      	beq.n	800168c <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	211b      	movs	r1, #27
 8001676:	4618      	mov	r0, r3
 8001678:	f001 ffa2 	bl	80035c0 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800167c:	4b20      	ldr	r3, [pc, #128]	; (8001700 <prvAddCurrentTaskToDelayedList+0xd8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3304      	adds	r3, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4820      	ldr	r0, [pc, #128]	; (8001708 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001686:	f7ff f9c6 	bl	8000a16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800168a:	e032      	b.n	80016f2 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d20f      	bcs.n	80016c4 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <prvAddCurrentTaskToDelayedList+0xd8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2104      	movs	r1, #4
 80016aa:	4618      	mov	r0, r3
 80016ac:	f001 ff88 	bl	80035c0 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <prvAddCurrentTaskToDelayedList+0xe4>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <prvAddCurrentTaskToDelayedList+0xd8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3304      	adds	r3, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	4610      	mov	r0, r2
 80016be:	f7ff f9ce 	bl	8000a5e <vListInsert>
}
 80016c2:	e016      	b.n	80016f2 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <prvAddCurrentTaskToDelayedList+0xd8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2104      	movs	r1, #4
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 ff78 	bl	80035c0 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <prvAddCurrentTaskToDelayedList+0xd8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3304      	adds	r3, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f7ff f9be 	bl	8000a5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <prvAddCurrentTaskToDelayedList+0xec>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d202      	bcs.n	80016f2 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80016ec:	4a09      	ldr	r2, [pc, #36]	; (8001714 <prvAddCurrentTaskToDelayedList+0xec>)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	6013      	str	r3, [r2, #0]
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000188 	.word	0x20000188
 8001700:	200000ac 	.word	0x200000ac
 8001704:	2000018c 	.word	0x2000018c
 8001708:	20000170 	.word	0x20000170
 800170c:	20000140 	.word	0x20000140
 8001710:	2000013c 	.word	0x2000013c
 8001714:	200001a4 	.word	0x200001a4

08001718 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3b04      	subs	r3, #4
 8001728:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3b04      	subs	r3, #4
 8001736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f023 0201 	bic.w	r2, r3, #1
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3b04      	subs	r3, #4
 8001746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <pxPortInitialiseStack+0x64>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3b14      	subs	r3, #20
 8001752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3b04      	subs	r3, #4
 800175e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f06f 0202 	mvn.w	r2, #2
 8001766:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3b20      	subs	r3, #32
 800176c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	08001781 	.word	0x08001781

08001780 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <prvTaskExitError+0x50>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001792:	d009      	beq.n	80017a8 <prvTaskExitError+0x28>
 8001794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001798:	f383 8811 	msr	BASEPRI, r3
 800179c:	f3bf 8f6f 	isb	sy
 80017a0:	f3bf 8f4f 	dsb	sy
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	e7fe      	b.n	80017a6 <prvTaskExitError+0x26>
 80017a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ac:	f383 8811 	msr	BASEPRI, r3
 80017b0:	f3bf 8f6f 	isb	sy
 80017b4:	f3bf 8f4f 	dsb	sy
 80017b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80017ba:	bf00      	nop
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0fc      	beq.n	80017bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000010 	.word	0x20000010
	...

080017e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <pxCurrentTCBConst2>)
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	6808      	ldr	r0, [r1, #0]
 80017e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ea:	f380 8809 	msr	PSP, r0
 80017ee:	f3bf 8f6f 	isb	sy
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	f380 8811 	msr	BASEPRI, r0
 80017fa:	4770      	bx	lr
 80017fc:	f3af 8000 	nop.w

08001800 <pxCurrentTCBConst2>:
 8001800:	200000ac 	.word	0x200000ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop

08001808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001808:	4808      	ldr	r0, [pc, #32]	; (800182c <prvPortStartFirstTask+0x24>)
 800180a:	6800      	ldr	r0, [r0, #0]
 800180c:	6800      	ldr	r0, [r0, #0]
 800180e:	f380 8808 	msr	MSP, r0
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f380 8814 	msr	CONTROL, r0
 800181a:	b662      	cpsie	i
 800181c:	b661      	cpsie	f
 800181e:	f3bf 8f4f 	dsb	sy
 8001822:	f3bf 8f6f 	isb	sy
 8001826:	df00      	svc	0
 8001828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800182a:	bf00      	nop
 800182c:	e000ed08 	.word	0xe000ed08

08001830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001836:	4b44      	ldr	r3, [pc, #272]	; (8001948 <xPortStartScheduler+0x118>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a44      	ldr	r2, [pc, #272]	; (800194c <xPortStartScheduler+0x11c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d109      	bne.n	8001854 <xPortStartScheduler+0x24>
 8001840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001844:	f383 8811 	msr	BASEPRI, r3
 8001848:	f3bf 8f6f 	isb	sy
 800184c:	f3bf 8f4f 	dsb	sy
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	e7fe      	b.n	8001852 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001854:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <xPortStartScheduler+0x118>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a3d      	ldr	r2, [pc, #244]	; (8001950 <xPortStartScheduler+0x120>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d109      	bne.n	8001872 <xPortStartScheduler+0x42>
 800185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001862:	f383 8811 	msr	BASEPRI, r3
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	f3bf 8f4f 	dsb	sy
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e7fe      	b.n	8001870 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001872:	4b38      	ldr	r3, [pc, #224]	; (8001954 <xPortStartScheduler+0x124>)
 8001874:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	22ff      	movs	r2, #255	; 0xff
 8001882:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <xPortStartScheduler+0x128>)
 8001898:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <xPortStartScheduler+0x12c>)
 800189c:	2207      	movs	r2, #7
 800189e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018a0:	e009      	b.n	80018b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <xPortStartScheduler+0x12c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	4a2c      	ldr	r2, [pc, #176]	; (800195c <xPortStartScheduler+0x12c>)
 80018aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018be:	2b80      	cmp	r3, #128	; 0x80
 80018c0:	d0ef      	beq.n	80018a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <xPortStartScheduler+0x12c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d009      	beq.n	80018e2 <xPortStartScheduler+0xb2>
 80018ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d2:	f383 8811 	msr	BASEPRI, r3
 80018d6:	f3bf 8f6f 	isb	sy
 80018da:	f3bf 8f4f 	dsb	sy
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	e7fe      	b.n	80018e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <xPortStartScheduler+0x12c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	4a1c      	ldr	r2, [pc, #112]	; (800195c <xPortStartScheduler+0x12c>)
 80018ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <xPortStartScheduler+0x12c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018f4:	4a19      	ldr	r2, [pc, #100]	; (800195c <xPortStartScheduler+0x12c>)
 80018f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <xPortStartScheduler+0x130>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a16      	ldr	r2, [pc, #88]	; (8001960 <xPortStartScheduler+0x130>)
 8001906:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800190a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <xPortStartScheduler+0x130>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a13      	ldr	r2, [pc, #76]	; (8001960 <xPortStartScheduler+0x130>)
 8001912:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001916:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001918:	f000 f8de 	bl	8001ad8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <xPortStartScheduler+0x134>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001922:	f000 f8fd 	bl	8001b20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <xPortStartScheduler+0x138>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <xPortStartScheduler+0x138>)
 800192c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001930:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001932:	f7ff ff69 	bl	8001808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001936:	f7ff fc33 	bl	80011a0 <vTaskSwitchContext>
	prvTaskExitError();
 800193a:	f7ff ff21 	bl	8001780 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	e000ed00 	.word	0xe000ed00
 800194c:	410fc271 	.word	0x410fc271
 8001950:	410fc270 	.word	0x410fc270
 8001954:	e000e400 	.word	0xe000e400
 8001958:	200001b0 	.word	0x200001b0
 800195c:	200001b4 	.word	0x200001b4
 8001960:	e000ed20 	.word	0xe000ed20
 8001964:	20000010 	.word	0x20000010
 8001968:	e000ef34 	.word	0xe000ef34

0800196c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001976:	f383 8811 	msr	BASEPRI, r3
 800197a:	f3bf 8f6f 	isb	sy
 800197e:	f3bf 8f4f 	dsb	sy
 8001982:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <vPortEnterCritical+0x54>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <vPortEnterCritical+0x54>)
 800198c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <vPortEnterCritical+0x54>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10e      	bne.n	80019b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <vPortEnterCritical+0x58>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <vPortEnterCritical+0x48>
 80019a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a4:	f383 8811 	msr	BASEPRI, r3
 80019a8:	f3bf 8f6f 	isb	sy
 80019ac:	f3bf 8f4f 	dsb	sy
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	e7fe      	b.n	80019b2 <vPortEnterCritical+0x46>
	}
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	20000010 	.word	0x20000010
 80019c4:	e000ed04 	.word	0xe000ed04

080019c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <vPortExitCritical+0x4c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <vPortExitCritical+0x22>
 80019d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019da:	f383 8811 	msr	BASEPRI, r3
 80019de:	f3bf 8f6f 	isb	sy
 80019e2:	f3bf 8f4f 	dsb	sy
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	e7fe      	b.n	80019e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <vPortExitCritical+0x4c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <vPortExitCritical+0x4c>)
 80019f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <vPortExitCritical+0x4c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d104      	bne.n	8001a06 <vPortExitCritical+0x3e>
 80019fc:	2300      	movs	r3, #0
 80019fe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000010 	.word	0x20000010
	...

08001a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001a20:	f3ef 8009 	mrs	r0, PSP
 8001a24:	f3bf 8f6f 	isb	sy
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <pxCurrentTCBConst>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	f01e 0f10 	tst.w	lr, #16
 8001a30:	bf08      	it	eq
 8001a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a3a:	6010      	str	r0, [r2, #0]
 8001a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a44:	f380 8811 	msr	BASEPRI, r0
 8001a48:	f3bf 8f4f 	dsb	sy
 8001a4c:	f3bf 8f6f 	isb	sy
 8001a50:	f7ff fba6 	bl	80011a0 <vTaskSwitchContext>
 8001a54:	f04f 0000 	mov.w	r0, #0
 8001a58:	f380 8811 	msr	BASEPRI, r0
 8001a5c:	bc09      	pop	{r0, r3}
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	6808      	ldr	r0, [r1, #0]
 8001a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a66:	f01e 0f10 	tst.w	lr, #16
 8001a6a:	bf08      	it	eq
 8001a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a70:	f380 8809 	msr	PSP, r0
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	f3af 8000 	nop.w

08001a80 <pxCurrentTCBConst>:
 8001a80:	200000ac 	.word	0x200000ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop

08001a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8001a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a92:	f383 8811 	msr	BASEPRI, r3
 8001a96:	f3bf 8f6f 	isb	sy
 8001a9a:	f3bf 8f4f 	dsb	sy
 8001a9e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8001aa0:	f001 fc2c 	bl	80032fc <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001aa4:	f7ff fac0 	bl	8001028 <xTaskIncrementTick>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8001aae:	f001 fc83 	bl	80033b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <SysTick_Handler+0x4c>)
 8001ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e001      	b.n	8001ac0 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 8001abc:	f001 fc60 	bl	8003380 <SEGGER_SYSVIEW_RecordExitISR>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000ed04 	.word	0xe000ed04

08001ad8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <vPortSetupTimerInterrupt+0x34>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <vPortSetupTimerInterrupt+0x38>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <vPortSetupTimerInterrupt+0x3c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <vPortSetupTimerInterrupt+0x40>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <vPortSetupTimerInterrupt+0x44>)
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <vPortSetupTimerInterrupt+0x34>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010
 8001b10:	e000e018 	.word	0xe000e018
 8001b14:	20000014 	.word	0x20000014
 8001b18:	10624dd3 	.word	0x10624dd3
 8001b1c:	e000e014 	.word	0xe000e014

08001b20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001b20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001b30 <vPortEnableVFP+0x10>
 8001b24:	6801      	ldr	r1, [r0, #0]
 8001b26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001b2a:	6001      	str	r1, [r0, #0]
 8001b2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001b2e:	bf00      	nop
 8001b30:	e000ed88 	.word	0xe000ed88

08001b34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001b3a:	f3ef 8305 	mrs	r3, IPSR
 8001b3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b0f      	cmp	r3, #15
 8001b44:	d913      	bls.n	8001b6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001b46:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <vPortValidateInterruptPriority+0x6c>)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <vPortValidateInterruptPriority+0x70>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	7afa      	ldrb	r2, [r7, #11]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d209      	bcs.n	8001b6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5e:	f383 8811 	msr	BASEPRI, r3
 8001b62:	f3bf 8f6f 	isb	sy
 8001b66:	f3bf 8f4f 	dsb	sy
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	e7fe      	b.n	8001b6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <vPortValidateInterruptPriority+0x74>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <vPortValidateInterruptPriority+0x78>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d909      	bls.n	8001b92 <vPortValidateInterruptPriority+0x5e>
 8001b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b82:	f383 8811 	msr	BASEPRI, r3
 8001b86:	f3bf 8f6f 	isb	sy
 8001b8a:	f3bf 8f4f 	dsb	sy
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	e7fe      	b.n	8001b90 <vPortValidateInterruptPriority+0x5c>
	}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e3f0 	.word	0xe000e3f0
 8001ba4:	200001b0 	.word	0x200001b0
 8001ba8:	e000ed0c 	.word	0xe000ed0c
 8001bac:	200001b4 	.word	0x200001b4

08001bb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001bbc:	f7ff f964 	bl	8000e88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001bc0:	4b59      	ldr	r3, [pc, #356]	; (8001d28 <pvPortMalloc+0x178>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001bc8:	f000 f91a 	bl	8001e00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001bcc:	4b57      	ldr	r3, [pc, #348]	; (8001d2c <pvPortMalloc+0x17c>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f040 8091 	bne.w	8001cfc <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01c      	beq.n	8001c1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001be0:	2208      	movs	r2, #8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d013      	beq.n	8001c1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f023 0307 	bic.w	r3, r3, #7
 8001bf8:	3308      	adds	r3, #8
 8001bfa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <pvPortMalloc+0x6a>
 8001c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c0a:	f383 8811 	msr	BASEPRI, r3
 8001c0e:	f3bf 8f6f 	isb	sy
 8001c12:	f3bf 8f4f 	dsb	sy
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e7fe      	b.n	8001c18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d06d      	beq.n	8001cfc <pvPortMalloc+0x14c>
 8001c20:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <pvPortMalloc+0x180>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d868      	bhi.n	8001cfc <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001c2a:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <pvPortMalloc+0x184>)
 8001c2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001c2e:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <pvPortMalloc+0x184>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c34:	e004      	b.n	8001c40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d903      	bls.n	8001c52 <pvPortMalloc+0xa2>
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f1      	bne.n	8001c36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001c52:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <pvPortMalloc+0x178>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d04f      	beq.n	8001cfc <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2208      	movs	r2, #8
 8001c62:	4413      	add	r3, r2
 8001c64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	1ad2      	subs	r2, r2, r3
 8001c76:	2308      	movs	r3, #8
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d91e      	bls.n	8001cbc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <pvPortMalloc+0xf4>
 8001c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c94:	f383 8811 	msr	BASEPRI, r3
 8001c98:	f3bf 8f6f 	isb	sy
 8001c9c:	f3bf 8f4f 	dsb	sy
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	e7fe      	b.n	8001ca2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	1ad2      	subs	r2, r2, r3
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001cb6:	69b8      	ldr	r0, [r7, #24]
 8001cb8:	f000 f904 	bl	8001ec4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <pvPortMalloc+0x180>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <pvPortMalloc+0x180>)
 8001cc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <pvPortMalloc+0x180>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <pvPortMalloc+0x188>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d203      	bcs.n	8001cde <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <pvPortMalloc+0x180>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <pvPortMalloc+0x188>)
 8001cdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <pvPortMalloc+0x17c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <pvPortMalloc+0x18c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <pvPortMalloc+0x18c>)
 8001cfa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001cfc:	f7ff f8d2 	bl	8000ea4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <pvPortMalloc+0x16e>
 8001d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0e:	f383 8811 	msr	BASEPRI, r3
 8001d12:	f3bf 8f6f 	isb	sy
 8001d16:	f3bf 8f4f 	dsb	sy
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e7fe      	b.n	8001d1c <pvPortMalloc+0x16c>
	return pvReturn;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20012dc0 	.word	0x20012dc0
 8001d2c:	20012dd4 	.word	0x20012dd4
 8001d30:	20012dc4 	.word	0x20012dc4
 8001d34:	20012db8 	.word	0x20012db8
 8001d38:	20012dc8 	.word	0x20012dc8
 8001d3c:	20012dcc 	.word	0x20012dcc

08001d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d04b      	beq.n	8001dea <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001d52:	2308      	movs	r3, #8
 8001d54:	425b      	negs	r3, r3
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4413      	add	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <vPortFree+0xb4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <vPortFree+0x42>
 8001d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d72:	f383 8811 	msr	BASEPRI, r3
 8001d76:	f3bf 8f6f 	isb	sy
 8001d7a:	f3bf 8f4f 	dsb	sy
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	e7fe      	b.n	8001d80 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <vPortFree+0x5e>
 8001d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8e:	f383 8811 	msr	BASEPRI, r3
 8001d92:	f3bf 8f6f 	isb	sy
 8001d96:	f3bf 8f4f 	dsb	sy
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	e7fe      	b.n	8001d9c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <vPortFree+0xb4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01e      	beq.n	8001dea <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d11a      	bne.n	8001dea <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <vPortFree+0xb4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001dc4:	f7ff f860 	bl	8000e88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <vPortFree+0xb8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <vPortFree+0xb8>)
 8001dd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001dd6:	6938      	ldr	r0, [r7, #16]
 8001dd8:	f000 f874 	bl	8001ec4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <vPortFree+0xbc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <vPortFree+0xbc>)
 8001de4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8001de6:	f7ff f85d 	bl	8000ea4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20012dd4 	.word	0x20012dd4
 8001df8:	20012dc4 	.word	0x20012dc4
 8001dfc:	20012dd0 	.word	0x20012dd0

08001e00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e06:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001e0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <prvHeapInit+0xac>)
 8001e0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00c      	beq.n	8001e34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3307      	adds	r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f023 0307 	bic.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <prvHeapInit+0xac>)
 8001e30:	4413      	add	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <prvHeapInit+0xb0>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <prvHeapInit+0xb0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	4413      	add	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0307 	bic.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a15      	ldr	r2, [pc, #84]	; (8001eb4 <prvHeapInit+0xb4>)
 8001e60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <prvHeapInit+0xb4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <prvHeapInit+0xb4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	1ad2      	subs	r2, r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <prvHeapInit+0xb4>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <prvHeapInit+0xb8>)
 8001e8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <prvHeapInit+0xbc>)
 8001e96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <prvHeapInit+0xc0>)
 8001e9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	200001b8 	.word	0x200001b8
 8001eb0:	20012db8 	.word	0x20012db8
 8001eb4:	20012dc0 	.word	0x20012dc0
 8001eb8:	20012dc8 	.word	0x20012dc8
 8001ebc:	20012dc4 	.word	0x20012dc4
 8001ec0:	20012dd4 	.word	0x20012dd4

08001ec4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <prvInsertBlockIntoFreeList+0xac>)
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e002      	b.n	8001ed8 <prvInsertBlockIntoFreeList+0x14>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d8f7      	bhi.n	8001ed2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	4413      	add	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d108      	bne.n	8001f06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	441a      	add	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	441a      	add	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d118      	bne.n	8001f4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <prvInsertBlockIntoFreeList+0xb0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d00d      	beq.n	8001f42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	441a      	add	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e008      	b.n	8001f54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <prvInsertBlockIntoFreeList+0xb0>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e003      	b.n	8001f54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d002      	beq.n	8001f62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20012db8 	.word	0x20012db8
 8001f74:	20012dc0 	.word	0x20012dc0

08001f78 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <_cbSendSystemDesc+0x14>)
 8001f7e:	f001 f969 	bl	8003254 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <_cbSendSystemDesc+0x18>)
 8001f84:	f001 f966 	bl	8003254 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	08004878 	.word	0x08004878
 8001f90:	080048b4 	.word	0x080048b4

08001f94 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001f9e:	6819      	ldr	r1, [r3, #0]
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SEGGER_SYSVIEW_Conf+0x24>)
 8001fa2:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <SEGGER_SYSVIEW_Conf+0x28>)
 8001fa4:	f000 fd4c 	bl	8002a40 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001fa8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001fac:	f000 fd86 	bl	8002abc <SEGGER_SYSVIEW_SetRAMBase>
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000014 	.word	0x20000014
 8001fb8:	08001f79 	.word	0x08001f79
 8001fbc:	080049a0 	.word	0x080049a0

08001fc0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	e034      	b.n	8002036 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001fcc:	491e      	ldr	r1, [pc, #120]	; (8002048 <_cbSendTaskList+0x88>)
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	491a      	ldr	r1, [pc, #104]	; (8002048 <_cbSendTaskList+0x88>)
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3304      	adds	r3, #4
 8001fec:	681c      	ldr	r4, [r3, #0]
 8001fee:	4916      	ldr	r1, [pc, #88]	; (8002048 <_cbSendTaskList+0x88>)
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3308      	adds	r3, #8
 8001ffe:	681d      	ldr	r5, [r3, #0]
 8002000:	4911      	ldr	r1, [pc, #68]	; (8002048 <_cbSendTaskList+0x88>)
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	330c      	adds	r3, #12
 8002010:	681e      	ldr	r6, [r3, #0]
 8002012:	490d      	ldr	r1, [pc, #52]	; (8002048 <_cbSendTaskList+0x88>)
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3310      	adds	r3, #16
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	4633      	mov	r3, r6
 8002028:	462a      	mov	r2, r5
 800202a:	4621      	mov	r1, r4
 800202c:	f000 f8b4 	bl	8002198 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3301      	adds	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <_cbSendTaskList+0x8c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	d3c5      	bcc.n	8001fcc <_cbSendTaskList+0xc>
  }
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002048:	20012dd8 	.word	0x20012dd8
 800204c:	20012e78 	.word	0x20012e78

08002050 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002056:	f7fe ffd5 	bl	8001004 <xTaskGetTickCountFromISR>
 800205a:	4603      	mov	r3, r0
 800205c:	f04f 0400 	mov.w	r4, #0
 8002060:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002064:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002068:	462b      	mov	r3, r5
 800206a:	4634      	mov	r4, r6
 800206c:	f04f 0100 	mov.w	r1, #0
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	0162      	lsls	r2, r4, #5
 8002076:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800207a:	0159      	lsls	r1, r3, #5
 800207c:	460b      	mov	r3, r1
 800207e:	4614      	mov	r4, r2
 8002080:	1b5b      	subs	r3, r3, r5
 8002082:	eb64 0406 	sbc.w	r4, r4, r6
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	00a2      	lsls	r2, r4, #2
 8002090:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002094:	0099      	lsls	r1, r3, #2
 8002096:	460b      	mov	r3, r1
 8002098:	4614      	mov	r4, r2
 800209a:	195b      	adds	r3, r3, r5
 800209c:	eb44 0406 	adc.w	r4, r4, r6
 80020a0:	f04f 0100 	mov.w	r1, #0
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	00e2      	lsls	r2, r4, #3
 80020aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020ae:	00d9      	lsls	r1, r3, #3
 80020b0:	460b      	mov	r3, r1
 80020b2:	4614      	mov	r4, r2
 80020b4:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80020b8:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	4621      	mov	r1, r4
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080020c8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80020d6:	2205      	movs	r2, #5
 80020d8:	492b      	ldr	r1, [pc, #172]	; (8002188 <SYSVIEW_AddTask+0xc0>)
 80020da:	68b8      	ldr	r0, [r7, #8]
 80020dc:	f001 ff74 	bl	8003fc8 <memcmp>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d04b      	beq.n	800217e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <SYSVIEW_AddTask+0xc4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b07      	cmp	r3, #7
 80020ec:	d903      	bls.n	80020f6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80020ee:	4828      	ldr	r0, [pc, #160]	; (8002190 <SYSVIEW_AddTask+0xc8>)
 80020f0:	f001 fbb4 	bl	800385c <SEGGER_SYSVIEW_Warn>
    return;
 80020f4:	e044      	b.n	8002180 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <SYSVIEW_AddTask+0xc4>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4926      	ldr	r1, [pc, #152]	; (8002194 <SYSVIEW_AddTask+0xcc>)
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <SYSVIEW_AddTask+0xc4>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4921      	ldr	r1, [pc, #132]	; (8002194 <SYSVIEW_AddTask+0xcc>)
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	3304      	adds	r3, #4
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <SYSVIEW_AddTask+0xc4>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	491b      	ldr	r1, [pc, #108]	; (8002194 <SYSVIEW_AddTask+0xcc>)
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3308      	adds	r3, #8
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <SYSVIEW_AddTask+0xc4>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4916      	ldr	r1, [pc, #88]	; (8002194 <SYSVIEW_AddTask+0xcc>)
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	330c      	adds	r3, #12
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <SYSVIEW_AddTask+0xc4>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4910      	ldr	r1, [pc, #64]	; (8002194 <SYSVIEW_AddTask+0xcc>)
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	3310      	adds	r3, #16
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <SYSVIEW_AddTask+0xc4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	4a08      	ldr	r2, [pc, #32]	; (800218c <SYSVIEW_AddTask+0xc4>)
 800216a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f80e 	bl	8002198 <SYSVIEW_SendTaskInfo>
 800217c:	e000      	b.n	8002180 <SYSVIEW_AddTask+0xb8>
    return;
 800217e:	bf00      	nop

}
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	080048c4 	.word	0x080048c4
 800218c:	20012e78 	.word	0x20012e78
 8002190:	080048cc 	.word	0x080048cc
 8002194:	20012dd8 	.word	0x20012dd8

08002198 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	2214      	movs	r2, #20
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 ff24 	bl	8003ffc <memset>
  TaskInfo.TaskID     = TaskID;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 ff47 	bl	8003060 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <_DoInit+0x8c>)
 80021e4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2203      	movs	r2, #3
 80021f0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <_DoInit+0x90>)
 80021f6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <_DoInit+0x94>)
 80021fc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002204:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a14      	ldr	r2, [pc, #80]	; (800226c <_DoInit+0x90>)
 800221c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_DoInit+0x98>)
 8002222:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2210      	movs	r2, #16
 8002228:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3307      	adds	r3, #7
 8002240:	4a0d      	ldr	r2, [pc, #52]	; (8002278 <_DoInit+0x9c>)
 8002242:	6810      	ldr	r0, [r2, #0]
 8002244:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a0c      	ldr	r2, [pc, #48]	; (800227c <_DoInit+0xa0>)
 800224a:	6810      	ldr	r0, [r2, #0]
 800224c:	6018      	str	r0, [r3, #0]
 800224e:	8891      	ldrh	r1, [r2, #4]
 8002250:	7992      	ldrb	r2, [r2, #6]
 8002252:	8099      	strh	r1, [r3, #4]
 8002254:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2220      	movs	r2, #32
 800225a:	719a      	strb	r2, [r3, #6]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	200153bc 	.word	0x200153bc
 800226c:	0800491c 	.word	0x0800491c
 8002270:	20012e7c 	.word	0x20012e7c
 8002274:	2001327c 	.word	0x2001327c
 8002278:	08004928 	.word	0x08004928
 800227c:	0800492c 	.word	0x0800492c

08002280 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800228c:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <SEGGER_RTT_ReadNoLock+0x100>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <SEGGER_RTT_ReadNoLock+0x18>
 8002294:	f7ff ffa2 	bl	80021dc <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	3360      	adds	r3, #96	; 0x60
 80022a4:	4a36      	ldr	r2, [pc, #216]	; (8002380 <SEGGER_RTT_ReadNoLock+0x100>)
 80022a6:	4413      	add	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80022be:	6a3a      	ldr	r2, [r7, #32]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d92a      	bls.n	800231c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4293      	cmp	r3, r2
 80022d6:	bf28      	it	cs
 80022d8:	4613      	movcs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	4413      	add	r3, r2
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4619      	mov	r1, r3
 80022e8:	69f8      	ldr	r0, [r7, #28]
 80022ea:	f001 fe7c 	bl	8003fe6 <memcpy>
    NumBytesRead += NumBytesRem;
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4413      	add	r3, r2
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002306:	6a3a      	ldr	r2, [r7, #32]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	6a3a      	ldr	r2, [r7, #32]
 8002314:	429a      	cmp	r2, r3
 8002316:	d101      	bne.n	800231c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4293      	cmp	r3, r2
 800232a:	bf28      	it	cs
 800232c:	4613      	movcs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d018      	beq.n	8002368 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	4413      	add	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4619      	mov	r1, r3
 8002342:	69f8      	ldr	r0, [r7, #28]
 8002344:	f001 fe4f 	bl	8003fe6 <memcpy>
    NumBytesRead += NumBytesRem;
 8002348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4413      	add	r3, r2
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002360:	6a3a      	ldr	r2, [r7, #32]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002376:	4618      	mov	r0, r3
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200153bc 	.word	0x200153bc

08002384 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4a3f      	ldr	r2, [pc, #252]	; (80024a0 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 80023a2:	4413      	add	r3, r2
 80023a4:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d854      	bhi.n	8002464 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d30f      	bcc.n	80023ee <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4413      	add	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023da:	4618      	mov	r0, r3
 80023dc:	f001 fe03 	bl	8003fe6 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	441a      	add	r2, r3
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e054      	b.n	8002498 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d34b      	bcc.n	8002496 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	d90e      	bls.n	800242e <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	4413      	add	r3, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800241c:	4618      	mov	r0, r3
 800241e:	f001 fde2 	bl	8003fe6 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	441a      	add	r2, r3
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	e018      	b.n	8002460 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800243a:	4618      	mov	r0, r3
 800243c:	f001 fdd3 	bl	8003fe6 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	6858      	ldr	r0, [r3, #4]
 8002444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	18d1      	adds	r1, r2, r3
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	461a      	mov	r2, r3
 8002452:	f001 fdc8 	bl	8003fe6 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002460:	2301      	movs	r3, #1
 8002462:	e019      	b.n	8002498 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	d30f      	bcc.n	8002496 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4413      	add	r3, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002482:	4618      	mov	r0, r3
 8002484:	f001 fdaf 	bl	8003fe6 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	441a      	add	r2, r3
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200153bc 	.word	0x200153bc

080024a4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80024b2:	4b30      	ldr	r3, [pc, #192]	; (8002574 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80024ba:	f7ff fe8f 	bl	80021dc <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80024be:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d24c      	bcs.n	8002564 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80024ca:	f3ef 8311 	mrs	r3, BASEPRI
 80024ce:	f04f 0120 	mov.w	r1, #32
 80024d2:	f381 8811 	msr	BASEPRI, r1
 80024d6:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d032      	beq.n	8002544 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80024de:	4925      	ldr	r1, [pc, #148]	; (8002574 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	440b      	add	r3, r1
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80024f2:	4920      	ldr	r1, [pc, #128]	; (8002574 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	3304      	adds	r3, #4
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002508:	491a      	ldr	r1, [pc, #104]	; (8002574 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	3320      	adds	r3, #32
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800251c:	4915      	ldr	r1, [pc, #84]	; (8002574 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	3328      	adds	r3, #40	; 0x28
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002530:	4910      	ldr	r1, [pc, #64]	; (8002574 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	3324      	adds	r3, #36	; 0x24
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002544:	490b      	ldr	r1, [pc, #44]	; (8002574 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	332c      	adds	r3, #44	; 0x2c
 8002554:	6a3a      	ldr	r2, [r7, #32]
 8002556:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e002      	b.n	800256a <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
 8002568:	617b      	str	r3, [r7, #20]
  }
  return r;
 800256a:	697b      	ldr	r3, [r7, #20]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200153bc 	.word	0x200153bc

08002578 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800258e:	f7ff fe25 	bl	80021dc <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4293      	cmp	r3, r2
 800259c:	d24b      	bcs.n	8002636 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800259e:	f3ef 8311 	mrs	r3, BASEPRI
 80025a2:	f04f 0120 	mov.w	r1, #32
 80025a6:	f381 8811 	msr	BASEPRI, r1
 80025aa:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d031      	beq.n	8002616 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80025b2:	4925      	ldr	r1, [pc, #148]	; (8002648 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	3360      	adds	r3, #96	; 0x60
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80025c6:	4920      	ldr	r1, [pc, #128]	; (8002648 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	3364      	adds	r3, #100	; 0x64
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80025da:	491b      	ldr	r1, [pc, #108]	; (8002648 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	3368      	adds	r3, #104	; 0x68
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80025ee:	4916      	ldr	r1, [pc, #88]	; (8002648 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	3370      	adds	r3, #112	; 0x70
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002602:	4911      	ldr	r1, [pc, #68]	; (8002648 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4613      	mov	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	440b      	add	r3, r1
 8002610:	336c      	adds	r3, #108	; 0x6c
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8002616:	490c      	ldr	r1, [pc, #48]	; (8002648 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	3374      	adds	r3, #116	; 0x74
 8002626:	6a3a      	ldr	r2, [r7, #32]
 8002628:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	e002      	b.n	800263c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8002636:	f04f 33ff 	mov.w	r3, #4294967295
 800263a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800263c:	697b      	ldr	r3, [r7, #20]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200153bc 	.word	0x200153bc

0800264c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800265c:	e002      	b.n	8002664 <_EncodeStr+0x18>
    Len++;
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	3301      	adds	r3, #1
 8002662:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f6      	bne.n	800265e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	429a      	cmp	r2, r3
 8002676:	d901      	bls.n	800267c <_EncodeStr+0x30>
    Len = Limit;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2bfe      	cmp	r3, #254	; 0xfe
 8002680:	d806      	bhi.n	8002690 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	60fa      	str	r2, [r7, #12]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e011      	b.n	80026b4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	60fa      	str	r2, [r7, #12]
 8002696:	22ff      	movs	r2, #255	; 0xff
 8002698:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	60fa      	str	r2, [r7, #12]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	0a19      	lsrs	r1, r3, #8
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	60fa      	str	r2, [r7, #12]
 80026b0:	b2ca      	uxtb	r2, r1
 80026b2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80026b8:	e00a      	b.n	80026d0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	1c53      	adds	r3, r2, #1
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1c59      	adds	r1, r3, #1
 80026c4:	60f9      	str	r1, [r7, #12]
 80026c6:	7812      	ldrb	r2, [r2, #0]
 80026c8:	701a      	strb	r2, [r3, #0]
    n++;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3301      	adds	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3f0      	bcc.n	80026ba <_EncodeStr+0x6e>
  }
  return pPayload;
 80026d8:	68fb      	ldr	r3, [r7, #12]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3304      	adds	r3, #4
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002704:	1cfb      	adds	r3, r7, #3
 8002706:	2201      	movs	r2, #1
 8002708:	4619      	mov	r1, r3
 800270a:	2001      	movs	r0, #1
 800270c:	f7ff fdb8 	bl	8002280 <SEGGER_RTT_ReadNoLock>
 8002710:	4603      	mov	r3, r0
 8002712:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	dd44      	ble.n	80027a4 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d01a      	beq.n	8002756 <_HandleIncomingPacket+0x58>
 8002720:	2b04      	cmp	r3, #4
 8002722:	dc06      	bgt.n	8002732 <_HandleIncomingPacket+0x34>
 8002724:	2b02      	cmp	r3, #2
 8002726:	d010      	beq.n	800274a <_HandleIncomingPacket+0x4c>
 8002728:	2b02      	cmp	r3, #2
 800272a:	dc11      	bgt.n	8002750 <_HandleIncomingPacket+0x52>
 800272c:	2b01      	cmp	r3, #1
 800272e:	d009      	beq.n	8002744 <_HandleIncomingPacket+0x46>
 8002730:	e02d      	b.n	800278e <_HandleIncomingPacket+0x90>
 8002732:	2b06      	cmp	r3, #6
 8002734:	d015      	beq.n	8002762 <_HandleIncomingPacket+0x64>
 8002736:	2b06      	cmp	r3, #6
 8002738:	db10      	blt.n	800275c <_HandleIncomingPacket+0x5e>
 800273a:	2b07      	cmp	r3, #7
 800273c:	d014      	beq.n	8002768 <_HandleIncomingPacket+0x6a>
 800273e:	2b80      	cmp	r3, #128	; 0x80
 8002740:	d015      	beq.n	800276e <_HandleIncomingPacket+0x70>
 8002742:	e024      	b.n	800278e <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002744:	f000 fb10 	bl	8002d68 <SEGGER_SYSVIEW_Start>
      break;
 8002748:	e031      	b.n	80027ae <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800274a:	f000 fbc9 	bl	8002ee0 <SEGGER_SYSVIEW_Stop>
      break;
 800274e:	e02e      	b.n	80027ae <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002750:	f000 fda4 	bl	800329c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002754:	e02b      	b.n	80027ae <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002756:	f000 fd69 	bl	800322c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800275a:	e028      	b.n	80027ae <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800275c:	f000 fbe6 	bl	8002f2c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002760:	e025      	b.n	80027ae <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002762:	f001 f83d 	bl	80037e0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002766:	e022      	b.n	80027ae <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002768:	f001 f81c 	bl	80037a4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800276c:	e01f      	b.n	80027ae <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800276e:	1cfb      	adds	r3, r7, #3
 8002770:	2201      	movs	r2, #1
 8002772:	4619      	mov	r1, r3
 8002774:	2001      	movs	r0, #1
 8002776:	f7ff fd83 	bl	8002280 <SEGGER_RTT_ReadNoLock>
 800277a:	4603      	mov	r3, r0
 800277c:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	dd11      	ble.n	80027a8 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 ff8c 	bl	80036a4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800278c:	e00c      	b.n	80027a8 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	b25b      	sxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	da0a      	bge.n	80027ac <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002796:	1cfb      	adds	r3, r7, #3
 8002798:	2201      	movs	r2, #1
 800279a:	4619      	mov	r1, r3
 800279c:	2001      	movs	r0, #1
 800279e:	f7ff fd6f 	bl	8002280 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80027a2:	e003      	b.n	80027ac <_HandleIncomingPacket+0xae>
    }
  }
 80027a4:	bf00      	nop
 80027a6:	e002      	b.n	80027ae <_HandleIncomingPacket+0xb0>
      break;
 80027a8:	bf00      	nop
 80027aa:	e000      	b.n	80027ae <_HandleIncomingPacket+0xb0>
      break;
 80027ac:	bf00      	nop
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	; 0x30
 80027bc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80027be:	2301      	movs	r3, #1
 80027c0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	3301      	adds	r3, #1
 80027c6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027cc:	4b30      	ldr	r3, [pc, #192]	; (8002890 <_TrySendOverflowPacket+0xd8>)
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d2:	e00b      	b.n	80027ec <_TrySendOverflowPacket+0x34>
 80027d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	1c59      	adds	r1, r3, #1
 80027dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	09db      	lsrs	r3, r3, #7
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	2b7f      	cmp	r3, #127	; 0x7f
 80027f0:	d8f0      	bhi.n	80027d4 <_TrySendOverflowPacket+0x1c>
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <_TrySendOverflowPacket+0xdc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <_TrySendOverflowPacket+0xd8>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	623b      	str	r3, [r7, #32]
 800281a:	e00b      	b.n	8002834 <_TrySendOverflowPacket+0x7c>
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	1c59      	adds	r1, r3, #1
 8002824:	6279      	str	r1, [r7, #36]	; 0x24
 8002826:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	09db      	lsrs	r3, r3, #7
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	2b7f      	cmp	r3, #127	; 0x7f
 8002838:	d8f0      	bhi.n	800281c <_TrySendOverflowPacket+0x64>
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	627a      	str	r2, [r7, #36]	; 0x24
 8002840:	6a3a      	ldr	r2, [r7, #32]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	461a      	mov	r2, r3
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	4619      	mov	r1, r3
 8002856:	2001      	movs	r0, #1
 8002858:	f7ff fd94 	bl	8002384 <SEGGER_RTT_WriteSkipNoLock>
 800285c:	4603      	mov	r3, r0
 800285e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <_TrySendOverflowPacket+0xd8>)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800286c:	4b08      	ldr	r3, [pc, #32]	; (8002890 <_TrySendOverflowPacket+0xd8>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	3b01      	subs	r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <_TrySendOverflowPacket+0xd8>)
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	e004      	b.n	8002884 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <_TrySendOverflowPacket+0xd8>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	4a03      	ldr	r2, [pc, #12]	; (8002890 <_TrySendOverflowPacket+0xd8>)
 8002882:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002884:	693b      	ldr	r3, [r7, #16]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3730      	adds	r7, #48	; 0x30
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20015294 	.word	0x20015294
 8002894:	e0001004 	.word	0xe0001004

08002898 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	; 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80028a4:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <_SendPacket+0x19c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d010      	beq.n	80028ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80028ac:	4b61      	ldr	r3, [pc, #388]	; (8002a34 <_SendPacket+0x19c>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80a1 	beq.w	80029f8 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80028b6:	4b5f      	ldr	r3, [pc, #380]	; (8002a34 <_SendPacket+0x19c>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d109      	bne.n	80028d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80028be:	f7ff ff7b 	bl	80027b8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80028c2:	4b5c      	ldr	r3, [pc, #368]	; (8002a34 <_SendPacket+0x19c>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	f040 8098 	bne.w	80029fc <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 80028cc:	e001      	b.n	80028d2 <_SendPacket+0x3a>
    goto Send;
 80028ce:	bf00      	nop
 80028d0:	e000      	b.n	80028d4 <_SendPacket+0x3c>
Send:
 80028d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b1f      	cmp	r3, #31
 80028d8:	d809      	bhi.n	80028ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80028da:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <_SendPacket+0x19c>)
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 8089 	bne.w	8002a00 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b17      	cmp	r3, #23
 80028f2:	d807      	bhi.n	8002904 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e03d      	b.n	8002980 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b7f      	cmp	r3, #127	; 0x7f
 8002910:	d912      	bls.n	8002938 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	09da      	lsrs	r2, r3, #7
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b01      	subs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	3a01      	subs	r2, #1
 800292a:	60fa      	str	r2, [r7, #12]
 800292c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e006      	b.n	8002946 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3b01      	subs	r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b7f      	cmp	r3, #127	; 0x7f
 800294a:	d912      	bls.n	8002972 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	09da      	lsrs	r2, r3, #7
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	3b01      	subs	r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	3a01      	subs	r2, #1
 8002964:	60fa      	str	r2, [r7, #12]
 8002966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800296a:	b2da      	uxtb	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e006      	b.n	8002980 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3b01      	subs	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002980:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <_SendPacket+0x1a0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002986:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <_SendPacket+0x19c>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	e00b      	b.n	80029b2 <_SendPacket+0x11a>
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	1c59      	adds	r1, r3, #1
 80029a2:	6279      	str	r1, [r7, #36]	; 0x24
 80029a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	09db      	lsrs	r3, r3, #7
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	2b7f      	cmp	r3, #127	; 0x7f
 80029b6:	d8f0      	bhi.n	800299a <_SendPacket+0x102>
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	627a      	str	r2, [r7, #36]	; 0x24
 80029be:	6a3a      	ldr	r2, [r7, #32]
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	2001      	movs	r0, #1
 80029d4:	f7ff fcd6 	bl	8002384 <SEGGER_RTT_WriteSkipNoLock>
 80029d8:	4603      	mov	r3, r0
 80029da:	613b      	str	r3, [r7, #16]
  if (Status) {
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80029e2:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <_SendPacket+0x19c>)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	60d3      	str	r3, [r2, #12]
 80029e8:	e00b      	b.n	8002a02 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <_SendPacket+0x19c>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <_SendPacket+0x19c>)
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e004      	b.n	8002a02 <_SendPacket+0x16a>
    goto SendDone;
 80029f8:	bf00      	nop
 80029fa:	e002      	b.n	8002a02 <_SendPacket+0x16a>
      goto SendDone;
 80029fc:	bf00      	nop
 80029fe:	e000      	b.n	8002a02 <_SendPacket+0x16a>
      goto SendDone;
 8002a00:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <_SendPacket+0x1a4>)
 8002a04:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <_SendPacket+0x1a4>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d00b      	beq.n	8002a2a <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <_SendPacket+0x19c>)
 8002a14:	789b      	ldrb	r3, [r3, #2]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <_SendPacket+0x19c>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002a20:	f7ff fe6d 	bl	80026fe <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <_SendPacket+0x19c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002a2a:	bf00      	nop
 8002a2c:	3728      	adds	r7, #40	; 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20015294 	.word	0x20015294
 8002a38:	e0001004 	.word	0xe0001004
 8002a3c:	200153bc 	.word	0x200153bc

08002a40 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a56:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <SEGGER_SYSVIEW_Init+0x68>)
 8002a58:	4914      	ldr	r1, [pc, #80]	; (8002aac <SEGGER_SYSVIEW_Init+0x6c>)
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f7ff fd22 	bl	80024a4 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002a60:	2300      	movs	r3, #0
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2308      	movs	r3, #8
 8002a66:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <SEGGER_SYSVIEW_Init+0x70>)
 8002a68:	4910      	ldr	r1, [pc, #64]	; (8002aac <SEGGER_SYSVIEW_Init+0x6c>)
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f7ff fd84 	bl	8002578 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <SEGGER_SYSVIEW_Init+0x74>)
 8002a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a76:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <SEGGER_SYSVIEW_Init+0x78>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	; (8002ab4 <SEGGER_SYSVIEW_Init+0x74>)
 8002a7e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002a80:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <SEGGER_SYSVIEW_Init+0x74>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002a86:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <SEGGER_SYSVIEW_Init+0x74>)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002a8c:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <SEGGER_SYSVIEW_Init+0x74>)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <SEGGER_SYSVIEW_Init+0x74>)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <SEGGER_SYSVIEW_Init+0x74>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2001328c 	.word	0x2001328c
 8002aac:	08004934 	.word	0x08004934
 8002ab0:	2001528c 	.word	0x2001528c
 8002ab4:	20015294 	.word	0x20015294
 8002ab8:	e0001004 	.word	0xe0001004

08002abc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6113      	str	r3, [r2, #16]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20015294 	.word	0x20015294

08002adc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002ae4:	f3ef 8311 	mrs	r3, BASEPRI
 8002ae8:	f04f 0120 	mov.w	r1, #32
 8002aec:	f381 8811 	msr	BASEPRI, r1
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4808      	ldr	r0, [pc, #32]	; (8002b14 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002af4:	f7ff fdf7 	bl	80026e6 <_PreparePacket>
 8002af8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	68b8      	ldr	r0, [r7, #8]
 8002b00:	f7ff feca 	bl	8002898 <_SendPacket>
  RECORD_END();
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f383 8811 	msr	BASEPRI, r3
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200152c4 	.word	0x200152c4

08002b18 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002b22:	f3ef 8311 	mrs	r3, BASEPRI
 8002b26:	f04f 0120 	mov.w	r1, #32
 8002b2a:	f381 8811 	msr	BASEPRI, r1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	4816      	ldr	r0, [pc, #88]	; (8002b8c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002b32:	f7ff fdd8 	bl	80026e6 <_PreparePacket>
 8002b36:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e00b      	b.n	8002b5e <SEGGER_SYSVIEW_RecordU32+0x46>
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	1c59      	adds	r1, r3, #1
 8002b4e:	61f9      	str	r1, [r7, #28]
 8002b50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	09db      	lsrs	r3, r3, #7
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b7f      	cmp	r3, #127	; 0x7f
 8002b62:	d8f0      	bhi.n	8002b46 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	61fa      	str	r2, [r7, #28]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	6938      	ldr	r0, [r7, #16]
 8002b7a:	f7ff fe8d 	bl	8002898 <_SendPacket>
  RECORD_END();
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f383 8811 	msr	BASEPRI, r3
}
 8002b84:	bf00      	nop
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200152c4 	.word	0x200152c4

08002b90 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08c      	sub	sp, #48	; 0x30
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8002ba0:	f04f 0120 	mov.w	r1, #32
 8002ba4:	f381 8811 	msr	BASEPRI, r1
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	4825      	ldr	r0, [pc, #148]	; (8002c40 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002bac:	f7ff fd9b 	bl	80026e6 <_PreparePacket>
 8002bb0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bbe:	e00b      	b.n	8002bd8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc6:	1c59      	adds	r1, r3, #1
 8002bc8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	09db      	lsrs	r3, r3, #7
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	2b7f      	cmp	r3, #127	; 0x7f
 8002bdc:	d8f0      	bhi.n	8002bc0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	623b      	str	r3, [r7, #32]
 8002bf6:	e00b      	b.n	8002c10 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	1c59      	adds	r1, r3, #1
 8002c00:	6279      	str	r1, [r7, #36]	; 0x24
 8002c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	09db      	lsrs	r3, r3, #7
 8002c0e:	623b      	str	r3, [r7, #32]
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	2b7f      	cmp	r3, #127	; 0x7f
 8002c14:	d8f0      	bhi.n	8002bf8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	627a      	str	r2, [r7, #36]	; 0x24
 8002c1c:	6a3a      	ldr	r2, [r7, #32]
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	6979      	ldr	r1, [r7, #20]
 8002c2a:	69b8      	ldr	r0, [r7, #24]
 8002c2c:	f7ff fe34 	bl	8002898 <_SendPacket>
  RECORD_END();
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f383 8811 	msr	BASEPRI, r3
}
 8002c36:	bf00      	nop
 8002c38:	3730      	adds	r7, #48	; 0x30
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200152c4 	.word	0x200152c4

08002c44 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b090      	sub	sp, #64	; 0x40
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c52:	f3ef 8311 	mrs	r3, BASEPRI
 8002c56:	f04f 0120 	mov.w	r1, #32
 8002c5a:	f381 8811 	msr	BASEPRI, r1
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	4840      	ldr	r0, [pc, #256]	; (8002d64 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8002c62:	f7ff fd40 	bl	80026e6 <_PreparePacket>
 8002c66:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c74:	e00b      	b.n	8002c8e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7c:	1c59      	adds	r1, r3, #1
 8002c7e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002c80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	09db      	lsrs	r3, r3, #7
 8002c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2b7f      	cmp	r3, #127	; 0x7f
 8002c92:	d8f0      	bhi.n	8002c76 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8002c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
 8002cac:	e00b      	b.n	8002cc6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	1c59      	adds	r1, r3, #1
 8002cb6:	6379      	str	r1, [r7, #52]	; 0x34
 8002cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	09db      	lsrs	r3, r3, #7
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cca:	d8f0      	bhi.n	8002cae <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	637a      	str	r2, [r7, #52]	; 0x34
 8002cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce4:	e00b      	b.n	8002cfe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	1c59      	adds	r1, r3, #1
 8002cee:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002cf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	09db      	lsrs	r3, r3, #7
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	2b7f      	cmp	r3, #127	; 0x7f
 8002d02:	d8f0      	bhi.n	8002ce6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
 8002d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	e00b      	b.n	8002d36 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	1c59      	adds	r1, r3, #1
 8002d26:	6279      	str	r1, [r7, #36]	; 0x24
 8002d28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	09db      	lsrs	r3, r3, #7
 8002d34:	623b      	str	r3, [r7, #32]
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	2b7f      	cmp	r3, #127	; 0x7f
 8002d3a:	d8f0      	bhi.n	8002d1e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	627a      	str	r2, [r7, #36]	; 0x24
 8002d42:	6a3a      	ldr	r2, [r7, #32]
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	6979      	ldr	r1, [r7, #20]
 8002d50:	69b8      	ldr	r0, [r7, #24]
 8002d52:	f7ff fda1 	bl	8002898 <_SendPacket>
  RECORD_END();
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f383 8811 	msr	BASEPRI, r3
}
 8002d5c:	bf00      	nop
 8002d5e:	3740      	adds	r7, #64	; 0x40
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	200152c4 	.word	0x200152c4

08002d68 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08c      	sub	sp, #48	; 0x30
 8002d6c:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002d6e:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 80aa 	bne.w	8002ecc <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002d78:	4b56      	ldr	r3, [pc, #344]	; (8002ed4 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002d7e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d82:	f04f 0120 	mov.w	r1, #32
 8002d86:	f381 8811 	msr	BASEPRI, r1
 8002d8a:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002d8c:	220a      	movs	r2, #10
 8002d8e:	4952      	ldr	r1, [pc, #328]	; (8002ed8 <SEGGER_SYSVIEW_Start+0x170>)
 8002d90:	2001      	movs	r0, #1
 8002d92:	f7ff faf7 	bl	8002384 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002d9c:	200a      	movs	r0, #10
 8002d9e:	f7ff fe9d 	bl	8002adc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002da2:	f3ef 8311 	mrs	r3, BASEPRI
 8002da6:	f04f 0120 	mov.w	r1, #32
 8002daa:	f381 8811 	msr	BASEPRI, r1
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	484a      	ldr	r0, [pc, #296]	; (8002edc <SEGGER_SYSVIEW_Start+0x174>)
 8002db2:	f7ff fc98 	bl	80026e6 <_PreparePacket>
 8002db6:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc0:	4b44      	ldr	r3, [pc, #272]	; (8002ed4 <SEGGER_SYSVIEW_Start+0x16c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc6:	e00b      	b.n	8002de0 <SEGGER_SYSVIEW_Start+0x78>
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	1c59      	adds	r1, r3, #1
 8002dd0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	09db      	lsrs	r3, r3, #7
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	2b7f      	cmp	r3, #127	; 0x7f
 8002de4:	d8f0      	bhi.n	8002dc8 <SEGGER_SYSVIEW_Start+0x60>
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfa:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <SEGGER_SYSVIEW_Start+0x16c>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	623b      	str	r3, [r7, #32]
 8002e00:	e00b      	b.n	8002e1a <SEGGER_SYSVIEW_Start+0xb2>
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	1c59      	adds	r1, r3, #1
 8002e0a:	6279      	str	r1, [r7, #36]	; 0x24
 8002e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	09db      	lsrs	r3, r3, #7
 8002e18:	623b      	str	r3, [r7, #32]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e1e:	d8f0      	bhi.n	8002e02 <SEGGER_SYSVIEW_Start+0x9a>
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	627a      	str	r2, [r7, #36]	; 0x24
 8002e26:	6a3a      	ldr	r2, [r7, #32]
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <SEGGER_SYSVIEW_Start+0x16c>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e00b      	b.n	8002e54 <SEGGER_SYSVIEW_Start+0xec>
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	1c59      	adds	r1, r3, #1
 8002e44:	61f9      	str	r1, [r7, #28]
 8002e46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	09db      	lsrs	r3, r3, #7
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b7f      	cmp	r3, #127	; 0x7f
 8002e58:	d8f0      	bhi.n	8002e3c <SEGGER_SYSVIEW_Start+0xd4>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	61fa      	str	r2, [r7, #28]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	2302      	movs	r3, #2
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	e00b      	b.n	8002e8c <SEGGER_SYSVIEW_Start+0x124>
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	1c59      	adds	r1, r3, #1
 8002e7c:	6179      	str	r1, [r7, #20]
 8002e7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	09db      	lsrs	r3, r3, #7
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8002e90:	d8f0      	bhi.n	8002e74 <SEGGER_SYSVIEW_Start+0x10c>
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	617a      	str	r2, [r7, #20]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002ea2:	2218      	movs	r2, #24
 8002ea4:	6839      	ldr	r1, [r7, #0]
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff fcf6 	bl	8002898 <_SendPacket>
      RECORD_END();
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <SEGGER_SYSVIEW_Start+0x16c>)
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <SEGGER_SYSVIEW_Start+0x16c>)
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002ec0:	f000 f9ec 	bl	800329c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002ec4:	f000 f9b2 	bl	800322c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002ec8:	f000 fc8a 	bl	80037e0 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3730      	adds	r7, #48	; 0x30
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20015294 	.word	0x20015294
 8002ed8:	080049a8 	.word	0x080049a8
 8002edc:	200152c4 	.word	0x200152c4

08002ee0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002ee6:	f3ef 8311 	mrs	r3, BASEPRI
 8002eea:	f04f 0120 	mov.w	r1, #32
 8002eee:	f381 8811 	msr	BASEPRI, r1
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	480b      	ldr	r0, [pc, #44]	; (8002f24 <SEGGER_SYSVIEW_Stop+0x44>)
 8002ef6:	f7ff fbf6 	bl	80026e6 <_PreparePacket>
 8002efa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <SEGGER_SYSVIEW_Stop+0x48>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002f04:	220b      	movs	r2, #11
 8002f06:	6839      	ldr	r1, [r7, #0]
 8002f08:	6838      	ldr	r0, [r7, #0]
 8002f0a:	f7ff fcc5 	bl	8002898 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <SEGGER_SYSVIEW_Stop+0x48>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f383 8811 	msr	BASEPRI, r3
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200152c4 	.word	0x200152c4
 8002f28:	20015294 	.word	0x20015294

08002f2c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002f32:	f3ef 8311 	mrs	r3, BASEPRI
 8002f36:	f04f 0120 	mov.w	r1, #32
 8002f3a:	f381 8811 	msr	BASEPRI, r1
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	4845      	ldr	r0, [pc, #276]	; (8003058 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002f42:	f7ff fbd0 	bl	80026e6 <_PreparePacket>
 8002f46:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f50:	4b42      	ldr	r3, [pc, #264]	; (800305c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f56:	e00b      	b.n	8002f70 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	1c59      	adds	r1, r3, #1
 8002f60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002f62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	09db      	lsrs	r3, r3, #7
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	2b7f      	cmp	r3, #127	; 0x7f
 8002f74:	d8f0      	bhi.n	8002f58 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	e00b      	b.n	8002faa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	1c59      	adds	r1, r3, #1
 8002f9a:	6279      	str	r1, [r7, #36]	; 0x24
 8002f9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	701a      	strb	r2, [r3, #0]
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	09db      	lsrs	r3, r3, #7
 8002fa8:	623b      	str	r3, [r7, #32]
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	2b7f      	cmp	r3, #127	; 0x7f
 8002fae:	d8f0      	bhi.n	8002f92 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	627a      	str	r2, [r7, #36]	; 0x24
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e00b      	b.n	8002fe4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	1c59      	adds	r1, r3, #1
 8002fd4:	61f9      	str	r1, [r7, #28]
 8002fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	09db      	lsrs	r3, r3, #7
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8002fe8:	d8f0      	bhi.n	8002fcc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	61fa      	str	r2, [r7, #28]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	2302      	movs	r3, #2
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	e00b      	b.n	800301c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	1c59      	adds	r1, r3, #1
 800300c:	6179      	str	r1, [r7, #20]
 800300e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	09db      	lsrs	r3, r3, #7
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b7f      	cmp	r3, #127	; 0x7f
 8003020:	d8f0      	bhi.n	8003004 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	617a      	str	r2, [r7, #20]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003032:	2218      	movs	r2, #24
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	68b8      	ldr	r0, [r7, #8]
 8003038:	f7ff fc2e 	bl	8002898 <_SendPacket>
  RECORD_END();
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800304a:	4b04      	ldr	r3, [pc, #16]	; (800305c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	4798      	blx	r3
  }
}
 8003050:	bf00      	nop
 8003052:	3730      	adds	r7, #48	; 0x30
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	200152c4 	.word	0x200152c4
 800305c:	20015294 	.word	0x20015294

08003060 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b092      	sub	sp, #72	; 0x48
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003068:	f3ef 8311 	mrs	r3, BASEPRI
 800306c:	f04f 0120 	mov.w	r1, #32
 8003070:	f381 8811 	msr	BASEPRI, r1
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	486b      	ldr	r0, [pc, #428]	; (8003224 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003078:	f7ff fb35 	bl	80026e6 <_PreparePacket>
 800307c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	647b      	str	r3, [r7, #68]	; 0x44
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b67      	ldr	r3, [pc, #412]	; (8003228 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	643b      	str	r3, [r7, #64]	; 0x40
 8003094:	e00b      	b.n	80030ae <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003098:	b2da      	uxtb	r2, r3
 800309a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309c:	1c59      	adds	r1, r3, #1
 800309e:	6479      	str	r1, [r7, #68]	; 0x44
 80030a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030aa:	09db      	lsrs	r3, r3, #7
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
 80030ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b0:	2b7f      	cmp	r3, #127	; 0x7f
 80030b2:	d8f0      	bhi.n	8003096 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 80030b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	647a      	str	r2, [r7, #68]	; 0x44
 80030ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ce:	e00b      	b.n	80030e8 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	63f9      	str	r1, [r7, #60]	; 0x3c
 80030da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	09db      	lsrs	r3, r3, #7
 80030e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ea:	2b7f      	cmp	r3, #127	; 0x7f
 80030ec:	d8f0      	bhi.n	80030d0 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 80030ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fc:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	4619      	mov	r1, r3
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7ff faa0 	bl	800264c <_EncodeStr>
 800310c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800310e:	2209      	movs	r2, #9
 8003110:	68f9      	ldr	r1, [r7, #12]
 8003112:	6938      	ldr	r0, [r7, #16]
 8003114:	f7ff fbc0 	bl	8002898 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b40      	ldr	r3, [pc, #256]	; (8003228 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	633b      	str	r3, [r7, #48]	; 0x30
 800312e:	e00b      	b.n	8003148 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	b2da      	uxtb	r2, r3
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	1c59      	adds	r1, r3, #1
 8003138:	6379      	str	r1, [r7, #52]	; 0x34
 800313a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	09db      	lsrs	r3, r3, #7
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	2b7f      	cmp	r3, #127	; 0x7f
 800314c:	d8f0      	bhi.n	8003130 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	637a      	str	r2, [r7, #52]	; 0x34
 8003154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
 8003168:	e00b      	b.n	8003182 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	b2da      	uxtb	r2, r3
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	1c59      	adds	r1, r3, #1
 8003172:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	09db      	lsrs	r3, r3, #7
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2b7f      	cmp	r3, #127	; 0x7f
 8003186:	d8f0      	bhi.n	800316a <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800318e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	623b      	str	r3, [r7, #32]
 80031a2:	e00b      	b.n	80031bc <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	1c59      	adds	r1, r3, #1
 80031ac:	6279      	str	r1, [r7, #36]	; 0x24
 80031ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	09db      	lsrs	r3, r3, #7
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2b7f      	cmp	r3, #127	; 0x7f
 80031c0:	d8f0      	bhi.n	80031a4 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	627a      	str	r2, [r7, #36]	; 0x24
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	2300      	movs	r3, #0
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	e00b      	b.n	80031f4 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	61f9      	str	r1, [r7, #28]
 80031e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	09db      	lsrs	r3, r3, #7
 80031f2:	61bb      	str	r3, [r7, #24]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b7f      	cmp	r3, #127	; 0x7f
 80031f8:	d8f0      	bhi.n	80031dc <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	61fa      	str	r2, [r7, #28]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800320a:	2215      	movs	r2, #21
 800320c:	68f9      	ldr	r1, [r7, #12]
 800320e:	6938      	ldr	r0, [r7, #16]
 8003210:	f7ff fb42 	bl	8002898 <_SendPacket>
  RECORD_END();
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f383 8811 	msr	BASEPRI, r3
}
 800321a:	bf00      	nop
 800321c:	3748      	adds	r7, #72	; 0x48
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200152c4 	.word	0x200152c4
 8003228:	20015294 	.word	0x20015294

0800322c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003242:	4b03      	ldr	r3, [pc, #12]	; (8003250 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4798      	blx	r3
  }
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20015294 	.word	0x20015294

08003254 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800325c:	f3ef 8311 	mrs	r3, BASEPRI
 8003260:	f04f 0120 	mov.w	r1, #32
 8003264:	f381 8811 	msr	BASEPRI, r1
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	480b      	ldr	r0, [pc, #44]	; (8003298 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800326c:	f7ff fa3b 	bl	80026e6 <_PreparePacket>
 8003270:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003272:	2280      	movs	r2, #128	; 0x80
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	6938      	ldr	r0, [r7, #16]
 8003278:	f7ff f9e8 	bl	800264c <_EncodeStr>
 800327c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800327e:	220e      	movs	r2, #14
 8003280:	68f9      	ldr	r1, [r7, #12]
 8003282:	6938      	ldr	r0, [r7, #16]
 8003284:	f7ff fb08 	bl	8002898 <_SendPacket>
  RECORD_END();
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f383 8811 	msr	BASEPRI, r3
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200152c4 	.word	0x200152c4

0800329c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d019      	beq.n	80032de <SEGGER_SYSVIEW_RecordSystime+0x42>
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d014      	beq.n	80032de <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4798      	blx	r3
 80032bc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80032c0:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80032c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	f04f 0400 	mov.w	r4, #0
 80032ce:	0013      	movs	r3, r2
 80032d0:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80032d2:	461a      	mov	r2, r3
 80032d4:	4601      	mov	r1, r0
 80032d6:	200d      	movs	r0, #13
 80032d8:	f7ff fc5a 	bl	8002b90 <SEGGER_SYSVIEW_RecordU32x2>
 80032dc:	e005      	b.n	80032ea <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4619      	mov	r1, r3
 80032e4:	200c      	movs	r0, #12
 80032e6:	f7ff fc17 	bl	8002b18 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20015294 	.word	0x20015294
 80032f8:	e0001004 	.word	0xe0001004

080032fc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003302:	f3ef 8311 	mrs	r3, BASEPRI
 8003306:	f04f 0120 	mov.w	r1, #32
 800330a:	f381 8811 	msr	BASEPRI, r1
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	4819      	ldr	r0, [pc, #100]	; (8003378 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003312:	f7ff f9e8 	bl	80026e6 <_PreparePacket>
 8003316:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800331c:	4b17      	ldr	r3, [pc, #92]	; (800337c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003324:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	e00b      	b.n	8003348 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	b2da      	uxtb	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	1c59      	adds	r1, r3, #1
 8003338:	6179      	str	r1, [r7, #20]
 800333a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	09db      	lsrs	r3, r3, #7
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b7f      	cmp	r3, #127	; 0x7f
 800334c:	d8f0      	bhi.n	8003330 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	617a      	str	r2, [r7, #20]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800335e:	2202      	movs	r2, #2
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	68b8      	ldr	r0, [r7, #8]
 8003364:	f7ff fa98 	bl	8002898 <_SendPacket>
  RECORD_END();
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f383 8811 	msr	BASEPRI, r3
}
 800336e:	bf00      	nop
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200152c4 	.word	0x200152c4
 800337c:	e000ed04 	.word	0xe000ed04

08003380 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003386:	f3ef 8311 	mrs	r3, BASEPRI
 800338a:	f04f 0120 	mov.w	r1, #32
 800338e:	f381 8811 	msr	BASEPRI, r1
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	4807      	ldr	r0, [pc, #28]	; (80033b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003396:	f7ff f9a6 	bl	80026e6 <_PreparePacket>
 800339a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800339c:	2203      	movs	r2, #3
 800339e:	6839      	ldr	r1, [r7, #0]
 80033a0:	6838      	ldr	r0, [r7, #0]
 80033a2:	f7ff fa79 	bl	8002898 <_SendPacket>
  RECORD_END();
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f383 8811 	msr	BASEPRI, r3
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	200152c4 	.word	0x200152c4

080033b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80033be:	f3ef 8311 	mrs	r3, BASEPRI
 80033c2:	f04f 0120 	mov.w	r1, #32
 80033c6:	f381 8811 	msr	BASEPRI, r1
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	4807      	ldr	r0, [pc, #28]	; (80033ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80033ce:	f7ff f98a 	bl	80026e6 <_PreparePacket>
 80033d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80033d4:	2212      	movs	r2, #18
 80033d6:	6839      	ldr	r1, [r7, #0]
 80033d8:	6838      	ldr	r0, [r7, #0]
 80033da:	f7ff fa5d 	bl	8002898 <_SendPacket>
  RECORD_END();
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f383 8811 	msr	BASEPRI, r3
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200152c4 	.word	0x200152c4

080033f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80033f6:	f3ef 8311 	mrs	r3, BASEPRI
 80033fa:	f04f 0120 	mov.w	r1, #32
 80033fe:	f381 8811 	msr	BASEPRI, r1
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	4807      	ldr	r0, [pc, #28]	; (8003424 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003406:	f7ff f96e 	bl	80026e6 <_PreparePacket>
 800340a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800340c:	2211      	movs	r2, #17
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	6838      	ldr	r0, [r7, #0]
 8003412:	f7ff fa41 	bl	8002898 <_SendPacket>
  RECORD_END();
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f383 8811 	msr	BASEPRI, r3
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200152c4 	.word	0x200152c4

08003428 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003430:	f3ef 8311 	mrs	r3, BASEPRI
 8003434:	f04f 0120 	mov.w	r1, #32
 8003438:	f381 8811 	msr	BASEPRI, r1
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	481a      	ldr	r0, [pc, #104]	; (80034a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003440:	f7ff f951 	bl	80026e6 <_PreparePacket>
 8003444:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800344a:	4b18      	ldr	r3, [pc, #96]	; (80034ac <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	e00b      	b.n	8003478 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	1c59      	adds	r1, r3, #1
 8003468:	61f9      	str	r1, [r7, #28]
 800346a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	09db      	lsrs	r3, r3, #7
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b7f      	cmp	r3, #127	; 0x7f
 800347c:	d8f0      	bhi.n	8003460 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	61fa      	str	r2, [r7, #28]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800348e:	2208      	movs	r2, #8
 8003490:	68f9      	ldr	r1, [r7, #12]
 8003492:	6938      	ldr	r0, [r7, #16]
 8003494:	f7ff fa00 	bl	8002898 <_SendPacket>
  RECORD_END();
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f383 8811 	msr	BASEPRI, r3
}
 800349e:	bf00      	nop
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200152c4 	.word	0x200152c4
 80034ac:	20015294 	.word	0x20015294

080034b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80034b8:	f3ef 8311 	mrs	r3, BASEPRI
 80034bc:	f04f 0120 	mov.w	r1, #32
 80034c0:	f381 8811 	msr	BASEPRI, r1
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	481a      	ldr	r0, [pc, #104]	; (8003530 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80034c8:	f7ff f90d 	bl	80026e6 <_PreparePacket>
 80034cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	e00b      	b.n	8003500 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	1c59      	adds	r1, r3, #1
 80034f0:	61f9      	str	r1, [r7, #28]
 80034f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	09db      	lsrs	r3, r3, #7
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b7f      	cmp	r3, #127	; 0x7f
 8003504:	d8f0      	bhi.n	80034e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	61fa      	str	r2, [r7, #28]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003516:	2204      	movs	r2, #4
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	6938      	ldr	r0, [r7, #16]
 800351c:	f7ff f9bc 	bl	8002898 <_SendPacket>
  RECORD_END();
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f383 8811 	msr	BASEPRI, r3
}
 8003526:	bf00      	nop
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	200152c4 	.word	0x200152c4
 8003534:	20015294 	.word	0x20015294

08003538 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003540:	f3ef 8311 	mrs	r3, BASEPRI
 8003544:	f04f 0120 	mov.w	r1, #32
 8003548:	f381 8811 	msr	BASEPRI, r1
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	481a      	ldr	r0, [pc, #104]	; (80035b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003550:	f7ff f8c9 	bl	80026e6 <_PreparePacket>
 8003554:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800355a:	4b18      	ldr	r3, [pc, #96]	; (80035bc <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	089b      	lsrs	r3, r3, #2
 8003564:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	e00b      	b.n	8003588 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	1c59      	adds	r1, r3, #1
 8003578:	61f9      	str	r1, [r7, #28]
 800357a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	09db      	lsrs	r3, r3, #7
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b7f      	cmp	r3, #127	; 0x7f
 800358c:	d8f0      	bhi.n	8003570 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	61fa      	str	r2, [r7, #28]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800359e:	2206      	movs	r2, #6
 80035a0:	68f9      	ldr	r1, [r7, #12]
 80035a2:	6938      	ldr	r0, [r7, #16]
 80035a4:	f7ff f978 	bl	8002898 <_SendPacket>
  RECORD_END();
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f383 8811 	msr	BASEPRI, r3
}
 80035ae:	bf00      	nop
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200152c4 	.word	0x200152c4
 80035bc:	20015294 	.word	0x20015294

080035c0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80035ca:	f3ef 8311 	mrs	r3, BASEPRI
 80035ce:	f04f 0120 	mov.w	r1, #32
 80035d2:	f381 8811 	msr	BASEPRI, r1
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	4827      	ldr	r0, [pc, #156]	; (8003678 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80035da:	f7ff f884 	bl	80026e6 <_PreparePacket>
 80035de:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80035e4:	4b25      	ldr	r3, [pc, #148]	; (800367c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	623b      	str	r3, [r7, #32]
 80035f8:	e00b      	b.n	8003612 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	1c59      	adds	r1, r3, #1
 8003602:	6279      	str	r1, [r7, #36]	; 0x24
 8003604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	09db      	lsrs	r3, r3, #7
 8003610:	623b      	str	r3, [r7, #32]
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	2b7f      	cmp	r3, #127	; 0x7f
 8003616:	d8f0      	bhi.n	80035fa <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	627a      	str	r2, [r7, #36]	; 0x24
 800361e:	6a3a      	ldr	r2, [r7, #32]
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	61bb      	str	r3, [r7, #24]
 8003630:	e00b      	b.n	800364a <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	1c59      	adds	r1, r3, #1
 800363a:	61f9      	str	r1, [r7, #28]
 800363c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	09db      	lsrs	r3, r3, #7
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b7f      	cmp	r3, #127	; 0x7f
 800364e:	d8f0      	bhi.n	8003632 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	61fa      	str	r2, [r7, #28]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8003660:	2207      	movs	r2, #7
 8003662:	68f9      	ldr	r1, [r7, #12]
 8003664:	6938      	ldr	r0, [r7, #16]
 8003666:	f7ff f917 	bl	8002898 <_SendPacket>
  RECORD_END();
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f383 8811 	msr	BASEPRI, r3
}
 8003670:	bf00      	nop
 8003672:	3728      	adds	r7, #40	; 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	200152c4 	.word	0x200152c4
 800367c:	20015294 	.word	0x20015294

08003680 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	089b      	lsrs	r3, r3, #2
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20015294 	.word	0x20015294

080036a4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	; 0x30
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80036ae:	4b3b      	ldr	r3, [pc, #236]	; (800379c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d06d      	beq.n	8003792 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80036b6:	4b39      	ldr	r3, [pc, #228]	; (800379c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80036bc:	2300      	movs	r3, #0
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c0:	e008      	b.n	80036d4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	3301      	adds	r3, #1
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d8:	429a      	cmp	r2, r3
 80036da:	d3f2      	bcc.n	80036c2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80036dc:	e000      	b.n	80036e0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80036de:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d055      	beq.n	8003792 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80036e6:	f3ef 8311 	mrs	r3, BASEPRI
 80036ea:	f04f 0120 	mov.w	r1, #32
 80036ee:	f381 8811 	msr	BASEPRI, r1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	482a      	ldr	r0, [pc, #168]	; (80037a0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80036f6:	f7fe fff6 	bl	80026e6 <_PreparePacket>
 80036fa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	623b      	str	r3, [r7, #32]
 8003708:	e00b      	b.n	8003722 <SEGGER_SYSVIEW_SendModule+0x7e>
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1c59      	adds	r1, r3, #1
 8003712:	6279      	str	r1, [r7, #36]	; 0x24
 8003714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	09db      	lsrs	r3, r3, #7
 8003720:	623b      	str	r3, [r7, #32]
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	2b7f      	cmp	r3, #127	; 0x7f
 8003726:	d8f0      	bhi.n	800370a <SEGGER_SYSVIEW_SendModule+0x66>
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	627a      	str	r2, [r7, #36]	; 0x24
 800372e:	6a3a      	ldr	r2, [r7, #32]
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	e00b      	b.n	800375c <SEGGER_SYSVIEW_SendModule+0xb8>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	b2da      	uxtb	r2, r3
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	1c59      	adds	r1, r3, #1
 800374c:	61f9      	str	r1, [r7, #28]
 800374e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	09db      	lsrs	r3, r3, #7
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b7f      	cmp	r3, #127	; 0x7f
 8003760:	d8f0      	bhi.n	8003744 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	61fa      	str	r2, [r7, #28]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2280      	movs	r2, #128	; 0x80
 8003778:	4619      	mov	r1, r3
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7fe ff66 	bl	800264c <_EncodeStr>
 8003780:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003782:	2216      	movs	r2, #22
 8003784:	68f9      	ldr	r1, [r7, #12]
 8003786:	6938      	ldr	r0, [r7, #16]
 8003788:	f7ff f886 	bl	8002898 <_SendPacket>
      RECORD_END();
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003792:	bf00      	nop
 8003794:	3730      	adds	r7, #48	; 0x30
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200152bc 	.word	0x200152bc
 80037a0:	200152c4 	.word	0x200152c4

080037a4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00f      	beq.n	80037d2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f2      	bne.n	80037b8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200152bc 	.word	0x200152bc

080037e0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80037e6:	f3ef 8311 	mrs	r3, BASEPRI
 80037ea:	f04f 0120 	mov.w	r1, #32
 80037ee:	f381 8811 	msr	BASEPRI, r1
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	4817      	ldr	r0, [pc, #92]	; (8003854 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80037f6:	f7fe ff76 	bl	80026e6 <_PreparePacket>
 80037fa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	4b14      	ldr	r3, [pc, #80]	; (8003858 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	e00b      	b.n	8003824 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	6179      	str	r1, [r7, #20]
 8003816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	09db      	lsrs	r3, r3, #7
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b7f      	cmp	r3, #127	; 0x7f
 8003828:	d8f0      	bhi.n	800380c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	617a      	str	r2, [r7, #20]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800383a:	221b      	movs	r2, #27
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	68b8      	ldr	r0, [r7, #8]
 8003840:	f7ff f82a 	bl	8002898 <_SendPacket>
  RECORD_END();
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f383 8811 	msr	BASEPRI, r3
}
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	200152c4 	.word	0x200152c4
 8003858:	200152c0 	.word	0x200152c0

0800385c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003864:	f3ef 8311 	mrs	r3, BASEPRI
 8003868:	f04f 0120 	mov.w	r1, #32
 800386c:	f381 8811 	msr	BASEPRI, r1
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	4827      	ldr	r0, [pc, #156]	; (8003910 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003874:	f7fe ff37 	bl	80026e6 <_PreparePacket>
 8003878:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	6938      	ldr	r0, [r7, #16]
 8003880:	f7fe fee4 	bl	800264c <_EncodeStr>
 8003884:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	2301      	movs	r3, #1
 800388c:	623b      	str	r3, [r7, #32]
 800388e:	e00b      	b.n	80038a8 <SEGGER_SYSVIEW_Warn+0x4c>
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	1c59      	adds	r1, r3, #1
 8003898:	6279      	str	r1, [r7, #36]	; 0x24
 800389a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	09db      	lsrs	r3, r3, #7
 80038a6:	623b      	str	r3, [r7, #32]
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	2b7f      	cmp	r3, #127	; 0x7f
 80038ac:	d8f0      	bhi.n	8003890 <SEGGER_SYSVIEW_Warn+0x34>
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	627a      	str	r2, [r7, #36]	; 0x24
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e00b      	b.n	80038e0 <SEGGER_SYSVIEW_Warn+0x84>
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	1c59      	adds	r1, r3, #1
 80038d0:	61f9      	str	r1, [r7, #28]
 80038d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	09db      	lsrs	r3, r3, #7
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b7f      	cmp	r3, #127	; 0x7f
 80038e4:	d8f0      	bhi.n	80038c8 <SEGGER_SYSVIEW_Warn+0x6c>
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	61fa      	str	r2, [r7, #28]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80038f6:	221a      	movs	r2, #26
 80038f8:	68f9      	ldr	r1, [r7, #12]
 80038fa:	6938      	ldr	r0, [r7, #16]
 80038fc:	f7fe ffcc 	bl	8002898 <_SendPacket>
  RECORD_END();
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f383 8811 	msr	BASEPRI, r3
}
 8003906:	bf00      	nop
 8003908:	3728      	adds	r7, #40	; 0x28
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200152c4 	.word	0x200152c4

08003914 <main>:
#ifdef USE_SEMIHOSTING
extern void initialise_monitor_handles();
#endif

int main(void)
{
 8003914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003916:	b083      	sub	sp, #12
 8003918:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
    printf("Its a hello world application\r\n");
#endif

    DWT->CTRL |= (1<<0);//Data watch point trace->cyccnt(cycle count) in arm technical rm,it keeps time stamp
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <main+0x94>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <main+0x94>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6013      	str	r3, [r2, #0]

    //reset the RCC clock cconfiguration to default reset state
	//reset state is hsi=on,pll=off,hse=off, sysclk=16MHz

    RCC_DeInit();
 8003926:	f7fc fdcf 	bl	80004c8 <RCC_DeInit>

    //update the system core clock variable
    SystemCoreClockUpdate();
 800392a:	f000 f99b 	bl	8003c64 <SystemCoreClockUpdate>

    pvtHardwareSetup();
 800392e:	f000 f88d 	bl	8003a4c <pvtHardwareSetup>

    sprintf(user_msg,"\rthis is demo of task notify project\r\n");
 8003932:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <main+0x98>)
 8003934:	4a1e      	ldr	r2, [pc, #120]	; (80039b0 <main+0x9c>)
 8003936:	4614      	mov	r4, r2
 8003938:	469c      	mov	ip, r3
 800393a:	f104 0e20 	add.w	lr, r4, #32
 800393e:	4665      	mov	r5, ip
 8003940:	4626      	mov	r6, r4
 8003942:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003944:	6028      	str	r0, [r5, #0]
 8003946:	6069      	str	r1, [r5, #4]
 8003948:	60aa      	str	r2, [r5, #8]
 800394a:	60eb      	str	r3, [r5, #12]
 800394c:	3410      	adds	r4, #16
 800394e:	f10c 0c10 	add.w	ip, ip, #16
 8003952:	4574      	cmp	r4, lr
 8003954:	d1f3      	bne.n	800393e <main+0x2a>
 8003956:	4663      	mov	r3, ip
 8003958:	4622      	mov	r2, r4
 800395a:	6810      	ldr	r0, [r2, #0]
 800395c:	6018      	str	r0, [r3, #0]
 800395e:	8891      	ldrh	r1, [r2, #4]
 8003960:	7992      	ldrb	r2, [r2, #6]
 8003962:	8099      	strh	r1, [r3, #4]
 8003964:	719a      	strb	r2, [r3, #6]
    printmsg(user_msg);
 8003966:	4811      	ldr	r0, [pc, #68]	; (80039ac <main+0x98>)
 8003968:	f000 f8fe 	bl	8003b68 <printmsg>

    //Start recording
    SEGGER_SYSVIEW_Conf();
 800396c:	f7fe fb12 	bl	8001f94 <SEGGER_SYSVIEW_Conf>
    SEGGER_SYSVIEW_Start();
 8003970:	f7ff f9fa 	bl	8002d68 <SEGGER_SYSVIEW_Start>

    //create two tasks:LED-TASK and BUTTON-TASK
    xTaskCreate(LED_Task_handler, "LED_TASK", 500, NULL, 2, &xTask1Handle);//stack size:500*4=~2kb
 8003974:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <main+0xa0>)
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	2302      	movs	r3, #2
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2300      	movs	r3, #0
 800397e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003982:	490d      	ldr	r1, [pc, #52]	; (80039b8 <main+0xa4>)
 8003984:	480d      	ldr	r0, [pc, #52]	; (80039bc <main+0xa8>)
 8003986:	f7fd f8cd 	bl	8000b24 <xTaskCreate>
    xTaskCreate(Button_Task_handler, "BUTTON-TASK", 500, NULL, 2, &xTask2Handle);
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <main+0xac>)
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	2302      	movs	r3, #2
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	2300      	movs	r3, #0
 8003994:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003998:	490a      	ldr	r1, [pc, #40]	; (80039c4 <main+0xb0>)
 800399a:	480b      	ldr	r0, [pc, #44]	; (80039c8 <main+0xb4>)
 800399c:	f7fd f8c2 	bl	8000b24 <xTaskCreate>
    //start the scheduler
    vTaskStartScheduler();
 80039a0:	f7fd fa1c 	bl	8000ddc <vTaskStartScheduler>
	for(;;);
 80039a4:	e7fe      	b.n	80039a4 <main+0x90>
 80039a6:	bf00      	nop
 80039a8:	e0001000 	.word	0xe0001000
 80039ac:	20015464 	.word	0x20015464
 80039b0:	0800493c 	.word	0x0800493c
 80039b4:	200153a8 	.word	0x200153a8
 80039b8:	08004964 	.word	0x08004964
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	200153ac 	.word	0x200153ac
 80039c4:	08004970 	.word	0x08004970
 80039c8:	08003a15 	.word	0x08003a15

080039cc <LED_Task_handler>:
}

void LED_Task_handler(void* params){
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	uint32_t current_notification_value;
	while(1){
		//led task is blocked or waits until it receives any notification from button task
		if(xTaskNotifyWait(0, 0, &current_notification_value, portMAX_DELAY)==pdTRUE){
 80039d4:	f107 020c 	add.w	r2, r7, #12
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	2100      	movs	r1, #0
 80039de:	2000      	movs	r0, #0
 80039e0:	f7fd fcfa 	bl	80013d8 <xTaskNotifyWait>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d1f4      	bne.n	80039d4 <LED_Task_handler+0x8>
			//notification is received,so lets toggle the led
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 80039ea:	2120      	movs	r1, #32
 80039ec:	4806      	ldr	r0, [pc, #24]	; (8003a08 <LED_Task_handler+0x3c>)
 80039ee:	f7fc fd0f 	bl	8000410 <GPIO_ToggleBits>
			sprintf(user_msg,"The button is pressed %lu times \r\n",current_notification_value);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	461a      	mov	r2, r3
 80039f6:	4905      	ldr	r1, [pc, #20]	; (8003a0c <LED_Task_handler+0x40>)
 80039f8:	4805      	ldr	r0, [pc, #20]	; (8003a10 <LED_Task_handler+0x44>)
 80039fa:	f000 fb07 	bl	800400c <siprintf>
			printmsg(user_msg);
 80039fe:	4804      	ldr	r0, [pc, #16]	; (8003a10 <LED_Task_handler+0x44>)
 8003a00:	f000 f8b2 	bl	8003b68 <printmsg>
		if(xTaskNotifyWait(0, 0, &current_notification_value, portMAX_DELAY)==pdTRUE){
 8003a04:	e7e6      	b.n	80039d4 <LED_Task_handler+0x8>
 8003a06:	bf00      	nop
 8003a08:	40020000 	.word	0x40020000
 8003a0c:	0800497c 	.word	0x0800497c
 8003a10:	20015464 	.word	0x20015464

08003a14 <Button_Task_handler>:
		}

	}


void Button_Task_handler(void* params){
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	while(1){
		if(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)){
 8003a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a20:	4808      	ldr	r0, [pc, #32]	; (8003a44 <Button_Task_handler+0x30>)
 8003a22:	f7fc fcdb 	bl	80003dc <GPIO_ReadInputDataBit>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f7      	bne.n	8003a1c <Button_Task_handler+0x8>
			//button is pressed
			//100 ms delay for debouncing
			rtos_delay(200);
 8003a2c:	20c8      	movs	r0, #200	; 0xc8
 8003a2e:	f000 f8c3 	bl	8003bb8 <rtos_delay>
			//send notification to led task
			xTaskNotify(xTask1Handle,0x0,eIncrement);
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <Button_Task_handler+0x34>)
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	2300      	movs	r3, #0
 8003a38:	2202      	movs	r2, #2
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f7fd fd30 	bl	80014a0 <xTaskGenericNotify>
		if(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)){
 8003a40:	e7ec      	b.n	8003a1c <Button_Task_handler+0x8>
 8003a42:	bf00      	nop
 8003a44:	40020800 	.word	0x40020800
 8003a48:	200153a8 	.word	0x200153a8

08003a4c <pvtHardwareSetup>:

		}
		}
	}

static void pvtHardwareSetup(void){
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
	UART2_Setup();
 8003a50:	f000 f83c 	bl	8003acc <UART2_Setup>
	//Configure button PC13 and LED PA5
	GPIO_Setup();
 8003a54:	f000 f802 	bl	8003a5c <GPIO_Setup>


}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <GPIO_Setup>:



static void GPIO_Setup(void){
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef buttonGPIO,LED_GPIO;
	memset(&buttonGPIO,0,sizeof(buttonGPIO));
 8003a62:	f107 0308 	add.w	r3, r7, #8
 8003a66:	2208      	movs	r2, #8
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fac6 	bl	8003ffc <memset>
	memset(&LED_GPIO,0,sizeof(LED_GPIO));
 8003a70:	463b      	mov	r3, r7
 8003a72:	2208      	movs	r2, #8
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fac0 	bl	8003ffc <memset>

	//enable clock for gpioa and gpioc
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f7fc fe54 	bl	800072c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003a84:	2101      	movs	r1, #1
 8003a86:	2004      	movs	r0, #4
 8003a88:	f7fc fe50 	bl	800072c <RCC_AHB1PeriphClockCmd>

	//configure led pin pa5 as output
	LED_GPIO.GPIO_Pin=GPIO_Pin_5;
 8003a8c:	2320      	movs	r3, #32
 8003a8e:	603b      	str	r3, [r7, #0]
	LED_GPIO.GPIO_Mode=GPIO_Mode_OUT;
 8003a90:	2301      	movs	r3, #1
 8003a92:	713b      	strb	r3, [r7, #4]
	LED_GPIO.GPIO_OType=GPIO_OType_PP;
 8003a94:	2300      	movs	r3, #0
 8003a96:	71bb      	strb	r3, [r7, #6]
	LED_GPIO.GPIO_PuPd=GPIO_PuPd_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOA, &LED_GPIO);
 8003a9c:	463b      	mov	r3, r7
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4808      	ldr	r0, [pc, #32]	; (8003ac4 <GPIO_Setup+0x68>)
 8003aa2:	f7fc fc0d 	bl	80002c0 <GPIO_Init>

	//configure button gpio pc13 as input
	buttonGPIO.GPIO_Pin=GPIO_Pin_13;
 8003aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aaa:	60bb      	str	r3, [r7, #8]
	buttonGPIO.GPIO_Mode=GPIO_Mode_IN;
 8003aac:	2300      	movs	r3, #0
 8003aae:	733b      	strb	r3, [r7, #12]

	GPIO_Init(GPIOC, &buttonGPIO);
 8003ab0:	f107 0308 	add.w	r3, r7, #8
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4804      	ldr	r0, [pc, #16]	; (8003ac8 <GPIO_Setup+0x6c>)
 8003ab8:	f7fc fc02 	bl	80002c0 <GPIO_Init>

}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40020000 	.word	0x40020000
 8003ac8:	40020800 	.word	0x40020800

08003acc <UART2_Setup>:

static void UART2_Setup(void){
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
	    GPIO_InitTypeDef UART_Gpio;
		memset(&UART_Gpio,0,sizeof(UART_Gpio));
 8003ad2:	f107 0310 	add.w	r3, r7, #16
 8003ad6:	2208      	movs	r2, #8
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fa8e 	bl	8003ffc <memset>
		USART_InitTypeDef UART_Handle;
		memset(&UART_Handle,0,sizeof(UART_Handle));
 8003ae0:	463b      	mov	r3, r7
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fa88 	bl	8003ffc <memset>

	//enable clock for uart peripheral and gpioa peripheral
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8003aec:	2101      	movs	r1, #1
 8003aee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003af2:	f7fc fe3b 	bl	800076c <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003af6:	2101      	movs	r1, #1
 8003af8:	2001      	movs	r0, #1
 8003afa:	f7fc fe17 	bl	800072c <RCC_AHB1PeriphClockCmd>

		//configure pa2 as uart_tx and pa3 as uart_rx

		UART_Gpio.GPIO_Pin=GPIO_Pin_2 | GPIO_Pin_3;
 8003afe:	230c      	movs	r3, #12
 8003b00:	613b      	str	r3, [r7, #16]
		UART_Gpio.GPIO_Mode=GPIO_Mode_AF;
 8003b02:	2302      	movs	r3, #2
 8003b04:	753b      	strb	r3, [r7, #20]
		UART_Gpio.GPIO_PuPd=GPIO_PuPd_UP;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
		GPIO_Init(GPIOA, &UART_Gpio);
 8003b0a:	f107 0310 	add.w	r3, r7, #16
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4813      	ldr	r0, [pc, #76]	; (8003b60 <UART2_Setup+0x94>)
 8003b12:	f7fc fbd5 	bl	80002c0 <GPIO_Init>

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);//PA2 CONFIG AF7
 8003b16:	2207      	movs	r2, #7
 8003b18:	2102      	movs	r1, #2
 8003b1a:	4811      	ldr	r0, [pc, #68]	; (8003b60 <UART2_Setup+0x94>)
 8003b1c:	f7fc fc8a 	bl	8000434 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);//PA3 CONFIG AF7
 8003b20:	2207      	movs	r2, #7
 8003b22:	2103      	movs	r1, #3
 8003b24:	480e      	ldr	r0, [pc, #56]	; (8003b60 <UART2_Setup+0x94>)
 8003b26:	f7fc fc85 	bl	8000434 <GPIO_PinAFConfig>

		//UART PERIPHERAL CONFIGURATION
		UART_Handle.USART_BaudRate=115200;
 8003b2a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003b2e:	603b      	str	r3, [r7, #0]
		UART_Handle.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 8003b30:	2300      	movs	r3, #0
 8003b32:	81bb      	strh	r3, [r7, #12]
		UART_Handle.USART_Mode=USART_Mode_Tx | USART_Mode_Rx;
 8003b34:	230c      	movs	r3, #12
 8003b36:	817b      	strh	r3, [r7, #10]
		UART_Handle.USART_Parity=USART_Parity_No;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	813b      	strh	r3, [r7, #8]
		UART_Handle.USART_StopBits=USART_StopBits_1;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	80fb      	strh	r3, [r7, #6]
		UART_Handle.USART_WordLength=USART_WordLength_8b;
 8003b40:	2300      	movs	r3, #0
 8003b42:	80bb      	strh	r3, [r7, #4]

		USART_Init(USART2, &UART_Handle);
 8003b44:	463b      	mov	r3, r7
 8003b46:	4619      	mov	r1, r3
 8003b48:	4806      	ldr	r0, [pc, #24]	; (8003b64 <UART2_Setup+0x98>)
 8003b4a:	f7fc fe2f 	bl	80007ac <USART_Init>
		USART_Cmd(USART2, ENABLE);
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4804      	ldr	r0, [pc, #16]	; (8003b64 <UART2_Setup+0x98>)
 8003b52:	f7fc fee5 	bl	8000920 <USART_Cmd>

}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40020000 	.word	0x40020000
 8003b64:	40004400 	.word	0x40004400

08003b68 <printmsg>:


void printmsg(char* msg){
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

	for(uint32_t i=0;i<strlen(msg);i++){
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e013      	b.n	8003b9e <printmsg+0x36>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)==RESET);
 8003b76:	bf00      	nop
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	480e      	ldr	r0, [pc, #56]	; (8003bb4 <printmsg+0x4c>)
 8003b7c:	f7fc ff02 	bl	8000984 <USART_GetFlagStatus>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f8      	beq.n	8003b78 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	4619      	mov	r1, r3
 8003b92:	4808      	ldr	r0, [pc, #32]	; (8003bb4 <printmsg+0x4c>)
 8003b94:	f7fc fee4 	bl	8000960 <USART_SendData>
	for(uint32_t i=0;i<strlen(msg);i++){
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fc fb36 	bl	8000210 <strlen>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d3e4      	bcc.n	8003b76 <printmsg+0xe>
	}

}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40004400 	.word	0x40004400

08003bb8 <rtos_delay>:

void rtos_delay(uint32_t Delay_In_Ms){
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	uint32_t currect_tick_count=xTaskGetTickCount();
 8003bc0:	f7fd fa10 	bl	8000fe4 <xTaskGetTickCount>
 8003bc4:	60f8      	str	r0, [r7, #12]
	//convert from ms to number of ticks
	uint32_t Delay_In_Ticks=(Delay_In_Ms*configTICK_RATE_HZ)/1000;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bcc:	fb02 f303 	mul.w	r3, r2, r3
 8003bd0:	4a08      	ldr	r2, [pc, #32]	; (8003bf4 <rtos_delay+0x3c>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount()<(currect_tick_count+Delay_In_Ticks));
 8003bda:	bf00      	nop
 8003bdc:	f7fd fa02 	bl	8000fe4 <xTaskGetTickCount>
 8003be0:	4601      	mov	r1, r0
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4413      	add	r3, r2
 8003be8:	4299      	cmp	r1, r3
 8003bea:	d3f7      	bcc.n	8003bdc <rtos_delay+0x24>

}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	10624dd3 	.word	0x10624dd3

08003bf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bfc:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <SystemInit+0x60>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <SystemInit+0x60>)
 8003c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003c0c:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <SystemInit+0x64>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <SystemInit+0x64>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c18:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <SystemInit+0x64>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <SystemInit+0x64>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a0e      	ldr	r2, [pc, #56]	; (8003c5c <SystemInit+0x64>)
 8003c24:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <SystemInit+0x64>)
 8003c30:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <SystemInit+0x68>)
 8003c32:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <SystemInit+0x64>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <SystemInit+0x64>)
 8003c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <SystemInit+0x64>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003c46:	f000 f8db 	bl	8003e00 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c4a:	4b03      	ldr	r3, [pc, #12]	; (8003c58 <SystemInit+0x60>)
 8003c4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c50:	609a      	str	r2, [r3, #8]
#endif
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	e000ed00 	.word	0xe000ed00
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	24003010 	.word	0x24003010

08003c64 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	2302      	movs	r3, #2
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003c82:	4b5a      	ldr	r3, [pc, #360]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	f200 8092 	bhi.w	8003db8 <SystemCoreClockUpdate+0x154>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <SystemCoreClockUpdate+0x38>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cd1 	.word	0x08003cd1
 8003ca0:	08003db9 	.word	0x08003db9
 8003ca4:	08003db9 	.word	0x08003db9
 8003ca8:	08003db9 	.word	0x08003db9
 8003cac:	08003cd9 	.word	0x08003cd9
 8003cb0:	08003db9 	.word	0x08003db9
 8003cb4:	08003db9 	.word	0x08003db9
 8003cb8:	08003db9 	.word	0x08003db9
 8003cbc:	08003ce1 	.word	0x08003ce1
 8003cc0:	08003db9 	.word	0x08003db9
 8003cc4:	08003db9 	.word	0x08003db9
 8003cc8:	08003db9 	.word	0x08003db9
 8003ccc:	08003d4d 	.word	0x08003d4d
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003cd0:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <SystemCoreClockUpdate+0x18c>)
 8003cd2:	4a48      	ldr	r2, [pc, #288]	; (8003df4 <SystemCoreClockUpdate+0x190>)
 8003cd4:	601a      	str	r2, [r3, #0]
      break;
 8003cd6:	e073      	b.n	8003dc0 <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003cd8:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <SystemCoreClockUpdate+0x18c>)
 8003cda:	4a47      	ldr	r2, [pc, #284]	; (8003df8 <SystemCoreClockUpdate+0x194>)
 8003cdc:	601a      	str	r2, [r3, #0]
      break;
 8003cde:	e06f      	b.n	8003dc0 <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003ce0:	4b42      	ldr	r3, [pc, #264]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	0d9b      	lsrs	r3, r3, #22
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cec:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf4:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00c      	beq.n	8003d16 <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003cfc:	4a3e      	ldr	r2, [pc, #248]	; (8003df8 <SystemCoreClockUpdate+0x194>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	4a39      	ldr	r2, [pc, #228]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003d06:	6852      	ldr	r2, [r2, #4]
 8003d08:	0992      	lsrs	r2, r2, #6
 8003d0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e00b      	b.n	8003d2e <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003d16:	4a37      	ldr	r2, [pc, #220]	; (8003df4 <SystemCoreClockUpdate+0x190>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	4a33      	ldr	r2, [pc, #204]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003d20:	6852      	ldr	r2, [r2, #4]
 8003d22:	0992      	lsrs	r2, r2, #6
 8003d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003d2e:	4b2f      	ldr	r3, [pc, #188]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d46:	4a2a      	ldr	r2, [pc, #168]	; (8003df0 <SystemCoreClockUpdate+0x18c>)
 8003d48:	6013      	str	r3, [r2, #0]
      break;
 8003d4a:	e039      	b.n	8003dc0 <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003d4c:	4b27      	ldr	r3, [pc, #156]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0d9b      	lsrs	r3, r3, #22
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d58:	4b24      	ldr	r3, [pc, #144]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d60:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00c      	beq.n	8003d82 <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003d68:	4a23      	ldr	r2, [pc, #140]	; (8003df8 <SystemCoreClockUpdate+0x194>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003d72:	6852      	ldr	r2, [r2, #4]
 8003d74:	0992      	lsrs	r2, r2, #6
 8003d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e00b      	b.n	8003d9a <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003d82:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <SystemCoreClockUpdate+0x190>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	4a18      	ldr	r2, [pc, #96]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003d8c:	6852      	ldr	r2, [r2, #4]
 8003d8e:	0992      	lsrs	r2, r2, #6
 8003d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d94:	fb02 f303 	mul.w	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8003d9a:	4b14      	ldr	r3, [pc, #80]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	0f1b      	lsrs	r3, r3, #28
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	3301      	adds	r3, #1
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <SystemCoreClockUpdate+0x18c>)
 8003db4:	6013      	str	r3, [r2, #0]
      break;
 8003db6:	e003      	b.n	8003dc0 <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <SystemCoreClockUpdate+0x18c>)
 8003dba:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <SystemCoreClockUpdate+0x190>)
 8003dbc:	601a      	str	r2, [r3, #0]
      break;
 8003dbe:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <SystemCoreClockUpdate+0x188>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	4a0c      	ldr	r2, [pc, #48]	; (8003dfc <SystemCoreClockUpdate+0x198>)
 8003dcc:	5cd3      	ldrb	r3, [r2, r3]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <SystemCoreClockUpdate+0x18c>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <SystemCoreClockUpdate+0x18c>)
 8003dde:	6013      	str	r3, [r2, #0]
}
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40023800 	.word	0x40023800
 8003df0:	20000014 	.word	0x20000014
 8003df4:	00f42400 	.word	0x00f42400
 8003df8:	007a1200 	.word	0x007a1200
 8003dfc:	20000018 	.word	0x20000018

08003e00 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003e0e:	4b43      	ldr	r3, [pc, #268]	; (8003f1c <SetSysClock+0x11c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a42      	ldr	r2, [pc, #264]	; (8003f1c <SetSysClock+0x11c>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e18:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003e1a:	4b40      	ldr	r3, [pc, #256]	; (8003f1c <SetSysClock+0x11c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3301      	adds	r3, #1
 8003e28:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d103      	bne.n	8003e38 <SetSysClock+0x38>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e36:	d1f0      	bne.n	8003e1a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003e38:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <SetSysClock+0x11c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003e44:	2301      	movs	r3, #1
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	e001      	b.n	8003e4e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d15c      	bne.n	8003f0e <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003e54:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <SetSysClock+0x11c>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	4a30      	ldr	r2, [pc, #192]	; (8003f1c <SetSysClock+0x11c>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003e60:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <SetSysClock+0x120>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2e      	ldr	r2, [pc, #184]	; (8003f20 <SetSysClock+0x120>)
 8003e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e6a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <SetSysClock+0x11c>)
 8003e6e:	4a2b      	ldr	r2, [pc, #172]	; (8003f1c <SetSysClock+0x11c>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003e74:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <SetSysClock+0x11c>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4a28      	ldr	r2, [pc, #160]	; (8003f1c <SetSysClock+0x11c>)
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003e80:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <SetSysClock+0x11c>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a25      	ldr	r2, [pc, #148]	; (8003f1c <SetSysClock+0x11c>)
 8003e86:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003e8a:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003e8c:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <SetSysClock+0x11c>)
 8003e8e:	4a25      	ldr	r2, [pc, #148]	; (8003f24 <SetSysClock+0x124>)
 8003e90:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <SetSysClock+0x11c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <SetSysClock+0x11c>)
 8003e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003e9e:	bf00      	nop
 8003ea0:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <SetSysClock+0x11c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f9      	beq.n	8003ea0 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8003eac:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <SetSysClock+0x120>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	; (8003f20 <SetSysClock+0x120>)
 8003eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb6:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8003eb8:	bf00      	nop
 8003eba:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <SetSysClock+0x120>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f9      	beq.n	8003eba <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8003ec6:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <SetSysClock+0x120>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <SetSysClock+0x120>)
 8003ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed0:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8003ed2:	bf00      	nop
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <SetSysClock+0x120>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f9      	beq.n	8003ed4 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003ee0:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <SetSysClock+0x128>)
 8003ee2:	f240 7205 	movw	r2, #1797	; 0x705
 8003ee6:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <SetSysClock+0x11c>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <SetSysClock+0x11c>)
 8003eee:	f023 0303 	bic.w	r3, r3, #3
 8003ef2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <SetSysClock+0x11c>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <SetSysClock+0x11c>)
 8003efa:	f043 0302 	orr.w	r3, r3, #2
 8003efe:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003f00:	bf00      	nop
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <SetSysClock+0x11c>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d1f9      	bne.n	8003f02 <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40007000 	.word	0x40007000
 8003f24:	77405a08 	.word	0x77405a08
 8003f28:	40023c00 	.word	0x40023c00

08003f2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f2c:	480d      	ldr	r0, [pc, #52]	; (8003f64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f30:	480d      	ldr	r0, [pc, #52]	; (8003f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f32:	490e      	ldr	r1, [pc, #56]	; (8003f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f34:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <LoopForever+0xe>)
  movs r3, #0
 8003f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f38:	e002      	b.n	8003f40 <LoopCopyDataInit>

08003f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f3e:	3304      	adds	r3, #4

08003f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f44:	d3f9      	bcc.n	8003f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f46:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f48:	4c0b      	ldr	r4, [pc, #44]	; (8003f78 <LoopForever+0x16>)
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f4c:	e001      	b.n	8003f52 <LoopFillZerobss>

08003f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f50:	3204      	adds	r2, #4

08003f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f54:	d3fb      	bcc.n	8003f4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003f56:	f7ff fe4f 	bl	8003bf8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003f5a:	f000 f811 	bl	8003f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f5e:	f7ff fcd9 	bl	8003914 <main>

08003f62 <LoopForever>:

LoopForever:
    b LoopForever
 8003f62:	e7fe      	b.n	8003f62 <LoopForever>
  ldr   r0, =_estack
 8003f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f6c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003f70:	08004a50 	.word	0x08004a50
  ldr r2, =_sbss
 8003f74:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003f78:	200154cc 	.word	0x200154cc

08003f7c <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f7c:	e7fe      	b.n	8003f7c <ADC_IRQHandler>
	...

08003f80 <__libc_init_array>:
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	4e0d      	ldr	r6, [pc, #52]	; (8003fb8 <__libc_init_array+0x38>)
 8003f84:	4c0d      	ldr	r4, [pc, #52]	; (8003fbc <__libc_init_array+0x3c>)
 8003f86:	1ba4      	subs	r4, r4, r6
 8003f88:	10a4      	asrs	r4, r4, #2
 8003f8a:	2500      	movs	r5, #0
 8003f8c:	42a5      	cmp	r5, r4
 8003f8e:	d109      	bne.n	8003fa4 <__libc_init_array+0x24>
 8003f90:	4e0b      	ldr	r6, [pc, #44]	; (8003fc0 <__libc_init_array+0x40>)
 8003f92:	4c0c      	ldr	r4, [pc, #48]	; (8003fc4 <__libc_init_array+0x44>)
 8003f94:	f000 fc60 	bl	8004858 <_init>
 8003f98:	1ba4      	subs	r4, r4, r6
 8003f9a:	10a4      	asrs	r4, r4, #2
 8003f9c:	2500      	movs	r5, #0
 8003f9e:	42a5      	cmp	r5, r4
 8003fa0:	d105      	bne.n	8003fae <__libc_init_array+0x2e>
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fa8:	4798      	blx	r3
 8003faa:	3501      	adds	r5, #1
 8003fac:	e7ee      	b.n	8003f8c <__libc_init_array+0xc>
 8003fae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fb2:	4798      	blx	r3
 8003fb4:	3501      	adds	r5, #1
 8003fb6:	e7f2      	b.n	8003f9e <__libc_init_array+0x1e>
 8003fb8:	08004a48 	.word	0x08004a48
 8003fbc:	08004a48 	.word	0x08004a48
 8003fc0:	08004a48 	.word	0x08004a48
 8003fc4:	08004a4c 	.word	0x08004a4c

08003fc8 <memcmp>:
 8003fc8:	b530      	push	{r4, r5, lr}
 8003fca:	2400      	movs	r4, #0
 8003fcc:	42a2      	cmp	r2, r4
 8003fce:	d101      	bne.n	8003fd4 <memcmp+0xc>
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e007      	b.n	8003fe4 <memcmp+0x1c>
 8003fd4:	5d03      	ldrb	r3, [r0, r4]
 8003fd6:	3401      	adds	r4, #1
 8003fd8:	190d      	adds	r5, r1, r4
 8003fda:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003fde:	42ab      	cmp	r3, r5
 8003fe0:	d0f4      	beq.n	8003fcc <memcmp+0x4>
 8003fe2:	1b58      	subs	r0, r3, r5
 8003fe4:	bd30      	pop	{r4, r5, pc}

08003fe6 <memcpy>:
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	1e43      	subs	r3, r0, #1
 8003fea:	440a      	add	r2, r1
 8003fec:	4291      	cmp	r1, r2
 8003fee:	d100      	bne.n	8003ff2 <memcpy+0xc>
 8003ff0:	bd10      	pop	{r4, pc}
 8003ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ffa:	e7f7      	b.n	8003fec <memcpy+0x6>

08003ffc <memset>:
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4603      	mov	r3, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <siprintf>:
 800400c:	b40e      	push	{r1, r2, r3}
 800400e:	b500      	push	{lr}
 8004010:	b09c      	sub	sp, #112	; 0x70
 8004012:	ab1d      	add	r3, sp, #116	; 0x74
 8004014:	9002      	str	r0, [sp, #8]
 8004016:	9006      	str	r0, [sp, #24]
 8004018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800401c:	4809      	ldr	r0, [pc, #36]	; (8004044 <siprintf+0x38>)
 800401e:	9107      	str	r1, [sp, #28]
 8004020:	9104      	str	r1, [sp, #16]
 8004022:	4909      	ldr	r1, [pc, #36]	; (8004048 <siprintf+0x3c>)
 8004024:	f853 2b04 	ldr.w	r2, [r3], #4
 8004028:	9105      	str	r1, [sp, #20]
 800402a:	6800      	ldr	r0, [r0, #0]
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	a902      	add	r1, sp, #8
 8004030:	f000 f866 	bl	8004100 <_svfiprintf_r>
 8004034:	9b02      	ldr	r3, [sp, #8]
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	b01c      	add	sp, #112	; 0x70
 800403c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004040:	b003      	add	sp, #12
 8004042:	4770      	bx	lr
 8004044:	20000028 	.word	0x20000028
 8004048:	ffff0208 	.word	0xffff0208

0800404c <__ssputs_r>:
 800404c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004050:	688e      	ldr	r6, [r1, #8]
 8004052:	429e      	cmp	r6, r3
 8004054:	4682      	mov	sl, r0
 8004056:	460c      	mov	r4, r1
 8004058:	4690      	mov	r8, r2
 800405a:	4699      	mov	r9, r3
 800405c:	d837      	bhi.n	80040ce <__ssputs_r+0x82>
 800405e:	898a      	ldrh	r2, [r1, #12]
 8004060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004064:	d031      	beq.n	80040ca <__ssputs_r+0x7e>
 8004066:	6825      	ldr	r5, [r4, #0]
 8004068:	6909      	ldr	r1, [r1, #16]
 800406a:	1a6f      	subs	r7, r5, r1
 800406c:	6965      	ldr	r5, [r4, #20]
 800406e:	2302      	movs	r3, #2
 8004070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004074:	fb95 f5f3 	sdiv	r5, r5, r3
 8004078:	f109 0301 	add.w	r3, r9, #1
 800407c:	443b      	add	r3, r7
 800407e:	429d      	cmp	r5, r3
 8004080:	bf38      	it	cc
 8004082:	461d      	movcc	r5, r3
 8004084:	0553      	lsls	r3, r2, #21
 8004086:	d530      	bpl.n	80040ea <__ssputs_r+0x9e>
 8004088:	4629      	mov	r1, r5
 800408a:	f000 fb21 	bl	80046d0 <_malloc_r>
 800408e:	4606      	mov	r6, r0
 8004090:	b950      	cbnz	r0, 80040a8 <__ssputs_r+0x5c>
 8004092:	230c      	movs	r3, #12
 8004094:	f8ca 3000 	str.w	r3, [sl]
 8004098:	89a3      	ldrh	r3, [r4, #12]
 800409a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409e:	81a3      	strh	r3, [r4, #12]
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295
 80040a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a8:	463a      	mov	r2, r7
 80040aa:	6921      	ldr	r1, [r4, #16]
 80040ac:	f7ff ff9b 	bl	8003fe6 <memcpy>
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ba:	81a3      	strh	r3, [r4, #12]
 80040bc:	6126      	str	r6, [r4, #16]
 80040be:	6165      	str	r5, [r4, #20]
 80040c0:	443e      	add	r6, r7
 80040c2:	1bed      	subs	r5, r5, r7
 80040c4:	6026      	str	r6, [r4, #0]
 80040c6:	60a5      	str	r5, [r4, #8]
 80040c8:	464e      	mov	r6, r9
 80040ca:	454e      	cmp	r6, r9
 80040cc:	d900      	bls.n	80040d0 <__ssputs_r+0x84>
 80040ce:	464e      	mov	r6, r9
 80040d0:	4632      	mov	r2, r6
 80040d2:	4641      	mov	r1, r8
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	f000 fa93 	bl	8004600 <memmove>
 80040da:	68a3      	ldr	r3, [r4, #8]
 80040dc:	1b9b      	subs	r3, r3, r6
 80040de:	60a3      	str	r3, [r4, #8]
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	441e      	add	r6, r3
 80040e4:	6026      	str	r6, [r4, #0]
 80040e6:	2000      	movs	r0, #0
 80040e8:	e7dc      	b.n	80040a4 <__ssputs_r+0x58>
 80040ea:	462a      	mov	r2, r5
 80040ec:	f000 fb4a 	bl	8004784 <_realloc_r>
 80040f0:	4606      	mov	r6, r0
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d1e2      	bne.n	80040bc <__ssputs_r+0x70>
 80040f6:	6921      	ldr	r1, [r4, #16]
 80040f8:	4650      	mov	r0, sl
 80040fa:	f000 fa9b 	bl	8004634 <_free_r>
 80040fe:	e7c8      	b.n	8004092 <__ssputs_r+0x46>

08004100 <_svfiprintf_r>:
 8004100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004104:	461d      	mov	r5, r3
 8004106:	898b      	ldrh	r3, [r1, #12]
 8004108:	061f      	lsls	r7, r3, #24
 800410a:	b09d      	sub	sp, #116	; 0x74
 800410c:	4680      	mov	r8, r0
 800410e:	460c      	mov	r4, r1
 8004110:	4616      	mov	r6, r2
 8004112:	d50f      	bpl.n	8004134 <_svfiprintf_r+0x34>
 8004114:	690b      	ldr	r3, [r1, #16]
 8004116:	b96b      	cbnz	r3, 8004134 <_svfiprintf_r+0x34>
 8004118:	2140      	movs	r1, #64	; 0x40
 800411a:	f000 fad9 	bl	80046d0 <_malloc_r>
 800411e:	6020      	str	r0, [r4, #0]
 8004120:	6120      	str	r0, [r4, #16]
 8004122:	b928      	cbnz	r0, 8004130 <_svfiprintf_r+0x30>
 8004124:	230c      	movs	r3, #12
 8004126:	f8c8 3000 	str.w	r3, [r8]
 800412a:	f04f 30ff 	mov.w	r0, #4294967295
 800412e:	e0c8      	b.n	80042c2 <_svfiprintf_r+0x1c2>
 8004130:	2340      	movs	r3, #64	; 0x40
 8004132:	6163      	str	r3, [r4, #20]
 8004134:	2300      	movs	r3, #0
 8004136:	9309      	str	r3, [sp, #36]	; 0x24
 8004138:	2320      	movs	r3, #32
 800413a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800413e:	2330      	movs	r3, #48	; 0x30
 8004140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004144:	9503      	str	r5, [sp, #12]
 8004146:	f04f 0b01 	mov.w	fp, #1
 800414a:	4637      	mov	r7, r6
 800414c:	463d      	mov	r5, r7
 800414e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004152:	b10b      	cbz	r3, 8004158 <_svfiprintf_r+0x58>
 8004154:	2b25      	cmp	r3, #37	; 0x25
 8004156:	d13e      	bne.n	80041d6 <_svfiprintf_r+0xd6>
 8004158:	ebb7 0a06 	subs.w	sl, r7, r6
 800415c:	d00b      	beq.n	8004176 <_svfiprintf_r+0x76>
 800415e:	4653      	mov	r3, sl
 8004160:	4632      	mov	r2, r6
 8004162:	4621      	mov	r1, r4
 8004164:	4640      	mov	r0, r8
 8004166:	f7ff ff71 	bl	800404c <__ssputs_r>
 800416a:	3001      	adds	r0, #1
 800416c:	f000 80a4 	beq.w	80042b8 <_svfiprintf_r+0x1b8>
 8004170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004172:	4453      	add	r3, sl
 8004174:	9309      	str	r3, [sp, #36]	; 0x24
 8004176:	783b      	ldrb	r3, [r7, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 809d 	beq.w	80042b8 <_svfiprintf_r+0x1b8>
 800417e:	2300      	movs	r3, #0
 8004180:	f04f 32ff 	mov.w	r2, #4294967295
 8004184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004188:	9304      	str	r3, [sp, #16]
 800418a:	9307      	str	r3, [sp, #28]
 800418c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004190:	931a      	str	r3, [sp, #104]	; 0x68
 8004192:	462f      	mov	r7, r5
 8004194:	2205      	movs	r2, #5
 8004196:	f817 1b01 	ldrb.w	r1, [r7], #1
 800419a:	4850      	ldr	r0, [pc, #320]	; (80042dc <_svfiprintf_r+0x1dc>)
 800419c:	f7fc f840 	bl	8000220 <memchr>
 80041a0:	9b04      	ldr	r3, [sp, #16]
 80041a2:	b9d0      	cbnz	r0, 80041da <_svfiprintf_r+0xda>
 80041a4:	06d9      	lsls	r1, r3, #27
 80041a6:	bf44      	itt	mi
 80041a8:	2220      	movmi	r2, #32
 80041aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041ae:	071a      	lsls	r2, r3, #28
 80041b0:	bf44      	itt	mi
 80041b2:	222b      	movmi	r2, #43	; 0x2b
 80041b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041b8:	782a      	ldrb	r2, [r5, #0]
 80041ba:	2a2a      	cmp	r2, #42	; 0x2a
 80041bc:	d015      	beq.n	80041ea <_svfiprintf_r+0xea>
 80041be:	9a07      	ldr	r2, [sp, #28]
 80041c0:	462f      	mov	r7, r5
 80041c2:	2000      	movs	r0, #0
 80041c4:	250a      	movs	r5, #10
 80041c6:	4639      	mov	r1, r7
 80041c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041cc:	3b30      	subs	r3, #48	; 0x30
 80041ce:	2b09      	cmp	r3, #9
 80041d0:	d94d      	bls.n	800426e <_svfiprintf_r+0x16e>
 80041d2:	b1b8      	cbz	r0, 8004204 <_svfiprintf_r+0x104>
 80041d4:	e00f      	b.n	80041f6 <_svfiprintf_r+0xf6>
 80041d6:	462f      	mov	r7, r5
 80041d8:	e7b8      	b.n	800414c <_svfiprintf_r+0x4c>
 80041da:	4a40      	ldr	r2, [pc, #256]	; (80042dc <_svfiprintf_r+0x1dc>)
 80041dc:	1a80      	subs	r0, r0, r2
 80041de:	fa0b f000 	lsl.w	r0, fp, r0
 80041e2:	4318      	orrs	r0, r3
 80041e4:	9004      	str	r0, [sp, #16]
 80041e6:	463d      	mov	r5, r7
 80041e8:	e7d3      	b.n	8004192 <_svfiprintf_r+0x92>
 80041ea:	9a03      	ldr	r2, [sp, #12]
 80041ec:	1d11      	adds	r1, r2, #4
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	9103      	str	r1, [sp, #12]
 80041f2:	2a00      	cmp	r2, #0
 80041f4:	db01      	blt.n	80041fa <_svfiprintf_r+0xfa>
 80041f6:	9207      	str	r2, [sp, #28]
 80041f8:	e004      	b.n	8004204 <_svfiprintf_r+0x104>
 80041fa:	4252      	negs	r2, r2
 80041fc:	f043 0302 	orr.w	r3, r3, #2
 8004200:	9207      	str	r2, [sp, #28]
 8004202:	9304      	str	r3, [sp, #16]
 8004204:	783b      	ldrb	r3, [r7, #0]
 8004206:	2b2e      	cmp	r3, #46	; 0x2e
 8004208:	d10c      	bne.n	8004224 <_svfiprintf_r+0x124>
 800420a:	787b      	ldrb	r3, [r7, #1]
 800420c:	2b2a      	cmp	r3, #42	; 0x2a
 800420e:	d133      	bne.n	8004278 <_svfiprintf_r+0x178>
 8004210:	9b03      	ldr	r3, [sp, #12]
 8004212:	1d1a      	adds	r2, r3, #4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	9203      	str	r2, [sp, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	bfb8      	it	lt
 800421c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004220:	3702      	adds	r7, #2
 8004222:	9305      	str	r3, [sp, #20]
 8004224:	4d2e      	ldr	r5, [pc, #184]	; (80042e0 <_svfiprintf_r+0x1e0>)
 8004226:	7839      	ldrb	r1, [r7, #0]
 8004228:	2203      	movs	r2, #3
 800422a:	4628      	mov	r0, r5
 800422c:	f7fb fff8 	bl	8000220 <memchr>
 8004230:	b138      	cbz	r0, 8004242 <_svfiprintf_r+0x142>
 8004232:	2340      	movs	r3, #64	; 0x40
 8004234:	1b40      	subs	r0, r0, r5
 8004236:	fa03 f000 	lsl.w	r0, r3, r0
 800423a:	9b04      	ldr	r3, [sp, #16]
 800423c:	4303      	orrs	r3, r0
 800423e:	3701      	adds	r7, #1
 8004240:	9304      	str	r3, [sp, #16]
 8004242:	7839      	ldrb	r1, [r7, #0]
 8004244:	4827      	ldr	r0, [pc, #156]	; (80042e4 <_svfiprintf_r+0x1e4>)
 8004246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800424a:	2206      	movs	r2, #6
 800424c:	1c7e      	adds	r6, r7, #1
 800424e:	f7fb ffe7 	bl	8000220 <memchr>
 8004252:	2800      	cmp	r0, #0
 8004254:	d038      	beq.n	80042c8 <_svfiprintf_r+0x1c8>
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <_svfiprintf_r+0x1e8>)
 8004258:	bb13      	cbnz	r3, 80042a0 <_svfiprintf_r+0x1a0>
 800425a:	9b03      	ldr	r3, [sp, #12]
 800425c:	3307      	adds	r3, #7
 800425e:	f023 0307 	bic.w	r3, r3, #7
 8004262:	3308      	adds	r3, #8
 8004264:	9303      	str	r3, [sp, #12]
 8004266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004268:	444b      	add	r3, r9
 800426a:	9309      	str	r3, [sp, #36]	; 0x24
 800426c:	e76d      	b.n	800414a <_svfiprintf_r+0x4a>
 800426e:	fb05 3202 	mla	r2, r5, r2, r3
 8004272:	2001      	movs	r0, #1
 8004274:	460f      	mov	r7, r1
 8004276:	e7a6      	b.n	80041c6 <_svfiprintf_r+0xc6>
 8004278:	2300      	movs	r3, #0
 800427a:	3701      	adds	r7, #1
 800427c:	9305      	str	r3, [sp, #20]
 800427e:	4619      	mov	r1, r3
 8004280:	250a      	movs	r5, #10
 8004282:	4638      	mov	r0, r7
 8004284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004288:	3a30      	subs	r2, #48	; 0x30
 800428a:	2a09      	cmp	r2, #9
 800428c:	d903      	bls.n	8004296 <_svfiprintf_r+0x196>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0c8      	beq.n	8004224 <_svfiprintf_r+0x124>
 8004292:	9105      	str	r1, [sp, #20]
 8004294:	e7c6      	b.n	8004224 <_svfiprintf_r+0x124>
 8004296:	fb05 2101 	mla	r1, r5, r1, r2
 800429a:	2301      	movs	r3, #1
 800429c:	4607      	mov	r7, r0
 800429e:	e7f0      	b.n	8004282 <_svfiprintf_r+0x182>
 80042a0:	ab03      	add	r3, sp, #12
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	4622      	mov	r2, r4
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <_svfiprintf_r+0x1ec>)
 80042a8:	a904      	add	r1, sp, #16
 80042aa:	4640      	mov	r0, r8
 80042ac:	f3af 8000 	nop.w
 80042b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80042b4:	4681      	mov	r9, r0
 80042b6:	d1d6      	bne.n	8004266 <_svfiprintf_r+0x166>
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	065b      	lsls	r3, r3, #25
 80042bc:	f53f af35 	bmi.w	800412a <_svfiprintf_r+0x2a>
 80042c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042c2:	b01d      	add	sp, #116	; 0x74
 80042c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c8:	ab03      	add	r3, sp, #12
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	4622      	mov	r2, r4
 80042ce:	4b07      	ldr	r3, [pc, #28]	; (80042ec <_svfiprintf_r+0x1ec>)
 80042d0:	a904      	add	r1, sp, #16
 80042d2:	4640      	mov	r0, r8
 80042d4:	f000 f882 	bl	80043dc <_printf_i>
 80042d8:	e7ea      	b.n	80042b0 <_svfiprintf_r+0x1b0>
 80042da:	bf00      	nop
 80042dc:	080049b2 	.word	0x080049b2
 80042e0:	080049b8 	.word	0x080049b8
 80042e4:	080049bc 	.word	0x080049bc
 80042e8:	00000000 	.word	0x00000000
 80042ec:	0800404d 	.word	0x0800404d

080042f0 <_printf_common>:
 80042f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f4:	4691      	mov	r9, r2
 80042f6:	461f      	mov	r7, r3
 80042f8:	688a      	ldr	r2, [r1, #8]
 80042fa:	690b      	ldr	r3, [r1, #16]
 80042fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004300:	4293      	cmp	r3, r2
 8004302:	bfb8      	it	lt
 8004304:	4613      	movlt	r3, r2
 8004306:	f8c9 3000 	str.w	r3, [r9]
 800430a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800430e:	4606      	mov	r6, r0
 8004310:	460c      	mov	r4, r1
 8004312:	b112      	cbz	r2, 800431a <_printf_common+0x2a>
 8004314:	3301      	adds	r3, #1
 8004316:	f8c9 3000 	str.w	r3, [r9]
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	0699      	lsls	r1, r3, #26
 800431e:	bf42      	ittt	mi
 8004320:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004324:	3302      	addmi	r3, #2
 8004326:	f8c9 3000 	strmi.w	r3, [r9]
 800432a:	6825      	ldr	r5, [r4, #0]
 800432c:	f015 0506 	ands.w	r5, r5, #6
 8004330:	d107      	bne.n	8004342 <_printf_common+0x52>
 8004332:	f104 0a19 	add.w	sl, r4, #25
 8004336:	68e3      	ldr	r3, [r4, #12]
 8004338:	f8d9 2000 	ldr.w	r2, [r9]
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	42ab      	cmp	r3, r5
 8004340:	dc28      	bgt.n	8004394 <_printf_common+0xa4>
 8004342:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004346:	6822      	ldr	r2, [r4, #0]
 8004348:	3300      	adds	r3, #0
 800434a:	bf18      	it	ne
 800434c:	2301      	movne	r3, #1
 800434e:	0692      	lsls	r2, r2, #26
 8004350:	d42d      	bmi.n	80043ae <_printf_common+0xbe>
 8004352:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004356:	4639      	mov	r1, r7
 8004358:	4630      	mov	r0, r6
 800435a:	47c0      	blx	r8
 800435c:	3001      	adds	r0, #1
 800435e:	d020      	beq.n	80043a2 <_printf_common+0xb2>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	68e5      	ldr	r5, [r4, #12]
 8004364:	f8d9 2000 	ldr.w	r2, [r9]
 8004368:	f003 0306 	and.w	r3, r3, #6
 800436c:	2b04      	cmp	r3, #4
 800436e:	bf08      	it	eq
 8004370:	1aad      	subeq	r5, r5, r2
 8004372:	68a3      	ldr	r3, [r4, #8]
 8004374:	6922      	ldr	r2, [r4, #16]
 8004376:	bf0c      	ite	eq
 8004378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800437c:	2500      	movne	r5, #0
 800437e:	4293      	cmp	r3, r2
 8004380:	bfc4      	itt	gt
 8004382:	1a9b      	subgt	r3, r3, r2
 8004384:	18ed      	addgt	r5, r5, r3
 8004386:	f04f 0900 	mov.w	r9, #0
 800438a:	341a      	adds	r4, #26
 800438c:	454d      	cmp	r5, r9
 800438e:	d11a      	bne.n	80043c6 <_printf_common+0xd6>
 8004390:	2000      	movs	r0, #0
 8004392:	e008      	b.n	80043a6 <_printf_common+0xb6>
 8004394:	2301      	movs	r3, #1
 8004396:	4652      	mov	r2, sl
 8004398:	4639      	mov	r1, r7
 800439a:	4630      	mov	r0, r6
 800439c:	47c0      	blx	r8
 800439e:	3001      	adds	r0, #1
 80043a0:	d103      	bne.n	80043aa <_printf_common+0xba>
 80043a2:	f04f 30ff 	mov.w	r0, #4294967295
 80043a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043aa:	3501      	adds	r5, #1
 80043ac:	e7c3      	b.n	8004336 <_printf_common+0x46>
 80043ae:	18e1      	adds	r1, r4, r3
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	2030      	movs	r0, #48	; 0x30
 80043b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043b8:	4422      	add	r2, r4
 80043ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043c2:	3302      	adds	r3, #2
 80043c4:	e7c5      	b.n	8004352 <_printf_common+0x62>
 80043c6:	2301      	movs	r3, #1
 80043c8:	4622      	mov	r2, r4
 80043ca:	4639      	mov	r1, r7
 80043cc:	4630      	mov	r0, r6
 80043ce:	47c0      	blx	r8
 80043d0:	3001      	adds	r0, #1
 80043d2:	d0e6      	beq.n	80043a2 <_printf_common+0xb2>
 80043d4:	f109 0901 	add.w	r9, r9, #1
 80043d8:	e7d8      	b.n	800438c <_printf_common+0x9c>
	...

080043dc <_printf_i>:
 80043dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80043e4:	460c      	mov	r4, r1
 80043e6:	7e09      	ldrb	r1, [r1, #24]
 80043e8:	b085      	sub	sp, #20
 80043ea:	296e      	cmp	r1, #110	; 0x6e
 80043ec:	4617      	mov	r7, r2
 80043ee:	4606      	mov	r6, r0
 80043f0:	4698      	mov	r8, r3
 80043f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043f4:	f000 80b3 	beq.w	800455e <_printf_i+0x182>
 80043f8:	d822      	bhi.n	8004440 <_printf_i+0x64>
 80043fa:	2963      	cmp	r1, #99	; 0x63
 80043fc:	d036      	beq.n	800446c <_printf_i+0x90>
 80043fe:	d80a      	bhi.n	8004416 <_printf_i+0x3a>
 8004400:	2900      	cmp	r1, #0
 8004402:	f000 80b9 	beq.w	8004578 <_printf_i+0x19c>
 8004406:	2958      	cmp	r1, #88	; 0x58
 8004408:	f000 8083 	beq.w	8004512 <_printf_i+0x136>
 800440c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004410:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004414:	e032      	b.n	800447c <_printf_i+0xa0>
 8004416:	2964      	cmp	r1, #100	; 0x64
 8004418:	d001      	beq.n	800441e <_printf_i+0x42>
 800441a:	2969      	cmp	r1, #105	; 0x69
 800441c:	d1f6      	bne.n	800440c <_printf_i+0x30>
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	6813      	ldr	r3, [r2, #0]
 8004422:	0605      	lsls	r5, r0, #24
 8004424:	f103 0104 	add.w	r1, r3, #4
 8004428:	d52a      	bpl.n	8004480 <_printf_i+0xa4>
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6011      	str	r1, [r2, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	da03      	bge.n	800443a <_printf_i+0x5e>
 8004432:	222d      	movs	r2, #45	; 0x2d
 8004434:	425b      	negs	r3, r3
 8004436:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800443a:	486f      	ldr	r0, [pc, #444]	; (80045f8 <_printf_i+0x21c>)
 800443c:	220a      	movs	r2, #10
 800443e:	e039      	b.n	80044b4 <_printf_i+0xd8>
 8004440:	2973      	cmp	r1, #115	; 0x73
 8004442:	f000 809d 	beq.w	8004580 <_printf_i+0x1a4>
 8004446:	d808      	bhi.n	800445a <_printf_i+0x7e>
 8004448:	296f      	cmp	r1, #111	; 0x6f
 800444a:	d020      	beq.n	800448e <_printf_i+0xb2>
 800444c:	2970      	cmp	r1, #112	; 0x70
 800444e:	d1dd      	bne.n	800440c <_printf_i+0x30>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	f043 0320 	orr.w	r3, r3, #32
 8004456:	6023      	str	r3, [r4, #0]
 8004458:	e003      	b.n	8004462 <_printf_i+0x86>
 800445a:	2975      	cmp	r1, #117	; 0x75
 800445c:	d017      	beq.n	800448e <_printf_i+0xb2>
 800445e:	2978      	cmp	r1, #120	; 0x78
 8004460:	d1d4      	bne.n	800440c <_printf_i+0x30>
 8004462:	2378      	movs	r3, #120	; 0x78
 8004464:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004468:	4864      	ldr	r0, [pc, #400]	; (80045fc <_printf_i+0x220>)
 800446a:	e055      	b.n	8004518 <_printf_i+0x13c>
 800446c:	6813      	ldr	r3, [r2, #0]
 800446e:	1d19      	adds	r1, r3, #4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6011      	str	r1, [r2, #0]
 8004474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800447c:	2301      	movs	r3, #1
 800447e:	e08c      	b.n	800459a <_printf_i+0x1be>
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6011      	str	r1, [r2, #0]
 8004484:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004488:	bf18      	it	ne
 800448a:	b21b      	sxthne	r3, r3
 800448c:	e7cf      	b.n	800442e <_printf_i+0x52>
 800448e:	6813      	ldr	r3, [r2, #0]
 8004490:	6825      	ldr	r5, [r4, #0]
 8004492:	1d18      	adds	r0, r3, #4
 8004494:	6010      	str	r0, [r2, #0]
 8004496:	0628      	lsls	r0, r5, #24
 8004498:	d501      	bpl.n	800449e <_printf_i+0xc2>
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	e002      	b.n	80044a4 <_printf_i+0xc8>
 800449e:	0668      	lsls	r0, r5, #25
 80044a0:	d5fb      	bpl.n	800449a <_printf_i+0xbe>
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	4854      	ldr	r0, [pc, #336]	; (80045f8 <_printf_i+0x21c>)
 80044a6:	296f      	cmp	r1, #111	; 0x6f
 80044a8:	bf14      	ite	ne
 80044aa:	220a      	movne	r2, #10
 80044ac:	2208      	moveq	r2, #8
 80044ae:	2100      	movs	r1, #0
 80044b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044b4:	6865      	ldr	r5, [r4, #4]
 80044b6:	60a5      	str	r5, [r4, #8]
 80044b8:	2d00      	cmp	r5, #0
 80044ba:	f2c0 8095 	blt.w	80045e8 <_printf_i+0x20c>
 80044be:	6821      	ldr	r1, [r4, #0]
 80044c0:	f021 0104 	bic.w	r1, r1, #4
 80044c4:	6021      	str	r1, [r4, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d13d      	bne.n	8004546 <_printf_i+0x16a>
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	f040 808e 	bne.w	80045ec <_printf_i+0x210>
 80044d0:	4665      	mov	r5, ip
 80044d2:	2a08      	cmp	r2, #8
 80044d4:	d10b      	bne.n	80044ee <_printf_i+0x112>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	07db      	lsls	r3, r3, #31
 80044da:	d508      	bpl.n	80044ee <_printf_i+0x112>
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	6862      	ldr	r2, [r4, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	bfde      	ittt	le
 80044e4:	2330      	movle	r3, #48	; 0x30
 80044e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044ee:	ebac 0305 	sub.w	r3, ip, r5
 80044f2:	6123      	str	r3, [r4, #16]
 80044f4:	f8cd 8000 	str.w	r8, [sp]
 80044f8:	463b      	mov	r3, r7
 80044fa:	aa03      	add	r2, sp, #12
 80044fc:	4621      	mov	r1, r4
 80044fe:	4630      	mov	r0, r6
 8004500:	f7ff fef6 	bl	80042f0 <_printf_common>
 8004504:	3001      	adds	r0, #1
 8004506:	d14d      	bne.n	80045a4 <_printf_i+0x1c8>
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	b005      	add	sp, #20
 800450e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004512:	4839      	ldr	r0, [pc, #228]	; (80045f8 <_printf_i+0x21c>)
 8004514:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004518:	6813      	ldr	r3, [r2, #0]
 800451a:	6821      	ldr	r1, [r4, #0]
 800451c:	1d1d      	adds	r5, r3, #4
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6015      	str	r5, [r2, #0]
 8004522:	060a      	lsls	r2, r1, #24
 8004524:	d50b      	bpl.n	800453e <_printf_i+0x162>
 8004526:	07ca      	lsls	r2, r1, #31
 8004528:	bf44      	itt	mi
 800452a:	f041 0120 	orrmi.w	r1, r1, #32
 800452e:	6021      	strmi	r1, [r4, #0]
 8004530:	b91b      	cbnz	r3, 800453a <_printf_i+0x15e>
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	f022 0220 	bic.w	r2, r2, #32
 8004538:	6022      	str	r2, [r4, #0]
 800453a:	2210      	movs	r2, #16
 800453c:	e7b7      	b.n	80044ae <_printf_i+0xd2>
 800453e:	064d      	lsls	r5, r1, #25
 8004540:	bf48      	it	mi
 8004542:	b29b      	uxthmi	r3, r3
 8004544:	e7ef      	b.n	8004526 <_printf_i+0x14a>
 8004546:	4665      	mov	r5, ip
 8004548:	fbb3 f1f2 	udiv	r1, r3, r2
 800454c:	fb02 3311 	mls	r3, r2, r1, r3
 8004550:	5cc3      	ldrb	r3, [r0, r3]
 8004552:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004556:	460b      	mov	r3, r1
 8004558:	2900      	cmp	r1, #0
 800455a:	d1f5      	bne.n	8004548 <_printf_i+0x16c>
 800455c:	e7b9      	b.n	80044d2 <_printf_i+0xf6>
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	6825      	ldr	r5, [r4, #0]
 8004562:	6961      	ldr	r1, [r4, #20]
 8004564:	1d18      	adds	r0, r3, #4
 8004566:	6010      	str	r0, [r2, #0]
 8004568:	0628      	lsls	r0, r5, #24
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	d501      	bpl.n	8004572 <_printf_i+0x196>
 800456e:	6019      	str	r1, [r3, #0]
 8004570:	e002      	b.n	8004578 <_printf_i+0x19c>
 8004572:	066a      	lsls	r2, r5, #25
 8004574:	d5fb      	bpl.n	800456e <_printf_i+0x192>
 8004576:	8019      	strh	r1, [r3, #0]
 8004578:	2300      	movs	r3, #0
 800457a:	6123      	str	r3, [r4, #16]
 800457c:	4665      	mov	r5, ip
 800457e:	e7b9      	b.n	80044f4 <_printf_i+0x118>
 8004580:	6813      	ldr	r3, [r2, #0]
 8004582:	1d19      	adds	r1, r3, #4
 8004584:	6011      	str	r1, [r2, #0]
 8004586:	681d      	ldr	r5, [r3, #0]
 8004588:	6862      	ldr	r2, [r4, #4]
 800458a:	2100      	movs	r1, #0
 800458c:	4628      	mov	r0, r5
 800458e:	f7fb fe47 	bl	8000220 <memchr>
 8004592:	b108      	cbz	r0, 8004598 <_printf_i+0x1bc>
 8004594:	1b40      	subs	r0, r0, r5
 8004596:	6060      	str	r0, [r4, #4]
 8004598:	6863      	ldr	r3, [r4, #4]
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	2300      	movs	r3, #0
 800459e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a2:	e7a7      	b.n	80044f4 <_printf_i+0x118>
 80045a4:	6923      	ldr	r3, [r4, #16]
 80045a6:	462a      	mov	r2, r5
 80045a8:	4639      	mov	r1, r7
 80045aa:	4630      	mov	r0, r6
 80045ac:	47c0      	blx	r8
 80045ae:	3001      	adds	r0, #1
 80045b0:	d0aa      	beq.n	8004508 <_printf_i+0x12c>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	079b      	lsls	r3, r3, #30
 80045b6:	d413      	bmi.n	80045e0 <_printf_i+0x204>
 80045b8:	68e0      	ldr	r0, [r4, #12]
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	4298      	cmp	r0, r3
 80045be:	bfb8      	it	lt
 80045c0:	4618      	movlt	r0, r3
 80045c2:	e7a3      	b.n	800450c <_printf_i+0x130>
 80045c4:	2301      	movs	r3, #1
 80045c6:	464a      	mov	r2, r9
 80045c8:	4639      	mov	r1, r7
 80045ca:	4630      	mov	r0, r6
 80045cc:	47c0      	blx	r8
 80045ce:	3001      	adds	r0, #1
 80045d0:	d09a      	beq.n	8004508 <_printf_i+0x12c>
 80045d2:	3501      	adds	r5, #1
 80045d4:	68e3      	ldr	r3, [r4, #12]
 80045d6:	9a03      	ldr	r2, [sp, #12]
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	42ab      	cmp	r3, r5
 80045dc:	dcf2      	bgt.n	80045c4 <_printf_i+0x1e8>
 80045de:	e7eb      	b.n	80045b8 <_printf_i+0x1dc>
 80045e0:	2500      	movs	r5, #0
 80045e2:	f104 0919 	add.w	r9, r4, #25
 80045e6:	e7f5      	b.n	80045d4 <_printf_i+0x1f8>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ac      	bne.n	8004546 <_printf_i+0x16a>
 80045ec:	7803      	ldrb	r3, [r0, #0]
 80045ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f6:	e76c      	b.n	80044d2 <_printf_i+0xf6>
 80045f8:	080049c3 	.word	0x080049c3
 80045fc:	080049d4 	.word	0x080049d4

08004600 <memmove>:
 8004600:	4288      	cmp	r0, r1
 8004602:	b510      	push	{r4, lr}
 8004604:	eb01 0302 	add.w	r3, r1, r2
 8004608:	d807      	bhi.n	800461a <memmove+0x1a>
 800460a:	1e42      	subs	r2, r0, #1
 800460c:	4299      	cmp	r1, r3
 800460e:	d00a      	beq.n	8004626 <memmove+0x26>
 8004610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004614:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004618:	e7f8      	b.n	800460c <memmove+0xc>
 800461a:	4283      	cmp	r3, r0
 800461c:	d9f5      	bls.n	800460a <memmove+0xa>
 800461e:	1881      	adds	r1, r0, r2
 8004620:	1ad2      	subs	r2, r2, r3
 8004622:	42d3      	cmn	r3, r2
 8004624:	d100      	bne.n	8004628 <memmove+0x28>
 8004626:	bd10      	pop	{r4, pc}
 8004628:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800462c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004630:	e7f7      	b.n	8004622 <memmove+0x22>
	...

08004634 <_free_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4605      	mov	r5, r0
 8004638:	2900      	cmp	r1, #0
 800463a:	d045      	beq.n	80046c8 <_free_r+0x94>
 800463c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004640:	1f0c      	subs	r4, r1, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	bfb8      	it	lt
 8004646:	18e4      	addlt	r4, r4, r3
 8004648:	f000 f8d2 	bl	80047f0 <__malloc_lock>
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <_free_r+0x98>)
 800464e:	6813      	ldr	r3, [r2, #0]
 8004650:	4610      	mov	r0, r2
 8004652:	b933      	cbnz	r3, 8004662 <_free_r+0x2e>
 8004654:	6063      	str	r3, [r4, #4]
 8004656:	6014      	str	r4, [r2, #0]
 8004658:	4628      	mov	r0, r5
 800465a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800465e:	f000 b8c8 	b.w	80047f2 <__malloc_unlock>
 8004662:	42a3      	cmp	r3, r4
 8004664:	d90c      	bls.n	8004680 <_free_r+0x4c>
 8004666:	6821      	ldr	r1, [r4, #0]
 8004668:	1862      	adds	r2, r4, r1
 800466a:	4293      	cmp	r3, r2
 800466c:	bf04      	itt	eq
 800466e:	681a      	ldreq	r2, [r3, #0]
 8004670:	685b      	ldreq	r3, [r3, #4]
 8004672:	6063      	str	r3, [r4, #4]
 8004674:	bf04      	itt	eq
 8004676:	1852      	addeq	r2, r2, r1
 8004678:	6022      	streq	r2, [r4, #0]
 800467a:	6004      	str	r4, [r0, #0]
 800467c:	e7ec      	b.n	8004658 <_free_r+0x24>
 800467e:	4613      	mov	r3, r2
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	b10a      	cbz	r2, 8004688 <_free_r+0x54>
 8004684:	42a2      	cmp	r2, r4
 8004686:	d9fa      	bls.n	800467e <_free_r+0x4a>
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	1858      	adds	r0, r3, r1
 800468c:	42a0      	cmp	r0, r4
 800468e:	d10b      	bne.n	80046a8 <_free_r+0x74>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	4401      	add	r1, r0
 8004694:	1858      	adds	r0, r3, r1
 8004696:	4282      	cmp	r2, r0
 8004698:	6019      	str	r1, [r3, #0]
 800469a:	d1dd      	bne.n	8004658 <_free_r+0x24>
 800469c:	6810      	ldr	r0, [r2, #0]
 800469e:	6852      	ldr	r2, [r2, #4]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	4401      	add	r1, r0
 80046a4:	6019      	str	r1, [r3, #0]
 80046a6:	e7d7      	b.n	8004658 <_free_r+0x24>
 80046a8:	d902      	bls.n	80046b0 <_free_r+0x7c>
 80046aa:	230c      	movs	r3, #12
 80046ac:	602b      	str	r3, [r5, #0]
 80046ae:	e7d3      	b.n	8004658 <_free_r+0x24>
 80046b0:	6820      	ldr	r0, [r4, #0]
 80046b2:	1821      	adds	r1, r4, r0
 80046b4:	428a      	cmp	r2, r1
 80046b6:	bf04      	itt	eq
 80046b8:	6811      	ldreq	r1, [r2, #0]
 80046ba:	6852      	ldreq	r2, [r2, #4]
 80046bc:	6062      	str	r2, [r4, #4]
 80046be:	bf04      	itt	eq
 80046c0:	1809      	addeq	r1, r1, r0
 80046c2:	6021      	streq	r1, [r4, #0]
 80046c4:	605c      	str	r4, [r3, #4]
 80046c6:	e7c7      	b.n	8004658 <_free_r+0x24>
 80046c8:	bd38      	pop	{r3, r4, r5, pc}
 80046ca:	bf00      	nop
 80046cc:	200153b0 	.word	0x200153b0

080046d0 <_malloc_r>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	1ccd      	adds	r5, r1, #3
 80046d4:	f025 0503 	bic.w	r5, r5, #3
 80046d8:	3508      	adds	r5, #8
 80046da:	2d0c      	cmp	r5, #12
 80046dc:	bf38      	it	cc
 80046de:	250c      	movcc	r5, #12
 80046e0:	2d00      	cmp	r5, #0
 80046e2:	4606      	mov	r6, r0
 80046e4:	db01      	blt.n	80046ea <_malloc_r+0x1a>
 80046e6:	42a9      	cmp	r1, r5
 80046e8:	d903      	bls.n	80046f2 <_malloc_r+0x22>
 80046ea:	230c      	movs	r3, #12
 80046ec:	6033      	str	r3, [r6, #0]
 80046ee:	2000      	movs	r0, #0
 80046f0:	bd70      	pop	{r4, r5, r6, pc}
 80046f2:	f000 f87d 	bl	80047f0 <__malloc_lock>
 80046f6:	4a21      	ldr	r2, [pc, #132]	; (800477c <_malloc_r+0xac>)
 80046f8:	6814      	ldr	r4, [r2, #0]
 80046fa:	4621      	mov	r1, r4
 80046fc:	b991      	cbnz	r1, 8004724 <_malloc_r+0x54>
 80046fe:	4c20      	ldr	r4, [pc, #128]	; (8004780 <_malloc_r+0xb0>)
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	b91b      	cbnz	r3, 800470c <_malloc_r+0x3c>
 8004704:	4630      	mov	r0, r6
 8004706:	f000 f863 	bl	80047d0 <_sbrk_r>
 800470a:	6020      	str	r0, [r4, #0]
 800470c:	4629      	mov	r1, r5
 800470e:	4630      	mov	r0, r6
 8004710:	f000 f85e 	bl	80047d0 <_sbrk_r>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	d124      	bne.n	8004762 <_malloc_r+0x92>
 8004718:	230c      	movs	r3, #12
 800471a:	6033      	str	r3, [r6, #0]
 800471c:	4630      	mov	r0, r6
 800471e:	f000 f868 	bl	80047f2 <__malloc_unlock>
 8004722:	e7e4      	b.n	80046ee <_malloc_r+0x1e>
 8004724:	680b      	ldr	r3, [r1, #0]
 8004726:	1b5b      	subs	r3, r3, r5
 8004728:	d418      	bmi.n	800475c <_malloc_r+0x8c>
 800472a:	2b0b      	cmp	r3, #11
 800472c:	d90f      	bls.n	800474e <_malloc_r+0x7e>
 800472e:	600b      	str	r3, [r1, #0]
 8004730:	50cd      	str	r5, [r1, r3]
 8004732:	18cc      	adds	r4, r1, r3
 8004734:	4630      	mov	r0, r6
 8004736:	f000 f85c 	bl	80047f2 <__malloc_unlock>
 800473a:	f104 000b 	add.w	r0, r4, #11
 800473e:	1d23      	adds	r3, r4, #4
 8004740:	f020 0007 	bic.w	r0, r0, #7
 8004744:	1ac3      	subs	r3, r0, r3
 8004746:	d0d3      	beq.n	80046f0 <_malloc_r+0x20>
 8004748:	425a      	negs	r2, r3
 800474a:	50e2      	str	r2, [r4, r3]
 800474c:	e7d0      	b.n	80046f0 <_malloc_r+0x20>
 800474e:	428c      	cmp	r4, r1
 8004750:	684b      	ldr	r3, [r1, #4]
 8004752:	bf16      	itet	ne
 8004754:	6063      	strne	r3, [r4, #4]
 8004756:	6013      	streq	r3, [r2, #0]
 8004758:	460c      	movne	r4, r1
 800475a:	e7eb      	b.n	8004734 <_malloc_r+0x64>
 800475c:	460c      	mov	r4, r1
 800475e:	6849      	ldr	r1, [r1, #4]
 8004760:	e7cc      	b.n	80046fc <_malloc_r+0x2c>
 8004762:	1cc4      	adds	r4, r0, #3
 8004764:	f024 0403 	bic.w	r4, r4, #3
 8004768:	42a0      	cmp	r0, r4
 800476a:	d005      	beq.n	8004778 <_malloc_r+0xa8>
 800476c:	1a21      	subs	r1, r4, r0
 800476e:	4630      	mov	r0, r6
 8004770:	f000 f82e 	bl	80047d0 <_sbrk_r>
 8004774:	3001      	adds	r0, #1
 8004776:	d0cf      	beq.n	8004718 <_malloc_r+0x48>
 8004778:	6025      	str	r5, [r4, #0]
 800477a:	e7db      	b.n	8004734 <_malloc_r+0x64>
 800477c:	200153b0 	.word	0x200153b0
 8004780:	200153b4 	.word	0x200153b4

08004784 <_realloc_r>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	4607      	mov	r7, r0
 8004788:	4614      	mov	r4, r2
 800478a:	460e      	mov	r6, r1
 800478c:	b921      	cbnz	r1, 8004798 <_realloc_r+0x14>
 800478e:	4611      	mov	r1, r2
 8004790:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004794:	f7ff bf9c 	b.w	80046d0 <_malloc_r>
 8004798:	b922      	cbnz	r2, 80047a4 <_realloc_r+0x20>
 800479a:	f7ff ff4b 	bl	8004634 <_free_r>
 800479e:	4625      	mov	r5, r4
 80047a0:	4628      	mov	r0, r5
 80047a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a4:	f000 f826 	bl	80047f4 <_malloc_usable_size_r>
 80047a8:	42a0      	cmp	r0, r4
 80047aa:	d20f      	bcs.n	80047cc <_realloc_r+0x48>
 80047ac:	4621      	mov	r1, r4
 80047ae:	4638      	mov	r0, r7
 80047b0:	f7ff ff8e 	bl	80046d0 <_malloc_r>
 80047b4:	4605      	mov	r5, r0
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d0f2      	beq.n	80047a0 <_realloc_r+0x1c>
 80047ba:	4631      	mov	r1, r6
 80047bc:	4622      	mov	r2, r4
 80047be:	f7ff fc12 	bl	8003fe6 <memcpy>
 80047c2:	4631      	mov	r1, r6
 80047c4:	4638      	mov	r0, r7
 80047c6:	f7ff ff35 	bl	8004634 <_free_r>
 80047ca:	e7e9      	b.n	80047a0 <_realloc_r+0x1c>
 80047cc:	4635      	mov	r5, r6
 80047ce:	e7e7      	b.n	80047a0 <_realloc_r+0x1c>

080047d0 <_sbrk_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4c06      	ldr	r4, [pc, #24]	; (80047ec <_sbrk_r+0x1c>)
 80047d4:	2300      	movs	r3, #0
 80047d6:	4605      	mov	r5, r0
 80047d8:	4608      	mov	r0, r1
 80047da:	6023      	str	r3, [r4, #0]
 80047dc:	f000 f812 	bl	8004804 <_sbrk>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d102      	bne.n	80047ea <_sbrk_r+0x1a>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	b103      	cbz	r3, 80047ea <_sbrk_r+0x1a>
 80047e8:	602b      	str	r3, [r5, #0]
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
 80047ec:	200154c8 	.word	0x200154c8

080047f0 <__malloc_lock>:
 80047f0:	4770      	bx	lr

080047f2 <__malloc_unlock>:
 80047f2:	4770      	bx	lr

080047f4 <_malloc_usable_size_r>:
 80047f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047f8:	1f18      	subs	r0, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	bfbc      	itt	lt
 80047fe:	580b      	ldrlt	r3, [r1, r0]
 8004800:	18c0      	addlt	r0, r0, r3
 8004802:	4770      	bx	lr

08004804 <_sbrk>:
 8004804:	4b0d      	ldr	r3, [pc, #52]	; (800483c <_sbrk+0x38>)
 8004806:	6819      	ldr	r1, [r3, #0]
 8004808:	b510      	push	{r4, lr}
 800480a:	4602      	mov	r2, r0
 800480c:	b909      	cbnz	r1, 8004812 <_sbrk+0xe>
 800480e:	490c      	ldr	r1, [pc, #48]	; (8004840 <_sbrk+0x3c>)
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	4669      	mov	r1, sp
 8004816:	4402      	add	r2, r0
 8004818:	428a      	cmp	r2, r1
 800481a:	d806      	bhi.n	800482a <_sbrk+0x26>
 800481c:	4909      	ldr	r1, [pc, #36]	; (8004844 <_sbrk+0x40>)
 800481e:	4c0a      	ldr	r4, [pc, #40]	; (8004848 <_sbrk+0x44>)
 8004820:	6809      	ldr	r1, [r1, #0]
 8004822:	42a1      	cmp	r1, r4
 8004824:	d008      	beq.n	8004838 <_sbrk+0x34>
 8004826:	428a      	cmp	r2, r1
 8004828:	d906      	bls.n	8004838 <_sbrk+0x34>
 800482a:	f000 f80f 	bl	800484c <__errno>
 800482e:	230c      	movs	r3, #12
 8004830:	6003      	str	r3, [r0, #0]
 8004832:	f04f 30ff 	mov.w	r0, #4294967295
 8004836:	bd10      	pop	{r4, pc}
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e7fc      	b.n	8004836 <_sbrk+0x32>
 800483c:	200153b8 	.word	0x200153b8
 8004840:	200154d0 	.word	0x200154d0
 8004844:	2000008c 	.word	0x2000008c
 8004848:	cafedead 	.word	0xcafedead

0800484c <__errno>:
 800484c:	4b01      	ldr	r3, [pc, #4]	; (8004854 <__errno+0x8>)
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000028 	.word	0x20000028

08004858 <_init>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr

08004864 <_fini>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	bf00      	nop
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr
