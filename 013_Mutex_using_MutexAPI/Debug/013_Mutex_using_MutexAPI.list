
013_Mutex_using_MutexAPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e3c  08004e3c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004e3c  08004e3c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e3c  08004e3c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015440  20000090  08004ed4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200154d0  08004ed4  000254d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5ef  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e1f  00000000  00000000  0002f6af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  000314d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  00032100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002edc  00000000  00000000  00032c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac8b  00000000  00000000  00035b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008024e  00000000  00000000  000407af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c09fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac8  00000000  00000000  000c0a78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c60 	.word	0x08004c60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08004c60 	.word	0x08004c60

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000220:	b480      	push	{r7}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e076      	b.n	800032a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800023c:	2201      	movs	r2, #1
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	fa02 f303 	lsl.w	r3, r2, r3
 8000244:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	4013      	ands	r3, r2
 800024e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	429a      	cmp	r2, r3
 8000256:	d165      	bne.n	8000324 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	2103      	movs	r1, #3
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	43db      	mvns	r3, r3
 8000268:	401a      	ands	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	791b      	ldrb	r3, [r3, #4]
 8000276:	4619      	mov	r1, r3
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	791b      	ldrb	r3, [r3, #4]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d003      	beq.n	8000296 <GPIO_Init+0x76>
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	2b02      	cmp	r3, #2
 8000294:	d12e      	bne.n	80002f4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	2103      	movs	r1, #3
 80002a0:	fa01 f303 	lsl.w	r3, r1, r3
 80002a4:	43db      	mvns	r3, r3
 80002a6:	401a      	ands	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	795b      	ldrb	r3, [r3, #5]
 80002b4:	4619      	mov	r1, r3
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	431a      	orrs	r2, r3
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	685a      	ldr	r2, [r3, #4]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	2301      	movs	r3, #1
 80002d0:	408b      	lsls	r3, r1
 80002d2:	43db      	mvns	r3, r3
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	683a      	ldr	r2, [r7, #0]
 80002e0:	7992      	ldrb	r2, [r2, #6]
 80002e2:	4611      	mov	r1, r2
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	b292      	uxth	r2, r2
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	b292      	uxth	r2, r2
 80002ee:	431a      	orrs	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	68da      	ldr	r2, [r3, #12]
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	2103      	movs	r1, #3
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	43db      	mvns	r3, r3
 8000306:	401a      	ands	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68da      	ldr	r2, [r3, #12]
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	79db      	ldrb	r3, [r3, #7]
 8000314:	4619      	mov	r1, r3
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	431a      	orrs	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	3301      	adds	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	2b0f      	cmp	r3, #15
 800032e:	d985      	bls.n	800023c <GPIO_Init+0x1c>
    }
  }
}
 8000330:	bf00      	nop
 8000332:	371c      	adds	r7, #28
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	807b      	strh	r3, [r7, #2]
 8000348:	4613      	mov	r3, r2
 800034a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000350:	2300      	movs	r3, #0
 8000352:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000354:	787a      	ldrb	r2, [r7, #1]
 8000356:	887b      	ldrh	r3, [r7, #2]
 8000358:	f003 0307 	and.w	r3, r3, #7
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	fa02 f303 	lsl.w	r3, r2, r3
 8000362:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000364:	887b      	ldrh	r3, [r7, #2]
 8000366:	08db      	lsrs	r3, r3, #3
 8000368:	b29b      	uxth	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3208      	adds	r2, #8
 8000370:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000374:	887b      	ldrh	r3, [r7, #2]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	210f      	movs	r1, #15
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43db      	mvns	r3, r3
 8000384:	8879      	ldrh	r1, [r7, #2]
 8000386:	08c9      	lsrs	r1, r1, #3
 8000388:	b289      	uxth	r1, r1
 800038a:	4608      	mov	r0, r1
 800038c:	ea02 0103 	and.w	r1, r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f100 0208 	add.w	r2, r0, #8
 8000396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800039a:	887b      	ldrh	r3, [r7, #2]
 800039c:	08db      	lsrs	r3, r3, #3
 800039e:	b29b      	uxth	r3, r3
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3208      	adds	r2, #8
 80003a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003b0:	887b      	ldrh	r3, [r7, #2]
 80003b2:	08db      	lsrs	r3, r3, #3
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3208      	adds	r2, #8
 80003bc:	68b9      	ldr	r1, [r7, #8]
 80003be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <RCC_DeInit+0x60>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <RCC_DeInit+0x60>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <RCC_DeInit+0x60>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <RCC_DeInit+0x60>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a11      	ldr	r2, [pc, #68]	; (8000430 <RCC_DeInit+0x60>)
 80003ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80003f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80003f4:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <RCC_DeInit+0x60>)
 80003f8:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <RCC_DeInit+0x64>)
 80003fa:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <RCC_DeInit+0x60>)
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <RCC_DeInit+0x68>)
 8000400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <RCC_DeInit+0x60>)
 8000406:	4a0d      	ldr	r2, [pc, #52]	; (800043c <RCC_DeInit+0x6c>)
 8000408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <RCC_DeInit+0x60>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a07      	ldr	r2, [pc, #28]	; (8000430 <RCC_DeInit+0x60>)
 8000412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000416:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <RCC_DeInit+0x60>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <RCC_DeInit+0x60>)
 8000420:	2200      	movs	r2, #0
 8000422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40023800 	.word	0x40023800
 8000434:	24003010 	.word	0x24003010
 8000438:	20003000 	.word	0x20003000
 800043c:	24003000 	.word	0x24003000

08000440 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000440:	b480      	push	{r7}
 8000442:	b08b      	sub	sp, #44	; 0x2c
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]
 800044c:	2300      	movs	r3, #0
 800044e:	61fb      	str	r3, [r7, #28]
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
 8000454:	2302      	movs	r3, #2
 8000456:	61bb      	str	r3, [r7, #24]
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	2302      	movs	r3, #2
 800045e:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000460:	2302      	movs	r3, #2
 8000462:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000464:	4b6f      	ldr	r3, [pc, #444]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f003 030c 	and.w	r3, r3, #12
 800046c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800046e:	6a3b      	ldr	r3, [r7, #32]
 8000470:	2b0c      	cmp	r3, #12
 8000472:	f200 8091 	bhi.w	8000598 <RCC_GetClocksFreq+0x158>
 8000476:	a201      	add	r2, pc, #4	; (adr r2, 800047c <RCC_GetClocksFreq+0x3c>)
 8000478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047c:	080004b1 	.word	0x080004b1
 8000480:	08000599 	.word	0x08000599
 8000484:	08000599 	.word	0x08000599
 8000488:	08000599 	.word	0x08000599
 800048c:	080004b9 	.word	0x080004b9
 8000490:	08000599 	.word	0x08000599
 8000494:	08000599 	.word	0x08000599
 8000498:	08000599 	.word	0x08000599
 800049c:	080004c1 	.word	0x080004c1
 80004a0:	08000599 	.word	0x08000599
 80004a4:	08000599 	.word	0x08000599
 80004a8:	08000599 	.word	0x08000599
 80004ac:	0800052d 	.word	0x0800052d
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a5d      	ldr	r2, [pc, #372]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 80004b4:	601a      	str	r2, [r3, #0]
    break;
 80004b6:	e073      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a5c      	ldr	r2, [pc, #368]	; (800062c <RCC_GetClocksFreq+0x1ec>)
 80004bc:	601a      	str	r2, [r3, #0]
    break;
 80004be:	e06f      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004c0:	4b58      	ldr	r3, [pc, #352]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	0d9b      	lsrs	r3, r3, #22
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004cc:	4b55      	ldr	r3, [pc, #340]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004d4:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d00c      	beq.n	80004f6 <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004dc:	4a53      	ldr	r2, [pc, #332]	; (800062c <RCC_GetClocksFreq+0x1ec>)
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e4:	4a4f      	ldr	r2, [pc, #316]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80004e6:	6852      	ldr	r2, [r2, #4]
 80004e8:	0992      	lsrs	r2, r2, #6
 80004ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004ee:	fb02 f303 	mul.w	r3, r2, r3
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
 80004f4:	e00b      	b.n	800050e <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004f6:	4a4c      	ldr	r2, [pc, #304]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fe:	4a49      	ldr	r2, [pc, #292]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000500:	6852      	ldr	r2, [r2, #4]
 8000502:	0992      	lsrs	r2, r2, #6
 8000504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000508:	fb02 f303 	mul.w	r3, r2, r3
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800050e:	4b45      	ldr	r3, [pc, #276]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	0c1b      	lsrs	r3, r3, #16
 8000514:	f003 0303 	and.w	r3, r3, #3
 8000518:	3301      	adds	r3, #1
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800051e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000520:	69bb      	ldr	r3, [r7, #24]
 8000522:	fbb2 f2f3 	udiv	r2, r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	601a      	str	r2, [r3, #0]
    break;
 800052a:	e039      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800052c:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	0d9b      	lsrs	r3, r3, #22
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000538:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000540:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d00c      	beq.n	8000562 <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000548:	4a38      	ldr	r2, [pc, #224]	; (800062c <RCC_GetClocksFreq+0x1ec>)
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000550:	4a34      	ldr	r2, [pc, #208]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000552:	6852      	ldr	r2, [r2, #4]
 8000554:	0992      	lsrs	r2, r2, #6
 8000556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800055a:	fb02 f303 	mul.w	r3, r2, r3
 800055e:	627b      	str	r3, [r7, #36]	; 0x24
 8000560:	e00b      	b.n	800057a <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000562:	4a31      	ldr	r2, [pc, #196]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	fbb2 f3f3 	udiv	r3, r2, r3
 800056a:	4a2e      	ldr	r2, [pc, #184]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800056c:	6852      	ldr	r2, [r2, #4]
 800056e:	0992      	lsrs	r2, r2, #6
 8000570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000574:	fb02 f303 	mul.w	r3, r2, r3
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 800057a:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	0f1b      	lsrs	r3, r3, #28
 8000580:	f003 0307 	and.w	r3, r3, #7
 8000584:	3301      	adds	r3, #1
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 800058a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	601a      	str	r2, [r3, #0]
    break;
 8000596:	e003      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a23      	ldr	r2, [pc, #140]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 800059c:	601a      	str	r2, [r3, #0]
    break;
 800059e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005a8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80005aa:	6a3b      	ldr	r3, [r7, #32]
 80005ac:	091b      	lsrs	r3, r3, #4
 80005ae:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005b0:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <RCC_GetClocksFreq+0x1f0>)
 80005b2:	6a3b      	ldr	r3, [r7, #32]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	40da      	lsrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80005d0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	0a9b      	lsrs	r3, r3, #10
 80005d6:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005d8:	4a15      	ldr	r2, [pc, #84]	; (8000630 <RCC_GetClocksFreq+0x1f0>)
 80005da:	6a3b      	ldr	r3, [r7, #32]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005f8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 80005fa:	6a3b      	ldr	r3, [r7, #32]
 80005fc:	0b5b      	lsrs	r3, r3, #13
 80005fe:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000600:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <RCC_GetClocksFreq+0x1f0>)
 8000602:	6a3b      	ldr	r3, [r7, #32]
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	40da      	lsrs	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	60da      	str	r2, [r3, #12]
}
 8000618:	bf00      	nop
 800061a:	372c      	adds	r7, #44	; 0x2c
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40023800 	.word	0x40023800
 8000628:	00f42400 	.word	0x00f42400
 800062c:	007a1200 	.word	0x007a1200
 8000630:	20000000 	.word	0x20000000

08000634 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000652:	e006      	b.n	8000662 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	43db      	mvns	r3, r3
 800065c:	4904      	ldr	r1, [pc, #16]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 800065e:	4013      	ands	r3, r2
 8000660:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d006      	beq.n	8000694 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800068a:	4909      	ldr	r1, [pc, #36]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000692:	e006      	b.n	80006a2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	43db      	mvns	r3, r3
 800069c:	4904      	ldr	r1, [pc, #16]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 800069e:	4013      	ands	r3, r2
 80006a0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	8a1b      	ldrh	r3, [r3, #16]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	88db      	ldrh	r3, [r3, #6]
 80006e2:	461a      	mov	r2, r3
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	4313      	orrs	r3, r2
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80006ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000700:	f023 030c 	bic.w	r3, r3, #12
 8000704:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	889a      	ldrh	r2, [r3, #4]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	891b      	ldrh	r3, [r3, #8]
 800070e:	4313      	orrs	r3, r2
 8000710:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000716:	4313      	orrs	r3, r2
 8000718:	b29b      	uxth	r3, r3
 800071a:	461a      	mov	r2, r3
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	4313      	orrs	r3, r2
 8000720:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	b29a      	uxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	8a9b      	ldrh	r3, [r3, #20]
 800072e:	b29b      	uxth	r3, r3
 8000730:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000738:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	899b      	ldrh	r3, [r3, #12]
 800073e:	461a      	mov	r2, r3
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	4313      	orrs	r3, r2
 8000744:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	b29a      	uxth	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe74 	bl	8000440 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a30      	ldr	r2, [pc, #192]	; (800081c <USART_Init+0x168>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d003      	beq.n	8000768 <USART_Init+0xb4>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <USART_Init+0x16c>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d102      	bne.n	800076e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	623b      	str	r3, [r7, #32]
 800076c:	e001      	b.n	8000772 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	899b      	ldrh	r3, [r3, #12]
 8000776:	b29b      	uxth	r3, r3
 8000778:	b21b      	sxth	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	da0c      	bge.n	8000798 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800077e:	6a3a      	ldr	r2, [r7, #32]
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	009a      	lsls	r2, r3, #2
 8000788:	441a      	add	r2, r3
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	fbb2 f3f3 	udiv	r3, r2, r3
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	e00b      	b.n	80007b0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000798:	6a3a      	ldr	r2, [r7, #32]
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	009a      	lsls	r2, r3, #2
 80007a2:	441a      	add	r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <USART_Init+0x170>)
 80007b4:	fba2 2303 	umull	r2, r3, r2, r3
 80007b8:	095b      	lsrs	r3, r3, #5
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	091b      	lsrs	r3, r3, #4
 80007c2:	2264      	movs	r2, #100	; 0x64
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	69fa      	ldr	r2, [r7, #28]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	899b      	ldrh	r3, [r3, #12]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da0c      	bge.n	80007f4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	3332      	adds	r3, #50	; 0x32
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <USART_Init+0x170>)
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	f003 0307 	and.w	r3, r3, #7
 80007ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ee:	4313      	orrs	r3, r2
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
 80007f2:	e00b      	b.n	800080c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	3332      	adds	r3, #50	; 0x32
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <USART_Init+0x170>)
 80007fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000800:	095b      	lsrs	r3, r3, #5
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000808:	4313      	orrs	r3, r2
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	b29a      	uxth	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	811a      	strh	r2, [r3, #8]
}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40011000 	.word	0x40011000
 8000820:	40011400 	.word	0x40011400
 8000824:	51eb851f 	.word	0x51eb851f

08000828 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d008      	beq.n	800084c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	899b      	ldrh	r3, [r3, #12]
 800083e:	b29b      	uxth	r3, r3
 8000840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000844:	b29a      	uxth	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800084a:	e007      	b.n	800085c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	899b      	ldrh	r3, [r3, #12]
 8000850:	b29b      	uxth	r3, r3
 8000852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000856:	b29a      	uxth	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	819a      	strh	r2, [r3, #12]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000874:	887b      	ldrh	r3, [r7, #2]
 8000876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800087a:	b29a      	uxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	809a      	strh	r2, [r3, #4]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	4013      	ands	r3, r2
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e001      	b.n	80008b6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f103 0208 	add.w	r2, r3, #8
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295
 80008dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f103 0208 	add.w	r2, r3, #8
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f103 0208 	add.w	r2, r3, #8
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800091e:	b480      	push	{r7}
 8000920:	b085      	sub	sp, #20
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800097c:	d103      	bne.n	8000986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	e00c      	b.n	80009a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3308      	adds	r3, #8
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e002      	b.n	8000994 <vListInsert+0x2e>
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	429a      	cmp	r2, r3
 800099e:	d2f6      	bcs.n	800098e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6892      	ldr	r2, [r2, #8]
 80009ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	6852      	ldr	r2, [r2, #4]
 80009f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d103      	bne.n	8000a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1e5a      	subs	r2, r3, #1
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d109      	bne.n	8000a54 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a44:	f383 8811 	msr	BASEPRI, r3
 8000a48:	f3bf 8f6f 	isb	sy
 8000a4c:	f3bf 8f4f 	dsb	sy
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	e7fe      	b.n	8000a52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000a54:	f001 fc7a 	bl	800234c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a60:	68f9      	ldr	r1, [r7, #12]
 8000a62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a64:	fb01 f303 	mul.w	r3, r1, r3
 8000a68:	441a      	add	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2200      	movs	r2, #0
 8000a72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a84:	3b01      	subs	r3, #1
 8000a86:	68f9      	ldr	r1, [r7, #12]
 8000a88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a8a:	fb01 f303 	mul.w	r3, r1, r3
 8000a8e:	441a      	add	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	22ff      	movs	r2, #255	; 0xff
 8000a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	22ff      	movs	r2, #255	; 0xff
 8000aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d109      	bne.n	8000abe <xQueueGenericReset+0x92>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00f      	beq.n	8000ad2 <xQueueGenericReset+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3310      	adds	r3, #16
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 ff66 	bl	8001988 <xTaskRemoveFromEventList>
 8000abc:	e009      	b.n	8000ad2 <xQueueGenericReset+0xa6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3310      	adds	r3, #16
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fefe 	bl	80008c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3324      	adds	r3, #36	; 0x24
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fef9 	bl	80008c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000ad2:	f001 fc69 	bl	80023a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	4613      	mov	r3, r2
 8000aec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d109      	bne.n	8000b08 <xQueueGenericCreate+0x28>
 8000af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af8:	f383 8811 	msr	BASEPRI, r3
 8000afc:	f3bf 8f6f 	isb	sy
 8000b00:	f3bf 8f4f 	dsb	sy
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	e7fe      	b.n	8000b06 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	fb02 f303 	mul.w	r3, r2, r3
 8000b10:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3350      	adds	r3, #80	; 0x50
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 fd3a 	bl	8002590 <pvPortMalloc>
 8000b1c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00d      	beq.n	8000b40 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3350      	adds	r3, #80	; 0x50
 8000b2c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	4613      	mov	r3, r2
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	68b9      	ldr	r1, [r7, #8]
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f000 f805 	bl	8000b4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000b40:	69bb      	ldr	r3, [r7, #24]
	}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b084      	sub	sp, #16
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d103      	bne.n	8000b66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	e002      	b.n	8000b6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000b78:	2101      	movs	r1, #1
 8000b7a:	69b8      	ldr	r0, [r7, #24]
 8000b7c:	f7ff ff56 	bl	8000a2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	78fa      	ldrb	r2, [r7, #3]
 8000b84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	68f9      	ldr	r1, [r7, #12]
 8000b8e:	2073      	movs	r0, #115	; 0x73
 8000b90:	f002 fd4e 	bl	8003630 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00e      	beq.n	8000bc8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f000 f81c 	bl	8000c00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	461a      	mov	r2, r3
 8000be6:	6939      	ldr	r1, [r7, #16]
 8000be8:	6978      	ldr	r0, [r7, #20]
 8000bea:	f7ff ff79 	bl	8000ae0 <xQueueGenericCreate>
 8000bee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f7ff ffd3 	bl	8000b9c <prvInitialiseMutex>

		return xNewQueue;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
	}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	; 0x38
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d109      	bne.n	8000c30 <xQueueGenericSend+0x30>
 8000c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c20:	f383 8811 	msr	BASEPRI, r3
 8000c24:	f3bf 8f6f 	isb	sy
 8000c28:	f3bf 8f4f 	dsb	sy
 8000c2c:	623b      	str	r3, [r7, #32]
 8000c2e:	e7fe      	b.n	8000c2e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d103      	bne.n	8000c3e <xQueueGenericSend+0x3e>
 8000c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <xQueueGenericSend+0x42>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <xQueueGenericSend+0x44>
 8000c42:	2300      	movs	r3, #0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d109      	bne.n	8000c5c <xQueueGenericSend+0x5c>
 8000c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c4c:	f383 8811 	msr	BASEPRI, r3
 8000c50:	f3bf 8f6f 	isb	sy
 8000c54:	f3bf 8f4f 	dsb	sy
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	e7fe      	b.n	8000c5a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d103      	bne.n	8000c6a <xQueueGenericSend+0x6a>
 8000c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d101      	bne.n	8000c6e <xQueueGenericSend+0x6e>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <xQueueGenericSend+0x70>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d109      	bne.n	8000c88 <xQueueGenericSend+0x88>
 8000c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c78:	f383 8811 	msr	BASEPRI, r3
 8000c7c:	f3bf 8f6f 	isb	sy
 8000c80:	f3bf 8f4f 	dsb	sy
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	e7fe      	b.n	8000c86 <xQueueGenericSend+0x86>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000c88:	f001 fb60 	bl	800234c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d302      	bcc.n	8000c9e <xQueueGenericSend+0x9e>
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d11f      	bne.n	8000cde <xQueueGenericSend+0xde>
			{
				traceQUEUE_SEND( pxQueue );
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 fa59 	bl	8004158 <SEGGER_SYSVIEW_ShrinkId>
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	205a      	movs	r0, #90	; 0x5a
 8000cb4:	f002 fd32 	bl	800371c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	68b9      	ldr	r1, [r7, #8]
 8000cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cbe:	f000 f9c7 	bl	8001050 <prvCopyDataToQueue>
 8000cc2:	6278      	str	r0, [r7, #36]	; 0x24

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d004      	beq.n	8000cd6 <xQueueGenericSend+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cce:	3324      	adds	r3, #36	; 0x24
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fe59 	bl	8001988 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000cd6:	f001 fb67 	bl	80023a8 <vPortExitCritical>
				return pdPASS;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e07d      	b.n	8000dda <xQueueGenericSend+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d110      	bne.n	8000d06 <xQueueGenericSend+0x106>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000ce4:	f001 fb60 	bl	80023a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fa34 	bl	8004158 <SEGGER_SYSVIEW_ShrinkId>
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	205a      	movs	r0, #90	; 0x5a
 8000cfe:	f002 fd0d 	bl	800371c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e069      	b.n	8000dda <xQueueGenericSend+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d106      	bne.n	8000d1a <xQueueGenericSend+0x11a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fe9f 	bl	8001a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000d16:	2301      	movs	r3, #1
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000d1a:	f001 fb45 	bl	80023a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000d1e:	f000 fc5d 	bl	80015dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000d22:	f001 fb13 	bl	800234c <vPortEnterCritical>
 8000d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d2c:	b25b      	sxtb	r3, r3
 8000d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d32:	d103      	bne.n	8000d3c <xQueueGenericSend+0x13c>
 8000d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d103      	bne.n	8000d52 <xQueueGenericSend+0x152>
 8000d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d52:	f001 fb29 	bl	80023a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d56:	1d3a      	adds	r2, r7, #4
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fe8e 	bl	8001a80 <xTaskCheckForTimeOut>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d124      	bne.n	8000db4 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d6c:	f000 fa42 	bl	80011f4 <prvIsQueueFull>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d018      	beq.n	8000da8 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d78:	3310      	adds	r3, #16
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fdde 	bl	8001940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d86:	f000 f9cd 	bl	8001124 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000d8a:	f000 fc35 	bl	80015f8 <xTaskResumeAll>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f47f af79 	bne.w	8000c88 <xQueueGenericSend+0x88>
				{
					portYIELD_WITHIN_API();
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <xQueueGenericSend+0x1e4>)
 8000d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	f3bf 8f4f 	dsb	sy
 8000da2:	f3bf 8f6f 	isb	sy
 8000da6:	e76f      	b.n	8000c88 <xQueueGenericSend+0x88>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000daa:	f000 f9bb 	bl	8001124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000dae:	f000 fc23 	bl	80015f8 <xTaskResumeAll>
 8000db2:	e769      	b.n	8000c88 <xQueueGenericSend+0x88>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000db6:	f000 f9b5 	bl	8001124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000dba:	f000 fc1d 	bl	80015f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8000dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 f9c9 	bl	8004158 <SEGGER_SYSVIEW_ShrinkId>
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	205a      	movs	r0, #90	; 0x5a
 8000dd4:	f002 fca2 	bl	800371c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8000dd8:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3730      	adds	r7, #48	; 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	e000ed04 	.word	0xe000ed04

08000de8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b08f      	sub	sp, #60	; 0x3c
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d109      	bne.n	8000e18 <xQueueSemaphoreTake+0x30>
 8000e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e08:	f383 8811 	msr	BASEPRI, r3
 8000e0c:	f3bf 8f6f 	isb	sy
 8000e10:	f3bf 8f4f 	dsb	sy
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	e7fe      	b.n	8000e16 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d009      	beq.n	8000e34 <xQueueSemaphoreTake+0x4c>
 8000e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e24:	f383 8811 	msr	BASEPRI, r3
 8000e28:	f3bf 8f6f 	isb	sy
 8000e2c:	f3bf 8f4f 	dsb	sy
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e7fe      	b.n	8000e32 <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e34:	f001 fa8a 	bl	800234c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3c:	623b      	str	r3, [r7, #32]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d02b      	beq.n	8000e9c <xQueueSemaphoreTake+0xb4>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 f986 	bl	8004158 <SEGGER_SYSVIEW_ShrinkId>
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f003 f982 	bl	8004158 <SEGGER_SYSVIEW_ShrinkId>
 8000e54:	4601      	mov	r1, r0
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	460a      	mov	r2, r1
 8000e60:	4621      	mov	r1, r4
 8000e62:	205c      	movs	r0, #92	; 0x5c
 8000e64:	f002 fc5a 	bl	800371c <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d104      	bne.n	8000e82 <xQueueSemaphoreTake+0x9a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000e78:	f001 f8b4 	bl	8001fe4 <pvTaskIncrementMutexHeldCount>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d004      	beq.n	8000e94 <xQueueSemaphoreTake+0xac>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	3310      	adds	r3, #16
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fd7a 	bl	8001988 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000e94:	f001 fa88 	bl	80023a8 <vPortExitCritical>
				return pdPASS;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e0ba      	b.n	8001012 <xQueueSemaphoreTake+0x22a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d122      	bne.n	8000ee8 <xQueueSemaphoreTake+0x100>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d009      	beq.n	8000ebc <xQueueSemaphoreTake+0xd4>
 8000ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eac:	f383 8811 	msr	BASEPRI, r3
 8000eb0:	f3bf 8f6f 	isb	sy
 8000eb4:	f3bf 8f4f 	dsb	sy
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	e7fe      	b.n	8000eba <xQueueSemaphoreTake+0xd2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8000ebc:	f001 fa74 	bl	80023a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 f948 	bl	8004158 <SEGGER_SYSVIEW_ShrinkId>
 8000ec8:	4604      	mov	r4, r0
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f003 f944 	bl	8004158 <SEGGER_SYSVIEW_ShrinkId>
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	460a      	mov	r2, r1
 8000edc:	4621      	mov	r1, r4
 8000ede:	205c      	movs	r0, #92	; 0x5c
 8000ee0:	f002 fc1c 	bl	800371c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e094      	b.n	8001012 <xQueueSemaphoreTake+0x22a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <xQueueSemaphoreTake+0x114>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fdae 	bl	8001a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000efc:	f001 fa54 	bl	80023a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000f00:	f000 fb6c 	bl	80015dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000f04:	f001 fa22 	bl	800234c <vPortEnterCritical>
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d103      	bne.n	8000f1e <xQueueSemaphoreTake+0x136>
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2a:	d103      	bne.n	8000f34 <xQueueSemaphoreTake+0x14c>
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f34:	f001 fa38 	bl	80023a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f38:	463a      	mov	r2, r7
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fd9d 	bl	8001a80 <xTaskCheckForTimeOut>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d132      	bne.n	8000fb2 <xQueueSemaphoreTake+0x1ca>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f4e:	f000 f93b 	bl	80011c8 <prvIsQueueEmpty>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d026      	beq.n	8000fa6 <xQueueSemaphoreTake+0x1be>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d109      	bne.n	8000f74 <xQueueSemaphoreTake+0x18c>
					{
						taskENTER_CRITICAL();
 8000f60:	f001 f9f4 	bl	800234c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fea3 	bl	8001cb4 <xTaskPriorityInherit>
 8000f6e:	62b8      	str	r0, [r7, #40]	; 0x28
						}
						taskEXIT_CRITICAL();
 8000f70:	f001 fa1a 	bl	80023a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	3324      	adds	r3, #36	; 0x24
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fcdf 	bl	8001940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f84:	f000 f8ce 	bl	8001124 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000f88:	f000 fb36 	bl	80015f8 <xTaskResumeAll>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f47f af50 	bne.w	8000e34 <xQueueSemaphoreTake+0x4c>
				{
					portYIELD_WITHIN_API();
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <xQueueSemaphoreTake+0x234>)
 8000f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	f3bf 8f4f 	dsb	sy
 8000fa0:	f3bf 8f6f 	isb	sy
 8000fa4:	e746      	b.n	8000e34 <xQueueSemaphoreTake+0x4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8000fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fa8:	f000 f8bc 	bl	8001124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000fac:	f000 fb24 	bl	80015f8 <xTaskResumeAll>
 8000fb0:	e740      	b.n	8000e34 <xQueueSemaphoreTake+0x4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8000fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fb4:	f000 f8b6 	bl	8001124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000fb8:	f000 fb1e 	bl	80015f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fbe:	f000 f903 	bl	80011c8 <prvIsQueueEmpty>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f43f af35 	beq.w	8000e34 <xQueueSemaphoreTake+0x4c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8000fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00d      	beq.n	8000fec <xQueueSemaphoreTake+0x204>
					{
						taskENTER_CRITICAL();
 8000fd0:	f001 f9bc 	bl	800234c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fd6:	f000 f823 	bl	8001020 <prvGetDisinheritPriorityAfterTimeout>
 8000fda:	61f8      	str	r0, [r7, #28]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	69f9      	ldr	r1, [r7, #28]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 ff68 	bl	8001eb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8000fe8:	f001 f9de 	bl	80023a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 f8b2 	bl	8004158 <SEGGER_SYSVIEW_ShrinkId>
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f003 f8ae 	bl	8004158 <SEGGER_SYSVIEW_ShrinkId>
 8000ffc:	4601      	mov	r1, r0
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	460a      	mov	r2, r1
 8001008:	4621      	mov	r1, r4
 800100a:	205c      	movs	r0, #92	; 0x5c
 800100c:	f002 fb86 	bl	800371c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8001010:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001012:	4618      	mov	r0, r3
 8001014:	3734      	adds	r7, #52	; 0x34
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	e000ed04 	.word	0xe000ed04

08001020 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f1c3 0305 	rsb	r3, r3, #5
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e001      	b.n	8001042 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001042:	68fb      	ldr	r3, [r7, #12]
	}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001064:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10d      	bne.n	800108a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d14d      	bne.n	8001112 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fe94 	bl	8001da8 <xTaskPriorityDisinherit>
 8001080:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	e043      	b.n	8001112 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d119      	bne.n	80010c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6858      	ldr	r0, [r3, #4]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	461a      	mov	r2, r3
 800109a:	68b9      	ldr	r1, [r7, #8]
 800109c:	f003 fccf 	bl	8004a3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	441a      	add	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d32b      	bcc.n	8001112 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	e026      	b.n	8001112 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	68d8      	ldr	r0, [r3, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	461a      	mov	r2, r3
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	f003 fcb5 	bl	8004a3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	425b      	negs	r3, r3
 80010de:	441a      	add	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	425b      	negs	r3, r3
 80010fa:	441a      	add	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d105      	bne.n	8001112 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	3b01      	subs	r3, #1
 8001110:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800111a:	697b      	ldr	r3, [r7, #20]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800112c:	f001 f90e 	bl	800234c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001136:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001138:	e011      	b.n	800115e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	2b00      	cmp	r3, #0
 8001140:	d012      	beq.n	8001168 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3324      	adds	r3, #36	; 0x24
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fc1e 	bl	8001988 <xTaskRemoveFromEventList>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001152:	f000 fcf5 	bl	8001b40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	3b01      	subs	r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	2b00      	cmp	r3, #0
 8001164:	dce9      	bgt.n	800113a <prvUnlockQueue+0x16>
 8001166:	e000      	b.n	800116a <prvUnlockQueue+0x46>
					break;
 8001168:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	22ff      	movs	r2, #255	; 0xff
 800116e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001172:	f001 f919 	bl	80023a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001176:	f001 f8e9 	bl	800234c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001180:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001182:	e011      	b.n	80011a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d012      	beq.n	80011b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3310      	adds	r3, #16
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fbf9 	bl	8001988 <xTaskRemoveFromEventList>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800119c:	f000 fcd0 	bl	8001b40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80011a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	dce9      	bgt.n	8001184 <prvUnlockQueue+0x60>
 80011b0:	e000      	b.n	80011b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80011b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	22ff      	movs	r2, #255	; 0xff
 80011b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80011bc:	f001 f8f4 	bl	80023a8 <vPortExitCritical>
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80011d0:	f001 f8bc 	bl	800234c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80011dc:	2301      	movs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e001      	b.n	80011e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80011e6:	f001 f8df 	bl	80023a8 <vPortExitCritical>

	return xReturn;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80011fc:	f001 f8a6 	bl	800234c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001208:	429a      	cmp	r2, r3
 800120a:	d102      	bne.n	8001212 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800120c:	2301      	movs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e001      	b.n	8001216 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001216:	f001 f8c7 	bl	80023a8 <vPortExitCritical>

	return xReturn;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af04      	add	r7, sp, #16
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	4613      	mov	r3, r2
 8001232:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4618      	mov	r0, r3
 800123a:	f001 f9a9 	bl	8002590 <pvPortMalloc>
 800123e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00e      	beq.n	8001264 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001246:	2058      	movs	r0, #88	; 0x58
 8001248:	f001 f9a2 	bl	8002590 <pvPortMalloc>
 800124c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
 800125a:	e005      	b.n	8001268 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f001 fa5f 	bl	8002720 <vPortFree>
 8001262:	e001      	b.n	8001268 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d013      	beq.n	8001296 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800126e:	88fa      	ldrh	r2, [r7, #6]
 8001270:	2300      	movs	r3, #0
 8001272:	9303      	str	r3, [sp, #12]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 f80e 	bl	80012a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800128a:	69f8      	ldr	r0, [r7, #28]
 800128c:	f000 f89a 	bl	80013c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001290:	2301      	movs	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	e002      	b.n	800129c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800129c:	69bb      	ldr	r3, [r7, #24]
	}
 800129e:	4618      	mov	r0, r3
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b088      	sub	sp, #32
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80012b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	461a      	mov	r2, r3
 80012be:	21a5      	movs	r1, #165	; 0xa5
 80012c0:	f003 fbc8 	bl	8004a54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80012c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012ce:	3b01      	subs	r3, #1
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	f023 0307 	bic.w	r3, r3, #7
 80012dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d009      	beq.n	80012fc <prvInitialiseNewTask+0x56>
 80012e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ec:	f383 8811 	msr	BASEPRI, r3
 80012f0:	f3bf 8f6f 	isb	sy
 80012f4:	f3bf 8f4f 	dsb	sy
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e7fe      	b.n	80012fa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d01f      	beq.n	8001342 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	e012      	b.n	800132e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	4413      	add	r3, r2
 800130e:	7819      	ldrb	r1, [r3, #0]
 8001310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	4413      	add	r3, r2
 8001316:	3334      	adds	r3, #52	; 0x34
 8001318:	460a      	mov	r2, r1
 800131a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	4413      	add	r3, r2
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d006      	beq.n	8001336 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	3301      	adds	r3, #1
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	2b09      	cmp	r3, #9
 8001332:	d9e9      	bls.n	8001308 <prvInitialiseNewTask+0x62>
 8001334:	e000      	b.n	8001338 <prvInitialiseNewTask+0x92>
			{
				break;
 8001336:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	2200      	movs	r2, #0
 800133c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001340:	e003      	b.n	800134a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134c:	2b04      	cmp	r3, #4
 800134e:	d901      	bls.n	8001354 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001350:	2304      	movs	r3, #4
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800135e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8001360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001362:	2200      	movs	r2, #0
 8001364:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001368:	3304      	adds	r3, #4
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff faca 	bl	8000904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001372:	3318      	adds	r3, #24
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fac5 	bl	8000904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800137a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800137e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	f1c3 0205 	rsb	r2, r3, #5
 8001386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001388:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001392:	2200      	movs	r2, #0
 8001394:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	68f9      	ldr	r1, [r7, #12]
 80013a2:	69b8      	ldr	r0, [r7, #24]
 80013a4:	f000 feaa 	bl	80020fc <pxPortInitialiseStack>
 80013a8:	4602      	mov	r2, r0
 80013aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80013ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80013b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80013cc:	f000 ffbe 	bl	800234c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <prvAddNewTaskToReadyList+0xe4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a34      	ldr	r2, [pc, #208]	; (80014a8 <prvAddNewTaskToReadyList+0xe4>)
 80013d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80013da:	4b34      	ldr	r3, [pc, #208]	; (80014ac <prvAddNewTaskToReadyList+0xe8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80013e2:	4a32      	ldr	r2, [pc, #200]	; (80014ac <prvAddNewTaskToReadyList+0xe8>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <prvAddNewTaskToReadyList+0xe4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d110      	bne.n	8001412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80013f0:	f000 fbc4 	bl	8001b7c <prvInitialiseTaskLists>
 80013f4:	e00d      	b.n	8001412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80013f6:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <prvAddNewTaskToReadyList+0xec>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <prvAddNewTaskToReadyList+0xe8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	429a      	cmp	r2, r3
 800140a:	d802      	bhi.n	8001412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800140c:	4a27      	ldr	r2, [pc, #156]	; (80014ac <prvAddNewTaskToReadyList+0xe8>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <prvAddNewTaskToReadyList+0xf0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <prvAddNewTaskToReadyList+0xf0>)
 800141a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <prvAddNewTaskToReadyList+0xf0>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <prvAddNewTaskToReadyList+0x94>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fd67 	bl	8003f00 <SEGGER_SYSVIEW_OnTaskCreate>
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	461d      	mov	r5, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	461c      	mov	r4, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	1ae3      	subs	r3, r4, r3
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	462b      	mov	r3, r5
 8001454:	f001 fb2e 	bl	8002ab4 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f002 fdd8 	bl	8004010 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	2201      	movs	r2, #1
 8001466:	409a      	lsls	r2, r3
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <prvAddNewTaskToReadyList+0xf4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4313      	orrs	r3, r2
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <prvAddNewTaskToReadyList+0xf4>)
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <prvAddNewTaskToReadyList+0xf8>)
 8001480:	441a      	add	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f7ff fa48 	bl	800091e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800148e:	f000 ff8b 	bl	80023a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <prvAddNewTaskToReadyList+0xec>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <prvAddNewTaskToReadyList+0xda>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <prvAddNewTaskToReadyList+0xe8>)
 800149c:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bdb0      	pop	{r4, r5, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000184 	.word	0x20000184
 80014ac:	200000ac 	.word	0x200000ac
 80014b0:	20000190 	.word	0x20000190
 80014b4:	200001a0 	.word	0x200001a0
 80014b8:	2000018c 	.word	0x2000018c
 80014bc:	200000b0 	.word	0x200000b0

080014c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01a      	beq.n	8001508 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <vTaskDelay+0x68>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d009      	beq.n	80014ee <vTaskDelay+0x2e>
 80014da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014de:	f383 8811 	msr	BASEPRI, r3
 80014e2:	f3bf 8f6f 	isb	sy
 80014e6:	f3bf 8f4f 	dsb	sy
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	e7fe      	b.n	80014ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80014ee:	f000 f875 	bl	80015dc <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	2023      	movs	r0, #35	; 0x23
 80014f6:	f002 f805 	bl	8003504 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80014fa:	2100      	movs	r1, #0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fd85 	bl	800200c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001502:	f000 f879 	bl	80015f8 <xTaskResumeAll>
 8001506:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d107      	bne.n	800151e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <vTaskDelay+0x6c>)
 8001510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f3bf 8f4f 	dsb	sy
 800151a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200001ac 	.word	0x200001ac
 800152c:	e000ed04 	.word	0xe000ed04

08001530 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <vTaskStartScheduler+0x90>)
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	2300      	movs	r3, #0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2300      	movs	r3, #0
 8001540:	2282      	movs	r2, #130	; 0x82
 8001542:	4920      	ldr	r1, [pc, #128]	; (80015c4 <vTaskStartScheduler+0x94>)
 8001544:	4820      	ldr	r0, [pc, #128]	; (80015c8 <vTaskStartScheduler+0x98>)
 8001546:	f7ff fe6d 	bl	8001224 <xTaskCreate>
 800154a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d123      	bne.n	800159a <vTaskStartScheduler+0x6a>
 8001552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	f3bf 8f6f 	isb	sy
 800155e:	f3bf 8f4f 	dsb	sy
 8001562:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <vTaskStartScheduler+0x9c>)
 8001566:	f04f 32ff 	mov.w	r2, #4294967295
 800156a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <vTaskStartScheduler+0xa0>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <vTaskStartScheduler+0xa4>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <vTaskStartScheduler+0xa8>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <vTaskStartScheduler+0x90>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d102      	bne.n	800158a <vTaskStartScheduler+0x5a>
 8001584:	f002 fca0 	bl	8003ec8 <SEGGER_SYSVIEW_OnIdle>
 8001588:	e004      	b.n	8001594 <vTaskStartScheduler+0x64>
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <vTaskStartScheduler+0xa8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fcfa 	bl	8003f88 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001594:	f000 fe3c 	bl	8002210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001598:	e00d      	b.n	80015b6 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d109      	bne.n	80015b6 <vTaskStartScheduler+0x86>
 80015a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a6:	f383 8811 	msr	BASEPRI, r3
 80015aa:	f3bf 8f6f 	isb	sy
 80015ae:	f3bf 8f4f 	dsb	sy
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	e7fe      	b.n	80015b4 <vTaskStartScheduler+0x84>
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200001a8 	.word	0x200001a8
 80015c4:	08004c78 	.word	0x08004c78
 80015c8:	08001b59 	.word	0x08001b59
 80015cc:	200001a4 	.word	0x200001a4
 80015d0:	20000190 	.word	0x20000190
 80015d4:	20000188 	.word	0x20000188
 80015d8:	200000ac 	.word	0x200000ac

080015dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <vTaskSuspendAll+0x18>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <vTaskSuspendAll+0x18>)
 80015e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	200001ac 	.word	0x200001ac

080015f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <xTaskResumeAll+0x104>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <xTaskResumeAll+0x2a>
 800160e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001612:	f383 8811 	msr	BASEPRI, r3
 8001616:	f3bf 8f6f 	isb	sy
 800161a:	f3bf 8f4f 	dsb	sy
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	e7fe      	b.n	8001620 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001622:	f000 fe93 	bl	800234c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001626:	4b35      	ldr	r3, [pc, #212]	; (80016fc <xTaskResumeAll+0x104>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3b01      	subs	r3, #1
 800162c:	4a33      	ldr	r2, [pc, #204]	; (80016fc <xTaskResumeAll+0x104>)
 800162e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <xTaskResumeAll+0x104>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d159      	bne.n	80016ec <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <xTaskResumeAll+0x108>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d055      	beq.n	80016ec <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001640:	e032      	b.n	80016a8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <xTaskResumeAll+0x10c>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3318      	adds	r3, #24
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f9c2 	bl	80009d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	3304      	adds	r3, #4
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff f9bd 	bl	80009d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fcd5 	bl	8004010 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	2201      	movs	r2, #1
 800166c:	409a      	lsls	r2, r3
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <xTaskResumeAll+0x110>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4313      	orrs	r3, r2
 8001674:	4a24      	ldr	r2, [pc, #144]	; (8001708 <xTaskResumeAll+0x110>)
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4a21      	ldr	r2, [pc, #132]	; (800170c <xTaskResumeAll+0x114>)
 8001686:	441a      	add	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3304      	adds	r3, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4610      	mov	r0, r2
 8001690:	f7ff f945 	bl	800091e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <xTaskResumeAll+0x118>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	429a      	cmp	r2, r3
 80016a0:	d302      	bcc.n	80016a8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <xTaskResumeAll+0x11c>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <xTaskResumeAll+0x10c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1c8      	bne.n	8001642 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80016b6:	f000 fadd 	bl	8001c74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <xTaskResumeAll+0x120>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d010      	beq.n	80016e8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80016c6:	f000 f83b 	bl	8001740 <xTaskIncrementTick>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <xTaskResumeAll+0x11c>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3b01      	subs	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f1      	bne.n	80016c6 <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <xTaskResumeAll+0x120>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <xTaskResumeAll+0x11c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80016ec:	f000 fe5c 	bl	80023a8 <vPortExitCritical>

	return xAlreadyYielded;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200001ac 	.word	0x200001ac
 8001700:	20000184 	.word	0x20000184
 8001704:	20000144 	.word	0x20000144
 8001708:	2000018c 	.word	0x2000018c
 800170c:	200000b0 	.word	0x200000b0
 8001710:	200000ac 	.word	0x200000ac
 8001714:	20000198 	.word	0x20000198
 8001718:	20000194 	.word	0x20000194

0800171c <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001722:	f000 fef7 	bl	8002514 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <xTaskGetTickCountFromISR+0x20>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001730:	683b      	ldr	r3, [r7, #0]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000188 	.word	0x20000188

08001740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800174a:	4b40      	ldr	r3, [pc, #256]	; (800184c <xTaskIncrementTick+0x10c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d172      	bne.n	8001838 <xTaskIncrementTick+0xf8>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001752:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <xTaskIncrementTick+0x110>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800175a:	4a3d      	ldr	r2, [pc, #244]	; (8001850 <xTaskIncrementTick+0x110>)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d11f      	bne.n	80017a6 <xTaskIncrementTick+0x66>
		{
			taskSWITCH_DELAYED_LISTS();
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <xTaskIncrementTick+0x114>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d009      	beq.n	8001784 <xTaskIncrementTick+0x44>
 8001770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001774:	f383 8811 	msr	BASEPRI, r3
 8001778:	f3bf 8f6f 	isb	sy
 800177c:	f3bf 8f4f 	dsb	sy
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	e7fe      	b.n	8001782 <xTaskIncrementTick+0x42>
 8001784:	4b33      	ldr	r3, [pc, #204]	; (8001854 <xTaskIncrementTick+0x114>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b33      	ldr	r3, [pc, #204]	; (8001858 <xTaskIncrementTick+0x118>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a31      	ldr	r2, [pc, #196]	; (8001854 <xTaskIncrementTick+0x114>)
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4a31      	ldr	r2, [pc, #196]	; (8001858 <xTaskIncrementTick+0x118>)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b30      	ldr	r3, [pc, #192]	; (800185c <xTaskIncrementTick+0x11c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a2f      	ldr	r2, [pc, #188]	; (800185c <xTaskIncrementTick+0x11c>)
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	f000 fa67 	bl	8001c74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <xTaskIncrementTick+0x120>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d348      	bcc.n	8001842 <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <xTaskIncrementTick+0x114>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d104      	bne.n	80017c4 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <xTaskIncrementTick+0x120>)
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	601a      	str	r2, [r3, #0]
					break;
 80017c2:	e03e      	b.n	8001842 <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <xTaskIncrementTick+0x114>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d203      	bcs.n	80017e4 <xTaskIncrementTick+0xa4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80017dc:	4a20      	ldr	r2, [pc, #128]	; (8001860 <xTaskIncrementTick+0x120>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80017e2:	e02e      	b.n	8001842 <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	3304      	adds	r3, #4
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff f8f5 	bl	80009d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <xTaskIncrementTick+0xc0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3318      	adds	r3, #24
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f8ec 	bl	80009d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fc04 	bl	8004010 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	2201      	movs	r2, #1
 800180e:	409a      	lsls	r2, r3
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <xTaskIncrementTick+0x124>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4313      	orrs	r3, r2
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <xTaskIncrementTick+0x124>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4a10      	ldr	r2, [pc, #64]	; (8001868 <xTaskIncrementTick+0x128>)
 8001828:	441a      	add	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	3304      	adds	r3, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f7ff f874 	bl	800091e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001836:	e7bb      	b.n	80017b0 <xTaskIncrementTick+0x70>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <xTaskIncrementTick+0x12c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <xTaskIncrementTick+0x12c>)
 8001840:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001842:	697b      	ldr	r3, [r7, #20]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200001ac 	.word	0x200001ac
 8001850:	20000188 	.word	0x20000188
 8001854:	2000013c 	.word	0x2000013c
 8001858:	20000140 	.word	0x20000140
 800185c:	2000019c 	.word	0x2000019c
 8001860:	200001a4 	.word	0x200001a4
 8001864:	2000018c 	.word	0x2000018c
 8001868:	200000b0 	.word	0x200000b0
 800186c:	20000194 	.word	0x20000194

08001870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <vTaskSwitchContext+0xb8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <vTaskSwitchContext+0xbc>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001884:	e04c      	b.n	8001920 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8001886:	4b29      	ldr	r3, [pc, #164]	; (800192c <vTaskSwitchContext+0xbc>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <vTaskSwitchContext+0xc0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800189a:	7afb      	ldrb	r3, [r7, #11]
 800189c:	f1c3 031f 	rsb	r3, r3, #31
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	4924      	ldr	r1, [pc, #144]	; (8001934 <vTaskSwitchContext+0xc4>)
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <vTaskSwitchContext+0x5a>
	__asm volatile
 80018b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ba:	f383 8811 	msr	BASEPRI, r3
 80018be:	f3bf 8f6f 	isb	sy
 80018c2:	f3bf 8f4f 	dsb	sy
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	e7fe      	b.n	80018c8 <vTaskSwitchContext+0x58>
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4a17      	ldr	r2, [pc, #92]	; (8001934 <vTaskSwitchContext+0xc4>)
 80018d6:	4413      	add	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	3308      	adds	r3, #8
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d104      	bne.n	80018fa <vTaskSwitchContext+0x8a>
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <vTaskSwitchContext+0xc8>)
 8001902:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <vTaskSwitchContext+0xc8>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <vTaskSwitchContext+0xcc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d102      	bne.n	8001916 <vTaskSwitchContext+0xa6>
 8001910:	f002 fada 	bl	8003ec8 <SEGGER_SYSVIEW_OnIdle>
}
 8001914:	e004      	b.n	8001920 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <vTaskSwitchContext+0xc8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fb34 	bl	8003f88 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001920:	bf00      	nop
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200001ac 	.word	0x200001ac
 800192c:	20000198 	.word	0x20000198
 8001930:	2000018c 	.word	0x2000018c
 8001934:	200000b0 	.word	0x200000b0
 8001938:	200000ac 	.word	0x200000ac
 800193c:	200001a8 	.word	0x200001a8

08001940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <vTaskPlaceOnEventList+0x24>
 8001950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001954:	f383 8811 	msr	BASEPRI, r3
 8001958:	f3bf 8f6f 	isb	sy
 800195c:	f3bf 8f4f 	dsb	sy
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	e7fe      	b.n	8001962 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <vTaskPlaceOnEventList+0x44>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3318      	adds	r3, #24
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7fe fffa 	bl	8000966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001972:	2101      	movs	r1, #1
 8001974:	6838      	ldr	r0, [r7, #0]
 8001976:	f000 fb49 	bl	800200c <prvAddCurrentTaskToDelayedList>
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200000ac 	.word	0x200000ac

08001988 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <xTaskRemoveFromEventList+0x2a>
 800199e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a2:	f383 8811 	msr	BASEPRI, r3
 80019a6:	f3bf 8f6f 	isb	sy
 80019aa:	f3bf 8f4f 	dsb	sy
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e7fe      	b.n	80019b0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	3318      	adds	r3, #24
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f80e 	bl	80009d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <xTaskRemoveFromEventList+0xb4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d120      	bne.n	8001a06 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	3304      	adds	r3, #4
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f805 	bl	80009d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fb1d 	bl	8004010 <SEGGER_SYSVIEW_OnTaskStartReady>
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	2201      	movs	r2, #1
 80019dc:	409a      	lsls	r2, r3
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <xTaskRemoveFromEventList+0xb8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <xTaskRemoveFromEventList+0xb8>)
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <xTaskRemoveFromEventList+0xbc>)
 80019f6:	441a      	add	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	3304      	adds	r3, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	4610      	mov	r0, r2
 8001a00:	f7fe ff8d 	bl	800091e <vListInsertEnd>
 8001a04:	e005      	b.n	8001a12 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	3318      	adds	r3, #24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480e      	ldr	r0, [pc, #56]	; (8001a48 <xTaskRemoveFromEventList+0xc0>)
 8001a0e:	f7fe ff86 	bl	800091e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <xTaskRemoveFromEventList+0xc4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d905      	bls.n	8001a2c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001a20:	2301      	movs	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <xTaskRemoveFromEventList+0xc8>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e001      	b.n	8001a30 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001a30:	697b      	ldr	r3, [r7, #20]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200001ac 	.word	0x200001ac
 8001a40:	2000018c 	.word	0x2000018c
 8001a44:	200000b0 	.word	0x200000b0
 8001a48:	20000144 	.word	0x20000144
 8001a4c:	200000ac 	.word	0x200000ac
 8001a50:	20000198 	.word	0x20000198

08001a54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <vTaskInternalSetTimeOutState+0x24>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <vTaskInternalSetTimeOutState+0x28>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	605a      	str	r2, [r3, #4]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	2000019c 	.word	0x2000019c
 8001a7c:	20000188 	.word	0x20000188

08001a80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <xTaskCheckForTimeOut+0x24>
 8001a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a94:	f383 8811 	msr	BASEPRI, r3
 8001a98:	f3bf 8f6f 	isb	sy
 8001a9c:	f3bf 8f4f 	dsb	sy
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	e7fe      	b.n	8001aa2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <xTaskCheckForTimeOut+0x3e>
 8001aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aae:	f383 8811 	msr	BASEPRI, r3
 8001ab2:	f3bf 8f6f 	isb	sy
 8001ab6:	f3bf 8f4f 	dsb	sy
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	e7fe      	b.n	8001abc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001abe:	f000 fc45 	bl	800234c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <xTaskCheckForTimeOut+0xb8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ada:	d102      	bne.n	8001ae2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	e023      	b.n	8001b2a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <xTaskCheckForTimeOut+0xbc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d007      	beq.n	8001afe <xTaskCheckForTimeOut+0x7e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d302      	bcc.n	8001afe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	e015      	b.n	8001b2a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d20b      	bcs.n	8001b20 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff9d 	bl	8001a54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e004      	b.n	8001b2a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001b2a:	f000 fc3d 	bl	80023a8 <vPortExitCritical>

	return xReturn;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000188 	.word	0x20000188
 8001b3c:	2000019c 	.word	0x2000019c

08001b40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <vTaskMissedYield+0x14>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	20000198 	.word	0x20000198

08001b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001b60:	f000 f84c 	bl	8001bfc <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <prvIdleTask+0x20>)
 8001b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001b74:	e7f4      	b.n	8001b60 <prvIdleTask+0x8>
 8001b76:	bf00      	nop
 8001b78:	e000ed04 	.word	0xe000ed04

08001b7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	e00c      	b.n	8001ba2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <prvInitialiseTaskLists+0x60>)
 8001b94:	4413      	add	r3, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fe94 	bl	80008c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d9ef      	bls.n	8001b88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <prvInitialiseTaskLists+0x64>)
 8001baa:	f7fe fe8b 	bl	80008c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <prvInitialiseTaskLists+0x68>)
 8001bb0:	f7fe fe88 	bl	80008c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <prvInitialiseTaskLists+0x6c>)
 8001bb6:	f7fe fe85 	bl	80008c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001bba:	480c      	ldr	r0, [pc, #48]	; (8001bec <prvInitialiseTaskLists+0x70>)
 8001bbc:	f7fe fe82 	bl	80008c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001bc0:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <prvInitialiseTaskLists+0x74>)
 8001bc2:	f7fe fe7f 	bl	80008c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <prvInitialiseTaskLists+0x78>)
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <prvInitialiseTaskLists+0x64>)
 8001bca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <prvInitialiseTaskLists+0x7c>)
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <prvInitialiseTaskLists+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200000b0 	.word	0x200000b0
 8001be0:	20000114 	.word	0x20000114
 8001be4:	20000128 	.word	0x20000128
 8001be8:	20000144 	.word	0x20000144
 8001bec:	20000158 	.word	0x20000158
 8001bf0:	20000170 	.word	0x20000170
 8001bf4:	2000013c 	.word	0x2000013c
 8001bf8:	20000140 	.word	0x20000140

08001bfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c02:	e019      	b.n	8001c38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001c04:	f000 fba2 	bl	800234c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <prvCheckTasksWaitingTermination+0x4c>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3304      	adds	r3, #4
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fedf 	bl	80009d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <prvCheckTasksWaitingTermination+0x50>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <prvCheckTasksWaitingTermination+0x50>)
 8001c22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <prvCheckTasksWaitingTermination+0x54>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <prvCheckTasksWaitingTermination+0x54>)
 8001c2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001c2e:	f000 fbbb 	bl	80023a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f80e 	bl	8001c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <prvCheckTasksWaitingTermination+0x54>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1e1      	bne.n	8001c04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000158 	.word	0x20000158
 8001c4c:	20000184 	.word	0x20000184
 8001c50:	2000016c 	.word	0x2000016c

08001c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fd5d 	bl	8002720 <vPortFree>
			vPortFree( pxTCB );
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fd5a 	bl	8002720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <prvResetNextTaskUnblockTime+0x38>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d104      	bne.n	8001c8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8001c86:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001c8c:	e008      	b.n	8001ca0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <prvResetNextTaskUnblockTime+0x38>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	2000013c 	.word	0x2000013c
 8001cb0:	200001a4 	.word	0x200001a4

08001cb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d063      	beq.n	8001d92 <xTaskPriorityInherit+0xde>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <xTaskPriorityInherit+0xe8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d253      	bcs.n	8001d80 <xTaskPriorityInherit+0xcc>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db06      	blt.n	8001cee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <xTaskPriorityInherit+0xe8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	f1c3 0205 	rsb	r2, r3, #5
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	6959      	ldr	r1, [r3, #20]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <xTaskPriorityInherit+0xec>)
 8001d00:	4413      	add	r3, r2
 8001d02:	4299      	cmp	r1, r3
 8001d04:	d12f      	bne.n	8001d66 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fe64 	bl	80009d8 <uxListRemove>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10a      	bne.n	8001d2c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43da      	mvns	r2, r3
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <xTaskPriorityInherit+0xf0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4013      	ands	r3, r2
 8001d28:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <xTaskPriorityInherit+0xf0>)
 8001d2a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <xTaskPriorityInherit+0xe8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <xTaskPriorityInherit+0xf0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <xTaskPriorityInherit+0xf0>)
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <xTaskPriorityInherit+0xec>)
 8001d56:	441a      	add	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f7fe fddd 	bl	800091e <vListInsertEnd>
 8001d64:	e004      	b.n	8001d70 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <xTaskPriorityInherit+0xe8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4619      	mov	r1, r3
 8001d74:	2049      	movs	r0, #73	; 0x49
 8001d76:	f001 fbc5 	bl	8003504 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e008      	b.n	8001d92 <xTaskPriorityInherit+0xde>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <xTaskPriorityInherit+0xe8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d201      	bcs.n	8001d92 <xTaskPriorityInherit+0xde>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001d92:	68fb      	ldr	r3, [r7, #12]
	}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200000ac 	.word	0x200000ac
 8001da0:	200000b0 	.word	0x200000b0
 8001da4:	2000018c 	.word	0x2000018c

08001da8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d071      	beq.n	8001ea2 <xTaskPriorityDisinherit+0xfa>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <xTaskPriorityDisinherit+0x104>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d009      	beq.n	8001ddc <xTaskPriorityDisinherit+0x34>
 8001dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dcc:	f383 8811 	msr	BASEPRI, r3
 8001dd0:	f3bf 8f6f 	isb	sy
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	e7fe      	b.n	8001dda <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <xTaskPriorityDisinherit+0x50>
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	e7fe      	b.n	8001df6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d049      	beq.n	8001ea2 <xTaskPriorityDisinherit+0xfa>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d145      	bne.n	8001ea2 <xTaskPriorityDisinherit+0xfa>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fddc 	bl	80009d8 <uxListRemove>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e2a:	4921      	ldr	r1, [pc, #132]	; (8001eb0 <xTaskPriorityDisinherit+0x108>)
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10a      	bne.n	8001e52 <xTaskPriorityDisinherit+0xaa>
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	2201      	movs	r2, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <xTaskPriorityDisinherit+0x10c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <xTaskPriorityDisinherit+0x10c>)
 8001e50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4619      	mov	r1, r3
 8001e56:	204a      	movs	r0, #74	; 0x4a
 8001e58:	f001 fb54 	bl	8003504 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	f1c3 0205 	rsb	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	2201      	movs	r2, #1
 8001e76:	409a      	lsls	r2, r3
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <xTaskPriorityDisinherit+0x10c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <xTaskPriorityDisinherit+0x10c>)
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <xTaskPriorityDisinherit+0x108>)
 8001e90:	441a      	add	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	3304      	adds	r3, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4610      	mov	r0, r2
 8001e9a:	f7fe fd40 	bl	800091e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001ea2:	697b      	ldr	r3, [r7, #20]
	}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200000ac 	.word	0x200000ac
 8001eb0:	200000b0 	.word	0x200000b0
 8001eb4:	2000018c 	.word	0x2000018c

08001eb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d07e      	beq.n	8001fce <vTaskPriorityDisinheritAfterTimeout+0x116>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <vTaskPriorityDisinheritAfterTimeout+0x34>
 8001ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001edc:	f383 8811 	msr	BASEPRI, r3
 8001ee0:	f3bf 8f6f 	isb	sy
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e7fe      	b.n	8001eea <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d902      	bls.n	8001efc <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e002      	b.n	8001f02 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d060      	beq.n	8001fce <vTaskPriorityDisinheritAfterTimeout+0x116>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d15b      	bne.n	8001fce <vTaskPriorityDisinheritAfterTimeout+0x116>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <vTaskPriorityDisinheritAfterTimeout+0x120>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d109      	bne.n	8001f34 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8001f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f24:	f383 8811 	msr	BASEPRI, r3
 8001f28:	f3bf 8f6f 	isb	sy
 8001f2c:	f3bf 8f4f 	dsb	sy
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	e7fe      	b.n	8001f32 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4619      	mov	r1, r3
 8001f38:	204a      	movs	r0, #74	; 0x4a
 8001f3a:	f001 fae3 	bl	8003504 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db04      	blt.n	8001f5c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f1c3 0205 	rsb	r2, r3, #5
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6959      	ldr	r1, [r3, #20]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4299      	cmp	r1, r3
 8001f70:	d12d      	bne.n	8001fce <vTaskPriorityDisinheritAfterTimeout+0x116>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	3304      	adds	r3, #4
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fd2e 	bl	80009d8 <uxListRemove>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10a      	bne.n	8001f98 <vTaskPriorityDisinheritAfterTimeout+0xe0>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	2201      	movs	r2, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4013      	ands	r3, r2
 8001f94:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001f96:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 f838 	bl	8004010 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001fc0:	441a      	add	r2, r3
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4610      	mov	r0, r2
 8001fca:	f7fe fca8 	bl	800091e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001fce:	bf00      	nop
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200000ac 	.word	0x200000ac
 8001fdc:	200000b0 	.word	0x200000b0
 8001fe0:	2000018c 	.word	0x2000018c

08001fe4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <pvTaskIncrementMutexHeldCount+0x24>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <pvTaskIncrementMutexHeldCount+0x24>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ff6:	3201      	adds	r2, #1
 8001ff8:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8001ffa:	4b03      	ldr	r3, [pc, #12]	; (8002008 <pvTaskIncrementMutexHeldCount+0x24>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
	}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	200000ac 	.word	0x200000ac

0800200c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002016:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3304      	adds	r3, #4
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fcd8 	bl	80009d8 <uxListRemove>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10b      	bne.n	8002046 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800202e:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	2201      	movs	r2, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4013      	ands	r3, r2
 8002042:	4a29      	ldr	r2, [pc, #164]	; (80020e8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002044:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d110      	bne.n	8002070 <prvAddCurrentTaskToDelayedList+0x64>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00d      	beq.n	8002070 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	211b      	movs	r1, #27
 800205a:	4618      	mov	r0, r3
 800205c:	f002 f81c 	bl	8004098 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002060:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3304      	adds	r3, #4
 8002066:	4619      	mov	r1, r3
 8002068:	4820      	ldr	r0, [pc, #128]	; (80020ec <prvAddCurrentTaskToDelayedList+0xe0>)
 800206a:	f7fe fc58 	bl	800091e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800206e:	e032      	b.n	80020d6 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d20f      	bcs.n	80020a8 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2104      	movs	r1, #4
 800208e:	4618      	mov	r0, r3
 8002090:	f002 f802 	bl	8004098 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3304      	adds	r3, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	4610      	mov	r0, r2
 80020a2:	f7fe fc60 	bl	8000966 <vListInsert>
}
 80020a6:	e016      	b.n	80020d6 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2104      	movs	r1, #4
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 fff2 	bl	8004098 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3304      	adds	r3, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f7fe fc50 	bl	8000966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <prvAddCurrentTaskToDelayedList+0xec>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d202      	bcs.n	80020d6 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80020d0:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <prvAddCurrentTaskToDelayedList+0xec>)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	6013      	str	r3, [r2, #0]
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000188 	.word	0x20000188
 80020e4:	200000ac 	.word	0x200000ac
 80020e8:	2000018c 	.word	0x2000018c
 80020ec:	20000170 	.word	0x20000170
 80020f0:	20000140 	.word	0x20000140
 80020f4:	2000013c 	.word	0x2000013c
 80020f8:	200001a4 	.word	0x200001a4

080020fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3b04      	subs	r3, #4
 800210c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3b04      	subs	r3, #4
 800211a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f023 0201 	bic.w	r2, r3, #1
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3b04      	subs	r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800212c:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <pxPortInitialiseStack+0x64>)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3b14      	subs	r3, #20
 8002136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3b04      	subs	r3, #4
 8002142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f06f 0202 	mvn.w	r2, #2
 800214a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3b20      	subs	r3, #32
 8002150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002152:	68fb      	ldr	r3, [r7, #12]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	08002165 	.word	0x08002165

08002164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <prvTaskExitError+0x50>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002176:	d009      	beq.n	800218c <prvTaskExitError+0x28>
 8002178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e7fe      	b.n	800218a <prvTaskExitError+0x26>
 800218c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002190:	f383 8811 	msr	BASEPRI, r3
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800219e:	bf00      	nop
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0fc      	beq.n	80021a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000010 	.word	0x20000010
	...

080021c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <pxCurrentTCBConst2>)
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	6808      	ldr	r0, [r1, #0]
 80021c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ca:	f380 8809 	msr	PSP, r0
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f04f 0000 	mov.w	r0, #0
 80021d6:	f380 8811 	msr	BASEPRI, r0
 80021da:	4770      	bx	lr
 80021dc:	f3af 8000 	nop.w

080021e0 <pxCurrentTCBConst2>:
 80021e0:	200000ac 	.word	0x200000ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop

080021e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <prvPortStartFirstTask+0x24>)
 80021ea:	6800      	ldr	r0, [r0, #0]
 80021ec:	6800      	ldr	r0, [r0, #0]
 80021ee:	f380 8808 	msr	MSP, r0
 80021f2:	f04f 0000 	mov.w	r0, #0
 80021f6:	f380 8814 	msr	CONTROL, r0
 80021fa:	b662      	cpsie	i
 80021fc:	b661      	cpsie	f
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	f3bf 8f6f 	isb	sy
 8002206:	df00      	svc	0
 8002208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800220a:	bf00      	nop
 800220c:	e000ed08 	.word	0xe000ed08

08002210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002216:	4b44      	ldr	r3, [pc, #272]	; (8002328 <xPortStartScheduler+0x118>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a44      	ldr	r2, [pc, #272]	; (800232c <xPortStartScheduler+0x11c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d109      	bne.n	8002234 <xPortStartScheduler+0x24>
 8002220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002224:	f383 8811 	msr	BASEPRI, r3
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	e7fe      	b.n	8002232 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002234:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <xPortStartScheduler+0x118>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a3d      	ldr	r2, [pc, #244]	; (8002330 <xPortStartScheduler+0x120>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d109      	bne.n	8002252 <xPortStartScheduler+0x42>
 800223e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e7fe      	b.n	8002250 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <xPortStartScheduler+0x124>)
 8002254:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	22ff      	movs	r2, #255	; 0xff
 8002262:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b30      	ldr	r3, [pc, #192]	; (8002338 <xPortStartScheduler+0x128>)
 8002278:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800227a:	4b30      	ldr	r3, [pc, #192]	; (800233c <xPortStartScheduler+0x12c>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002280:	e009      	b.n	8002296 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002282:	4b2e      	ldr	r3, [pc, #184]	; (800233c <xPortStartScheduler+0x12c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3b01      	subs	r3, #1
 8002288:	4a2c      	ldr	r2, [pc, #176]	; (800233c <xPortStartScheduler+0x12c>)
 800228a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	2b80      	cmp	r3, #128	; 0x80
 80022a0:	d0ef      	beq.n	8002282 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <xPortStartScheduler+0x12c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f1c3 0307 	rsb	r3, r3, #7
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d009      	beq.n	80022c2 <xPortStartScheduler+0xb2>
 80022ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	e7fe      	b.n	80022c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <xPortStartScheduler+0x12c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	4a1c      	ldr	r2, [pc, #112]	; (800233c <xPortStartScheduler+0x12c>)
 80022ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <xPortStartScheduler+0x12c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <xPortStartScheduler+0x12c>)
 80022d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <xPortStartScheduler+0x130>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a16      	ldr	r2, [pc, #88]	; (8002340 <xPortStartScheduler+0x130>)
 80022e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <xPortStartScheduler+0x130>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a13      	ldr	r2, [pc, #76]	; (8002340 <xPortStartScheduler+0x130>)
 80022f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80022f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80022f8:	f000 f8de 	bl	80024b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <xPortStartScheduler+0x134>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002302:	f000 f8fd 	bl	8002500 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <xPortStartScheduler+0x138>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <xPortStartScheduler+0x138>)
 800230c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002310:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002312:	f7ff ff69 	bl	80021e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002316:	f7ff faab 	bl	8001870 <vTaskSwitchContext>
	prvTaskExitError();
 800231a:	f7ff ff23 	bl	8002164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	e000ed00 	.word	0xe000ed00
 800232c:	410fc271 	.word	0x410fc271
 8002330:	410fc270 	.word	0x410fc270
 8002334:	e000e400 	.word	0xe000e400
 8002338:	200001b0 	.word	0x200001b0
 800233c:	200001b4 	.word	0x200001b4
 8002340:	e000ed20 	.word	0xe000ed20
 8002344:	20000010 	.word	0x20000010
 8002348:	e000ef34 	.word	0xe000ef34

0800234c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002356:	f383 8811 	msr	BASEPRI, r3
 800235a:	f3bf 8f6f 	isb	sy
 800235e:	f3bf 8f4f 	dsb	sy
 8002362:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <vPortEnterCritical+0x54>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <vPortEnterCritical+0x54>)
 800236c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <vPortEnterCritical+0x54>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d10e      	bne.n	8002394 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <vPortEnterCritical+0x58>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <vPortEnterCritical+0x48>
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	e7fe      	b.n	8002392 <vPortEnterCritical+0x46>
	}
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	20000010 	.word	0x20000010
 80023a4:	e000ed04 	.word	0xe000ed04

080023a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <vPortExitCritical+0x4c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <vPortExitCritical+0x22>
 80023b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	e7fe      	b.n	80023c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <vPortExitCritical+0x4c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <vPortExitCritical+0x4c>)
 80023d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <vPortExitCritical+0x4c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d104      	bne.n	80023e6 <vPortExitCritical+0x3e>
 80023dc:	2300      	movs	r3, #0
 80023de:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000010 	.word	0x20000010
	...

08002400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002400:	f3ef 8009 	mrs	r0, PSP
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <pxCurrentTCBConst>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	f01e 0f10 	tst.w	lr, #16
 8002410:	bf08      	it	eq
 8002412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800241a:	6010      	str	r0, [r2, #0]
 800241c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002424:	f380 8811 	msr	BASEPRI, r0
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f7ff fa1e 	bl	8001870 <vTaskSwitchContext>
 8002434:	f04f 0000 	mov.w	r0, #0
 8002438:	f380 8811 	msr	BASEPRI, r0
 800243c:	bc09      	pop	{r0, r3}
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	6808      	ldr	r0, [r1, #0]
 8002442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002446:	f01e 0f10 	tst.w	lr, #16
 800244a:	bf08      	it	eq
 800244c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002450:	f380 8809 	msr	PSP, r0
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	f3af 8000 	nop.w

08002460 <pxCurrentTCBConst>:
 8002460:	200000ac 	.word	0x200000ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop

08002468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
	__asm volatile
 800246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8002480:	f001 fca8 	bl	8003dd4 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002484:	f7ff f95c 	bl	8001740 <xTaskIncrementTick>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800248e:	f001 fcff 	bl	8003e90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <SysTick_Handler+0x4c>)
 8002494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e001      	b.n	80024a0 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800249c:	f001 fcdc 	bl	8003e58 <SEGGER_SYSVIEW_RecordExitISR>
 80024a0:	2300      	movs	r3, #0
 80024a2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000ed04 	.word	0xe000ed04

080024b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <vPortSetupTimerInterrupt+0x34>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <vPortSetupTimerInterrupt+0x38>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <vPortSetupTimerInterrupt+0x3c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <vPortSetupTimerInterrupt+0x40>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	4a09      	ldr	r2, [pc, #36]	; (80024fc <vPortSetupTimerInterrupt+0x44>)
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <vPortSetupTimerInterrupt+0x34>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e010 	.word	0xe000e010
 80024f0:	e000e018 	.word	0xe000e018
 80024f4:	20000014 	.word	0x20000014
 80024f8:	10624dd3 	.word	0x10624dd3
 80024fc:	e000e014 	.word	0xe000e014

08002500 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002500:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002510 <vPortEnableVFP+0x10>
 8002504:	6801      	ldr	r1, [r0, #0]
 8002506:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800250a:	6001      	str	r1, [r0, #0]
 800250c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800250e:	bf00      	nop
 8002510:	e000ed88 	.word	0xe000ed88

08002514 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800251a:	f3ef 8305 	mrs	r3, IPSR
 800251e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	d913      	bls.n	800254e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002526:	4a16      	ldr	r2, [pc, #88]	; (8002580 <vPortValidateInterruptPriority+0x6c>)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <vPortValidateInterruptPriority+0x70>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	7afa      	ldrb	r2, [r7, #11]
 8002536:	429a      	cmp	r2, r3
 8002538:	d209      	bcs.n	800254e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253e:	f383 8811 	msr	BASEPRI, r3
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	e7fe      	b.n	800254c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <vPortValidateInterruptPriority+0x74>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <vPortValidateInterruptPriority+0x78>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d909      	bls.n	8002572 <vPortValidateInterruptPriority+0x5e>
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	e7fe      	b.n	8002570 <vPortValidateInterruptPriority+0x5c>
	}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000e3f0 	.word	0xe000e3f0
 8002584:	200001b0 	.word	0x200001b0
 8002588:	e000ed0c 	.word	0xe000ed0c
 800258c:	200001b4 	.word	0x200001b4

08002590 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800259c:	f7ff f81e 	bl	80015dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <pvPortMalloc+0x178>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80025a8:	f000 f91a 	bl	80027e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <pvPortMalloc+0x17c>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 8091 	bne.w	80026dc <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01c      	beq.n	80025fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80025c0:	2208      	movs	r2, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d013      	beq.n	80025fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f023 0307 	bic.w	r3, r3, #7
 80025d8:	3308      	adds	r3, #8
 80025da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <pvPortMalloc+0x6a>
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e7fe      	b.n	80025f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d06d      	beq.n	80026dc <pvPortMalloc+0x14c>
 8002600:	4b43      	ldr	r3, [pc, #268]	; (8002710 <pvPortMalloc+0x180>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d868      	bhi.n	80026dc <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800260a:	4b42      	ldr	r3, [pc, #264]	; (8002714 <pvPortMalloc+0x184>)
 800260c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <pvPortMalloc+0x184>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002614:	e004      	b.n	8002620 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	429a      	cmp	r2, r3
 8002628:	d903      	bls.n	8002632 <pvPortMalloc+0xa2>
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f1      	bne.n	8002616 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002632:	4b35      	ldr	r3, [pc, #212]	; (8002708 <pvPortMalloc+0x178>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	429a      	cmp	r2, r3
 800263a:	d04f      	beq.n	80026dc <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2208      	movs	r2, #8
 8002642:	4413      	add	r3, r2
 8002644:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1ad2      	subs	r2, r2, r3
 8002656:	2308      	movs	r3, #8
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	429a      	cmp	r2, r3
 800265c:	d91e      	bls.n	800269c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <pvPortMalloc+0xf4>
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	e7fe      	b.n	8002682 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	1ad2      	subs	r2, r2, r3
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002696:	69b8      	ldr	r0, [r7, #24]
 8002698:	f000 f904 	bl	80028a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <pvPortMalloc+0x180>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	4a1a      	ldr	r2, [pc, #104]	; (8002710 <pvPortMalloc+0x180>)
 80026a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80026aa:	4b19      	ldr	r3, [pc, #100]	; (8002710 <pvPortMalloc+0x180>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <pvPortMalloc+0x188>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d203      	bcs.n	80026be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <pvPortMalloc+0x180>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <pvPortMalloc+0x188>)
 80026bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <pvPortMalloc+0x17c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <pvPortMalloc+0x18c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	4a10      	ldr	r2, [pc, #64]	; (800271c <pvPortMalloc+0x18c>)
 80026da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80026dc:	f7fe ff8c 	bl	80015f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <pvPortMalloc+0x16e>
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e7fe      	b.n	80026fc <pvPortMalloc+0x16c>
	return pvReturn;
 80026fe:	69fb      	ldr	r3, [r7, #28]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3728      	adds	r7, #40	; 0x28
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20012dc0 	.word	0x20012dc0
 800270c:	20012dd4 	.word	0x20012dd4
 8002710:	20012dc4 	.word	0x20012dc4
 8002714:	20012db8 	.word	0x20012db8
 8002718:	20012dc8 	.word	0x20012dc8
 800271c:	20012dcc 	.word	0x20012dcc

08002720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d04b      	beq.n	80027ca <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002732:	2308      	movs	r3, #8
 8002734:	425b      	negs	r3, r3
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4413      	add	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <vPortFree+0xb4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <vPortFree+0x42>
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	e7fe      	b.n	8002760 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <vPortFree+0x5e>
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	e7fe      	b.n	800277c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <vPortFree+0xb4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01e      	beq.n	80027ca <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11a      	bne.n	80027ca <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <vPortFree+0xb4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	43db      	mvns	r3, r3
 800279e:	401a      	ands	r2, r3
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80027a4:	f7fe ff1a 	bl	80015dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <vPortFree+0xb8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4413      	add	r3, r2
 80027b2:	4a09      	ldr	r2, [pc, #36]	; (80027d8 <vPortFree+0xb8>)
 80027b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80027b6:	6938      	ldr	r0, [r7, #16]
 80027b8:	f000 f874 	bl	80028a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <vPortFree+0xbc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	4a06      	ldr	r2, [pc, #24]	; (80027dc <vPortFree+0xbc>)
 80027c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80027c6:	f7fe ff17 	bl	80015f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20012dd4 	.word	0x20012dd4
 80027d8:	20012dc4 	.word	0x20012dc4
 80027dc:	20012dd0 	.word	0x20012dd0

080027e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80027ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <prvHeapInit+0xac>)
 80027ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3307      	adds	r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0307 	bic.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	4a1f      	ldr	r2, [pc, #124]	; (800288c <prvHeapInit+0xac>)
 8002810:	4413      	add	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002818:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <prvHeapInit+0xb0>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <prvHeapInit+0xb0>)
 8002820:	2200      	movs	r2, #0
 8002822:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	4413      	add	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800282c:	2208      	movs	r2, #8
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0307 	bic.w	r3, r3, #7
 800283a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a15      	ldr	r2, [pc, #84]	; (8002894 <prvHeapInit+0xb4>)
 8002840:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <prvHeapInit+0xb4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2200      	movs	r2, #0
 8002848:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <prvHeapInit+0xb4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	1ad2      	subs	r2, r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <prvHeapInit+0xb4>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <prvHeapInit+0xb8>)
 800286e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a09      	ldr	r2, [pc, #36]	; (800289c <prvHeapInit+0xbc>)
 8002876:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <prvHeapInit+0xc0>)
 800287a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800287e:	601a      	str	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	200001b8 	.word	0x200001b8
 8002890:	20012db8 	.word	0x20012db8
 8002894:	20012dc0 	.word	0x20012dc0
 8002898:	20012dc8 	.word	0x20012dc8
 800289c:	20012dc4 	.word	0x20012dc4
 80028a0:	20012dd4 	.word	0x20012dd4

080028a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80028ac:	4b28      	ldr	r3, [pc, #160]	; (8002950 <prvInsertBlockIntoFreeList+0xac>)
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e002      	b.n	80028b8 <prvInsertBlockIntoFreeList+0x14>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d8f7      	bhi.n	80028b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	4413      	add	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d108      	bne.n	80028e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	441a      	add	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	441a      	add	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d118      	bne.n	800292c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <prvInsertBlockIntoFreeList+0xb0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d00d      	beq.n	8002922 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	441a      	add	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e008      	b.n	8002934 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <prvInsertBlockIntoFreeList+0xb0>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e003      	b.n	8002934 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d002      	beq.n	8002942 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20012db8 	.word	0x20012db8
 8002954:	20012dc0 	.word	0x20012dc0

08002958 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800295c:	4803      	ldr	r0, [pc, #12]	; (800296c <_cbSendSystemDesc+0x14>)
 800295e:	f001 f9e5 	bl	8003d2c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002962:	4803      	ldr	r0, [pc, #12]	; (8002970 <_cbSendSystemDesc+0x18>)
 8002964:	f001 f9e2 	bl	8003d2c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}
 800296c:	08004c80 	.word	0x08004c80
 8002970:	08004cbc 	.word	0x08004cbc

08002974 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <SEGGER_SYSVIEW_Conf+0x20>)
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <SEGGER_SYSVIEW_Conf+0x20>)
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <SEGGER_SYSVIEW_Conf+0x24>)
 8002982:	4a06      	ldr	r2, [pc, #24]	; (800299c <SEGGER_SYSVIEW_Conf+0x28>)
 8002984:	f000 fd52 	bl	800342c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002988:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800298c:	f000 fd8c 	bl	80034a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000014 	.word	0x20000014
 8002998:	08002959 	.word	0x08002959
 800299c:	08004dc8 	.word	0x08004dc8

080029a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	e034      	b.n	8002a16 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80029ac:	491e      	ldr	r1, [pc, #120]	; (8002a28 <_cbSendTaskList+0x88>)
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	491a      	ldr	r1, [pc, #104]	; (8002a28 <_cbSendTaskList+0x88>)
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3304      	adds	r3, #4
 80029cc:	681c      	ldr	r4, [r3, #0]
 80029ce:	4916      	ldr	r1, [pc, #88]	; (8002a28 <_cbSendTaskList+0x88>)
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3308      	adds	r3, #8
 80029de:	681d      	ldr	r5, [r3, #0]
 80029e0:	4911      	ldr	r1, [pc, #68]	; (8002a28 <_cbSendTaskList+0x88>)
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	330c      	adds	r3, #12
 80029f0:	681e      	ldr	r6, [r3, #0]
 80029f2:	490d      	ldr	r1, [pc, #52]	; (8002a28 <_cbSendTaskList+0x88>)
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3310      	adds	r3, #16
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4633      	mov	r3, r6
 8002a08:	462a      	mov	r2, r5
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	f000 f8ba 	bl	8002b84 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3301      	adds	r3, #1
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <_cbSendTaskList+0x8c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3c5      	bcc.n	80029ac <_cbSendTaskList+0xc>
  }
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a28:	20012dd8 	.word	0x20012dd8
 8002a2c:	20012e78 	.word	0x20012e78

08002a30 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002a36:	f7fe fe71 	bl	800171c <xTaskGetTickCountFromISR>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f04f 0400 	mov.w	r4, #0
 8002a40:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
 8002a44:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002a48:	184b      	adds	r3, r1, r1
 8002a4a:	eb42 0402 	adc.w	r4, r2, r2
 8002a4e:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= 1000;
 8002a52:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002a56:	462b      	mov	r3, r5
 8002a58:	4634      	mov	r4, r6
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	0162      	lsls	r2, r4, #5
 8002a64:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002a68:	0159      	lsls	r1, r3, #5
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	1b5b      	subs	r3, r3, r5
 8002a70:	eb64 0406 	sbc.w	r4, r4, r6
 8002a74:	f04f 0100 	mov.w	r1, #0
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	00a2      	lsls	r2, r4, #2
 8002a7e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002a82:	0099      	lsls	r1, r3, #2
 8002a84:	460b      	mov	r3, r1
 8002a86:	4614      	mov	r4, r2
 8002a88:	195b      	adds	r3, r3, r5
 8002a8a:	eb44 0406 	adc.w	r4, r4, r6
 8002a8e:	f04f 0100 	mov.w	r1, #0
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	00e2      	lsls	r2, r4, #3
 8002a98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a9c:	00d9      	lsls	r1, r3, #3
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8002aa6:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	4621      	mov	r1, r4
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ab4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002ac2:	2205      	movs	r2, #5
 8002ac4:	492b      	ldr	r1, [pc, #172]	; (8002b74 <SYSVIEW_AddTask+0xc0>)
 8002ac6:	68b8      	ldr	r0, [r7, #8]
 8002ac8:	f001 ffaa 	bl	8004a20 <memcmp>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d04b      	beq.n	8002b6a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <SYSVIEW_AddTask+0xc4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b07      	cmp	r3, #7
 8002ad8:	d903      	bls.n	8002ae2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002ada:	4828      	ldr	r0, [pc, #160]	; (8002b7c <SYSVIEW_AddTask+0xc8>)
 8002adc:	f001 fc2a 	bl	8004334 <SEGGER_SYSVIEW_Warn>
    return;
 8002ae0:	e044      	b.n	8002b6c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002ae2:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <SYSVIEW_AddTask+0xc4>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4926      	ldr	r1, [pc, #152]	; (8002b80 <SYSVIEW_AddTask+0xcc>)
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <SYSVIEW_AddTask+0xc4>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4921      	ldr	r1, [pc, #132]	; (8002b80 <SYSVIEW_AddTask+0xcc>)
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	3304      	adds	r3, #4
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <SYSVIEW_AddTask+0xc4>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	491b      	ldr	r1, [pc, #108]	; (8002b80 <SYSVIEW_AddTask+0xcc>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <SYSVIEW_AddTask+0xc4>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4916      	ldr	r1, [pc, #88]	; (8002b80 <SYSVIEW_AddTask+0xcc>)
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	330c      	adds	r3, #12
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <SYSVIEW_AddTask+0xc4>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4910      	ldr	r1, [pc, #64]	; (8002b80 <SYSVIEW_AddTask+0xcc>)
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3310      	adds	r3, #16
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <SYSVIEW_AddTask+0xc4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <SYSVIEW_AddTask+0xc4>)
 8002b56:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f80e 	bl	8002b84 <SYSVIEW_SendTaskInfo>
 8002b68:	e000      	b.n	8002b6c <SYSVIEW_AddTask+0xb8>
    return;
 8002b6a:	bf00      	nop

}
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	08004ccc 	.word	0x08004ccc
 8002b78:	20012e78 	.word	0x20012e78
 8002b7c:	08004cd4 	.word	0x08004cd4
 8002b80:	20012dd8 	.word	0x20012dd8

08002b84 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	2214      	movs	r2, #20
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 ff5a 	bl	8004a54 <memset>
  TaskInfo.TaskID     = TaskID;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 ffbd 	bl	8003b38 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002bbe:	bf00      	nop
 8002bc0:	3728      	adds	r7, #40	; 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002bce:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <_DoInit+0x8c>)
 8002bd0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a1d      	ldr	r2, [pc, #116]	; (8002c58 <_DoInit+0x90>)
 8002be2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <_DoInit+0x94>)
 8002be8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bf0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <_DoInit+0x90>)
 8002c08:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <_DoInit+0x98>)
 8002c0e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2210      	movs	r2, #16
 8002c14:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3307      	adds	r3, #7
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <_DoInit+0x9c>)
 8002c2e:	6810      	ldr	r0, [r2, #0]
 8002c30:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <_DoInit+0xa0>)
 8002c36:	6810      	ldr	r0, [r2, #0]
 8002c38:	6018      	str	r0, [r3, #0]
 8002c3a:	8891      	ldrh	r1, [r2, #4]
 8002c3c:	7992      	ldrb	r2, [r2, #6]
 8002c3e:	8099      	strh	r1, [r3, #4]
 8002c40:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	719a      	strb	r2, [r3, #6]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	200153c0 	.word	0x200153c0
 8002c58:	08004d24 	.word	0x08004d24
 8002c5c:	20012e7c 	.word	0x20012e7c
 8002c60:	2001327c 	.word	0x2001327c
 8002c64:	08004d30 	.word	0x08004d30
 8002c68:	08004d34 	.word	0x08004d34

08002c6c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	; 0x28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002c78:	4b3c      	ldr	r3, [pc, #240]	; (8002d6c <SEGGER_RTT_ReadNoLock+0x100>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <SEGGER_RTT_ReadNoLock+0x18>
 8002c80:	f7ff ffa2 	bl	8002bc8 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	3360      	adds	r3, #96	; 0x60
 8002c90:	4a36      	ldr	r2, [pc, #216]	; (8002d6c <SEGGER_RTT_ReadNoLock+0x100>)
 8002c92:	4413      	add	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002caa:	6a3a      	ldr	r2, [r7, #32]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d92a      	bls.n	8002d08 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bf28      	it	cs
 8002cc4:	4613      	movcs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	4413      	add	r3, r2
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	69f8      	ldr	r0, [r7, #28]
 8002cd6:	f001 feb2 	bl	8004a3e <memcpy>
    NumBytesRead += NumBytesRem;
 8002cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002cf2:	6a3a      	ldr	r2, [r7, #32]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	6a3a      	ldr	r2, [r7, #32]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d101      	bne.n	8002d08 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002d04:	2300      	movs	r3, #0
 8002d06:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4293      	cmp	r3, r2
 8002d16:	bf28      	it	cs
 8002d18:	4613      	movcs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d018      	beq.n	8002d54 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	4413      	add	r3, r2
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	69f8      	ldr	r0, [r7, #28]
 8002d30:	f001 fe85 	bl	8004a3e <memcpy>
    NumBytesRead += NumBytesRem;
 8002d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4413      	add	r3, r2
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002d4c:	6a3a      	ldr	r2, [r7, #32]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3728      	adds	r7, #40	; 0x28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200153c0 	.word	0x200153c0

08002d70 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4a3f      	ldr	r2, [pc, #252]	; (8002e8c <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002d8e:	4413      	add	r3, r2
 8002d90:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d854      	bhi.n	8002e50 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d30f      	bcc.n	8002dda <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 fe39 	bl	8004a3e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	441a      	add	r2, r3
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e054      	b.n	8002e84 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	4413      	add	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d34b      	bcc.n	8002e82 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d90e      	bls.n	8002e1a <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4413      	add	r3, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 fe18 	bl	8004a3e <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	441a      	add	r2, r3
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	60da      	str	r2, [r3, #12]
 8002e18:	e018      	b.n	8002e4c <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	4413      	add	r3, r2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 fe09 	bl	8004a3e <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	6858      	ldr	r0, [r3, #4]
 8002e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	18d1      	adds	r1, r2, r3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f001 fdfe 	bl	8004a3e <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad2      	subs	r2, r2, r3
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e019      	b.n	8002e84 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d30f      	bcc.n	8002e82 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4413      	add	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 fde5 	bl	8004a3e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	441a      	add	r2, r3
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3728      	adds	r7, #40	; 0x28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	200153c0 	.word	0x200153c0

08002e90 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002e9e:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8002ea6:	f7ff fe8f 	bl	8002bc8 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d24c      	bcs.n	8002f50 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8002eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8002eba:	f04f 0120 	mov.w	r1, #32
 8002ebe:	f381 8811 	msr	BASEPRI, r1
 8002ec2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d032      	beq.n	8002f30 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002eca:	4925      	ldr	r1, [pc, #148]	; (8002f60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	440b      	add	r3, r1
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002ede:	4920      	ldr	r1, [pc, #128]	; (8002f60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	440b      	add	r3, r1
 8002eee:	3304      	adds	r3, #4
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002ef4:	491a      	ldr	r1, [pc, #104]	; (8002f60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	3320      	adds	r3, #32
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002f08:	4915      	ldr	r1, [pc, #84]	; (8002f60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	440b      	add	r3, r1
 8002f16:	3328      	adds	r3, #40	; 0x28
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002f1c:	4910      	ldr	r1, [pc, #64]	; (8002f60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	440b      	add	r3, r1
 8002f2a:	3324      	adds	r3, #36	; 0x24
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002f30:	490b      	ldr	r1, [pc, #44]	; (8002f60 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	440b      	add	r3, r1
 8002f3e:	332c      	adds	r3, #44	; 0x2c
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e002      	b.n	8002f56 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
 8002f54:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002f56:	697b      	ldr	r3, [r7, #20]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200153c0 	.word	0x200153c0

08002f64 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002f72:	4b30      	ldr	r3, [pc, #192]	; (8003034 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8002f7a:	f7ff fe25 	bl	8002bc8 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002f7e:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d24b      	bcs.n	8003022 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8002f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f8e:	f04f 0120 	mov.w	r1, #32
 8002f92:	f381 8811 	msr	BASEPRI, r1
 8002f96:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d031      	beq.n	8003002 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002f9e:	4925      	ldr	r1, [pc, #148]	; (8003034 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	3360      	adds	r3, #96	; 0x60
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002fb2:	4920      	ldr	r1, [pc, #128]	; (8003034 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3364      	adds	r3, #100	; 0x64
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002fc6:	491b      	ldr	r1, [pc, #108]	; (8003034 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3368      	adds	r3, #104	; 0x68
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002fda:	4916      	ldr	r1, [pc, #88]	; (8003034 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3370      	adds	r3, #112	; 0x70
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002fee:	4911      	ldr	r1, [pc, #68]	; (8003034 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	440b      	add	r3, r1
 8002ffc:	336c      	adds	r3, #108	; 0x6c
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8003002:	490c      	ldr	r1, [pc, #48]	; (8003034 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	440b      	add	r3, r1
 8003010:	3374      	adds	r3, #116	; 0x74
 8003012:	6a3a      	ldr	r2, [r7, #32]
 8003014:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	e002      	b.n	8003028 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003028:	697b      	ldr	r3, [r7, #20]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200153c0 	.word	0x200153c0

08003038 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003048:	e002      	b.n	8003050 <_EncodeStr+0x18>
    Len++;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3301      	adds	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f6      	bne.n	800304a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	d901      	bls.n	8003068 <_EncodeStr+0x30>
    Len = Limit;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2bfe      	cmp	r3, #254	; 0xfe
 800306c:	d806      	bhi.n	800307c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	60fa      	str	r2, [r7, #12]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e011      	b.n	80030a0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	60fa      	str	r2, [r7, #12]
 8003082:	22ff      	movs	r2, #255	; 0xff
 8003084:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	60fa      	str	r2, [r7, #12]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	0a19      	lsrs	r1, r3, #8
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	60fa      	str	r2, [r7, #12]
 800309c:	b2ca      	uxtb	r2, r1
 800309e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80030a4:	e00a      	b.n	80030bc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	1c53      	adds	r3, r2, #1
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	60f9      	str	r1, [r7, #12]
 80030b2:	7812      	ldrb	r2, [r2, #0]
 80030b4:	701a      	strb	r2, [r3, #0]
    n++;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	3301      	adds	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d3f0      	bcc.n	80030a6 <_EncodeStr+0x6e>
  }
  return pPayload;
 80030c4:	68fb      	ldr	r3, [r7, #12]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3304      	adds	r3, #4
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80030f0:	1cfb      	adds	r3, r7, #3
 80030f2:	2201      	movs	r2, #1
 80030f4:	4619      	mov	r1, r3
 80030f6:	2001      	movs	r0, #1
 80030f8:	f7ff fdb8 	bl	8002c6c <SEGGER_RTT_ReadNoLock>
 80030fc:	4603      	mov	r3, r0
 80030fe:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	dd44      	ble.n	8003190 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	2b04      	cmp	r3, #4
 800310a:	d01a      	beq.n	8003142 <_HandleIncomingPacket+0x58>
 800310c:	2b04      	cmp	r3, #4
 800310e:	dc06      	bgt.n	800311e <_HandleIncomingPacket+0x34>
 8003110:	2b02      	cmp	r3, #2
 8003112:	d010      	beq.n	8003136 <_HandleIncomingPacket+0x4c>
 8003114:	2b02      	cmp	r3, #2
 8003116:	dc11      	bgt.n	800313c <_HandleIncomingPacket+0x52>
 8003118:	2b01      	cmp	r3, #1
 800311a:	d009      	beq.n	8003130 <_HandleIncomingPacket+0x46>
 800311c:	e02d      	b.n	800317a <_HandleIncomingPacket+0x90>
 800311e:	2b06      	cmp	r3, #6
 8003120:	d015      	beq.n	800314e <_HandleIncomingPacket+0x64>
 8003122:	2b06      	cmp	r3, #6
 8003124:	db10      	blt.n	8003148 <_HandleIncomingPacket+0x5e>
 8003126:	2b07      	cmp	r3, #7
 8003128:	d014      	beq.n	8003154 <_HandleIncomingPacket+0x6a>
 800312a:	2b80      	cmp	r3, #128	; 0x80
 800312c:	d015      	beq.n	800315a <_HandleIncomingPacket+0x70>
 800312e:	e024      	b.n	800317a <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003130:	f000 fb86 	bl	8003840 <SEGGER_SYSVIEW_Start>
      break;
 8003134:	e031      	b.n	800319a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003136:	f000 fc3f 	bl	80039b8 <SEGGER_SYSVIEW_Stop>
      break;
 800313a:	e02e      	b.n	800319a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800313c:	f000 fe1a 	bl	8003d74 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003140:	e02b      	b.n	800319a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003142:	f000 fddf 	bl	8003d04 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003146:	e028      	b.n	800319a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003148:	f000 fc5c 	bl	8003a04 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800314c:	e025      	b.n	800319a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800314e:	f001 f8b3 	bl	80042b8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003152:	e022      	b.n	800319a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003154:	f001 f892 	bl	800427c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003158:	e01f      	b.n	800319a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800315a:	1cfb      	adds	r3, r7, #3
 800315c:	2201      	movs	r2, #1
 800315e:	4619      	mov	r1, r3
 8003160:	2001      	movs	r0, #1
 8003162:	f7ff fd83 	bl	8002c6c <SEGGER_RTT_ReadNoLock>
 8003166:	4603      	mov	r3, r0
 8003168:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	dd11      	ble.n	8003194 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	4618      	mov	r0, r3
 8003174:	f001 f802 	bl	800417c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003178:	e00c      	b.n	8003194 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	b25b      	sxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	da0a      	bge.n	8003198 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003182:	1cfb      	adds	r3, r7, #3
 8003184:	2201      	movs	r2, #1
 8003186:	4619      	mov	r1, r3
 8003188:	2001      	movs	r0, #1
 800318a:	f7ff fd6f 	bl	8002c6c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800318e:	e003      	b.n	8003198 <_HandleIncomingPacket+0xae>
    }
  }
 8003190:	bf00      	nop
 8003192:	e002      	b.n	800319a <_HandleIncomingPacket+0xb0>
      break;
 8003194:	bf00      	nop
 8003196:	e000      	b.n	800319a <_HandleIncomingPacket+0xb0>
      break;
 8003198:	bf00      	nop
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80031aa:	2301      	movs	r3, #1
 80031ac:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	3301      	adds	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b8:	4b30      	ldr	r3, [pc, #192]	; (800327c <_TrySendOverflowPacket+0xd8>)
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031be:	e00b      	b.n	80031d8 <_TrySendOverflowPacket+0x34>
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	1c59      	adds	r1, r3, #1
 80031c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80031ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	09db      	lsrs	r3, r3, #7
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	2b7f      	cmp	r3, #127	; 0x7f
 80031dc:	d8f0      	bhi.n	80031c0 <_TrySendOverflowPacket+0x1c>
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <_TrySendOverflowPacket+0xdc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80031f4:	4b21      	ldr	r3, [pc, #132]	; (800327c <_TrySendOverflowPacket+0xd8>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	623b      	str	r3, [r7, #32]
 8003206:	e00b      	b.n	8003220 <_TrySendOverflowPacket+0x7c>
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	b2da      	uxtb	r2, r3
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	1c59      	adds	r1, r3, #1
 8003210:	6279      	str	r1, [r7, #36]	; 0x24
 8003212:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	09db      	lsrs	r3, r3, #7
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	2b7f      	cmp	r3, #127	; 0x7f
 8003224:	d8f0      	bhi.n	8003208 <_TrySendOverflowPacket+0x64>
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	627a      	str	r2, [r7, #36]	; 0x24
 800322c:	6a3a      	ldr	r2, [r7, #32]
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	461a      	mov	r2, r3
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	4619      	mov	r1, r3
 8003242:	2001      	movs	r0, #1
 8003244:	f7ff fd94 	bl	8002d70 <SEGGER_RTT_WriteSkipNoLock>
 8003248:	4603      	mov	r3, r0
 800324a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <_TrySendOverflowPacket+0xd8>)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <_TrySendOverflowPacket+0xd8>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	3b01      	subs	r3, #1
 800325e:	b2da      	uxtb	r2, r3
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <_TrySendOverflowPacket+0xd8>)
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e004      	b.n	8003270 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003266:	4b05      	ldr	r3, [pc, #20]	; (800327c <_TrySendOverflowPacket+0xd8>)
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	3301      	adds	r3, #1
 800326c:	4a03      	ldr	r2, [pc, #12]	; (800327c <_TrySendOverflowPacket+0xd8>)
 800326e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003270:	693b      	ldr	r3, [r7, #16]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3730      	adds	r7, #48	; 0x30
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20015294 	.word	0x20015294
 8003280:	e0001004 	.word	0xe0001004

08003284 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003290:	4b63      	ldr	r3, [pc, #396]	; (8003420 <_SendPacket+0x19c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d010      	beq.n	80032ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003298:	4b61      	ldr	r3, [pc, #388]	; (8003420 <_SendPacket+0x19c>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80a1 	beq.w	80033e4 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80032a2:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <_SendPacket+0x19c>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d109      	bne.n	80032be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80032aa:	f7ff ff7b 	bl	80031a4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80032ae:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <_SendPacket+0x19c>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	f040 8098 	bne.w	80033e8 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 80032b8:	e001      	b.n	80032be <_SendPacket+0x3a>
    goto Send;
 80032ba:	bf00      	nop
 80032bc:	e000      	b.n	80032c0 <_SendPacket+0x3c>
Send:
 80032be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b1f      	cmp	r3, #31
 80032c4:	d809      	bhi.n	80032da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80032c6:	4b56      	ldr	r3, [pc, #344]	; (8003420 <_SendPacket+0x19c>)
 80032c8:	69da      	ldr	r2, [r3, #28]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 8089 	bne.w	80033ec <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b17      	cmp	r3, #23
 80032de:	d807      	bhi.n	80032f0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e03d      	b.n	800336c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b7f      	cmp	r3, #127	; 0x7f
 80032fc:	d912      	bls.n	8003324 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	09da      	lsrs	r2, r3, #7
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3b01      	subs	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	3a01      	subs	r2, #1
 8003316:	60fa      	str	r2, [r7, #12]
 8003318:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800331c:	b2da      	uxtb	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e006      	b.n	8003332 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3b01      	subs	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b7f      	cmp	r3, #127	; 0x7f
 8003336:	d912      	bls.n	800335e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	09da      	lsrs	r2, r3, #7
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3b01      	subs	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	3a01      	subs	r2, #1
 8003350:	60fa      	str	r2, [r7, #12]
 8003352:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003356:	b2da      	uxtb	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	e006      	b.n	800336c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3b01      	subs	r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800336c:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <_SendPacket+0x1a0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003372:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <_SendPacket+0x19c>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	623b      	str	r3, [r7, #32]
 8003384:	e00b      	b.n	800339e <_SendPacket+0x11a>
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	1c59      	adds	r1, r3, #1
 800338e:	6279      	str	r1, [r7, #36]	; 0x24
 8003390:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	09db      	lsrs	r3, r3, #7
 800339c:	623b      	str	r3, [r7, #32]
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	2b7f      	cmp	r3, #127	; 0x7f
 80033a2:	d8f0      	bhi.n	8003386 <_SendPacket+0x102>
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	627a      	str	r2, [r7, #36]	; 0x24
 80033aa:	6a3a      	ldr	r2, [r7, #32]
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	701a      	strb	r2, [r3, #0]
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	68f9      	ldr	r1, [r7, #12]
 80033be:	2001      	movs	r0, #1
 80033c0:	f7ff fcd6 	bl	8002d70 <SEGGER_RTT_WriteSkipNoLock>
 80033c4:	4603      	mov	r3, r0
 80033c6:	613b      	str	r3, [r7, #16]
  if (Status) {
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80033ce:	4a14      	ldr	r2, [pc, #80]	; (8003420 <_SendPacket+0x19c>)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	60d3      	str	r3, [r2, #12]
 80033d4:	e00b      	b.n	80033ee <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <_SendPacket+0x19c>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <_SendPacket+0x19c>)
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e004      	b.n	80033ee <_SendPacket+0x16a>
    goto SendDone;
 80033e4:	bf00      	nop
 80033e6:	e002      	b.n	80033ee <_SendPacket+0x16a>
      goto SendDone;
 80033e8:	bf00      	nop
 80033ea:	e000      	b.n	80033ee <_SendPacket+0x16a>
      goto SendDone;
 80033ec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <_SendPacket+0x1a4>)
 80033f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <_SendPacket+0x1a4>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d00b      	beq.n	8003416 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <_SendPacket+0x19c>)
 8003400:	789b      	ldrb	r3, [r3, #2]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d107      	bne.n	8003416 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <_SendPacket+0x19c>)
 8003408:	2201      	movs	r2, #1
 800340a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800340c:	f7ff fe6d 	bl	80030ea <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <_SendPacket+0x19c>)
 8003412:	2200      	movs	r2, #0
 8003414:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003416:	bf00      	nop
 8003418:	3728      	adds	r7, #40	; 0x28
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20015294 	.word	0x20015294
 8003424:	e0001004 	.word	0xe0001004
 8003428:	200153c0 	.word	0x200153c0

0800342c <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800343a:	2300      	movs	r3, #0
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003442:	4a14      	ldr	r2, [pc, #80]	; (8003494 <SEGGER_SYSVIEW_Init+0x68>)
 8003444:	4914      	ldr	r1, [pc, #80]	; (8003498 <SEGGER_SYSVIEW_Init+0x6c>)
 8003446:	2001      	movs	r0, #1
 8003448:	f7ff fd22 	bl	8002e90 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800344c:	2300      	movs	r3, #0
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2308      	movs	r3, #8
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <SEGGER_SYSVIEW_Init+0x70>)
 8003454:	4910      	ldr	r1, [pc, #64]	; (8003498 <SEGGER_SYSVIEW_Init+0x6c>)
 8003456:	2001      	movs	r0, #1
 8003458:	f7ff fd84 	bl	8002f64 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <SEGGER_SYSVIEW_Init+0x74>)
 800345e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003462:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <SEGGER_SYSVIEW_Init+0x78>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0d      	ldr	r2, [pc, #52]	; (80034a0 <SEGGER_SYSVIEW_Init+0x74>)
 800346a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800346c:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <SEGGER_SYSVIEW_Init+0x74>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003472:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <SEGGER_SYSVIEW_Init+0x74>)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003478:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <SEGGER_SYSVIEW_Init+0x74>)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800347e:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <SEGGER_SYSVIEW_Init+0x74>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <SEGGER_SYSVIEW_Init+0x74>)
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	2001328c 	.word	0x2001328c
 8003498:	08004d3c 	.word	0x08004d3c
 800349c:	2001528c 	.word	0x2001528c
 80034a0:	20015294 	.word	0x20015294
 80034a4:	e0001004 	.word	0xe0001004

080034a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6113      	str	r3, [r2, #16]
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20015294 	.word	0x20015294

080034c8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80034d0:	f3ef 8311 	mrs	r3, BASEPRI
 80034d4:	f04f 0120 	mov.w	r1, #32
 80034d8:	f381 8811 	msr	BASEPRI, r1
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	4808      	ldr	r0, [pc, #32]	; (8003500 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80034e0:	f7ff fdf7 	bl	80030d2 <_PreparePacket>
 80034e4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68b8      	ldr	r0, [r7, #8]
 80034ec:	f7ff feca 	bl	8003284 <_SendPacket>
  RECORD_END();
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f383 8811 	msr	BASEPRI, r3
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	200152c4 	.word	0x200152c4

08003504 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800350e:	f3ef 8311 	mrs	r3, BASEPRI
 8003512:	f04f 0120 	mov.w	r1, #32
 8003516:	f381 8811 	msr	BASEPRI, r1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	4816      	ldr	r0, [pc, #88]	; (8003578 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800351e:	f7ff fdd8 	bl	80030d2 <_PreparePacket>
 8003522:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	61bb      	str	r3, [r7, #24]
 8003530:	e00b      	b.n	800354a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	1c59      	adds	r1, r3, #1
 800353a:	61f9      	str	r1, [r7, #28]
 800353c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	09db      	lsrs	r3, r3, #7
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b7f      	cmp	r3, #127	; 0x7f
 800354e:	d8f0      	bhi.n	8003532 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	61fa      	str	r2, [r7, #28]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68f9      	ldr	r1, [r7, #12]
 8003564:	6938      	ldr	r0, [r7, #16]
 8003566:	f7ff fe8d 	bl	8003284 <_SendPacket>
  RECORD_END();
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f383 8811 	msr	BASEPRI, r3
}
 8003570:	bf00      	nop
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	200152c4 	.word	0x200152c4

0800357c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b08c      	sub	sp, #48	; 0x30
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003588:	f3ef 8311 	mrs	r3, BASEPRI
 800358c:	f04f 0120 	mov.w	r1, #32
 8003590:	f381 8811 	msr	BASEPRI, r1
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	4825      	ldr	r0, [pc, #148]	; (800362c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003598:	f7ff fd9b 	bl	80030d2 <_PreparePacket>
 800359c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035aa:	e00b      	b.n	80035c4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80035b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	09db      	lsrs	r3, r3, #7
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	2b7f      	cmp	r3, #127	; 0x7f
 80035c8:	d8f0      	bhi.n	80035ac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	623b      	str	r3, [r7, #32]
 80035e2:	e00b      	b.n	80035fc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	1c59      	adds	r1, r3, #1
 80035ec:	6279      	str	r1, [r7, #36]	; 0x24
 80035ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	09db      	lsrs	r3, r3, #7
 80035fa:	623b      	str	r3, [r7, #32]
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003600:	d8f0      	bhi.n	80035e4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	627a      	str	r2, [r7, #36]	; 0x24
 8003608:	6a3a      	ldr	r2, [r7, #32]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	6979      	ldr	r1, [r7, #20]
 8003616:	69b8      	ldr	r0, [r7, #24]
 8003618:	f7ff fe34 	bl	8003284 <_SendPacket>
  RECORD_END();
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f383 8811 	msr	BASEPRI, r3
}
 8003622:	bf00      	nop
 8003624:	3730      	adds	r7, #48	; 0x30
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200152c4 	.word	0x200152c4

08003630 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b08e      	sub	sp, #56	; 0x38
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800363e:	f3ef 8311 	mrs	r3, BASEPRI
 8003642:	f04f 0120 	mov.w	r1, #32
 8003646:	f381 8811 	msr	BASEPRI, r1
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	4832      	ldr	r0, [pc, #200]	; (8003718 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800364e:	f7ff fd40 	bl	80030d2 <_PreparePacket>
 8003652:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	633b      	str	r3, [r7, #48]	; 0x30
 8003660:	e00b      	b.n	800367a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	b2da      	uxtb	r2, r3
 8003666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003668:	1c59      	adds	r1, r3, #1
 800366a:	6379      	str	r1, [r7, #52]	; 0x34
 800366c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	09db      	lsrs	r3, r3, #7
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	2b7f      	cmp	r3, #127	; 0x7f
 800367e:	d8f0      	bhi.n	8003662 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	637a      	str	r2, [r7, #52]	; 0x34
 8003686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
 8003698:	e00b      	b.n	80036b2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	b2da      	uxtb	r2, r3
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	1c59      	adds	r1, r3, #1
 80036a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80036a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	09db      	lsrs	r3, r3, #7
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	2b7f      	cmp	r3, #127	; 0x7f
 80036b6:	d8f0      	bhi.n	800369a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	e00b      	b.n	80036ea <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	1c59      	adds	r1, r3, #1
 80036da:	6279      	str	r1, [r7, #36]	; 0x24
 80036dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	09db      	lsrs	r3, r3, #7
 80036e8:	623b      	str	r3, [r7, #32]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	2b7f      	cmp	r3, #127	; 0x7f
 80036ee:	d8f0      	bhi.n	80036d2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	627a      	str	r2, [r7, #36]	; 0x24
 80036f6:	6a3a      	ldr	r2, [r7, #32]
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	6979      	ldr	r1, [r7, #20]
 8003704:	69b8      	ldr	r0, [r7, #24]
 8003706:	f7ff fdbd 	bl	8003284 <_SendPacket>
  RECORD_END();
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f383 8811 	msr	BASEPRI, r3
}
 8003710:	bf00      	nop
 8003712:	3738      	adds	r7, #56	; 0x38
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	200152c4 	.word	0x200152c4

0800371c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b090      	sub	sp, #64	; 0x40
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800372a:	f3ef 8311 	mrs	r3, BASEPRI
 800372e:	f04f 0120 	mov.w	r1, #32
 8003732:	f381 8811 	msr	BASEPRI, r1
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	4840      	ldr	r0, [pc, #256]	; (800383c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800373a:	f7ff fcca 	bl	80030d2 <_PreparePacket>
 800373e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	63bb      	str	r3, [r7, #56]	; 0x38
 800374c:	e00b      	b.n	8003766 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	b2da      	uxtb	r2, r3
 8003752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003754:	1c59      	adds	r1, r3, #1
 8003756:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	09db      	lsrs	r3, r3, #7
 8003764:	63bb      	str	r3, [r7, #56]	; 0x38
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	2b7f      	cmp	r3, #127	; 0x7f
 800376a:	d8f0      	bhi.n	800374e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800376c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
 8003784:	e00b      	b.n	800379e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	b2da      	uxtb	r2, r3
 800378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378c:	1c59      	adds	r1, r3, #1
 800378e:	6379      	str	r1, [r7, #52]	; 0x34
 8003790:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	09db      	lsrs	r3, r3, #7
 800379c:	633b      	str	r3, [r7, #48]	; 0x30
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	2b7f      	cmp	r3, #127	; 0x7f
 80037a2:	d8f0      	bhi.n	8003786 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80037a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	637a      	str	r2, [r7, #52]	; 0x34
 80037aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80037bc:	e00b      	b.n	80037d6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	1c59      	adds	r1, r3, #1
 80037c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80037c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	09db      	lsrs	r3, r3, #7
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	2b7f      	cmp	r3, #127	; 0x7f
 80037da:	d8f0      	bhi.n	80037be <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
 80037f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f2:	623b      	str	r3, [r7, #32]
 80037f4:	e00b      	b.n	800380e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	1c59      	adds	r1, r3, #1
 80037fe:	6279      	str	r1, [r7, #36]	; 0x24
 8003800:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	09db      	lsrs	r3, r3, #7
 800380c:	623b      	str	r3, [r7, #32]
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	2b7f      	cmp	r3, #127	; 0x7f
 8003812:	d8f0      	bhi.n	80037f6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	627a      	str	r2, [r7, #36]	; 0x24
 800381a:	6a3a      	ldr	r2, [r7, #32]
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	6979      	ldr	r1, [r7, #20]
 8003828:	69b8      	ldr	r0, [r7, #24]
 800382a:	f7ff fd2b 	bl	8003284 <_SendPacket>
  RECORD_END();
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f383 8811 	msr	BASEPRI, r3
}
 8003834:	bf00      	nop
 8003836:	3740      	adds	r7, #64	; 0x40
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	200152c4 	.word	0x200152c4

08003840 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b08c      	sub	sp, #48	; 0x30
 8003844:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003846:	4b59      	ldr	r3, [pc, #356]	; (80039ac <SEGGER_SYSVIEW_Start+0x16c>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 80aa 	bne.w	80039a4 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003850:	4b56      	ldr	r3, [pc, #344]	; (80039ac <SEGGER_SYSVIEW_Start+0x16c>)
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003856:	f3ef 8311 	mrs	r3, BASEPRI
 800385a:	f04f 0120 	mov.w	r1, #32
 800385e:	f381 8811 	msr	BASEPRI, r1
 8003862:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003864:	220a      	movs	r2, #10
 8003866:	4952      	ldr	r1, [pc, #328]	; (80039b0 <SEGGER_SYSVIEW_Start+0x170>)
 8003868:	2001      	movs	r0, #1
 800386a:	f7ff fa81 	bl	8002d70 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003874:	200a      	movs	r0, #10
 8003876:	f7ff fe27 	bl	80034c8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800387a:	f3ef 8311 	mrs	r3, BASEPRI
 800387e:	f04f 0120 	mov.w	r1, #32
 8003882:	f381 8811 	msr	BASEPRI, r1
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	484a      	ldr	r0, [pc, #296]	; (80039b4 <SEGGER_SYSVIEW_Start+0x174>)
 800388a:	f7ff fc22 	bl	80030d2 <_PreparePacket>
 800388e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003898:	4b44      	ldr	r3, [pc, #272]	; (80039ac <SEGGER_SYSVIEW_Start+0x16c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
 800389e:	e00b      	b.n	80038b8 <SEGGER_SYSVIEW_Start+0x78>
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80038aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	09db      	lsrs	r3, r3, #7
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	2b7f      	cmp	r3, #127	; 0x7f
 80038bc:	d8f0      	bhi.n	80038a0 <SEGGER_SYSVIEW_Start+0x60>
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	4b36      	ldr	r3, [pc, #216]	; (80039ac <SEGGER_SYSVIEW_Start+0x16c>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	623b      	str	r3, [r7, #32]
 80038d8:	e00b      	b.n	80038f2 <SEGGER_SYSVIEW_Start+0xb2>
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	1c59      	adds	r1, r3, #1
 80038e2:	6279      	str	r1, [r7, #36]	; 0x24
 80038e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	09db      	lsrs	r3, r3, #7
 80038f0:	623b      	str	r3, [r7, #32]
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	2b7f      	cmp	r3, #127	; 0x7f
 80038f6:	d8f0      	bhi.n	80038da <SEGGER_SYSVIEW_Start+0x9a>
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	627a      	str	r2, [r7, #36]	; 0x24
 80038fe:	6a3a      	ldr	r2, [r7, #32]
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	4b27      	ldr	r3, [pc, #156]	; (80039ac <SEGGER_SYSVIEW_Start+0x16c>)
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e00b      	b.n	800392c <SEGGER_SYSVIEW_Start+0xec>
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	1c59      	adds	r1, r3, #1
 800391c:	61f9      	str	r1, [r7, #28]
 800391e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	09db      	lsrs	r3, r3, #7
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b7f      	cmp	r3, #127	; 0x7f
 8003930:	d8f0      	bhi.n	8003914 <SEGGER_SYSVIEW_Start+0xd4>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	61fa      	str	r2, [r7, #28]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	2302      	movs	r3, #2
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e00b      	b.n	8003964 <SEGGER_SYSVIEW_Start+0x124>
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	1c59      	adds	r1, r3, #1
 8003954:	6179      	str	r1, [r7, #20]
 8003956:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	09db      	lsrs	r3, r3, #7
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b7f      	cmp	r3, #127	; 0x7f
 8003968:	d8f0      	bhi.n	800394c <SEGGER_SYSVIEW_Start+0x10c>
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	617a      	str	r2, [r7, #20]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800397a:	2218      	movs	r2, #24
 800397c:	6839      	ldr	r1, [r7, #0]
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fc80 	bl	8003284 <_SendPacket>
      RECORD_END();
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <SEGGER_SYSVIEW_Start+0x16c>)
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <SEGGER_SYSVIEW_Start+0x16c>)
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003998:	f000 f9ec 	bl	8003d74 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800399c:	f000 f9b2 	bl	8003d04 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80039a0:	f000 fc8a 	bl	80042b8 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 80039a4:	bf00      	nop
 80039a6:	3730      	adds	r7, #48	; 0x30
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20015294 	.word	0x20015294
 80039b0:	08004dd0 	.word	0x08004dd0
 80039b4:	200152c4 	.word	0x200152c4

080039b8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80039be:	f3ef 8311 	mrs	r3, BASEPRI
 80039c2:	f04f 0120 	mov.w	r1, #32
 80039c6:	f381 8811 	msr	BASEPRI, r1
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	480b      	ldr	r0, [pc, #44]	; (80039fc <SEGGER_SYSVIEW_Stop+0x44>)
 80039ce:	f7ff fb80 	bl	80030d2 <_PreparePacket>
 80039d2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <SEGGER_SYSVIEW_Stop+0x48>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80039dc:	220b      	movs	r2, #11
 80039de:	6839      	ldr	r1, [r7, #0]
 80039e0:	6838      	ldr	r0, [r7, #0]
 80039e2:	f7ff fc4f 	bl	8003284 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <SEGGER_SYSVIEW_Stop+0x48>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f383 8811 	msr	BASEPRI, r3
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200152c4 	.word	0x200152c4
 8003a00:	20015294 	.word	0x20015294

08003a04 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08c      	sub	sp, #48	; 0x30
 8003a08:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8003a0e:	f04f 0120 	mov.w	r1, #32
 8003a12:	f381 8811 	msr	BASEPRI, r1
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	4845      	ldr	r0, [pc, #276]	; (8003b30 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003a1a:	f7ff fb5a 	bl	80030d2 <_PreparePacket>
 8003a1e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a28:	4b42      	ldr	r3, [pc, #264]	; (8003b34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2e:	e00b      	b.n	8003a48 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	1c59      	adds	r1, r3, #1
 8003a38:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	09db      	lsrs	r3, r3, #7
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a4c:	d8f0      	bhi.n	8003a30 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
 8003a62:	4b34      	ldr	r3, [pc, #208]	; (8003b34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	e00b      	b.n	8003a82 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	1c59      	adds	r1, r3, #1
 8003a72:	6279      	str	r1, [r7, #36]	; 0x24
 8003a74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	09db      	lsrs	r3, r3, #7
 8003a80:	623b      	str	r3, [r7, #32]
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	2b7f      	cmp	r3, #127	; 0x7f
 8003a86:	d8f0      	bhi.n	8003a6a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a8e:	6a3a      	ldr	r2, [r7, #32]
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	e00b      	b.n	8003abc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	1c59      	adds	r1, r3, #1
 8003aac:	61f9      	str	r1, [r7, #28]
 8003aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	09db      	lsrs	r3, r3, #7
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b7f      	cmp	r3, #127	; 0x7f
 8003ac0:	d8f0      	bhi.n	8003aa4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	61fa      	str	r2, [r7, #28]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	e00b      	b.n	8003af4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	6179      	str	r1, [r7, #20]
 8003ae6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	09db      	lsrs	r3, r3, #7
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b7f      	cmp	r3, #127	; 0x7f
 8003af8:	d8f0      	bhi.n	8003adc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	617a      	str	r2, [r7, #20]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003b0a:	2218      	movs	r2, #24
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	68b8      	ldr	r0, [r7, #8]
 8003b10:	f7ff fbb8 	bl	8003284 <_SendPacket>
  RECORD_END();
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003b22:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	4798      	blx	r3
  }
}
 8003b28:	bf00      	nop
 8003b2a:	3730      	adds	r7, #48	; 0x30
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	200152c4 	.word	0x200152c4
 8003b34:	20015294 	.word	0x20015294

08003b38 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b092      	sub	sp, #72	; 0x48
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003b40:	f3ef 8311 	mrs	r3, BASEPRI
 8003b44:	f04f 0120 	mov.w	r1, #32
 8003b48:	f381 8811 	msr	BASEPRI, r1
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	486b      	ldr	r0, [pc, #428]	; (8003cfc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003b50:	f7ff fabf 	bl	80030d2 <_PreparePacket>
 8003b54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b67      	ldr	r3, [pc, #412]	; (8003d00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b6c:	e00b      	b.n	8003b86 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b74:	1c59      	adds	r1, r3, #1
 8003b76:	6479      	str	r1, [r7, #68]	; 0x44
 8003b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b82:	09db      	lsrs	r3, r3, #7
 8003b84:	643b      	str	r3, [r7, #64]	; 0x40
 8003b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b88:	2b7f      	cmp	r3, #127	; 0x7f
 8003b8a:	d8f0      	bhi.n	8003b6e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	647a      	str	r2, [r7, #68]	; 0x44
 8003b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ba6:	e00b      	b.n	8003bc0 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	1c59      	adds	r1, r3, #1
 8003bb0:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	09db      	lsrs	r3, r3, #7
 8003bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8003bc4:	d8f0      	bhi.n	8003ba8 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd4:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	4619      	mov	r1, r3
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f7ff fa2a 	bl	8003038 <_EncodeStr>
 8003be4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003be6:	2209      	movs	r2, #9
 8003be8:	68f9      	ldr	r1, [r7, #12]
 8003bea:	6938      	ldr	r0, [r7, #16]
 8003bec:	f7ff fb4a 	bl	8003284 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	633b      	str	r3, [r7, #48]	; 0x30
 8003c06:	e00b      	b.n	8003c20 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0e:	1c59      	adds	r1, r3, #1
 8003c10:	6379      	str	r1, [r7, #52]	; 0x34
 8003c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	09db      	lsrs	r3, r3, #7
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	2b7f      	cmp	r3, #127	; 0x7f
 8003c24:	d8f0      	bhi.n	8003c08 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	637a      	str	r2, [r7, #52]	; 0x34
 8003c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c40:	e00b      	b.n	8003c5a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	1c59      	adds	r1, r3, #1
 8003c4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	09db      	lsrs	r3, r3, #7
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c5e:	d8f0      	bhi.n	8003c42 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	623b      	str	r3, [r7, #32]
 8003c7a:	e00b      	b.n	8003c94 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	1c59      	adds	r1, r3, #1
 8003c84:	6279      	str	r1, [r7, #36]	; 0x24
 8003c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	09db      	lsrs	r3, r3, #7
 8003c92:	623b      	str	r3, [r7, #32]
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	2b7f      	cmp	r3, #127	; 0x7f
 8003c98:	d8f0      	bhi.n	8003c7c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	627a      	str	r2, [r7, #36]	; 0x24
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e00b      	b.n	8003ccc <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	1c59      	adds	r1, r3, #1
 8003cbc:	61f9      	str	r1, [r7, #28]
 8003cbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	09db      	lsrs	r3, r3, #7
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b7f      	cmp	r3, #127	; 0x7f
 8003cd0:	d8f0      	bhi.n	8003cb4 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	61fa      	str	r2, [r7, #28]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003ce2:	2215      	movs	r2, #21
 8003ce4:	68f9      	ldr	r1, [r7, #12]
 8003ce6:	6938      	ldr	r0, [r7, #16]
 8003ce8:	f7ff facc 	bl	8003284 <_SendPacket>
  RECORD_END();
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f383 8811 	msr	BASEPRI, r3
}
 8003cf2:	bf00      	nop
 8003cf4:	3748      	adds	r7, #72	; 0x48
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200152c4 	.word	0x200152c4
 8003d00:	20015294 	.word	0x20015294

08003d04 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003d08:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003d1a:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4798      	blx	r3
  }
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20015294 	.word	0x20015294

08003d2c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003d34:	f3ef 8311 	mrs	r3, BASEPRI
 8003d38:	f04f 0120 	mov.w	r1, #32
 8003d3c:	f381 8811 	msr	BASEPRI, r1
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	480b      	ldr	r0, [pc, #44]	; (8003d70 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003d44:	f7ff f9c5 	bl	80030d2 <_PreparePacket>
 8003d48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003d4a:	2280      	movs	r2, #128	; 0x80
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	6938      	ldr	r0, [r7, #16]
 8003d50:	f7ff f972 	bl	8003038 <_EncodeStr>
 8003d54:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003d56:	220e      	movs	r2, #14
 8003d58:	68f9      	ldr	r1, [r7, #12]
 8003d5a:	6938      	ldr	r0, [r7, #16]
 8003d5c:	f7ff fa92 	bl	8003284 <_SendPacket>
  RECORD_END();
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f383 8811 	msr	BASEPRI, r3
}
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200152c4 	.word	0x200152c4

08003d74 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003d7a:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d019      	beq.n	8003db6 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d014      	beq.n	8003db6 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4798      	blx	r3
 8003d94:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003d98:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003d9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	f04f 0400 	mov.w	r4, #0
 8003da6:	0013      	movs	r3, r2
 8003da8:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003daa:	461a      	mov	r2, r3
 8003dac:	4601      	mov	r1, r0
 8003dae:	200d      	movs	r0, #13
 8003db0:	f7ff fbe4 	bl	800357c <SEGGER_SYSVIEW_RecordU32x2>
 8003db4:	e005      	b.n	8003dc2 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	200c      	movs	r0, #12
 8003dbe:	f7ff fba1 	bl	8003504 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd90      	pop	{r4, r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20015294 	.word	0x20015294
 8003dd0:	e0001004 	.word	0xe0001004

08003dd4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003dda:	f3ef 8311 	mrs	r3, BASEPRI
 8003dde:	f04f 0120 	mov.w	r1, #32
 8003de2:	f381 8811 	msr	BASEPRI, r1
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	4819      	ldr	r0, [pc, #100]	; (8003e50 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003dea:	f7ff f972 	bl	80030d2 <_PreparePacket>
 8003dee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	e00b      	b.n	8003e20 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	1c59      	adds	r1, r3, #1
 8003e10:	6179      	str	r1, [r7, #20]
 8003e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	09db      	lsrs	r3, r3, #7
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b7f      	cmp	r3, #127	; 0x7f
 8003e24:	d8f0      	bhi.n	8003e08 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	617a      	str	r2, [r7, #20]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003e36:	2202      	movs	r2, #2
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	68b8      	ldr	r0, [r7, #8]
 8003e3c:	f7ff fa22 	bl	8003284 <_SendPacket>
  RECORD_END();
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f383 8811 	msr	BASEPRI, r3
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200152c4 	.word	0x200152c4
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003e5e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e62:	f04f 0120 	mov.w	r1, #32
 8003e66:	f381 8811 	msr	BASEPRI, r1
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	4807      	ldr	r0, [pc, #28]	; (8003e8c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003e6e:	f7ff f930 	bl	80030d2 <_PreparePacket>
 8003e72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003e74:	2203      	movs	r2, #3
 8003e76:	6839      	ldr	r1, [r7, #0]
 8003e78:	6838      	ldr	r0, [r7, #0]
 8003e7a:	f7ff fa03 	bl	8003284 <_SendPacket>
  RECORD_END();
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f383 8811 	msr	BASEPRI, r3
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	200152c4 	.word	0x200152c4

08003e90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003e96:	f3ef 8311 	mrs	r3, BASEPRI
 8003e9a:	f04f 0120 	mov.w	r1, #32
 8003e9e:	f381 8811 	msr	BASEPRI, r1
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	4807      	ldr	r0, [pc, #28]	; (8003ec4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003ea6:	f7ff f914 	bl	80030d2 <_PreparePacket>
 8003eaa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003eac:	2212      	movs	r2, #18
 8003eae:	6839      	ldr	r1, [r7, #0]
 8003eb0:	6838      	ldr	r0, [r7, #0]
 8003eb2:	f7ff f9e7 	bl	8003284 <_SendPacket>
  RECORD_END();
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f383 8811 	msr	BASEPRI, r3
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200152c4 	.word	0x200152c4

08003ec8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003ece:	f3ef 8311 	mrs	r3, BASEPRI
 8003ed2:	f04f 0120 	mov.w	r1, #32
 8003ed6:	f381 8811 	msr	BASEPRI, r1
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	4807      	ldr	r0, [pc, #28]	; (8003efc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003ede:	f7ff f8f8 	bl	80030d2 <_PreparePacket>
 8003ee2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003ee4:	2211      	movs	r2, #17
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	6838      	ldr	r0, [r7, #0]
 8003eea:	f7ff f9cb 	bl	8003284 <_SendPacket>
  RECORD_END();
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f383 8811 	msr	BASEPRI, r3
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	200152c4 	.word	0x200152c4

08003f00 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f08:	f3ef 8311 	mrs	r3, BASEPRI
 8003f0c:	f04f 0120 	mov.w	r1, #32
 8003f10:	f381 8811 	msr	BASEPRI, r1
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	481a      	ldr	r0, [pc, #104]	; (8003f80 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003f18:	f7ff f8db 	bl	80030d2 <_PreparePacket>
 8003f1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003f22:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	e00b      	b.n	8003f50 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	1c59      	adds	r1, r3, #1
 8003f40:	61f9      	str	r1, [r7, #28]
 8003f42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	09db      	lsrs	r3, r3, #7
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b7f      	cmp	r3, #127	; 0x7f
 8003f54:	d8f0      	bhi.n	8003f38 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	61fa      	str	r2, [r7, #28]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003f66:	2208      	movs	r2, #8
 8003f68:	68f9      	ldr	r1, [r7, #12]
 8003f6a:	6938      	ldr	r0, [r7, #16]
 8003f6c:	f7ff f98a 	bl	8003284 <_SendPacket>
  RECORD_END();
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f383 8811 	msr	BASEPRI, r3
}
 8003f76:	bf00      	nop
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	200152c4 	.word	0x200152c4
 8003f84:	20015294 	.word	0x20015294

08003f88 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f90:	f3ef 8311 	mrs	r3, BASEPRI
 8003f94:	f04f 0120 	mov.w	r1, #32
 8003f98:	f381 8811 	msr	BASEPRI, r1
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	481a      	ldr	r0, [pc, #104]	; (8004008 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003fa0:	f7ff f897 	bl	80030d2 <_PreparePacket>
 8003fa4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003faa:	4b18      	ldr	r3, [pc, #96]	; (800400c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e00b      	b.n	8003fd8 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	1c59      	adds	r1, r3, #1
 8003fc8:	61f9      	str	r1, [r7, #28]
 8003fca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	09db      	lsrs	r3, r3, #7
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b7f      	cmp	r3, #127	; 0x7f
 8003fdc:	d8f0      	bhi.n	8003fc0 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	61fa      	str	r2, [r7, #28]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003fee:	2204      	movs	r2, #4
 8003ff0:	68f9      	ldr	r1, [r7, #12]
 8003ff2:	6938      	ldr	r0, [r7, #16]
 8003ff4:	f7ff f946 	bl	8003284 <_SendPacket>
  RECORD_END();
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f383 8811 	msr	BASEPRI, r3
}
 8003ffe:	bf00      	nop
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200152c4 	.word	0x200152c4
 800400c:	20015294 	.word	0x20015294

08004010 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004018:	f3ef 8311 	mrs	r3, BASEPRI
 800401c:	f04f 0120 	mov.w	r1, #32
 8004020:	f381 8811 	msr	BASEPRI, r1
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	481a      	ldr	r0, [pc, #104]	; (8004090 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004028:	f7ff f853 	bl	80030d2 <_PreparePacket>
 800402c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004032:	4b18      	ldr	r3, [pc, #96]	; (8004094 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	e00b      	b.n	8004060 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	1c59      	adds	r1, r3, #1
 8004050:	61f9      	str	r1, [r7, #28]
 8004052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	09db      	lsrs	r3, r3, #7
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b7f      	cmp	r3, #127	; 0x7f
 8004064:	d8f0      	bhi.n	8004048 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	61fa      	str	r2, [r7, #28]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004076:	2206      	movs	r2, #6
 8004078:	68f9      	ldr	r1, [r7, #12]
 800407a:	6938      	ldr	r0, [r7, #16]
 800407c:	f7ff f902 	bl	8003284 <_SendPacket>
  RECORD_END();
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f383 8811 	msr	BASEPRI, r3
}
 8004086:	bf00      	nop
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	200152c4 	.word	0x200152c4
 8004094:	20015294 	.word	0x20015294

08004098 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80040a2:	f3ef 8311 	mrs	r3, BASEPRI
 80040a6:	f04f 0120 	mov.w	r1, #32
 80040aa:	f381 8811 	msr	BASEPRI, r1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	4827      	ldr	r0, [pc, #156]	; (8004150 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80040b2:	f7ff f80e 	bl	80030d2 <_PreparePacket>
 80040b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80040bc:	4b25      	ldr	r3, [pc, #148]	; (8004154 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	623b      	str	r3, [r7, #32]
 80040d0:	e00b      	b.n	80040ea <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	1c59      	adds	r1, r3, #1
 80040da:	6279      	str	r1, [r7, #36]	; 0x24
 80040dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	09db      	lsrs	r3, r3, #7
 80040e8:	623b      	str	r3, [r7, #32]
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	2b7f      	cmp	r3, #127	; 0x7f
 80040ee:	d8f0      	bhi.n	80040d2 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	627a      	str	r2, [r7, #36]	; 0x24
 80040f6:	6a3a      	ldr	r2, [r7, #32]
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	e00b      	b.n	8004122 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	1c59      	adds	r1, r3, #1
 8004112:	61f9      	str	r1, [r7, #28]
 8004114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	09db      	lsrs	r3, r3, #7
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b7f      	cmp	r3, #127	; 0x7f
 8004126:	d8f0      	bhi.n	800410a <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	61fa      	str	r2, [r7, #28]
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004138:	2207      	movs	r2, #7
 800413a:	68f9      	ldr	r1, [r7, #12]
 800413c:	6938      	ldr	r0, [r7, #16]
 800413e:	f7ff f8a1 	bl	8003284 <_SendPacket>
  RECORD_END();
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f383 8811 	msr	BASEPRI, r3
}
 8004148:	bf00      	nop
 800414a:	3728      	adds	r7, #40	; 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200152c4 	.word	0x200152c4
 8004154:	20015294 	.word	0x20015294

08004158 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	089b      	lsrs	r3, r3, #2
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20015294 	.word	0x20015294

0800417c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b08c      	sub	sp, #48	; 0x30
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004186:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d06d      	beq.n	800426a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800418e:	4b39      	ldr	r3, [pc, #228]	; (8004274 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004194:	2300      	movs	r3, #0
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28
 8004198:	e008      	b.n	80041ac <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	3301      	adds	r3, #1
 80041aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d3f2      	bcc.n	800419a <SEGGER_SYSVIEW_SendModule+0x1e>
 80041b4:	e000      	b.n	80041b8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80041b6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80041b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d055      	beq.n	800426a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80041be:	f3ef 8311 	mrs	r3, BASEPRI
 80041c2:	f04f 0120 	mov.w	r1, #32
 80041c6:	f381 8811 	msr	BASEPRI, r1
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	482a      	ldr	r0, [pc, #168]	; (8004278 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80041ce:	f7fe ff80 	bl	80030d2 <_PreparePacket>
 80041d2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	623b      	str	r3, [r7, #32]
 80041e0:	e00b      	b.n	80041fa <SEGGER_SYSVIEW_SendModule+0x7e>
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	1c59      	adds	r1, r3, #1
 80041ea:	6279      	str	r1, [r7, #36]	; 0x24
 80041ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	09db      	lsrs	r3, r3, #7
 80041f8:	623b      	str	r3, [r7, #32]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	2b7f      	cmp	r3, #127	; 0x7f
 80041fe:	d8f0      	bhi.n	80041e2 <SEGGER_SYSVIEW_SendModule+0x66>
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	627a      	str	r2, [r7, #36]	; 0x24
 8004206:	6a3a      	ldr	r2, [r7, #32]
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	e00b      	b.n	8004234 <SEGGER_SYSVIEW_SendModule+0xb8>
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	1c59      	adds	r1, r3, #1
 8004224:	61f9      	str	r1, [r7, #28]
 8004226:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	09db      	lsrs	r3, r3, #7
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b7f      	cmp	r3, #127	; 0x7f
 8004238:	d8f0      	bhi.n	800421c <SEGGER_SYSVIEW_SendModule+0xa0>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	61fa      	str	r2, [r7, #28]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2280      	movs	r2, #128	; 0x80
 8004250:	4619      	mov	r1, r3
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7fe fef0 	bl	8003038 <_EncodeStr>
 8004258:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800425a:	2216      	movs	r2, #22
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	6938      	ldr	r0, [r7, #16]
 8004260:	f7ff f810 	bl	8003284 <_SendPacket>
      RECORD_END();
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800426a:	bf00      	nop
 800426c:	3730      	adds	r7, #48	; 0x30
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	200152bc 	.word	0x200152bc
 8004278:	200152c4 	.word	0x200152c4

0800427c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00f      	beq.n	80042aa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f2      	bne.n	8004290 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200152bc 	.word	0x200152bc

080042b8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80042be:	f3ef 8311 	mrs	r3, BASEPRI
 80042c2:	f04f 0120 	mov.w	r1, #32
 80042c6:	f381 8811 	msr	BASEPRI, r1
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	4817      	ldr	r0, [pc, #92]	; (800432c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80042ce:	f7fe ff00 	bl	80030d2 <_PreparePacket>
 80042d2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	e00b      	b.n	80042fc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1c59      	adds	r1, r3, #1
 80042ec:	6179      	str	r1, [r7, #20]
 80042ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	09db      	lsrs	r3, r3, #7
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004300:	d8f0      	bhi.n	80042e4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	617a      	str	r2, [r7, #20]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004312:	221b      	movs	r2, #27
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	68b8      	ldr	r0, [r7, #8]
 8004318:	f7fe ffb4 	bl	8003284 <_SendPacket>
  RECORD_END();
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f383 8811 	msr	BASEPRI, r3
}
 8004322:	bf00      	nop
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200152c4 	.word	0x200152c4
 8004330:	200152c0 	.word	0x200152c0

08004334 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800433c:	f3ef 8311 	mrs	r3, BASEPRI
 8004340:	f04f 0120 	mov.w	r1, #32
 8004344:	f381 8811 	msr	BASEPRI, r1
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	4827      	ldr	r0, [pc, #156]	; (80043e8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800434c:	f7fe fec1 	bl	80030d2 <_PreparePacket>
 8004350:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004352:	2280      	movs	r2, #128	; 0x80
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	6938      	ldr	r0, [r7, #16]
 8004358:	f7fe fe6e 	bl	8003038 <_EncodeStr>
 800435c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
 8004362:	2301      	movs	r3, #1
 8004364:	623b      	str	r3, [r7, #32]
 8004366:	e00b      	b.n	8004380 <SEGGER_SYSVIEW_Warn+0x4c>
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	1c59      	adds	r1, r3, #1
 8004370:	6279      	str	r1, [r7, #36]	; 0x24
 8004372:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	09db      	lsrs	r3, r3, #7
 800437e:	623b      	str	r3, [r7, #32]
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	2b7f      	cmp	r3, #127	; 0x7f
 8004384:	d8f0      	bhi.n	8004368 <SEGGER_SYSVIEW_Warn+0x34>
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	627a      	str	r2, [r7, #36]	; 0x24
 800438c:	6a3a      	ldr	r2, [r7, #32]
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	e00b      	b.n	80043b8 <SEGGER_SYSVIEW_Warn+0x84>
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	1c59      	adds	r1, r3, #1
 80043a8:	61f9      	str	r1, [r7, #28]
 80043aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	09db      	lsrs	r3, r3, #7
 80043b6:	61bb      	str	r3, [r7, #24]
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b7f      	cmp	r3, #127	; 0x7f
 80043bc:	d8f0      	bhi.n	80043a0 <SEGGER_SYSVIEW_Warn+0x6c>
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	61fa      	str	r2, [r7, #28]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80043ce:	221a      	movs	r2, #26
 80043d0:	68f9      	ldr	r1, [r7, #12]
 80043d2:	6938      	ldr	r0, [r7, #16]
 80043d4:	f7fe ff56 	bl	8003284 <_SendPacket>
  RECORD_END();
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f383 8811 	msr	BASEPRI, r3
}
 80043de:	bf00      	nop
 80043e0:	3728      	adds	r7, #40	; 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200152c4 	.word	0x200152c4

080043ec <main>:
#ifdef USE_SEMIHOSTING
extern void initialise_monitor_handles();
#endif

int main(void)
{
 80043ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
    printf("Its a hello world application\r\n");
#endif

    DWT->CTRL |= (1<<0);//Data watch point trace->cyccnt(cycle count) in arm technical rm,it keeps time stamp
 80043f2:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <main+0xc8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2f      	ldr	r2, [pc, #188]	; (80044b4 <main+0xc8>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6013      	str	r3, [r2, #0]

    //reset the RCC clock cconfiguration to default reset state
	//reset state is hsi=on,pll=off,hse=off, sysclk=16MHz

    RCC_DeInit();
 80043fe:	f7fb ffe7 	bl	80003d0 <RCC_DeInit>

    //update the system core clock variable
    SystemCoreClockUpdate();
 8004402:	f000 f95b 	bl	80046bc <SystemCoreClockUpdate>

    pvtHardwareSetup();
 8004406:	f000 f8f5 	bl	80045f4 <pvtHardwareSetup>

    sprintf(user_msg,"\rmutual exclusion using binary semaphore demo\r\n");
 800440a:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <main+0xcc>)
 800440c:	4a2b      	ldr	r2, [pc, #172]	; (80044bc <main+0xd0>)
 800440e:	4614      	mov	r4, r2
 8004410:	469c      	mov	ip, r3
 8004412:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8004416:	4665      	mov	r5, ip
 8004418:	4626      	mov	r6, r4
 800441a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800441c:	6028      	str	r0, [r5, #0]
 800441e:	6069      	str	r1, [r5, #4]
 8004420:	60aa      	str	r2, [r5, #8]
 8004422:	60eb      	str	r3, [r5, #12]
 8004424:	3410      	adds	r4, #16
 8004426:	f10c 0c10 	add.w	ip, ip, #16
 800442a:	4574      	cmp	r4, lr
 800442c:	d1f3      	bne.n	8004416 <main+0x2a>
    printmsg(user_msg);
 800442e:	4822      	ldr	r0, [pc, #136]	; (80044b8 <main+0xcc>)
 8004430:	f000 f8e6 	bl	8004600 <printmsg>

    //Start recording
    SEGGER_SYSVIEW_Conf();
 8004434:	f7fe fa9e 	bl	8002974 <SEGGER_SYSVIEW_Conf>
    SEGGER_SYSVIEW_Start();
 8004438:	f7ff fa02 	bl	8003840 <SEGGER_SYSVIEW_Start>

    //create binary semaphore explicitly before starting to use it
    xMutex=xSemaphoreCreateMutex();
 800443c:	2001      	movs	r0, #1
 800443e:	f7fc fbc7 	bl	8000bd0 <xQueueCreateMutex>
 8004442:	4602      	mov	r2, r0
 8004444:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <main+0xd4>)
 8004446:	601a      	str	r2, [r3, #0]

    if(xMutex !=NULL){
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <main+0xd4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d016      	beq.n	800447e <main+0x92>
    //create two tasks:task-1 and task-2
    xTaskCreate(prvPrintTask, "print-1", 250, "TASK 1 ******\r\n", 2, &xTask1Handle);
 8004450:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <main+0xd8>)
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	2302      	movs	r3, #2
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <main+0xdc>)
 800445a:	22fa      	movs	r2, #250	; 0xfa
 800445c:	491b      	ldr	r1, [pc, #108]	; (80044cc <main+0xe0>)
 800445e:	481c      	ldr	r0, [pc, #112]	; (80044d0 <main+0xe4>)
 8004460:	f7fc fee0 	bl	8001224 <xTaskCreate>
    xTaskCreate(prvPrintTask, "print-2", 250, "TASK 2-------\r\n", 2, &xTask2Handle);
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <main+0xe8>)
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	2302      	movs	r3, #2
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <main+0xec>)
 800446e:	22fa      	movs	r2, #250	; 0xfa
 8004470:	491a      	ldr	r1, [pc, #104]	; (80044dc <main+0xf0>)
 8004472:	4817      	ldr	r0, [pc, #92]	; (80044d0 <main+0xe4>)
 8004474:	f7fc fed6 	bl	8001224 <xTaskCreate>


    //start the scheduler
    vTaskStartScheduler();
 8004478:	f7fd f85a 	bl	8001530 <vTaskStartScheduler>
 800447c:	e018      	b.n	80044b0 <main+0xc4>
    }else{
        sprintf(user_msg,"\rbinary semaphore creation failed\r\n");
 800447e:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <main+0xcc>)
 8004480:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <main+0xf4>)
 8004482:	4614      	mov	r4, r2
 8004484:	469c      	mov	ip, r3
 8004486:	f104 0e20 	add.w	lr, r4, #32
 800448a:	4665      	mov	r5, ip
 800448c:	4626      	mov	r6, r4
 800448e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004490:	6028      	str	r0, [r5, #0]
 8004492:	6069      	str	r1, [r5, #4]
 8004494:	60aa      	str	r2, [r5, #8]
 8004496:	60eb      	str	r3, [r5, #12]
 8004498:	3410      	adds	r4, #16
 800449a:	f10c 0c10 	add.w	ip, ip, #16
 800449e:	4574      	cmp	r4, lr
 80044a0:	d1f3      	bne.n	800448a <main+0x9e>
 80044a2:	4663      	mov	r3, ip
 80044a4:	4622      	mov	r2, r4
 80044a6:	6810      	ldr	r0, [r2, #0]
 80044a8:	6018      	str	r0, [r3, #0]
        printmsg(user_msg);
 80044aa:	4803      	ldr	r0, [pc, #12]	; (80044b8 <main+0xcc>)
 80044ac:	f000 f8a8 	bl	8004600 <printmsg>



    }
	for(;;);
 80044b0:	e7fe      	b.n	80044b0 <main+0xc4>
 80044b2:	bf00      	nop
 80044b4:	e0001000 	.word	0xe0001000
 80044b8:	20015468 	.word	0x20015468
 80044bc:	08004d44 	.word	0x08004d44
 80044c0:	200153b0 	.word	0x200153b0
 80044c4:	200153a8 	.word	0x200153a8
 80044c8:	08004d74 	.word	0x08004d74
 80044cc:	08004d84 	.word	0x08004d84
 80044d0:	0800452d 	.word	0x0800452d
 80044d4:	200153ac 	.word	0x200153ac
 80044d8:	08004d8c 	.word	0x08004d8c
 80044dc:	08004d9c 	.word	0x08004d9c
 80044e0:	08004da4 	.word	0x08004da4

080044e4 <prvNewPrintString>:
}

void prvNewPrintString(const portCHAR* pcString ){
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b096      	sub	sp, #88	; 0x58
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	char cBuffer[80];

	xSemaphoreTake(xMutex,portMAX_DELAY);
 80044ec:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <prvNewPrintString+0x44>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f04f 31ff 	mov.w	r1, #4294967295
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fc fc77 	bl	8000de8 <xQueueSemaphoreTake>

	{
		sprintf(cBuffer,"%s",pcString);
 80044fa:	f107 0308 	add.w	r3, r7, #8
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fb07 	bl	8004b14 <strcpy>
		printmsg(cBuffer);
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f878 	bl	8004600 <printmsg>
	}
	xSemaphoreGive(xMutex);
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <prvNewPrintString+0x44>)
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	2200      	movs	r2, #0
 8004518:	2100      	movs	r1, #0
 800451a:	f7fc fb71 	bl	8000c00 <xQueueGenericSend>

}
 800451e:	bf00      	nop
 8004520:	3758      	adds	r7, #88	; 0x58
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200153b0 	.word	0x200153b0

0800452c <prvPrintTask>:

void prvPrintTask(void* params){
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	char* pcStringToPrint;

	pcStringToPrint=(char*)params;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60fb      	str	r3, [r7, #12]

	srand(567);
 8004538:	f240 2037 	movw	r0, #567	; 0x237
 800453c:	f000 fa92 	bl	8004a64 <srand>

	while(1){

		prvNewPrintString(pcStringToPrint);
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff ffcf 	bl	80044e4 <prvNewPrintString>

		vTaskDelay(rand() & 0xF);
 8004546:	f000 fab1 	bl	8004aac <rand>
 800454a:	4603      	mov	r3, r0
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	4618      	mov	r0, r3
 8004552:	f7fc ffb5 	bl	80014c0 <vTaskDelay>
		prvNewPrintString(pcStringToPrint);
 8004556:	e7f3      	b.n	8004540 <prvPrintTask+0x14>

08004558 <UART_Setup>:

	}

}

static void UART_Setup(void){
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef UART_Gpio;
		memset(&UART_Gpio,0,sizeof(UART_Gpio));
 800455e:	f107 0310 	add.w	r3, r7, #16
 8004562:	2208      	movs	r2, #8
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fa74 	bl	8004a54 <memset>
		USART_InitTypeDef UART_Handle;
		memset(&UART_Handle,0,sizeof(UART_Handle));
 800456c:	463b      	mov	r3, r7
 800456e:	2210      	movs	r2, #16
 8004570:	2100      	movs	r1, #0
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fa6e 	bl	8004a54 <memset>

	//enable clock for uart peripheral and gpioa peripheral
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8004578:	2101      	movs	r1, #1
 800457a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800457e:	f7fc f879 	bl	8000674 <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004582:	2101      	movs	r1, #1
 8004584:	2001      	movs	r0, #1
 8004586:	f7fc f855 	bl	8000634 <RCC_AHB1PeriphClockCmd>

		//configure pa2 as uart_tx and pa3 as uart_rx

		UART_Gpio.GPIO_Pin=GPIO_Pin_2 | GPIO_Pin_3;
 800458a:	230c      	movs	r3, #12
 800458c:	613b      	str	r3, [r7, #16]
		UART_Gpio.GPIO_Mode=GPIO_Mode_AF;
 800458e:	2302      	movs	r3, #2
 8004590:	753b      	strb	r3, [r7, #20]
		UART_Gpio.GPIO_PuPd=GPIO_PuPd_UP;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
		GPIO_Init(GPIOA, &UART_Gpio);
 8004596:	f107 0310 	add.w	r3, r7, #16
 800459a:	4619      	mov	r1, r3
 800459c:	4813      	ldr	r0, [pc, #76]	; (80045ec <UART_Setup+0x94>)
 800459e:	f7fb fe3f 	bl	8000220 <GPIO_Init>

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);//PA2 CONFIG AF7
 80045a2:	2207      	movs	r2, #7
 80045a4:	2102      	movs	r1, #2
 80045a6:	4811      	ldr	r0, [pc, #68]	; (80045ec <UART_Setup+0x94>)
 80045a8:	f7fb fec8 	bl	800033c <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);//PA3 CONFIG AF7
 80045ac:	2207      	movs	r2, #7
 80045ae:	2103      	movs	r1, #3
 80045b0:	480e      	ldr	r0, [pc, #56]	; (80045ec <UART_Setup+0x94>)
 80045b2:	f7fb fec3 	bl	800033c <GPIO_PinAFConfig>

		//UART PERIPHERAL CONFIGURATION
		UART_Handle.USART_BaudRate=115200;
 80045b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80045ba:	603b      	str	r3, [r7, #0]
		UART_Handle.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 80045bc:	2300      	movs	r3, #0
 80045be:	81bb      	strh	r3, [r7, #12]
		UART_Handle.USART_Mode=USART_Mode_Tx | USART_Mode_Rx;
 80045c0:	230c      	movs	r3, #12
 80045c2:	817b      	strh	r3, [r7, #10]
		UART_Handle.USART_Parity=USART_Parity_No;
 80045c4:	2300      	movs	r3, #0
 80045c6:	813b      	strh	r3, [r7, #8]
		UART_Handle.USART_StopBits=USART_StopBits_1;
 80045c8:	2300      	movs	r3, #0
 80045ca:	80fb      	strh	r3, [r7, #6]
		UART_Handle.USART_WordLength=USART_WordLength_8b;
 80045cc:	2300      	movs	r3, #0
 80045ce:	80bb      	strh	r3, [r7, #4]

		USART_Init(USART2, &UART_Handle);
 80045d0:	463b      	mov	r3, r7
 80045d2:	4619      	mov	r1, r3
 80045d4:	4806      	ldr	r0, [pc, #24]	; (80045f0 <UART_Setup+0x98>)
 80045d6:	f7fc f86d 	bl	80006b4 <USART_Init>
		USART_Cmd(USART2, ENABLE);
 80045da:	2101      	movs	r1, #1
 80045dc:	4804      	ldr	r0, [pc, #16]	; (80045f0 <UART_Setup+0x98>)
 80045de:	f7fc f923 	bl	8000828 <USART_Cmd>

}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40020000 	.word	0x40020000
 80045f0:	40004400 	.word	0x40004400

080045f4 <pvtHardwareSetup>:

static void pvtHardwareSetup(void){
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
	UART_Setup();
 80045f8:	f7ff ffae 	bl	8004558 <UART_Setup>


}
 80045fc:	bf00      	nop
 80045fe:	bd80      	pop	{r7, pc}

08004600 <printmsg>:

void printmsg(char* msg){
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

	for(uint32_t i=0;i<strlen(msg);i++){
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e013      	b.n	8004636 <printmsg+0x36>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)==RESET);
 800460e:	bf00      	nop
 8004610:	2180      	movs	r1, #128	; 0x80
 8004612:	480e      	ldr	r0, [pc, #56]	; (800464c <printmsg+0x4c>)
 8004614:	f7fc f93a 	bl	800088c <USART_GetFlagStatus>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f8      	beq.n	8004610 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	4619      	mov	r1, r3
 800462a:	4808      	ldr	r0, [pc, #32]	; (800464c <printmsg+0x4c>)
 800462c:	f7fc f91c 	bl	8000868 <USART_SendData>
	for(uint32_t i=0;i<strlen(msg);i++){
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3301      	adds	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fb fdea 	bl	8000210 <strlen>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4293      	cmp	r3, r2
 8004642:	d3e4      	bcc.n	800460e <printmsg+0xe>
	}

}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40004400 	.word	0x40004400

08004650 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004654:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <SystemInit+0x60>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <SystemInit+0x60>)
 800465c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004664:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <SystemInit+0x64>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a12      	ldr	r2, [pc, #72]	; (80046b4 <SystemInit+0x64>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <SystemInit+0x64>)
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004676:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <SystemInit+0x64>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a0e      	ldr	r2, [pc, #56]	; (80046b4 <SystemInit+0x64>)
 800467c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004684:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <SystemInit+0x64>)
 8004688:	4a0b      	ldr	r2, [pc, #44]	; (80046b8 <SystemInit+0x68>)
 800468a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800468c:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <SystemInit+0x64>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a08      	ldr	r2, [pc, #32]	; (80046b4 <SystemInit+0x64>)
 8004692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <SystemInit+0x64>)
 800469a:	2200      	movs	r2, #0
 800469c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800469e:	f000 f8db 	bl	8004858 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046a2:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <SystemInit+0x60>)
 80046a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046a8:	609a      	str	r2, [r3, #8]
#endif
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	e000ed00 	.word	0xe000ed00
 80046b4:	40023800 	.word	0x40023800
 80046b8:	24003010 	.word	0x24003010

080046bc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	2302      	movs	r3, #2
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	2302      	movs	r3, #2
 80046d4:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 80046d6:	2302      	movs	r3, #2
 80046d8:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80046da:	4b5a      	ldr	r3, [pc, #360]	; (8004844 <SystemCoreClockUpdate+0x188>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b0c      	cmp	r3, #12
 80046e8:	f200 8092 	bhi.w	8004810 <SystemCoreClockUpdate+0x154>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <SystemCoreClockUpdate+0x38>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004729 	.word	0x08004729
 80046f8:	08004811 	.word	0x08004811
 80046fc:	08004811 	.word	0x08004811
 8004700:	08004811 	.word	0x08004811
 8004704:	08004731 	.word	0x08004731
 8004708:	08004811 	.word	0x08004811
 800470c:	08004811 	.word	0x08004811
 8004710:	08004811 	.word	0x08004811
 8004714:	08004739 	.word	0x08004739
 8004718:	08004811 	.word	0x08004811
 800471c:	08004811 	.word	0x08004811
 8004720:	08004811 	.word	0x08004811
 8004724:	080047a5 	.word	0x080047a5
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004728:	4b47      	ldr	r3, [pc, #284]	; (8004848 <SystemCoreClockUpdate+0x18c>)
 800472a:	4a48      	ldr	r2, [pc, #288]	; (800484c <SystemCoreClockUpdate+0x190>)
 800472c:	601a      	str	r2, [r3, #0]
      break;
 800472e:	e073      	b.n	8004818 <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004730:	4b45      	ldr	r3, [pc, #276]	; (8004848 <SystemCoreClockUpdate+0x18c>)
 8004732:	4a47      	ldr	r2, [pc, #284]	; (8004850 <SystemCoreClockUpdate+0x194>)
 8004734:	601a      	str	r2, [r3, #0]
      break;
 8004736:	e06f      	b.n	8004818 <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004738:	4b42      	ldr	r3, [pc, #264]	; (8004844 <SystemCoreClockUpdate+0x188>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	0d9b      	lsrs	r3, r3, #22
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004744:	4b3f      	ldr	r3, [pc, #252]	; (8004844 <SystemCoreClockUpdate+0x188>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800474c:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00c      	beq.n	800476e <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004754:	4a3e      	ldr	r2, [pc, #248]	; (8004850 <SystemCoreClockUpdate+0x194>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	4a39      	ldr	r2, [pc, #228]	; (8004844 <SystemCoreClockUpdate+0x188>)
 800475e:	6852      	ldr	r2, [r2, #4]
 8004760:	0992      	lsrs	r2, r2, #6
 8004762:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004766:	fb02 f303 	mul.w	r3, r2, r3
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	e00b      	b.n	8004786 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800476e:	4a37      	ldr	r2, [pc, #220]	; (800484c <SystemCoreClockUpdate+0x190>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	fbb2 f3f3 	udiv	r3, r2, r3
 8004776:	4a33      	ldr	r2, [pc, #204]	; (8004844 <SystemCoreClockUpdate+0x188>)
 8004778:	6852      	ldr	r2, [r2, #4]
 800477a:	0992      	lsrs	r2, r2, #6
 800477c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004780:	fb02 f303 	mul.w	r3, r2, r3
 8004784:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004786:	4b2f      	ldr	r3, [pc, #188]	; (8004844 <SystemCoreClockUpdate+0x188>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	0c1b      	lsrs	r3, r3, #16
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	3301      	adds	r3, #1
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	fbb2 f3f3 	udiv	r3, r2, r3
 800479e:	4a2a      	ldr	r2, [pc, #168]	; (8004848 <SystemCoreClockUpdate+0x18c>)
 80047a0:	6013      	str	r3, [r2, #0]
      break;
 80047a2:	e039      	b.n	8004818 <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80047a4:	4b27      	ldr	r3, [pc, #156]	; (8004844 <SystemCoreClockUpdate+0x188>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	0d9b      	lsrs	r3, r3, #22
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047b0:	4b24      	ldr	r3, [pc, #144]	; (8004844 <SystemCoreClockUpdate+0x188>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b8:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00c      	beq.n	80047da <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80047c0:	4a23      	ldr	r2, [pc, #140]	; (8004850 <SystemCoreClockUpdate+0x194>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <SystemCoreClockUpdate+0x188>)
 80047ca:	6852      	ldr	r2, [r2, #4]
 80047cc:	0992      	lsrs	r2, r2, #6
 80047ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e00b      	b.n	80047f2 <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80047da:	4a1c      	ldr	r2, [pc, #112]	; (800484c <SystemCoreClockUpdate+0x190>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	4a18      	ldr	r2, [pc, #96]	; (8004844 <SystemCoreClockUpdate+0x188>)
 80047e4:	6852      	ldr	r2, [r2, #4]
 80047e6:	0992      	lsrs	r2, r2, #6
 80047e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ec:	fb02 f303 	mul.w	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <SystemCoreClockUpdate+0x188>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	0f1b      	lsrs	r3, r3, #28
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	3301      	adds	r3, #1
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	fbb2 f3f3 	udiv	r3, r2, r3
 800480a:	4a0f      	ldr	r2, [pc, #60]	; (8004848 <SystemCoreClockUpdate+0x18c>)
 800480c:	6013      	str	r3, [r2, #0]
      break;
 800480e:	e003      	b.n	8004818 <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8004810:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <SystemCoreClockUpdate+0x18c>)
 8004812:	4a0e      	ldr	r2, [pc, #56]	; (800484c <SystemCoreClockUpdate+0x190>)
 8004814:	601a      	str	r2, [r3, #0]
      break;
 8004816:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <SystemCoreClockUpdate+0x188>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	4a0c      	ldr	r2, [pc, #48]	; (8004854 <SystemCoreClockUpdate+0x198>)
 8004824:	5cd3      	ldrb	r3, [r2, r3]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <SystemCoreClockUpdate+0x18c>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	4a04      	ldr	r2, [pc, #16]	; (8004848 <SystemCoreClockUpdate+0x18c>)
 8004836:	6013      	str	r3, [r2, #0]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40023800 	.word	0x40023800
 8004848:	20000014 	.word	0x20000014
 800484c:	00f42400 	.word	0x00f42400
 8004850:	007a1200 	.word	0x007a1200
 8004854:	20000018 	.word	0x20000018

08004858 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	607b      	str	r3, [r7, #4]
 8004862:	2300      	movs	r3, #0
 8004864:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004866:	4b43      	ldr	r3, [pc, #268]	; (8004974 <SetSysClock+0x11c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a42      	ldr	r2, [pc, #264]	; (8004974 <SetSysClock+0x11c>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004872:	4b40      	ldr	r3, [pc, #256]	; (8004974 <SetSysClock+0x11c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3301      	adds	r3, #1
 8004880:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <SetSysClock+0x38>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800488e:	d1f0      	bne.n	8004872 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004890:	4b38      	ldr	r3, [pc, #224]	; (8004974 <SetSysClock+0x11c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800489c:	2301      	movs	r3, #1
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	e001      	b.n	80048a6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d15c      	bne.n	8004966 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80048ac:	4b31      	ldr	r3, [pc, #196]	; (8004974 <SetSysClock+0x11c>)
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	4a30      	ldr	r2, [pc, #192]	; (8004974 <SetSysClock+0x11c>)
 80048b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80048b8:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <SetSysClock+0x120>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2e      	ldr	r2, [pc, #184]	; (8004978 <SetSysClock+0x120>)
 80048be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048c2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80048c4:	4b2b      	ldr	r3, [pc, #172]	; (8004974 <SetSysClock+0x11c>)
 80048c6:	4a2b      	ldr	r2, [pc, #172]	; (8004974 <SetSysClock+0x11c>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80048cc:	4b29      	ldr	r3, [pc, #164]	; (8004974 <SetSysClock+0x11c>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a28      	ldr	r2, [pc, #160]	; (8004974 <SetSysClock+0x11c>)
 80048d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80048d8:	4b26      	ldr	r3, [pc, #152]	; (8004974 <SetSysClock+0x11c>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4a25      	ldr	r2, [pc, #148]	; (8004974 <SetSysClock+0x11c>)
 80048de:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80048e2:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80048e4:	4b23      	ldr	r3, [pc, #140]	; (8004974 <SetSysClock+0x11c>)
 80048e6:	4a25      	ldr	r2, [pc, #148]	; (800497c <SetSysClock+0x124>)
 80048e8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80048ea:	4b22      	ldr	r3, [pc, #136]	; (8004974 <SetSysClock+0x11c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a21      	ldr	r2, [pc, #132]	; (8004974 <SetSysClock+0x11c>)
 80048f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80048f6:	bf00      	nop
 80048f8:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <SetSysClock+0x11c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f9      	beq.n	80048f8 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <SetSysClock+0x120>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1b      	ldr	r2, [pc, #108]	; (8004978 <SetSysClock+0x120>)
 800490a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490e:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8004910:	bf00      	nop
 8004912:	4b19      	ldr	r3, [pc, #100]	; (8004978 <SetSysClock+0x120>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f9      	beq.n	8004912 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <SetSysClock+0x120>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a15      	ldr	r2, [pc, #84]	; (8004978 <SetSysClock+0x120>)
 8004924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004928:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 800492a:	bf00      	nop
 800492c:	4b12      	ldr	r3, [pc, #72]	; (8004978 <SetSysClock+0x120>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f9      	beq.n	800492c <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004938:	4b11      	ldr	r3, [pc, #68]	; (8004980 <SetSysClock+0x128>)
 800493a:	f240 7205 	movw	r2, #1797	; 0x705
 800493e:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <SetSysClock+0x11c>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a0b      	ldr	r2, [pc, #44]	; (8004974 <SetSysClock+0x11c>)
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800494c:	4b09      	ldr	r3, [pc, #36]	; (8004974 <SetSysClock+0x11c>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a08      	ldr	r2, [pc, #32]	; (8004974 <SetSysClock+0x11c>)
 8004952:	f043 0302 	orr.w	r3, r3, #2
 8004956:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004958:	bf00      	nop
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <SetSysClock+0x11c>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b08      	cmp	r3, #8
 8004964:	d1f9      	bne.n	800495a <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800
 8004978:	40007000 	.word	0x40007000
 800497c:	77405a08 	.word	0x77405a08
 8004980:	40023c00 	.word	0x40023c00

08004984 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004984:	480d      	ldr	r0, [pc, #52]	; (80049bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004986:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004988:	480d      	ldr	r0, [pc, #52]	; (80049c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800498a:	490e      	ldr	r1, [pc, #56]	; (80049c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800498c:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <LoopForever+0xe>)
  movs r3, #0
 800498e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004990:	e002      	b.n	8004998 <LoopCopyDataInit>

08004992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004996:	3304      	adds	r3, #4

08004998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800499a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800499c:	d3f9      	bcc.n	8004992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800499e:	4a0b      	ldr	r2, [pc, #44]	; (80049cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80049a0:	4c0b      	ldr	r4, [pc, #44]	; (80049d0 <LoopForever+0x16>)
  movs r3, #0
 80049a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049a4:	e001      	b.n	80049aa <LoopFillZerobss>

080049a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049a8:	3204      	adds	r2, #4

080049aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049ac:	d3fb      	bcc.n	80049a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80049ae:	f7ff fe4f 	bl	8004650 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80049b2:	f000 f811 	bl	80049d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049b6:	f7ff fd19 	bl	80043ec <main>

080049ba <LoopForever>:

LoopForever:
    b LoopForever
 80049ba:	e7fe      	b.n	80049ba <LoopForever>
  ldr   r0, =_estack
 80049bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049c4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80049c8:	08004e44 	.word	0x08004e44
  ldr r2, =_sbss
 80049cc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80049d0:	200154d0 	.word	0x200154d0

080049d4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80049d4:	e7fe      	b.n	80049d4 <ADC_IRQHandler>
	...

080049d8 <__libc_init_array>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	4e0d      	ldr	r6, [pc, #52]	; (8004a10 <__libc_init_array+0x38>)
 80049dc:	4c0d      	ldr	r4, [pc, #52]	; (8004a14 <__libc_init_array+0x3c>)
 80049de:	1ba4      	subs	r4, r4, r6
 80049e0:	10a4      	asrs	r4, r4, #2
 80049e2:	2500      	movs	r5, #0
 80049e4:	42a5      	cmp	r5, r4
 80049e6:	d109      	bne.n	80049fc <__libc_init_array+0x24>
 80049e8:	4e0b      	ldr	r6, [pc, #44]	; (8004a18 <__libc_init_array+0x40>)
 80049ea:	4c0c      	ldr	r4, [pc, #48]	; (8004a1c <__libc_init_array+0x44>)
 80049ec:	f000 f938 	bl	8004c60 <_init>
 80049f0:	1ba4      	subs	r4, r4, r6
 80049f2:	10a4      	asrs	r4, r4, #2
 80049f4:	2500      	movs	r5, #0
 80049f6:	42a5      	cmp	r5, r4
 80049f8:	d105      	bne.n	8004a06 <__libc_init_array+0x2e>
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a00:	4798      	blx	r3
 8004a02:	3501      	adds	r5, #1
 8004a04:	e7ee      	b.n	80049e4 <__libc_init_array+0xc>
 8004a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a0a:	4798      	blx	r3
 8004a0c:	3501      	adds	r5, #1
 8004a0e:	e7f2      	b.n	80049f6 <__libc_init_array+0x1e>
 8004a10:	08004e3c 	.word	0x08004e3c
 8004a14:	08004e3c 	.word	0x08004e3c
 8004a18:	08004e3c 	.word	0x08004e3c
 8004a1c:	08004e40 	.word	0x08004e40

08004a20 <memcmp>:
 8004a20:	b530      	push	{r4, r5, lr}
 8004a22:	2400      	movs	r4, #0
 8004a24:	42a2      	cmp	r2, r4
 8004a26:	d101      	bne.n	8004a2c <memcmp+0xc>
 8004a28:	2000      	movs	r0, #0
 8004a2a:	e007      	b.n	8004a3c <memcmp+0x1c>
 8004a2c:	5d03      	ldrb	r3, [r0, r4]
 8004a2e:	3401      	adds	r4, #1
 8004a30:	190d      	adds	r5, r1, r4
 8004a32:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004a36:	42ab      	cmp	r3, r5
 8004a38:	d0f4      	beq.n	8004a24 <memcmp+0x4>
 8004a3a:	1b58      	subs	r0, r3, r5
 8004a3c:	bd30      	pop	{r4, r5, pc}

08004a3e <memcpy>:
 8004a3e:	b510      	push	{r4, lr}
 8004a40:	1e43      	subs	r3, r0, #1
 8004a42:	440a      	add	r2, r1
 8004a44:	4291      	cmp	r1, r2
 8004a46:	d100      	bne.n	8004a4a <memcpy+0xc>
 8004a48:	bd10      	pop	{r4, pc}
 8004a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a52:	e7f7      	b.n	8004a44 <memcpy+0x6>

08004a54 <memset>:
 8004a54:	4402      	add	r2, r0
 8004a56:	4603      	mov	r3, r0
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d100      	bne.n	8004a5e <memset+0xa>
 8004a5c:	4770      	bx	lr
 8004a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a62:	e7f9      	b.n	8004a58 <memset+0x4>

08004a64 <srand>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <srand+0x38>)
 8004a68:	681c      	ldr	r4, [r3, #0]
 8004a6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	b97b      	cbnz	r3, 8004a90 <srand+0x2c>
 8004a70:	2018      	movs	r0, #24
 8004a72:	f000 f857 	bl	8004b24 <malloc>
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <srand+0x3c>)
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <srand+0x40>)
 8004a7a:	63a0      	str	r0, [r4, #56]	; 0x38
 8004a7c:	e9c0 2300 	strd	r2, r3, [r0]
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <srand+0x44>)
 8004a82:	6083      	str	r3, [r0, #8]
 8004a84:	230b      	movs	r3, #11
 8004a86:	8183      	strh	r3, [r0, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004a90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a92:	2200      	movs	r2, #0
 8004a94:	611d      	str	r5, [r3, #16]
 8004a96:	615a      	str	r2, [r3, #20]
 8004a98:	bd38      	pop	{r3, r4, r5, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000028 	.word	0x20000028
 8004aa0:	abcd330e 	.word	0xabcd330e
 8004aa4:	e66d1234 	.word	0xe66d1234
 8004aa8:	0005deec 	.word	0x0005deec

08004aac <rand>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4b13      	ldr	r3, [pc, #76]	; (8004afc <rand+0x50>)
 8004ab0:	681c      	ldr	r4, [r3, #0]
 8004ab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ab4:	b97b      	cbnz	r3, 8004ad6 <rand+0x2a>
 8004ab6:	2018      	movs	r0, #24
 8004ab8:	f000 f834 	bl	8004b24 <malloc>
 8004abc:	4a10      	ldr	r2, [pc, #64]	; (8004b00 <rand+0x54>)
 8004abe:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <rand+0x58>)
 8004ac0:	63a0      	str	r0, [r4, #56]	; 0x38
 8004ac2:	e9c0 2300 	strd	r2, r3, [r0]
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <rand+0x5c>)
 8004ac8:	6083      	str	r3, [r0, #8]
 8004aca:	230b      	movs	r3, #11
 8004acc:	8183      	strh	r3, [r0, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004ad6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ad8:	480c      	ldr	r0, [pc, #48]	; (8004b0c <rand+0x60>)
 8004ada:	690a      	ldr	r2, [r1, #16]
 8004adc:	694b      	ldr	r3, [r1, #20]
 8004ade:	4c0c      	ldr	r4, [pc, #48]	; (8004b10 <rand+0x64>)
 8004ae0:	4350      	muls	r0, r2
 8004ae2:	fb04 0003 	mla	r0, r4, r3, r0
 8004ae6:	fba2 2304 	umull	r2, r3, r2, r4
 8004aea:	4403      	add	r3, r0
 8004aec:	1c54      	adds	r4, r2, #1
 8004aee:	f143 0500 	adc.w	r5, r3, #0
 8004af2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004af6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	20000028 	.word	0x20000028
 8004b00:	abcd330e 	.word	0xabcd330e
 8004b04:	e66d1234 	.word	0xe66d1234
 8004b08:	0005deec 	.word	0x0005deec
 8004b0c:	5851f42d 	.word	0x5851f42d
 8004b10:	4c957f2d 	.word	0x4c957f2d

08004b14 <strcpy>:
 8004b14:	4603      	mov	r3, r0
 8004b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b1a:	f803 2b01 	strb.w	r2, [r3], #1
 8004b1e:	2a00      	cmp	r2, #0
 8004b20:	d1f9      	bne.n	8004b16 <strcpy+0x2>
 8004b22:	4770      	bx	lr

08004b24 <malloc>:
 8004b24:	4b02      	ldr	r3, [pc, #8]	; (8004b30 <malloc+0xc>)
 8004b26:	4601      	mov	r1, r0
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	f000 b803 	b.w	8004b34 <_malloc_r>
 8004b2e:	bf00      	nop
 8004b30:	20000028 	.word	0x20000028

08004b34 <_malloc_r>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	1ccd      	adds	r5, r1, #3
 8004b38:	f025 0503 	bic.w	r5, r5, #3
 8004b3c:	3508      	adds	r5, #8
 8004b3e:	2d0c      	cmp	r5, #12
 8004b40:	bf38      	it	cc
 8004b42:	250c      	movcc	r5, #12
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	4606      	mov	r6, r0
 8004b48:	db01      	blt.n	8004b4e <_malloc_r+0x1a>
 8004b4a:	42a9      	cmp	r1, r5
 8004b4c:	d903      	bls.n	8004b56 <_malloc_r+0x22>
 8004b4e:	230c      	movs	r3, #12
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	2000      	movs	r0, #0
 8004b54:	bd70      	pop	{r4, r5, r6, pc}
 8004b56:	f000 f857 	bl	8004c08 <__malloc_lock>
 8004b5a:	4a21      	ldr	r2, [pc, #132]	; (8004be0 <_malloc_r+0xac>)
 8004b5c:	6814      	ldr	r4, [r2, #0]
 8004b5e:	4621      	mov	r1, r4
 8004b60:	b991      	cbnz	r1, 8004b88 <_malloc_r+0x54>
 8004b62:	4c20      	ldr	r4, [pc, #128]	; (8004be4 <_malloc_r+0xb0>)
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	b91b      	cbnz	r3, 8004b70 <_malloc_r+0x3c>
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f000 f83d 	bl	8004be8 <_sbrk_r>
 8004b6e:	6020      	str	r0, [r4, #0]
 8004b70:	4629      	mov	r1, r5
 8004b72:	4630      	mov	r0, r6
 8004b74:	f000 f838 	bl	8004be8 <_sbrk_r>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d124      	bne.n	8004bc6 <_malloc_r+0x92>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	6033      	str	r3, [r6, #0]
 8004b80:	4630      	mov	r0, r6
 8004b82:	f000 f842 	bl	8004c0a <__malloc_unlock>
 8004b86:	e7e4      	b.n	8004b52 <_malloc_r+0x1e>
 8004b88:	680b      	ldr	r3, [r1, #0]
 8004b8a:	1b5b      	subs	r3, r3, r5
 8004b8c:	d418      	bmi.n	8004bc0 <_malloc_r+0x8c>
 8004b8e:	2b0b      	cmp	r3, #11
 8004b90:	d90f      	bls.n	8004bb2 <_malloc_r+0x7e>
 8004b92:	600b      	str	r3, [r1, #0]
 8004b94:	50cd      	str	r5, [r1, r3]
 8004b96:	18cc      	adds	r4, r1, r3
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f000 f836 	bl	8004c0a <__malloc_unlock>
 8004b9e:	f104 000b 	add.w	r0, r4, #11
 8004ba2:	1d23      	adds	r3, r4, #4
 8004ba4:	f020 0007 	bic.w	r0, r0, #7
 8004ba8:	1ac3      	subs	r3, r0, r3
 8004baa:	d0d3      	beq.n	8004b54 <_malloc_r+0x20>
 8004bac:	425a      	negs	r2, r3
 8004bae:	50e2      	str	r2, [r4, r3]
 8004bb0:	e7d0      	b.n	8004b54 <_malloc_r+0x20>
 8004bb2:	428c      	cmp	r4, r1
 8004bb4:	684b      	ldr	r3, [r1, #4]
 8004bb6:	bf16      	itet	ne
 8004bb8:	6063      	strne	r3, [r4, #4]
 8004bba:	6013      	streq	r3, [r2, #0]
 8004bbc:	460c      	movne	r4, r1
 8004bbe:	e7eb      	b.n	8004b98 <_malloc_r+0x64>
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	6849      	ldr	r1, [r1, #4]
 8004bc4:	e7cc      	b.n	8004b60 <_malloc_r+0x2c>
 8004bc6:	1cc4      	adds	r4, r0, #3
 8004bc8:	f024 0403 	bic.w	r4, r4, #3
 8004bcc:	42a0      	cmp	r0, r4
 8004bce:	d005      	beq.n	8004bdc <_malloc_r+0xa8>
 8004bd0:	1a21      	subs	r1, r4, r0
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f000 f808 	bl	8004be8 <_sbrk_r>
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d0cf      	beq.n	8004b7c <_malloc_r+0x48>
 8004bdc:	6025      	str	r5, [r4, #0]
 8004bde:	e7db      	b.n	8004b98 <_malloc_r+0x64>
 8004be0:	200153b4 	.word	0x200153b4
 8004be4:	200153b8 	.word	0x200153b8

08004be8 <_sbrk_r>:
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4c06      	ldr	r4, [pc, #24]	; (8004c04 <_sbrk_r+0x1c>)
 8004bec:	2300      	movs	r3, #0
 8004bee:	4605      	mov	r5, r0
 8004bf0:	4608      	mov	r0, r1
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	f000 f80a 	bl	8004c0c <_sbrk>
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d102      	bne.n	8004c02 <_sbrk_r+0x1a>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	b103      	cbz	r3, 8004c02 <_sbrk_r+0x1a>
 8004c00:	602b      	str	r3, [r5, #0]
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
 8004c04:	200154cc 	.word	0x200154cc

08004c08 <__malloc_lock>:
 8004c08:	4770      	bx	lr

08004c0a <__malloc_unlock>:
 8004c0a:	4770      	bx	lr

08004c0c <_sbrk>:
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <_sbrk+0x38>)
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	b510      	push	{r4, lr}
 8004c12:	4602      	mov	r2, r0
 8004c14:	b909      	cbnz	r1, 8004c1a <_sbrk+0xe>
 8004c16:	490c      	ldr	r1, [pc, #48]	; (8004c48 <_sbrk+0x3c>)
 8004c18:	6019      	str	r1, [r3, #0]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	4669      	mov	r1, sp
 8004c1e:	4402      	add	r2, r0
 8004c20:	428a      	cmp	r2, r1
 8004c22:	d806      	bhi.n	8004c32 <_sbrk+0x26>
 8004c24:	4909      	ldr	r1, [pc, #36]	; (8004c4c <_sbrk+0x40>)
 8004c26:	4c0a      	ldr	r4, [pc, #40]	; (8004c50 <_sbrk+0x44>)
 8004c28:	6809      	ldr	r1, [r1, #0]
 8004c2a:	42a1      	cmp	r1, r4
 8004c2c:	d008      	beq.n	8004c40 <_sbrk+0x34>
 8004c2e:	428a      	cmp	r2, r1
 8004c30:	d906      	bls.n	8004c40 <_sbrk+0x34>
 8004c32:	f000 f80f 	bl	8004c54 <__errno>
 8004c36:	230c      	movs	r3, #12
 8004c38:	6003      	str	r3, [r0, #0]
 8004c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3e:	bd10      	pop	{r4, pc}
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e7fc      	b.n	8004c3e <_sbrk+0x32>
 8004c44:	200153bc 	.word	0x200153bc
 8004c48:	200154d0 	.word	0x200154d0
 8004c4c:	2000008c 	.word	0x2000008c
 8004c50:	cafedead 	.word	0xcafedead

08004c54 <__errno>:
 8004c54:	4b01      	ldr	r3, [pc, #4]	; (8004c5c <__errno+0x8>)
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000028 	.word	0x20000028

08004c60 <_init>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr

08004c6c <_fini>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr
