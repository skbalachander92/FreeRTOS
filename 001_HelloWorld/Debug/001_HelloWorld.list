
001_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003630  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003958  08003958  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003958  08003958  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003958  08003958  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001542c  2000002c  0800398c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015458  0800398c  00025458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d725  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b03  00000000  00000000  0002d781  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  0002f288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  0002fd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ad4  00000000  00000000  000307c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a91  00000000  00000000  00033294  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ebf4  00000000  00000000  0003cd25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb919  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f44  00000000  00000000  000bb994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000002c 	.word	0x2000002c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080037e8 	.word	0x080037e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000030 	.word	0x20000030
 800020c:	080037e8 	.word	0x080037e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000220:	b480      	push	{r7}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e076      	b.n	800032a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800023c:	2201      	movs	r2, #1
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	fa02 f303 	lsl.w	r3, r2, r3
 8000244:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	4013      	ands	r3, r2
 800024e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	429a      	cmp	r2, r3
 8000256:	d165      	bne.n	8000324 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	2103      	movs	r1, #3
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	43db      	mvns	r3, r3
 8000268:	401a      	ands	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	791b      	ldrb	r3, [r3, #4]
 8000276:	4619      	mov	r1, r3
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	791b      	ldrb	r3, [r3, #4]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d003      	beq.n	8000296 <GPIO_Init+0x76>
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	2b02      	cmp	r3, #2
 8000294:	d12e      	bne.n	80002f4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	2103      	movs	r1, #3
 80002a0:	fa01 f303 	lsl.w	r3, r1, r3
 80002a4:	43db      	mvns	r3, r3
 80002a6:	401a      	ands	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	795b      	ldrb	r3, [r3, #5]
 80002b4:	4619      	mov	r1, r3
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	431a      	orrs	r2, r3
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	685a      	ldr	r2, [r3, #4]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	2301      	movs	r3, #1
 80002d0:	408b      	lsls	r3, r1
 80002d2:	43db      	mvns	r3, r3
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	683a      	ldr	r2, [r7, #0]
 80002e0:	7992      	ldrb	r2, [r2, #6]
 80002e2:	4611      	mov	r1, r2
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	b292      	uxth	r2, r2
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	b292      	uxth	r2, r2
 80002ee:	431a      	orrs	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	68da      	ldr	r2, [r3, #12]
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	2103      	movs	r1, #3
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	43db      	mvns	r3, r3
 8000306:	401a      	ands	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68da      	ldr	r2, [r3, #12]
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	79db      	ldrb	r3, [r3, #7]
 8000314:	4619      	mov	r1, r3
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	431a      	orrs	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	3301      	adds	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	2b0f      	cmp	r3, #15
 800032e:	d985      	bls.n	800023c <GPIO_Init+0x1c>
    }
  }
}
 8000330:	bf00      	nop
 8000332:	371c      	adds	r7, #28
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	807b      	strh	r3, [r7, #2]
 8000348:	4613      	mov	r3, r2
 800034a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000350:	2300      	movs	r3, #0
 8000352:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000354:	787a      	ldrb	r2, [r7, #1]
 8000356:	887b      	ldrh	r3, [r7, #2]
 8000358:	f003 0307 	and.w	r3, r3, #7
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	fa02 f303 	lsl.w	r3, r2, r3
 8000362:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000364:	887b      	ldrh	r3, [r7, #2]
 8000366:	08db      	lsrs	r3, r3, #3
 8000368:	b29b      	uxth	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3208      	adds	r2, #8
 8000370:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000374:	887b      	ldrh	r3, [r7, #2]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	210f      	movs	r1, #15
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43db      	mvns	r3, r3
 8000384:	8879      	ldrh	r1, [r7, #2]
 8000386:	08c9      	lsrs	r1, r1, #3
 8000388:	b289      	uxth	r1, r1
 800038a:	4608      	mov	r0, r1
 800038c:	ea02 0103 	and.w	r1, r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f100 0208 	add.w	r2, r0, #8
 8000396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800039a:	887b      	ldrh	r3, [r7, #2]
 800039c:	08db      	lsrs	r3, r3, #3
 800039e:	b29b      	uxth	r3, r3
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3208      	adds	r2, #8
 80003a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003b0:	887b      	ldrh	r3, [r7, #2]
 80003b2:	08db      	lsrs	r3, r3, #3
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3208      	adds	r2, #8
 80003bc:	68b9      	ldr	r1, [r7, #8]
 80003be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <RCC_DeInit+0x60>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <RCC_DeInit+0x60>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <RCC_DeInit+0x60>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <RCC_DeInit+0x60>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a11      	ldr	r2, [pc, #68]	; (8000430 <RCC_DeInit+0x60>)
 80003ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80003f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80003f4:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <RCC_DeInit+0x60>)
 80003f8:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <RCC_DeInit+0x64>)
 80003fa:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <RCC_DeInit+0x60>)
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <RCC_DeInit+0x68>)
 8000400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <RCC_DeInit+0x60>)
 8000406:	4a0d      	ldr	r2, [pc, #52]	; (800043c <RCC_DeInit+0x6c>)
 8000408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <RCC_DeInit+0x60>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a07      	ldr	r2, [pc, #28]	; (8000430 <RCC_DeInit+0x60>)
 8000412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000416:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <RCC_DeInit+0x60>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <RCC_DeInit+0x60>)
 8000420:	2200      	movs	r2, #0
 8000422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40023800 	.word	0x40023800
 8000434:	24003010 	.word	0x24003010
 8000438:	20003000 	.word	0x20003000
 800043c:	24003000 	.word	0x24003000

08000440 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000440:	b480      	push	{r7}
 8000442:	b08b      	sub	sp, #44	; 0x2c
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]
 800044c:	2300      	movs	r3, #0
 800044e:	61fb      	str	r3, [r7, #28]
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
 8000454:	2302      	movs	r3, #2
 8000456:	61bb      	str	r3, [r7, #24]
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	2302      	movs	r3, #2
 800045e:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000460:	2302      	movs	r3, #2
 8000462:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000464:	4b6f      	ldr	r3, [pc, #444]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f003 030c 	and.w	r3, r3, #12
 800046c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800046e:	6a3b      	ldr	r3, [r7, #32]
 8000470:	2b0c      	cmp	r3, #12
 8000472:	f200 8091 	bhi.w	8000598 <RCC_GetClocksFreq+0x158>
 8000476:	a201      	add	r2, pc, #4	; (adr r2, 800047c <RCC_GetClocksFreq+0x3c>)
 8000478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047c:	080004b1 	.word	0x080004b1
 8000480:	08000599 	.word	0x08000599
 8000484:	08000599 	.word	0x08000599
 8000488:	08000599 	.word	0x08000599
 800048c:	080004b9 	.word	0x080004b9
 8000490:	08000599 	.word	0x08000599
 8000494:	08000599 	.word	0x08000599
 8000498:	08000599 	.word	0x08000599
 800049c:	080004c1 	.word	0x080004c1
 80004a0:	08000599 	.word	0x08000599
 80004a4:	08000599 	.word	0x08000599
 80004a8:	08000599 	.word	0x08000599
 80004ac:	0800052d 	.word	0x0800052d
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a5d      	ldr	r2, [pc, #372]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 80004b4:	601a      	str	r2, [r3, #0]
    break;
 80004b6:	e073      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a5c      	ldr	r2, [pc, #368]	; (800062c <RCC_GetClocksFreq+0x1ec>)
 80004bc:	601a      	str	r2, [r3, #0]
    break;
 80004be:	e06f      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004c0:	4b58      	ldr	r3, [pc, #352]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	0d9b      	lsrs	r3, r3, #22
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004cc:	4b55      	ldr	r3, [pc, #340]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004d4:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d00c      	beq.n	80004f6 <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004dc:	4a53      	ldr	r2, [pc, #332]	; (800062c <RCC_GetClocksFreq+0x1ec>)
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e4:	4a4f      	ldr	r2, [pc, #316]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80004e6:	6852      	ldr	r2, [r2, #4]
 80004e8:	0992      	lsrs	r2, r2, #6
 80004ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004ee:	fb02 f303 	mul.w	r3, r2, r3
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
 80004f4:	e00b      	b.n	800050e <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004f6:	4a4c      	ldr	r2, [pc, #304]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fe:	4a49      	ldr	r2, [pc, #292]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000500:	6852      	ldr	r2, [r2, #4]
 8000502:	0992      	lsrs	r2, r2, #6
 8000504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000508:	fb02 f303 	mul.w	r3, r2, r3
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800050e:	4b45      	ldr	r3, [pc, #276]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	0c1b      	lsrs	r3, r3, #16
 8000514:	f003 0303 	and.w	r3, r3, #3
 8000518:	3301      	adds	r3, #1
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800051e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000520:	69bb      	ldr	r3, [r7, #24]
 8000522:	fbb2 f2f3 	udiv	r2, r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	601a      	str	r2, [r3, #0]
    break;
 800052a:	e039      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800052c:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	0d9b      	lsrs	r3, r3, #22
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000538:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000540:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d00c      	beq.n	8000562 <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000548:	4a38      	ldr	r2, [pc, #224]	; (800062c <RCC_GetClocksFreq+0x1ec>)
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000550:	4a34      	ldr	r2, [pc, #208]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 8000552:	6852      	ldr	r2, [r2, #4]
 8000554:	0992      	lsrs	r2, r2, #6
 8000556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800055a:	fb02 f303 	mul.w	r3, r2, r3
 800055e:	627b      	str	r3, [r7, #36]	; 0x24
 8000560:	e00b      	b.n	800057a <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000562:	4a31      	ldr	r2, [pc, #196]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	fbb2 f3f3 	udiv	r3, r2, r3
 800056a:	4a2e      	ldr	r2, [pc, #184]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800056c:	6852      	ldr	r2, [r2, #4]
 800056e:	0992      	lsrs	r2, r2, #6
 8000570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000574:	fb02 f303 	mul.w	r3, r2, r3
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 800057a:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	0f1b      	lsrs	r3, r3, #28
 8000580:	f003 0307 	and.w	r3, r3, #7
 8000584:	3301      	adds	r3, #1
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 800058a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	601a      	str	r2, [r3, #0]
    break;
 8000596:	e003      	b.n	80005a0 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a23      	ldr	r2, [pc, #140]	; (8000628 <RCC_GetClocksFreq+0x1e8>)
 800059c:	601a      	str	r2, [r3, #0]
    break;
 800059e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005a8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80005aa:	6a3b      	ldr	r3, [r7, #32]
 80005ac:	091b      	lsrs	r3, r3, #4
 80005ae:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005b0:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <RCC_GetClocksFreq+0x1f0>)
 80005b2:	6a3b      	ldr	r3, [r7, #32]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	40da      	lsrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80005d0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	0a9b      	lsrs	r3, r3, #10
 80005d6:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80005d8:	4a15      	ldr	r2, [pc, #84]	; (8000630 <RCC_GetClocksFreq+0x1f0>)
 80005da:	6a3b      	ldr	r3, [r7, #32]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <RCC_GetClocksFreq+0x1e4>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005f8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 80005fa:	6a3b      	ldr	r3, [r7, #32]
 80005fc:	0b5b      	lsrs	r3, r3, #13
 80005fe:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000600:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <RCC_GetClocksFreq+0x1f0>)
 8000602:	6a3b      	ldr	r3, [r7, #32]
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	40da      	lsrs	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	60da      	str	r2, [r3, #12]
}
 8000618:	bf00      	nop
 800061a:	372c      	adds	r7, #44	; 0x2c
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40023800 	.word	0x40023800
 8000628:	00f42400 	.word	0x00f42400
 800062c:	007a1200 	.word	0x007a1200
 8000630:	20000000 	.word	0x20000000

08000634 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000652:	e006      	b.n	8000662 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	43db      	mvns	r3, r3
 800065c:	4904      	ldr	r1, [pc, #16]	; (8000670 <RCC_AHB1PeriphClockCmd+0x3c>)
 800065e:	4013      	ands	r3, r2
 8000660:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d006      	beq.n	8000694 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800068a:	4909      	ldr	r1, [pc, #36]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000692:	e006      	b.n	80006a2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	43db      	mvns	r3, r3
 800069c:	4904      	ldr	r1, [pc, #16]	; (80006b0 <RCC_APB1PeriphClockCmd+0x3c>)
 800069e:	4013      	ands	r3, r2
 80006a0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	8a1b      	ldrh	r3, [r3, #16]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	88db      	ldrh	r3, [r3, #6]
 80006e2:	461a      	mov	r2, r3
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	4313      	orrs	r3, r2
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80006ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000700:	f023 030c 	bic.w	r3, r3, #12
 8000704:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	889a      	ldrh	r2, [r3, #4]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	891b      	ldrh	r3, [r3, #8]
 800070e:	4313      	orrs	r3, r2
 8000710:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000716:	4313      	orrs	r3, r2
 8000718:	b29b      	uxth	r3, r3
 800071a:	461a      	mov	r2, r3
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	4313      	orrs	r3, r2
 8000720:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	b29a      	uxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	8a9b      	ldrh	r3, [r3, #20]
 800072e:	b29b      	uxth	r3, r3
 8000730:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000738:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	899b      	ldrh	r3, [r3, #12]
 800073e:	461a      	mov	r2, r3
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	4313      	orrs	r3, r2
 8000744:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	b29a      	uxth	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe74 	bl	8000440 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a30      	ldr	r2, [pc, #192]	; (800081c <USART_Init+0x168>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d003      	beq.n	8000768 <USART_Init+0xb4>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <USART_Init+0x16c>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d102      	bne.n	800076e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	623b      	str	r3, [r7, #32]
 800076c:	e001      	b.n	8000772 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	899b      	ldrh	r3, [r3, #12]
 8000776:	b29b      	uxth	r3, r3
 8000778:	b21b      	sxth	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	da0c      	bge.n	8000798 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800077e:	6a3a      	ldr	r2, [r7, #32]
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	009a      	lsls	r2, r3, #2
 8000788:	441a      	add	r2, r3
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	fbb2 f3f3 	udiv	r3, r2, r3
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	e00b      	b.n	80007b0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000798:	6a3a      	ldr	r2, [r7, #32]
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	009a      	lsls	r2, r3, #2
 80007a2:	441a      	add	r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <USART_Init+0x170>)
 80007b4:	fba2 2303 	umull	r2, r3, r2, r3
 80007b8:	095b      	lsrs	r3, r3, #5
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	091b      	lsrs	r3, r3, #4
 80007c2:	2264      	movs	r2, #100	; 0x64
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	69fa      	ldr	r2, [r7, #28]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	899b      	ldrh	r3, [r3, #12]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da0c      	bge.n	80007f4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	3332      	adds	r3, #50	; 0x32
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <USART_Init+0x170>)
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	f003 0307 	and.w	r3, r3, #7
 80007ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ee:	4313      	orrs	r3, r2
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
 80007f2:	e00b      	b.n	800080c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	3332      	adds	r3, #50	; 0x32
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <USART_Init+0x170>)
 80007fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000800:	095b      	lsrs	r3, r3, #5
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000808:	4313      	orrs	r3, r2
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	b29a      	uxth	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	811a      	strh	r2, [r3, #8]
}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40011000 	.word	0x40011000
 8000820:	40011400 	.word	0x40011400
 8000824:	51eb851f 	.word	0x51eb851f

08000828 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d008      	beq.n	800084c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	899b      	ldrh	r3, [r3, #12]
 800083e:	b29b      	uxth	r3, r3
 8000840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000844:	b29a      	uxth	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800084a:	e007      	b.n	800085c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	899b      	ldrh	r3, [r3, #12]
 8000850:	b29b      	uxth	r3, r3
 8000852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000856:	b29a      	uxth	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	819a      	strh	r2, [r3, #12]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000874:	887b      	ldrh	r3, [r7, #2]
 8000876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800087a:	b29a      	uxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	809a      	strh	r2, [r3, #4]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	4013      	ands	r3, r2
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e001      	b.n	80008b6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f103 0208 	add.w	r2, r3, #8
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295
 80008dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f103 0208 	add.w	r2, r3, #8
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f103 0208 	add.w	r2, r3, #8
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800091e:	b480      	push	{r7}
 8000920:	b085      	sub	sp, #20
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	6892      	ldr	r2, [r2, #8]
 800097c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	6852      	ldr	r2, [r2, #4]
 8000986:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	429a      	cmp	r2, r3
 8000990:	d103      	bne.n	800099a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	1e5a      	subs	r2, r3, #1
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b08c      	sub	sp, #48	; 0x30
 80009be:	af04      	add	r7, sp, #16
 80009c0:	60f8      	str	r0, [r7, #12]
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4613      	mov	r3, r2
 80009c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fe3e 	bl	8001650 <pvPortMalloc>
 80009d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00e      	beq.n	80009fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80009dc:	2058      	movs	r0, #88	; 0x58
 80009de:	f000 fe37 	bl	8001650 <pvPortMalloc>
 80009e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	631a      	str	r2, [r3, #48]	; 0x30
 80009f0:	e005      	b.n	80009fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f000 fef4 	bl	80017e0 <vPortFree>
 80009f8:	e001      	b.n	80009fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d013      	beq.n	8000a2c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	2300      	movs	r3, #0
 8000a08:	9303      	str	r3, [sp, #12]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f000 f80e 	bl	8000a3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000a20:	69f8      	ldr	r0, [r7, #28]
 8000a22:	f000 f899 	bl	8000b58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	e002      	b.n	8000a32 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000a32:	69bb      	ldr	r3, [r7, #24]
	}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	461a      	mov	r2, r3
 8000a54:	21a5      	movs	r1, #165	; 0xa5
 8000a56:	f002 febf 	bl	80037d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a64:	3b01      	subs	r3, #1
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	f023 0307 	bic.w	r3, r3, #7
 8000a72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d009      	beq.n	8000a92 <prvInitialiseNewTask+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a82:	f383 8811 	msr	BASEPRI, r3
 8000a86:	f3bf 8f6f 	isb	sy
 8000a8a:	f3bf 8f4f 	dsb	sy
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e7fe      	b.n	8000a90 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d01f      	beq.n	8000ad8 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
 8000a9c:	e012      	b.n	8000ac4 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	7819      	ldrb	r1, [r3, #0]
 8000aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	4413      	add	r3, r2
 8000aac:	3334      	adds	r3, #52	; 0x34
 8000aae:	460a      	mov	r2, r1
 8000ab0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	2b09      	cmp	r3, #9
 8000ac8:	d9e9      	bls.n	8000a9e <prvInitialiseNewTask+0x62>
 8000aca:	e000      	b.n	8000ace <prvInitialiseNewTask+0x92>
			{
				break;
 8000acc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000ad6:	e003      	b.n	8000ae0 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	d901      	bls.n	8000aea <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000af4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af8:	2200      	movs	r2, #0
 8000afa:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000afe:	3304      	adds	r3, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff feff 	bl	8000904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b08:	3318      	adds	r3, #24
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fefa 	bl	8000904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b18:	f1c3 0205 	rsb	r2, r3, #5
 8000b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b28:	2200      	movs	r2, #0
 8000b2a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	68f9      	ldr	r1, [r7, #12]
 8000b38:	69b8      	ldr	r0, [r7, #24]
 8000b3a:	f000 fb41 	bl	80011c0 <pxPortInitialiseStack>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d002      	beq.n	8000b50 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000b60:	f000 fc54 	bl	800140c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000b64:	4b35      	ldr	r3, [pc, #212]	; (8000c3c <prvAddNewTaskToReadyList+0xe4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a34      	ldr	r2, [pc, #208]	; (8000c3c <prvAddNewTaskToReadyList+0xe4>)
 8000b6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000b6e:	4b34      	ldr	r3, [pc, #208]	; (8000c40 <prvAddNewTaskToReadyList+0xe8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d109      	bne.n	8000b8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000b76:	4a32      	ldr	r2, [pc, #200]	; (8000c40 <prvAddNewTaskToReadyList+0xe8>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <prvAddNewTaskToReadyList+0xe4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d110      	bne.n	8000ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000b84:	f000 fa80 	bl	8001088 <prvInitialiseTaskLists>
 8000b88:	e00d      	b.n	8000ba6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <prvAddNewTaskToReadyList+0xec>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d109      	bne.n	8000ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000b92:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <prvAddNewTaskToReadyList+0xe8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d802      	bhi.n	8000ba6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000ba0:	4a27      	ldr	r2, [pc, #156]	; (8000c40 <prvAddNewTaskToReadyList+0xe8>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <prvAddNewTaskToReadyList+0xf0>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <prvAddNewTaskToReadyList+0xf0>)
 8000bae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <prvAddNewTaskToReadyList+0xf0>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d016      	beq.n	8000bec <prvAddNewTaskToReadyList+0x94>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 f8f5 	bl	8002db0 <SEGGER_SYSVIEW_OnTaskCreate>
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	461d      	mov	r5, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	461c      	mov	r4, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	1ae3      	subs	r3, r4, r3
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	462b      	mov	r3, r5
 8000be8:	f000 ffc4 	bl	8001b74 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 f966 	bl	8002ec0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <prvAddNewTaskToReadyList+0xf4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <prvAddNewTaskToReadyList+0xf4>)
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <prvAddNewTaskToReadyList+0xf8>)
 8000c14:	441a      	add	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	f7ff fe7e 	bl	800091e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000c22:	f000 fc21 	bl	8001468 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <prvAddNewTaskToReadyList+0xec>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <prvAddNewTaskToReadyList+0xda>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <prvAddNewTaskToReadyList+0xe8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bdb0      	pop	{r4, r5, r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000120 	.word	0x20000120
 8000c40:	20000048 	.word	0x20000048
 8000c44:	2000012c 	.word	0x2000012c
 8000c48:	2000013c 	.word	0x2000013c
 8000c4c:	20000128 	.word	0x20000128
 8000c50:	2000004c 	.word	0x2000004c

08000c54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <vTaskStartScheduler+0x90>)
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2300      	movs	r3, #0
 8000c64:	2282      	movs	r2, #130	; 0x82
 8000c66:	4920      	ldr	r1, [pc, #128]	; (8000ce8 <vTaskStartScheduler+0x94>)
 8000c68:	4820      	ldr	r0, [pc, #128]	; (8000cec <vTaskStartScheduler+0x98>)
 8000c6a:	f7ff fea6 	bl	80009ba <xTaskCreate>
 8000c6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d123      	bne.n	8000cbe <vTaskStartScheduler+0x6a>
 8000c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c7a:	f383 8811 	msr	BASEPRI, r3
 8000c7e:	f3bf 8f6f 	isb	sy
 8000c82:	f3bf 8f4f 	dsb	sy
 8000c86:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <vTaskStartScheduler+0x9c>)
 8000c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <vTaskStartScheduler+0xa0>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <vTaskStartScheduler+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <vTaskStartScheduler+0xa8>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <vTaskStartScheduler+0x90>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d102      	bne.n	8000cae <vTaskStartScheduler+0x5a>
 8000ca8:	f002 f866 	bl	8002d78 <SEGGER_SYSVIEW_OnIdle>
 8000cac:	e004      	b.n	8000cb8 <vTaskStartScheduler+0x64>
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <vTaskStartScheduler+0xa8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 f8c0 	bl	8002e38 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000cb8:	f000 fb0a 	bl	80012d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000cbc:	e00d      	b.n	8000cda <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d109      	bne.n	8000cda <vTaskStartScheduler+0x86>
 8000cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cca:	f383 8811 	msr	BASEPRI, r3
 8000cce:	f3bf 8f6f 	isb	sy
 8000cd2:	f3bf 8f4f 	dsb	sy
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	e7fe      	b.n	8000cd8 <vTaskStartScheduler+0x84>
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000144 	.word	0x20000144
 8000ce8:	08003800 	.word	0x08003800
 8000cec:	08001065 	.word	0x08001065
 8000cf0:	20000140 	.word	0x20000140
 8000cf4:	2000012c 	.word	0x2000012c
 8000cf8:	20000124 	.word	0x20000124
 8000cfc:	20000048 	.word	0x20000048

08000d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <vTaskSuspendAll+0x18>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a03      	ldr	r2, [pc, #12]	; (8000d18 <vTaskSuspendAll+0x18>)
 8000d0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	20000148 	.word	0x20000148

08000d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <xTaskResumeAll+0x104>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d109      	bne.n	8000d46 <xTaskResumeAll+0x2a>
 8000d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d36:	f383 8811 	msr	BASEPRI, r3
 8000d3a:	f3bf 8f6f 	isb	sy
 8000d3e:	f3bf 8f4f 	dsb	sy
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	e7fe      	b.n	8000d44 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000d46:	f000 fb61 	bl	800140c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000d4a:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <xTaskResumeAll+0x104>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4a33      	ldr	r2, [pc, #204]	; (8000e20 <xTaskResumeAll+0x104>)
 8000d52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d54:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <xTaskResumeAll+0x104>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d159      	bne.n	8000e10 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000d5c:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <xTaskResumeAll+0x108>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d055      	beq.n	8000e10 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d64:	e032      	b.n	8000dcc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d66:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <xTaskResumeAll+0x10c>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3318      	adds	r3, #24
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fdf7 	bl	8000966 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fdf2 	bl	8000966 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 f89b 	bl	8002ec0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8e:	2201      	movs	r2, #1
 8000d90:	409a      	lsls	r2, r3
 8000d92:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <xTaskResumeAll+0x110>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	4a24      	ldr	r2, [pc, #144]	; (8000e2c <xTaskResumeAll+0x110>)
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <xTaskResumeAll+0x114>)
 8000daa:	441a      	add	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3304      	adds	r3, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	4610      	mov	r0, r2
 8000db4:	f7ff fdb3 	bl	800091e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <xTaskResumeAll+0x118>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d302      	bcc.n	8000dcc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <xTaskResumeAll+0x11c>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <xTaskResumeAll+0x10c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1c8      	bne.n	8000d66 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000dda:	f000 f9d1 	bl	8001180 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <xTaskResumeAll+0x120>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d010      	beq.n	8000e0c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000dea:	f000 f83b 	bl	8000e64 <xTaskIncrementTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <xTaskResumeAll+0x11c>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f1      	bne.n	8000dea <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <xTaskResumeAll+0x120>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <xTaskResumeAll+0x11c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000e10:	f000 fb2a 	bl	8001468 <vPortExitCritical>

	return xAlreadyYielded;
 8000e14:	687b      	ldr	r3, [r7, #4]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000148 	.word	0x20000148
 8000e24:	20000120 	.word	0x20000120
 8000e28:	200000e0 	.word	0x200000e0
 8000e2c:	20000128 	.word	0x20000128
 8000e30:	2000004c 	.word	0x2000004c
 8000e34:	20000048 	.word	0x20000048
 8000e38:	20000134 	.word	0x20000134
 8000e3c:	20000130 	.word	0x20000130

08000e40 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000e46:	f000 fbc5 	bl	80015d4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <xTaskGetTickCountFromISR+0x20>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000e54:	683b      	ldr	r3, [r7, #0]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000124 	.word	0x20000124

08000e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e6e:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <xTaskIncrementTick+0x10c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d172      	bne.n	8000f5c <xTaskIncrementTick+0xf8>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000e76:	4b3f      	ldr	r3, [pc, #252]	; (8000f74 <xTaskIncrementTick+0x110>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000e7e:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <xTaskIncrementTick+0x110>)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d11f      	bne.n	8000eca <xTaskIncrementTick+0x66>
		{
			taskSWITCH_DELAYED_LISTS();
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <xTaskIncrementTick+0x114>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d009      	beq.n	8000ea8 <xTaskIncrementTick+0x44>
 8000e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e98:	f383 8811 	msr	BASEPRI, r3
 8000e9c:	f3bf 8f6f 	isb	sy
 8000ea0:	f3bf 8f4f 	dsb	sy
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	e7fe      	b.n	8000ea6 <xTaskIncrementTick+0x42>
 8000ea8:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <xTaskIncrementTick+0x114>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <xTaskIncrementTick+0x118>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a31      	ldr	r2, [pc, #196]	; (8000f78 <xTaskIncrementTick+0x114>)
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <xTaskIncrementTick+0x118>)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <xTaskIncrementTick+0x11c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	4a2f      	ldr	r2, [pc, #188]	; (8000f80 <xTaskIncrementTick+0x11c>)
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	f000 f95b 	bl	8001180 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <xTaskIncrementTick+0x120>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d348      	bcc.n	8000f66 <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ed4:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <xTaskIncrementTick+0x114>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d104      	bne.n	8000ee8 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ede:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <xTaskIncrementTick+0x120>)
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	601a      	str	r2, [r3, #0]
					break;
 8000ee6:	e03e      	b.n	8000f66 <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <xTaskIncrementTick+0x114>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d203      	bcs.n	8000f08 <xTaskIncrementTick+0xa4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <xTaskIncrementTick+0x120>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000f06:	e02e      	b.n	8000f66 <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fd2a 	bl	8000966 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <xTaskIncrementTick+0xc0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3318      	adds	r3, #24
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fd21 	bl	8000966 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 ffca 	bl	8002ec0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	2201      	movs	r2, #1
 8000f32:	409a      	lsls	r2, r3
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <xTaskIncrementTick+0x124>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <xTaskIncrementTick+0x124>)
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <xTaskIncrementTick+0x128>)
 8000f4c:	441a      	add	r2, r3
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	3304      	adds	r3, #4
 8000f52:	4619      	mov	r1, r3
 8000f54:	4610      	mov	r0, r2
 8000f56:	f7ff fce2 	bl	800091e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f5a:	e7bb      	b.n	8000ed4 <xTaskIncrementTick+0x70>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <xTaskIncrementTick+0x12c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <xTaskIncrementTick+0x12c>)
 8000f64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8000f66:	697b      	ldr	r3, [r7, #20]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000148 	.word	0x20000148
 8000f74:	20000124 	.word	0x20000124
 8000f78:	200000d8 	.word	0x200000d8
 8000f7c:	200000dc 	.word	0x200000dc
 8000f80:	20000138 	.word	0x20000138
 8000f84:	20000140 	.word	0x20000140
 8000f88:	20000128 	.word	0x20000128
 8000f8c:	2000004c 	.word	0x2000004c
 8000f90:	20000130 	.word	0x20000130

08000f94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <vTaskSwitchContext+0xb8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <vTaskSwitchContext+0xbc>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000fa8:	e04c      	b.n	8001044 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <vTaskSwitchContext+0xbc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fb0:	4b28      	ldr	r3, [pc, #160]	; (8001054 <vTaskSwitchContext+0xc0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	fab3 f383 	clz	r3, r3
 8000fbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8000fbe:	7afb      	ldrb	r3, [r7, #11]
 8000fc0:	f1c3 031f 	rsb	r3, r3, #31
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	4924      	ldr	r1, [pc, #144]	; (8001058 <vTaskSwitchContext+0xc4>)
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d109      	bne.n	8000fee <vTaskSwitchContext+0x5a>
	__asm volatile
 8000fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fde:	f383 8811 	msr	BASEPRI, r3
 8000fe2:	f3bf 8f6f 	isb	sy
 8000fe6:	f3bf 8f4f 	dsb	sy
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	e7fe      	b.n	8000fec <vTaskSwitchContext+0x58>
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4a17      	ldr	r2, [pc, #92]	; (8001058 <vTaskSwitchContext+0xc4>)
 8000ffa:	4413      	add	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	3308      	adds	r3, #8
 8001010:	429a      	cmp	r2, r3
 8001012:	d104      	bne.n	800101e <vTaskSwitchContext+0x8a>
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <vTaskSwitchContext+0xc8>)
 8001026:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <vTaskSwitchContext+0xc8>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <vTaskSwitchContext+0xcc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d102      	bne.n	800103a <vTaskSwitchContext+0xa6>
 8001034:	f001 fea0 	bl	8002d78 <SEGGER_SYSVIEW_OnIdle>
}
 8001038:	e004      	b.n	8001044 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <vTaskSwitchContext+0xc8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fefa 	bl	8002e38 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000148 	.word	0x20000148
 8001050:	20000134 	.word	0x20000134
 8001054:	20000128 	.word	0x20000128
 8001058:	2000004c 	.word	0x2000004c
 800105c:	20000048 	.word	0x20000048
 8001060:	20000144 	.word	0x20000144

08001064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800106c:	f000 f84c 	bl	8001108 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <prvIdleTask+0x20>)
 8001072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	f3bf 8f4f 	dsb	sy
 800107c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001080:	e7f4      	b.n	800106c <prvIdleTask+0x8>
 8001082:	bf00      	nop
 8001084:	e000ed04 	.word	0xe000ed04

08001088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	e00c      	b.n	80010ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <prvInitialiseTaskLists+0x60>)
 80010a0:	4413      	add	r3, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fc0e 	bl	80008c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d9ef      	bls.n	8001094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <prvInitialiseTaskLists+0x64>)
 80010b6:	f7ff fc05 	bl	80008c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <prvInitialiseTaskLists+0x68>)
 80010bc:	f7ff fc02 	bl	80008c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <prvInitialiseTaskLists+0x6c>)
 80010c2:	f7ff fbff 	bl	80008c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80010c6:	480c      	ldr	r0, [pc, #48]	; (80010f8 <prvInitialiseTaskLists+0x70>)
 80010c8:	f7ff fbfc 	bl	80008c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <prvInitialiseTaskLists+0x74>)
 80010ce:	f7ff fbf9 	bl	80008c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <prvInitialiseTaskLists+0x78>)
 80010d4:	4a05      	ldr	r2, [pc, #20]	; (80010ec <prvInitialiseTaskLists+0x64>)
 80010d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <prvInitialiseTaskLists+0x7c>)
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <prvInitialiseTaskLists+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000004c 	.word	0x2000004c
 80010ec:	200000b0 	.word	0x200000b0
 80010f0:	200000c4 	.word	0x200000c4
 80010f4:	200000e0 	.word	0x200000e0
 80010f8:	200000f4 	.word	0x200000f4
 80010fc:	2000010c 	.word	0x2000010c
 8001100:	200000d8 	.word	0x200000d8
 8001104:	200000dc 	.word	0x200000dc

08001108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800110e:	e019      	b.n	8001144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001110:	f000 f97c 	bl	800140c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <prvCheckTasksWaitingTermination+0x4c>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3304      	adds	r3, #4
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fc20 	bl	8000966 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <prvCheckTasksWaitingTermination+0x50>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3b01      	subs	r3, #1
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <prvCheckTasksWaitingTermination+0x50>)
 800112e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <prvCheckTasksWaitingTermination+0x54>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <prvCheckTasksWaitingTermination+0x54>)
 8001138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800113a:	f000 f995 	bl	8001468 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f80e 	bl	8001160 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <prvCheckTasksWaitingTermination+0x54>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e1      	bne.n	8001110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200000f4 	.word	0x200000f4
 8001158:	20000120 	.word	0x20000120
 800115c:	20000108 	.word	0x20000108

08001160 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fb37 	bl	80017e0 <vPortFree>
			vPortFree( pxTCB );
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fb34 	bl	80017e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <prvResetNextTaskUnblockTime+0x38>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d104      	bne.n	800119a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <prvResetNextTaskUnblockTime+0x3c>)
 8001192:	f04f 32ff 	mov.w	r2, #4294967295
 8001196:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001198:	e008      	b.n	80011ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <prvResetNextTaskUnblockTime+0x38>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <prvResetNextTaskUnblockTime+0x3c>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	200000d8 	.word	0x200000d8
 80011bc:	20000140 	.word	0x20000140

080011c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3b04      	subs	r3, #4
 80011d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3b04      	subs	r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f023 0201 	bic.w	r2, r3, #1
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3b04      	subs	r3, #4
 80011ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <pxPortInitialiseStack+0x64>)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3b14      	subs	r3, #20
 80011fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3b04      	subs	r3, #4
 8001206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f06f 0202 	mvn.w	r2, #2
 800120e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3b20      	subs	r3, #32
 8001214:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	08001229 	.word	0x08001229

08001228 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <prvTaskExitError+0x50>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123a:	d009      	beq.n	8001250 <prvTaskExitError+0x28>
 800123c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001240:	f383 8811 	msr	BASEPRI, r3
 8001244:	f3bf 8f6f 	isb	sy
 8001248:	f3bf 8f4f 	dsb	sy
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e7fe      	b.n	800124e <prvTaskExitError+0x26>
 8001250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001254:	f383 8811 	msr	BASEPRI, r3
 8001258:	f3bf 8f6f 	isb	sy
 800125c:	f3bf 8f4f 	dsb	sy
 8001260:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001262:	bf00      	nop
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0fc      	beq.n	8001264 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000010 	.word	0x20000010
 800127c:	00000000 	.word	0x00000000

08001280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <pxCurrentTCBConst2>)
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	6808      	ldr	r0, [r1, #0]
 8001286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800128a:	f380 8809 	msr	PSP, r0
 800128e:	f3bf 8f6f 	isb	sy
 8001292:	f04f 0000 	mov.w	r0, #0
 8001296:	f380 8811 	msr	BASEPRI, r0
 800129a:	4770      	bx	lr
 800129c:	f3af 8000 	nop.w

080012a0 <pxCurrentTCBConst2>:
 80012a0:	20000048 	.word	0x20000048
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop

080012a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80012a8:	4808      	ldr	r0, [pc, #32]	; (80012cc <prvPortStartFirstTask+0x24>)
 80012aa:	6800      	ldr	r0, [r0, #0]
 80012ac:	6800      	ldr	r0, [r0, #0]
 80012ae:	f380 8808 	msr	MSP, r0
 80012b2:	f04f 0000 	mov.w	r0, #0
 80012b6:	f380 8814 	msr	CONTROL, r0
 80012ba:	b662      	cpsie	i
 80012bc:	b661      	cpsie	f
 80012be:	f3bf 8f4f 	dsb	sy
 80012c2:	f3bf 8f6f 	isb	sy
 80012c6:	df00      	svc	0
 80012c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80012ca:	bf00      	nop
 80012cc:	e000ed08 	.word	0xe000ed08

080012d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012d6:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <xPortStartScheduler+0x118>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a44      	ldr	r2, [pc, #272]	; (80013ec <xPortStartScheduler+0x11c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d109      	bne.n	80012f4 <xPortStartScheduler+0x24>
 80012e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012e4:	f383 8811 	msr	BASEPRI, r3
 80012e8:	f3bf 8f6f 	isb	sy
 80012ec:	f3bf 8f4f 	dsb	sy
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	e7fe      	b.n	80012f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80012f4:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <xPortStartScheduler+0x118>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <xPortStartScheduler+0x120>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d109      	bne.n	8001312 <xPortStartScheduler+0x42>
 80012fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001302:	f383 8811 	msr	BASEPRI, r3
 8001306:	f3bf 8f6f 	isb	sy
 800130a:	f3bf 8f4f 	dsb	sy
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	e7fe      	b.n	8001310 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <xPortStartScheduler+0x124>)
 8001314:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	22ff      	movs	r2, #255	; 0xff
 8001322:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <xPortStartScheduler+0x128>)
 8001338:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <xPortStartScheduler+0x12c>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001340:	e009      	b.n	8001356 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <xPortStartScheduler+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3b01      	subs	r3, #1
 8001348:	4a2c      	ldr	r2, [pc, #176]	; (80013fc <xPortStartScheduler+0x12c>)
 800134a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	2b80      	cmp	r3, #128	; 0x80
 8001360:	d0ef      	beq.n	8001342 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <xPortStartScheduler+0x12c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	d009      	beq.n	8001382 <xPortStartScheduler+0xb2>
 800136e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001372:	f383 8811 	msr	BASEPRI, r3
 8001376:	f3bf 8f6f 	isb	sy
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	e7fe      	b.n	8001380 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <xPortStartScheduler+0x12c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <xPortStartScheduler+0x12c>)
 800138a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <xPortStartScheduler+0x12c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <xPortStartScheduler+0x12c>)
 8001396:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <xPortStartScheduler+0x130>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a16      	ldr	r2, [pc, #88]	; (8001400 <xPortStartScheduler+0x130>)
 80013a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <xPortStartScheduler+0x130>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a13      	ldr	r2, [pc, #76]	; (8001400 <xPortStartScheduler+0x130>)
 80013b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80013b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80013b8:	f000 f8de 	bl	8001578 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <xPortStartScheduler+0x134>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80013c2:	f000 f8fd 	bl	80015c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <xPortStartScheduler+0x138>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <xPortStartScheduler+0x138>)
 80013cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80013d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80013d2:	f7ff ff69 	bl	80012a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80013d6:	f7ff fddd 	bl	8000f94 <vTaskSwitchContext>
	prvTaskExitError();
 80013da:	f7ff ff25 	bl	8001228 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	e000ed00 	.word	0xe000ed00
 80013ec:	410fc271 	.word	0x410fc271
 80013f0:	410fc270 	.word	0x410fc270
 80013f4:	e000e400 	.word	0xe000e400
 80013f8:	2000014c 	.word	0x2000014c
 80013fc:	20000150 	.word	0x20000150
 8001400:	e000ed20 	.word	0xe000ed20
 8001404:	20000010 	.word	0x20000010
 8001408:	e000ef34 	.word	0xe000ef34

0800140c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001416:	f383 8811 	msr	BASEPRI, r3
 800141a:	f3bf 8f6f 	isb	sy
 800141e:	f3bf 8f4f 	dsb	sy
 8001422:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <vPortEnterCritical+0x54>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <vPortEnterCritical+0x54>)
 800142c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <vPortEnterCritical+0x54>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d10e      	bne.n	8001454 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <vPortEnterCritical+0x58>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d009      	beq.n	8001454 <vPortEnterCritical+0x48>
 8001440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001444:	f383 8811 	msr	BASEPRI, r3
 8001448:	f3bf 8f6f 	isb	sy
 800144c:	f3bf 8f4f 	dsb	sy
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	e7fe      	b.n	8001452 <vPortEnterCritical+0x46>
	}
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	20000010 	.word	0x20000010
 8001464:	e000ed04 	.word	0xe000ed04

08001468 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <vPortExitCritical+0x4c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d109      	bne.n	800148a <vPortExitCritical+0x22>
 8001476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147a:	f383 8811 	msr	BASEPRI, r3
 800147e:	f3bf 8f6f 	isb	sy
 8001482:	f3bf 8f4f 	dsb	sy
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	e7fe      	b.n	8001488 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <vPortExitCritical+0x4c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3b01      	subs	r3, #1
 8001490:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <vPortExitCritical+0x4c>)
 8001492:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <vPortExitCritical+0x4c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d104      	bne.n	80014a6 <vPortExitCritical+0x3e>
 800149c:	2300      	movs	r3, #0
 800149e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000010 	.word	0x20000010
	...

080014c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80014c0:	f3ef 8009 	mrs	r0, PSP
 80014c4:	f3bf 8f6f 	isb	sy
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <pxCurrentTCBConst>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	f01e 0f10 	tst.w	lr, #16
 80014d0:	bf08      	it	eq
 80014d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80014d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014da:	6010      	str	r0, [r2, #0]
 80014dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80014e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80014e4:	f380 8811 	msr	BASEPRI, r0
 80014e8:	f3bf 8f4f 	dsb	sy
 80014ec:	f3bf 8f6f 	isb	sy
 80014f0:	f7ff fd50 	bl	8000f94 <vTaskSwitchContext>
 80014f4:	f04f 0000 	mov.w	r0, #0
 80014f8:	f380 8811 	msr	BASEPRI, r0
 80014fc:	bc09      	pop	{r0, r3}
 80014fe:	6819      	ldr	r1, [r3, #0]
 8001500:	6808      	ldr	r0, [r1, #0]
 8001502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001506:	f01e 0f10 	tst.w	lr, #16
 800150a:	bf08      	it	eq
 800150c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001510:	f380 8809 	msr	PSP, r0
 8001514:	f3bf 8f6f 	isb	sy
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	f3af 8000 	nop.w

08001520 <pxCurrentTCBConst>:
 8001520:	20000048 	.word	0x20000048
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop

08001528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	__asm volatile
 800152e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001532:	f383 8811 	msr	BASEPRI, r3
 8001536:	f3bf 8f6f 	isb	sy
 800153a:	f3bf 8f4f 	dsb	sy
 800153e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8001540:	f001 fba0 	bl	8002c84 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001544:	f7ff fc8e 	bl	8000e64 <xTaskIncrementTick>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d006      	beq.n	800155c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800154e:	f001 fbf7 	bl	8002d40 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <SysTick_Handler+0x4c>)
 8001554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e001      	b.n	8001560 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800155c:	f001 fbd4 	bl	8002d08 <SEGGER_SYSVIEW_RecordExitISR>
 8001560:	2300      	movs	r3, #0
 8001562:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000ed04 	.word	0xe000ed04

08001578 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <vPortSetupTimerInterrupt+0x34>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <vPortSetupTimerInterrupt+0x38>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <vPortSetupTimerInterrupt+0x3c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <vPortSetupTimerInterrupt+0x40>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	4a09      	ldr	r2, [pc, #36]	; (80015bc <vPortSetupTimerInterrupt+0x44>)
 8001596:	3b01      	subs	r3, #1
 8001598:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <vPortSetupTimerInterrupt+0x34>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010
 80015b0:	e000e018 	.word	0xe000e018
 80015b4:	20000018 	.word	0x20000018
 80015b8:	10624dd3 	.word	0x10624dd3
 80015bc:	e000e014 	.word	0xe000e014

080015c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80015c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80015d0 <vPortEnableVFP+0x10>
 80015c4:	6801      	ldr	r1, [r0, #0]
 80015c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80015ca:	6001      	str	r1, [r0, #0]
 80015cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80015ce:	bf00      	nop
 80015d0:	e000ed88 	.word	0xe000ed88

080015d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80015da:	f3ef 8305 	mrs	r3, IPSR
 80015de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	d913      	bls.n	800160e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <vPortValidateInterruptPriority+0x6c>)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <vPortValidateInterruptPriority+0x70>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	7afa      	ldrb	r2, [r7, #11]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d209      	bcs.n	800160e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80015fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fe:	f383 8811 	msr	BASEPRI, r3
 8001602:	f3bf 8f6f 	isb	sy
 8001606:	f3bf 8f4f 	dsb	sy
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	e7fe      	b.n	800160c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <vPortValidateInterruptPriority+0x74>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <vPortValidateInterruptPriority+0x78>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d909      	bls.n	8001632 <vPortValidateInterruptPriority+0x5e>
 800161e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001622:	f383 8811 	msr	BASEPRI, r3
 8001626:	f3bf 8f6f 	isb	sy
 800162a:	f3bf 8f4f 	dsb	sy
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	e7fe      	b.n	8001630 <vPortValidateInterruptPriority+0x5c>
	}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000e3f0 	.word	0xe000e3f0
 8001644:	2000014c 	.word	0x2000014c
 8001648:	e000ed0c 	.word	0xe000ed0c
 800164c:	20000150 	.word	0x20000150

08001650 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800165c:	f7ff fb50 	bl	8000d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001660:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <pvPortMalloc+0x178>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001668:	f000 f91a 	bl	80018a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800166c:	4b57      	ldr	r3, [pc, #348]	; (80017cc <pvPortMalloc+0x17c>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	f040 8091 	bne.w	800179c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01c      	beq.n	80016ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001680:	2208      	movs	r2, #8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	2b00      	cmp	r3, #0
 8001690:	d013      	beq.n	80016ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f023 0307 	bic.w	r3, r3, #7
 8001698:	3308      	adds	r3, #8
 800169a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <pvPortMalloc+0x6a>
 80016a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016aa:	f383 8811 	msr	BASEPRI, r3
 80016ae:	f3bf 8f6f 	isb	sy
 80016b2:	f3bf 8f4f 	dsb	sy
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	e7fe      	b.n	80016b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d06d      	beq.n	800179c <pvPortMalloc+0x14c>
 80016c0:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <pvPortMalloc+0x180>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d868      	bhi.n	800179c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80016ca:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <pvPortMalloc+0x184>)
 80016cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80016ce:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <pvPortMalloc+0x184>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016d4:	e004      	b.n	80016e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d903      	bls.n	80016f2 <pvPortMalloc+0xa2>
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f1      	bne.n	80016d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80016f2:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <pvPortMalloc+0x178>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d04f      	beq.n	800179c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2208      	movs	r2, #8
 8001702:	4413      	add	r3, r2
 8001704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	1ad2      	subs	r2, r2, r3
 8001716:	2308      	movs	r3, #8
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	429a      	cmp	r2, r3
 800171c:	d91e      	bls.n	800175c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800171e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	2b00      	cmp	r3, #0
 800172e:	d009      	beq.n	8001744 <pvPortMalloc+0xf4>
 8001730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001734:	f383 8811 	msr	BASEPRI, r3
 8001738:	f3bf 8f6f 	isb	sy
 800173c:	f3bf 8f4f 	dsb	sy
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	e7fe      	b.n	8001742 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	1ad2      	subs	r2, r2, r3
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001756:	69b8      	ldr	r0, [r7, #24]
 8001758:	f000 f904 	bl	8001964 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <pvPortMalloc+0x180>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a1a      	ldr	r2, [pc, #104]	; (80017d0 <pvPortMalloc+0x180>)
 8001768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <pvPortMalloc+0x180>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <pvPortMalloc+0x188>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d203      	bcs.n	800177e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <pvPortMalloc+0x180>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <pvPortMalloc+0x188>)
 800177c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <pvPortMalloc+0x17c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	431a      	orrs	r2, r3
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <pvPortMalloc+0x18c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a10      	ldr	r2, [pc, #64]	; (80017dc <pvPortMalloc+0x18c>)
 800179a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800179c:	f7ff fabe 	bl	8000d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <pvPortMalloc+0x16e>
 80017aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ae:	f383 8811 	msr	BASEPRI, r3
 80017b2:	f3bf 8f6f 	isb	sy
 80017b6:	f3bf 8f4f 	dsb	sy
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e7fe      	b.n	80017bc <pvPortMalloc+0x16c>
	return pvReturn;
 80017be:	69fb      	ldr	r3, [r7, #28]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20012d5c 	.word	0x20012d5c
 80017cc:	20012d70 	.word	0x20012d70
 80017d0:	20012d60 	.word	0x20012d60
 80017d4:	20012d54 	.word	0x20012d54
 80017d8:	20012d64 	.word	0x20012d64
 80017dc:	20012d68 	.word	0x20012d68

080017e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d04b      	beq.n	800188a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80017f2:	2308      	movs	r3, #8
 80017f4:	425b      	negs	r3, r3
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4413      	add	r3, r2
 80017fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <vPortFree+0xb4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <vPortFree+0x42>
 800180e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001812:	f383 8811 	msr	BASEPRI, r3
 8001816:	f3bf 8f6f 	isb	sy
 800181a:	f3bf 8f4f 	dsb	sy
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e7fe      	b.n	8001820 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <vPortFree+0x5e>
 800182a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	f3bf 8f4f 	dsb	sy
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	e7fe      	b.n	800183c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <vPortFree+0xb4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01e      	beq.n	800188a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d11a      	bne.n	800188a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <vPortFree+0xb4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	43db      	mvns	r3, r3
 800185e:	401a      	ands	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001864:	f7ff fa4c 	bl	8000d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <vPortFree+0xb8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4413      	add	r3, r2
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <vPortFree+0xb8>)
 8001874:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001876:	6938      	ldr	r0, [r7, #16]
 8001878:	f000 f874 	bl	8001964 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <vPortFree+0xbc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	4a06      	ldr	r2, [pc, #24]	; (800189c <vPortFree+0xbc>)
 8001884:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8001886:	f7ff fa49 	bl	8000d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20012d70 	.word	0x20012d70
 8001898:	20012d60 	.word	0x20012d60
 800189c:	20012d6c 	.word	0x20012d6c

080018a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80018a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80018aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <prvHeapInit+0xac>)
 80018ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00c      	beq.n	80018d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3307      	adds	r3, #7
 80018be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f023 0307 	bic.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <prvHeapInit+0xac>)
 80018d0:	4413      	add	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <prvHeapInit+0xb0>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <prvHeapInit+0xb0>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80018ec:	2208      	movs	r2, #8
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f023 0307 	bic.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <prvHeapInit+0xb4>)
 8001900:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <prvHeapInit+0xb4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <prvHeapInit+0xb4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	1ad2      	subs	r2, r2, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <prvHeapInit+0xb4>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <prvHeapInit+0xb8>)
 800192e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a09      	ldr	r2, [pc, #36]	; (800195c <prvHeapInit+0xbc>)
 8001936:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <prvHeapInit+0xc0>)
 800193a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	20000154 	.word	0x20000154
 8001950:	20012d54 	.word	0x20012d54
 8001954:	20012d5c 	.word	0x20012d5c
 8001958:	20012d64 	.word	0x20012d64
 800195c:	20012d60 	.word	0x20012d60
 8001960:	20012d70 	.word	0x20012d70

08001964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800196c:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <prvInsertBlockIntoFreeList+0xac>)
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e002      	b.n	8001978 <prvInsertBlockIntoFreeList+0x14>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	d8f7      	bhi.n	8001972 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	4413      	add	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	d108      	bne.n	80019a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	441a      	add	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	441a      	add	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d118      	bne.n	80019ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <prvInsertBlockIntoFreeList+0xb0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d00d      	beq.n	80019e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	441a      	add	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e008      	b.n	80019f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <prvInsertBlockIntoFreeList+0xb0>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e003      	b.n	80019f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d002      	beq.n	8001a02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20012d54 	.word	0x20012d54
 8001a14:	20012d5c 	.word	0x20012d5c

08001a18 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <_cbSendSystemDesc+0x14>)
 8001a1e:	f001 f8dd 	bl	8002bdc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <_cbSendSystemDesc+0x18>)
 8001a24:	f001 f8da 	bl	8002bdc <SEGGER_SYSVIEW_SendSysDesc>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	08003808 	.word	0x08003808
 8001a30:	08003844 	.word	0x08003844

08001a34 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <SEGGER_SYSVIEW_Conf+0x20>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SEGGER_SYSVIEW_Conf+0x20>)
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SEGGER_SYSVIEW_Conf+0x24>)
 8001a42:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <SEGGER_SYSVIEW_Conf+0x28>)
 8001a44:	f000 fd52 	bl	80024ec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001a48:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001a4c:	f000 fd8c 	bl	8002568 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000018 	.word	0x20000018
 8001a58:	08001a19 	.word	0x08001a19
 8001a5c:	08003944 	.word	0x08003944

08001a60 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	e034      	b.n	8001ad6 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001a6c:	491e      	ldr	r1, [pc, #120]	; (8001ae8 <_cbSendTaskList+0x88>)
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	491a      	ldr	r1, [pc, #104]	; (8001ae8 <_cbSendTaskList+0x88>)
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	681c      	ldr	r4, [r3, #0]
 8001a8e:	4916      	ldr	r1, [pc, #88]	; (8001ae8 <_cbSendTaskList+0x88>)
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3308      	adds	r3, #8
 8001a9e:	681d      	ldr	r5, [r3, #0]
 8001aa0:	4911      	ldr	r1, [pc, #68]	; (8001ae8 <_cbSendTaskList+0x88>)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	330c      	adds	r3, #12
 8001ab0:	681e      	ldr	r6, [r3, #0]
 8001ab2:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <_cbSendTaskList+0x88>)
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	3310      	adds	r3, #16
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4633      	mov	r3, r6
 8001ac8:	462a      	mov	r2, r5
 8001aca:	4621      	mov	r1, r4
 8001acc:	f000 f8ba 	bl	8001c44 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <_cbSendTaskList+0x8c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d3c5      	bcc.n	8001a6c <_cbSendTaskList+0xc>
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae8:	20012d74 	.word	0x20012d74
 8001aec:	20012e14 	.word	0x20012e14

08001af0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001af6:	f7ff f9a3 	bl	8000e40 <xTaskGetTickCountFromISR>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f04f 0400 	mov.w	r4, #0
 8001b00:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
 8001b04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b08:	184b      	adds	r3, r1, r1
 8001b0a:	eb42 0402 	adc.w	r4, r2, r2
 8001b0e:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= 1000;
 8001b12:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001b16:	462b      	mov	r3, r5
 8001b18:	4634      	mov	r4, r6
 8001b1a:	f04f 0100 	mov.w	r1, #0
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	0162      	lsls	r2, r4, #5
 8001b24:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001b28:	0159      	lsls	r1, r3, #5
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	1b5b      	subs	r3, r3, r5
 8001b30:	eb64 0406 	sbc.w	r4, r4, r6
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	00a2      	lsls	r2, r4, #2
 8001b3e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001b42:	0099      	lsls	r1, r3, #2
 8001b44:	460b      	mov	r3, r1
 8001b46:	4614      	mov	r4, r2
 8001b48:	195b      	adds	r3, r3, r5
 8001b4a:	eb44 0406 	adc.w	r4, r4, r6
 8001b4e:	f04f 0100 	mov.w	r1, #0
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	00e2      	lsls	r2, r4, #3
 8001b58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b5c:	00d9      	lsls	r1, r3, #3
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4614      	mov	r4, r2
 8001b62:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8001b66:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b74 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001b82:	2205      	movs	r2, #5
 8001b84:	492b      	ldr	r1, [pc, #172]	; (8001c34 <SYSVIEW_AddTask+0xc0>)
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f001 fe0c 	bl	80037a4 <memcmp>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d04b      	beq.n	8001c2a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001b92:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <SYSVIEW_AddTask+0xc4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b07      	cmp	r3, #7
 8001b98:	d903      	bls.n	8001ba2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001b9a:	4828      	ldr	r0, [pc, #160]	; (8001c3c <SYSVIEW_AddTask+0xc8>)
 8001b9c:	f001 fab0 	bl	8003100 <SEGGER_SYSVIEW_Warn>
    return;
 8001ba0:	e044      	b.n	8001c2c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001ba2:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <SYSVIEW_AddTask+0xc4>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4926      	ldr	r1, [pc, #152]	; (8001c40 <SYSVIEW_AddTask+0xcc>)
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <SYSVIEW_AddTask+0xc4>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4921      	ldr	r1, [pc, #132]	; (8001c40 <SYSVIEW_AddTask+0xcc>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <SYSVIEW_AddTask+0xc4>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	491b      	ldr	r1, [pc, #108]	; (8001c40 <SYSVIEW_AddTask+0xcc>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	3308      	adds	r3, #8
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <SYSVIEW_AddTask+0xc4>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4916      	ldr	r1, [pc, #88]	; (8001c40 <SYSVIEW_AddTask+0xcc>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	330c      	adds	r3, #12
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <SYSVIEW_AddTask+0xc4>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4910      	ldr	r1, [pc, #64]	; (8001c40 <SYSVIEW_AddTask+0xcc>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3310      	adds	r3, #16
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <SYSVIEW_AddTask+0xc4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <SYSVIEW_AddTask+0xc4>)
 8001c16:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f80e 	bl	8001c44 <SYSVIEW_SendTaskInfo>
 8001c28:	e000      	b.n	8001c2c <SYSVIEW_AddTask+0xb8>
    return;
 8001c2a:	bf00      	nop

}
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	08003854 	.word	0x08003854
 8001c38:	20012e14 	.word	0x20012e14
 8001c3c:	0800385c 	.word	0x0800385c
 8001c40:	20012d74 	.word	0x20012d74

08001c44 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	2214      	movs	r2, #20
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 fdbc 	bl	80037d8 <memset>
  TaskInfo.TaskID     = TaskID;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 feb5 	bl	80029e8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <_DoInit+0x8c>)
 8001c90:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2203      	movs	r2, #3
 8001c96:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <_DoInit+0x90>)
 8001ca2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <_DoInit+0x94>)
 8001ca8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <_DoInit+0x90>)
 8001cc8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <_DoInit+0x98>)
 8001cce:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3307      	adds	r3, #7
 8001cec:	4a0d      	ldr	r2, [pc, #52]	; (8001d24 <_DoInit+0x9c>)
 8001cee:	6810      	ldr	r0, [r2, #0]
 8001cf0:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <_DoInit+0xa0>)
 8001cf6:	6810      	ldr	r0, [r2, #0]
 8001cf8:	6018      	str	r0, [r3, #0]
 8001cfa:	8891      	ldrh	r1, [r2, #4]
 8001cfc:	7992      	ldrb	r2, [r2, #6]
 8001cfe:	8099      	strh	r1, [r3, #4]
 8001d00:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2220      	movs	r2, #32
 8001d06:	719a      	strb	r2, [r3, #6]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	2001534c 	.word	0x2001534c
 8001d18:	080038ac 	.word	0x080038ac
 8001d1c:	20012e18 	.word	0x20012e18
 8001d20:	20013218 	.word	0x20013218
 8001d24:	080038b8 	.word	0x080038b8
 8001d28:	080038bc 	.word	0x080038bc

08001d2c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8001d38:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <SEGGER_RTT_ReadNoLock+0x100>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <SEGGER_RTT_ReadNoLock+0x18>
 8001d40:	f7ff ffa2 	bl	8001c88 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	3360      	adds	r3, #96	; 0x60
 8001d50:	4a36      	ldr	r2, [pc, #216]	; (8001e2c <SEGGER_RTT_ReadNoLock+0x100>)
 8001d52:	4413      	add	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001d6a:	6a3a      	ldr	r2, [r7, #32]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d92a      	bls.n	8001dc8 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4293      	cmp	r3, r2
 8001d82:	bf28      	it	cs
 8001d84:	4613      	movcs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	4413      	add	r3, r2
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4619      	mov	r1, r3
 8001d94:	69f8      	ldr	r0, [r7, #28]
 8001d96:	f001 fd14 	bl	80037c2 <memcpy>
    NumBytesRead += NumBytesRem;
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001db2:	6a3a      	ldr	r2, [r7, #32]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	6a3a      	ldr	r2, [r7, #32]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d101      	bne.n	8001dc8 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	bf28      	it	cs
 8001dd8:	4613      	movcs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d018      	beq.n	8001e14 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	4413      	add	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4619      	mov	r1, r3
 8001dee:	69f8      	ldr	r0, [r7, #28]
 8001df0:	f001 fce7 	bl	80037c2 <memcpy>
    NumBytesRead += NumBytesRem;
 8001df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4413      	add	r3, r2
 8001e02:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001e0c:	6a3a      	ldr	r2, [r7, #32]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	6a3a      	ldr	r2, [r7, #32]
 8001e1e:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3728      	adds	r7, #40	; 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2001534c 	.word	0x2001534c

08001e30 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4a3f      	ldr	r2, [pc, #252]	; (8001f4c <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8001e4e:	4413      	add	r3, r2
 8001e50:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d854      	bhi.n	8001f10 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d30f      	bcc.n	8001e9a <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4413      	add	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 fc9b 	bl	80037c2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	441a      	add	r2, r3
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e054      	b.n	8001f44 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d34b      	bcc.n	8001f42 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d90e      	bls.n	8001eda <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 fc7a 	bl	80037c2 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	441a      	add	r2, r3
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	e018      	b.n	8001f0c <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 fc6b 	bl	80037c2 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	6858      	ldr	r0, [r3, #4]
 8001ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	18d1      	adds	r1, r2, r3
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	f001 fc60 	bl	80037c2 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad2      	subs	r2, r2, r3
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e019      	b.n	8001f44 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d30f      	bcc.n	8001f42 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4413      	add	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f001 fc47 	bl	80037c2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	441a      	add	r2, r3
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3728      	adds	r7, #40	; 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	2001534c 	.word	0x2001534c

08001f50 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8001f5e:	4b30      	ldr	r3, [pc, #192]	; (8002020 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8001f66:	f7ff fe8f 	bl	8001c88 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d24c      	bcs.n	8002010 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8001f76:	f3ef 8311 	mrs	r3, BASEPRI
 8001f7a:	f04f 0120 	mov.w	r1, #32
 8001f7e:	f381 8811 	msr	BASEPRI, r1
 8001f82:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d032      	beq.n	8001ff0 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8001f8a:	4925      	ldr	r1, [pc, #148]	; (8002020 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	440b      	add	r3, r1
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8001f9e:	4920      	ldr	r1, [pc, #128]	; (8002020 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	3304      	adds	r3, #4
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8001fb4:	491a      	ldr	r1, [pc, #104]	; (8002020 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3320      	adds	r3, #32
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8001fc8:	4915      	ldr	r1, [pc, #84]	; (8002020 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3328      	adds	r3, #40	; 0x28
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8001fdc:	4910      	ldr	r1, [pc, #64]	; (8002020 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	3324      	adds	r3, #36	; 0x24
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8001ff0:	490b      	ldr	r1, [pc, #44]	; (8002020 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	332c      	adds	r3, #44	; 0x2c
 8002000:	6a3a      	ldr	r2, [r7, #32]
 8002002:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e002      	b.n	8002016 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002016:	697b      	ldr	r3, [r7, #20]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	2001534c 	.word	0x2001534c

08002024 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800203a:	f7ff fe25 	bl	8001c88 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4293      	cmp	r3, r2
 8002048:	d24b      	bcs.n	80020e2 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800204a:	f3ef 8311 	mrs	r3, BASEPRI
 800204e:	f04f 0120 	mov.w	r1, #32
 8002052:	f381 8811 	msr	BASEPRI, r1
 8002056:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d031      	beq.n	80020c2 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800205e:	4925      	ldr	r1, [pc, #148]	; (80020f4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	3360      	adds	r3, #96	; 0x60
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002072:	4920      	ldr	r1, [pc, #128]	; (80020f4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	3364      	adds	r3, #100	; 0x64
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002086:	491b      	ldr	r1, [pc, #108]	; (80020f4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	3368      	adds	r3, #104	; 0x68
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800209a:	4916      	ldr	r1, [pc, #88]	; (80020f4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	3370      	adds	r3, #112	; 0x70
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 80020ae:	4911      	ldr	r1, [pc, #68]	; (80020f4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	336c      	adds	r3, #108	; 0x6c
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80020c2:	490c      	ldr	r1, [pc, #48]	; (80020f4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	3374      	adds	r3, #116	; 0x74
 80020d2:	6a3a      	ldr	r2, [r7, #32]
 80020d4:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e002      	b.n	80020e8 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	617b      	str	r3, [r7, #20]
  }
  return r;
 80020e8:	697b      	ldr	r3, [r7, #20]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2001534c 	.word	0x2001534c

080020f8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002108:	e002      	b.n	8002110 <_EncodeStr+0x18>
    Len++;
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	3301      	adds	r3, #1
 800210e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f6      	bne.n	800210a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	d901      	bls.n	8002128 <_EncodeStr+0x30>
    Len = Limit;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2bfe      	cmp	r3, #254	; 0xfe
 800212c:	d806      	bhi.n	800213c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	60fa      	str	r2, [r7, #12]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	e011      	b.n	8002160 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	60fa      	str	r2, [r7, #12]
 8002142:	22ff      	movs	r2, #255	; 0xff
 8002144:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	60fa      	str	r2, [r7, #12]
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	0a19      	lsrs	r1, r3, #8
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	60fa      	str	r2, [r7, #12]
 800215c:	b2ca      	uxtb	r2, r1
 800215e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002164:	e00a      	b.n	800217c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	1c53      	adds	r3, r2, #1
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	60f9      	str	r1, [r7, #12]
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	701a      	strb	r2, [r3, #0]
    n++;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d3f0      	bcc.n	8002166 <_EncodeStr+0x6e>
  }
  return pPayload;
 8002184:	68fb      	ldr	r3, [r7, #12]
}
 8002186:	4618      	mov	r0, r3
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80021b0:	1cfb      	adds	r3, r7, #3
 80021b2:	2201      	movs	r2, #1
 80021b4:	4619      	mov	r1, r3
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7ff fdb8 	bl	8001d2c <SEGGER_RTT_ReadNoLock>
 80021bc:	4603      	mov	r3, r0
 80021be:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	dd44      	ble.n	8002250 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d01a      	beq.n	8002202 <_HandleIncomingPacket+0x58>
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	dc06      	bgt.n	80021de <_HandleIncomingPacket+0x34>
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d010      	beq.n	80021f6 <_HandleIncomingPacket+0x4c>
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	dc11      	bgt.n	80021fc <_HandleIncomingPacket+0x52>
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d009      	beq.n	80021f0 <_HandleIncomingPacket+0x46>
 80021dc:	e02d      	b.n	800223a <_HandleIncomingPacket+0x90>
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d015      	beq.n	800220e <_HandleIncomingPacket+0x64>
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	db10      	blt.n	8002208 <_HandleIncomingPacket+0x5e>
 80021e6:	2b07      	cmp	r3, #7
 80021e8:	d014      	beq.n	8002214 <_HandleIncomingPacket+0x6a>
 80021ea:	2b80      	cmp	r3, #128	; 0x80
 80021ec:	d015      	beq.n	800221a <_HandleIncomingPacket+0x70>
 80021ee:	e024      	b.n	800223a <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80021f0:	f000 fa7e 	bl	80026f0 <SEGGER_SYSVIEW_Start>
      break;
 80021f4:	e031      	b.n	800225a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80021f6:	f000 fb37 	bl	8002868 <SEGGER_SYSVIEW_Stop>
      break;
 80021fa:	e02e      	b.n	800225a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80021fc:	f000 fd12 	bl	8002c24 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002200:	e02b      	b.n	800225a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002202:	f000 fcd7 	bl	8002bb4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002206:	e028      	b.n	800225a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002208:	f000 fb54 	bl	80028b4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800220c:	e025      	b.n	800225a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800220e:	f000 ff39 	bl	8003084 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002212:	e022      	b.n	800225a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002214:	f000 ff18 	bl	8003048 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002218:	e01f      	b.n	800225a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800221a:	1cfb      	adds	r3, r7, #3
 800221c:	2201      	movs	r2, #1
 800221e:	4619      	mov	r1, r3
 8002220:	2001      	movs	r0, #1
 8002222:	f7ff fd83 	bl	8001d2c <SEGGER_RTT_ReadNoLock>
 8002226:	4603      	mov	r3, r0
 8002228:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	dd11      	ble.n	8002254 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fe88 	bl	8002f48 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002238:	e00c      	b.n	8002254 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	b25b      	sxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	da0a      	bge.n	8002258 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002242:	1cfb      	adds	r3, r7, #3
 8002244:	2201      	movs	r2, #1
 8002246:	4619      	mov	r1, r3
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff fd6f 	bl	8001d2c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800224e:	e003      	b.n	8002258 <_HandleIncomingPacket+0xae>
    }
  }
 8002250:	bf00      	nop
 8002252:	e002      	b.n	800225a <_HandleIncomingPacket+0xb0>
      break;
 8002254:	bf00      	nop
 8002256:	e000      	b.n	800225a <_HandleIncomingPacket+0xb0>
      break;
 8002258:	bf00      	nop
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	; 0x30
 8002268:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800226a:	2301      	movs	r3, #1
 800226c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	3301      	adds	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <_TrySendOverflowPacket+0xd8>)
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
 800227e:	e00b      	b.n	8002298 <_TrySendOverflowPacket+0x34>
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	b2da      	uxtb	r2, r3
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	1c59      	adds	r1, r3, #1
 8002288:	62f9      	str	r1, [r7, #44]	; 0x2c
 800228a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002294:	09db      	lsrs	r3, r3, #7
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	2b7f      	cmp	r3, #127	; 0x7f
 800229c:	d8f0      	bhi.n	8002280 <_TrySendOverflowPacket+0x1c>
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <_TrySendOverflowPacket+0xdc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <_TrySendOverflowPacket+0xd8>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	623b      	str	r3, [r7, #32]
 80022c6:	e00b      	b.n	80022e0 <_TrySendOverflowPacket+0x7c>
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	1c59      	adds	r1, r3, #1
 80022d0:	6279      	str	r1, [r7, #36]	; 0x24
 80022d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	09db      	lsrs	r3, r3, #7
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	2b7f      	cmp	r3, #127	; 0x7f
 80022e4:	d8f0      	bhi.n	80022c8 <_TrySendOverflowPacket+0x64>
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	627a      	str	r2, [r7, #36]	; 0x24
 80022ec:	6a3a      	ldr	r2, [r7, #32]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	4619      	mov	r1, r3
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff fd94 	bl	8001e30 <SEGGER_RTT_WriteSkipNoLock>
 8002308:	4603      	mov	r3, r0
 800230a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <_TrySendOverflowPacket+0xd8>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <_TrySendOverflowPacket+0xd8>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	3b01      	subs	r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <_TrySendOverflowPacket+0xd8>)
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	e004      	b.n	8002330 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <_TrySendOverflowPacket+0xd8>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	4a03      	ldr	r2, [pc, #12]	; (800233c <_TrySendOverflowPacket+0xd8>)
 800232e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002330:	693b      	ldr	r3, [r7, #16]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3730      	adds	r7, #48	; 0x30
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20015230 	.word	0x20015230
 8002340:	e0001004 	.word	0xe0001004

08002344 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002350:	4b63      	ldr	r3, [pc, #396]	; (80024e0 <_SendPacket+0x19c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d010      	beq.n	800237a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002358:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <_SendPacket+0x19c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a1 	beq.w	80024a4 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002362:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <_SendPacket+0x19c>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d109      	bne.n	800237e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800236a:	f7ff ff7b 	bl	8002264 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800236e:	4b5c      	ldr	r3, [pc, #368]	; (80024e0 <_SendPacket+0x19c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	f040 8098 	bne.w	80024a8 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8002378:	e001      	b.n	800237e <_SendPacket+0x3a>
    goto Send;
 800237a:	bf00      	nop
 800237c:	e000      	b.n	8002380 <_SendPacket+0x3c>
Send:
 800237e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b1f      	cmp	r3, #31
 8002384:	d809      	bhi.n	800239a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002386:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <_SendPacket+0x19c>)
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	f040 8089 	bne.w	80024ac <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b17      	cmp	r3, #23
 800239e:	d807      	bhi.n	80023b0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	e03d      	b.n	800242c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b7f      	cmp	r3, #127	; 0x7f
 80023bc:	d912      	bls.n	80023e4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	09da      	lsrs	r2, r3, #7
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	3a01      	subs	r2, #1
 80023d6:	60fa      	str	r2, [r7, #12]
 80023d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	e006      	b.n	80023f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b7f      	cmp	r3, #127	; 0x7f
 80023f6:	d912      	bls.n	800241e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	09da      	lsrs	r2, r3, #7
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3b01      	subs	r3, #1
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	3a01      	subs	r2, #1
 8002410:	60fa      	str	r2, [r7, #12]
 8002412:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002416:	b2da      	uxtb	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	e006      	b.n	800242c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3b01      	subs	r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <_SendPacket+0x1a0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002432:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <_SendPacket+0x19c>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	623b      	str	r3, [r7, #32]
 8002444:	e00b      	b.n	800245e <_SendPacket+0x11a>
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1c59      	adds	r1, r3, #1
 800244e:	6279      	str	r1, [r7, #36]	; 0x24
 8002450:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	09db      	lsrs	r3, r3, #7
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	2b7f      	cmp	r3, #127	; 0x7f
 8002462:	d8f0      	bhi.n	8002446 <_SendPacket+0x102>
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	627a      	str	r2, [r7, #36]	; 0x24
 800246a:	6a3a      	ldr	r2, [r7, #32]
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	461a      	mov	r2, r3
 800247c:	68f9      	ldr	r1, [r7, #12]
 800247e:	2001      	movs	r0, #1
 8002480:	f7ff fcd6 	bl	8001e30 <SEGGER_RTT_WriteSkipNoLock>
 8002484:	4603      	mov	r3, r0
 8002486:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800248e:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <_SendPacket+0x19c>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	60d3      	str	r3, [r2, #12]
 8002494:	e00b      	b.n	80024ae <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <_SendPacket+0x19c>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <_SendPacket+0x19c>)
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	e004      	b.n	80024ae <_SendPacket+0x16a>
    goto SendDone;
 80024a4:	bf00      	nop
 80024a6:	e002      	b.n	80024ae <_SendPacket+0x16a>
      goto SendDone;
 80024a8:	bf00      	nop
 80024aa:	e000      	b.n	80024ae <_SendPacket+0x16a>
      goto SendDone;
 80024ac:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <_SendPacket+0x1a4>)
 80024b0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <_SendPacket+0x1a4>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d00b      	beq.n	80024d6 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <_SendPacket+0x19c>)
 80024c0:	789b      	ldrb	r3, [r3, #2]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d107      	bne.n	80024d6 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <_SendPacket+0x19c>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80024cc:	f7ff fe6d 	bl	80021aa <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <_SendPacket+0x19c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80024d6:	bf00      	nop
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20015230 	.word	0x20015230
 80024e4:	e0001004 	.word	0xe0001004
 80024e8:	2001534c 	.word	0x2001534c

080024ec <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80024fa:	2300      	movs	r3, #0
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002502:	4a14      	ldr	r2, [pc, #80]	; (8002554 <SEGGER_SYSVIEW_Init+0x68>)
 8002504:	4914      	ldr	r1, [pc, #80]	; (8002558 <SEGGER_SYSVIEW_Init+0x6c>)
 8002506:	2001      	movs	r0, #1
 8002508:	f7ff fd22 	bl	8001f50 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2308      	movs	r3, #8
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <SEGGER_SYSVIEW_Init+0x70>)
 8002514:	4910      	ldr	r1, [pc, #64]	; (8002558 <SEGGER_SYSVIEW_Init+0x6c>)
 8002516:	2001      	movs	r0, #1
 8002518:	f7ff fd84 	bl	8002024 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <SEGGER_SYSVIEW_Init+0x74>)
 800251e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002522:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <SEGGER_SYSVIEW_Init+0x78>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <SEGGER_SYSVIEW_Init+0x74>)
 800252a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800252c:	4a0c      	ldr	r2, [pc, #48]	; (8002560 <SEGGER_SYSVIEW_Init+0x74>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <SEGGER_SYSVIEW_Init+0x74>)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002538:	4a09      	ldr	r2, [pc, #36]	; (8002560 <SEGGER_SYSVIEW_Init+0x74>)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800253e:	4a08      	ldr	r2, [pc, #32]	; (8002560 <SEGGER_SYSVIEW_Init+0x74>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <SEGGER_SYSVIEW_Init+0x74>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20013228 	.word	0x20013228
 8002558:	080038c4 	.word	0x080038c4
 800255c:	20015228 	.word	0x20015228
 8002560:	20015230 	.word	0x20015230
 8002564:	e0001004 	.word	0xe0001004

08002568 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6113      	str	r3, [r2, #16]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20015230 	.word	0x20015230

08002588 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002590:	f3ef 8311 	mrs	r3, BASEPRI
 8002594:	f04f 0120 	mov.w	r1, #32
 8002598:	f381 8811 	msr	BASEPRI, r1
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4808      	ldr	r0, [pc, #32]	; (80025c0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80025a0:	f7ff fdf7 	bl	8002192 <_PreparePacket>
 80025a4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	68b8      	ldr	r0, [r7, #8]
 80025ac:	f7ff feca 	bl	8002344 <_SendPacket>
  RECORD_END();
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f383 8811 	msr	BASEPRI, r3
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20015260 	.word	0x20015260

080025c4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80025ce:	f3ef 8311 	mrs	r3, BASEPRI
 80025d2:	f04f 0120 	mov.w	r1, #32
 80025d6:	f381 8811 	msr	BASEPRI, r1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	4816      	ldr	r0, [pc, #88]	; (8002638 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80025de:	f7ff fdd8 	bl	8002192 <_PreparePacket>
 80025e2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	e00b      	b.n	800260a <SEGGER_SYSVIEW_RecordU32+0x46>
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	1c59      	adds	r1, r3, #1
 80025fa:	61f9      	str	r1, [r7, #28]
 80025fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	09db      	lsrs	r3, r3, #7
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b7f      	cmp	r3, #127	; 0x7f
 800260e:	d8f0      	bhi.n	80025f2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	61fa      	str	r2, [r7, #28]
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68f9      	ldr	r1, [r7, #12]
 8002624:	6938      	ldr	r0, [r7, #16]
 8002626:	f7ff fe8d 	bl	8002344 <_SendPacket>
  RECORD_END();
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f383 8811 	msr	BASEPRI, r3
}
 8002630:	bf00      	nop
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20015260 	.word	0x20015260

0800263c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b08c      	sub	sp, #48	; 0x30
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002648:	f3ef 8311 	mrs	r3, BASEPRI
 800264c:	f04f 0120 	mov.w	r1, #32
 8002650:	f381 8811 	msr	BASEPRI, r1
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	4825      	ldr	r0, [pc, #148]	; (80026ec <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002658:	f7ff fd9b 	bl	8002192 <_PreparePacket>
 800265c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
 800266a:	e00b      	b.n	8002684 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	b2da      	uxtb	r2, r3
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	1c59      	adds	r1, r3, #1
 8002674:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002680:	09db      	lsrs	r3, r3, #7
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002686:	2b7f      	cmp	r3, #127	; 0x7f
 8002688:	d8f0      	bhi.n	800266c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	623b      	str	r3, [r7, #32]
 80026a2:	e00b      	b.n	80026bc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	1c59      	adds	r1, r3, #1
 80026ac:	6279      	str	r1, [r7, #36]	; 0x24
 80026ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	09db      	lsrs	r3, r3, #7
 80026ba:	623b      	str	r3, [r7, #32]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	2b7f      	cmp	r3, #127	; 0x7f
 80026c0:	d8f0      	bhi.n	80026a4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	627a      	str	r2, [r7, #36]	; 0x24
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	6979      	ldr	r1, [r7, #20]
 80026d6:	69b8      	ldr	r0, [r7, #24]
 80026d8:	f7ff fe34 	bl	8002344 <_SendPacket>
  RECORD_END();
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f383 8811 	msr	BASEPRI, r3
}
 80026e2:	bf00      	nop
 80026e4:	3730      	adds	r7, #48	; 0x30
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20015260 	.word	0x20015260

080026f0 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08c      	sub	sp, #48	; 0x30
 80026f4:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80026f6:	4b59      	ldr	r3, [pc, #356]	; (800285c <SEGGER_SYSVIEW_Start+0x16c>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 80aa 	bne.w	8002854 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002700:	4b56      	ldr	r3, [pc, #344]	; (800285c <SEGGER_SYSVIEW_Start+0x16c>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002706:	f3ef 8311 	mrs	r3, BASEPRI
 800270a:	f04f 0120 	mov.w	r1, #32
 800270e:	f381 8811 	msr	BASEPRI, r1
 8002712:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002714:	220a      	movs	r2, #10
 8002716:	4952      	ldr	r1, [pc, #328]	; (8002860 <SEGGER_SYSVIEW_Start+0x170>)
 8002718:	2001      	movs	r0, #1
 800271a:	f7ff fb89 	bl	8001e30 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002724:	200a      	movs	r0, #10
 8002726:	f7ff ff2f 	bl	8002588 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800272a:	f3ef 8311 	mrs	r3, BASEPRI
 800272e:	f04f 0120 	mov.w	r1, #32
 8002732:	f381 8811 	msr	BASEPRI, r1
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	484a      	ldr	r0, [pc, #296]	; (8002864 <SEGGER_SYSVIEW_Start+0x174>)
 800273a:	f7ff fd2a 	bl	8002192 <_PreparePacket>
 800273e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002748:	4b44      	ldr	r3, [pc, #272]	; (800285c <SEGGER_SYSVIEW_Start+0x16c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
 800274e:	e00b      	b.n	8002768 <SEGGER_SYSVIEW_Start+0x78>
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	b2da      	uxtb	r2, r3
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002756:	1c59      	adds	r1, r3, #1
 8002758:	62f9      	str	r1, [r7, #44]	; 0x2c
 800275a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	09db      	lsrs	r3, r3, #7
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2b7f      	cmp	r3, #127	; 0x7f
 800276c:	d8f0      	bhi.n	8002750 <SEGGER_SYSVIEW_Start+0x60>
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
 8002782:	4b36      	ldr	r3, [pc, #216]	; (800285c <SEGGER_SYSVIEW_Start+0x16c>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	e00b      	b.n	80027a2 <SEGGER_SYSVIEW_Start+0xb2>
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	1c59      	adds	r1, r3, #1
 8002792:	6279      	str	r1, [r7, #36]	; 0x24
 8002794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	09db      	lsrs	r3, r3, #7
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	2b7f      	cmp	r3, #127	; 0x7f
 80027a6:	d8f0      	bhi.n	800278a <SEGGER_SYSVIEW_Start+0x9a>
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	627a      	str	r2, [r7, #36]	; 0x24
 80027ae:	6a3a      	ldr	r2, [r7, #32]
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <SEGGER_SYSVIEW_Start+0x16c>)
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	e00b      	b.n	80027dc <SEGGER_SYSVIEW_Start+0xec>
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	1c59      	adds	r1, r3, #1
 80027cc:	61f9      	str	r1, [r7, #28]
 80027ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	09db      	lsrs	r3, r3, #7
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b7f      	cmp	r3, #127	; 0x7f
 80027e0:	d8f0      	bhi.n	80027c4 <SEGGER_SYSVIEW_Start+0xd4>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	61fa      	str	r2, [r7, #28]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	2302      	movs	r3, #2
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	e00b      	b.n	8002814 <SEGGER_SYSVIEW_Start+0x124>
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	1c59      	adds	r1, r3, #1
 8002804:	6179      	str	r1, [r7, #20]
 8002806:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	09db      	lsrs	r3, r3, #7
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	2b7f      	cmp	r3, #127	; 0x7f
 8002818:	d8f0      	bhi.n	80027fc <SEGGER_SYSVIEW_Start+0x10c>
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	617a      	str	r2, [r7, #20]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800282a:	2218      	movs	r2, #24
 800282c:	6839      	ldr	r1, [r7, #0]
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff fd88 	bl	8002344 <_SendPacket>
      RECORD_END();
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <SEGGER_SYSVIEW_Start+0x16c>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <SEGGER_SYSVIEW_Start+0x16c>)
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002848:	f000 f9ec 	bl	8002c24 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800284c:	f000 f9b2 	bl	8002bb4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002850:	f000 fc18 	bl	8003084 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002854:	bf00      	nop
 8002856:	3730      	adds	r7, #48	; 0x30
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20015230 	.word	0x20015230
 8002860:	0800394c 	.word	0x0800394c
 8002864:	20015260 	.word	0x20015260

08002868 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800286e:	f3ef 8311 	mrs	r3, BASEPRI
 8002872:	f04f 0120 	mov.w	r1, #32
 8002876:	f381 8811 	msr	BASEPRI, r1
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	480b      	ldr	r0, [pc, #44]	; (80028ac <SEGGER_SYSVIEW_Stop+0x44>)
 800287e:	f7ff fc88 	bl	8002192 <_PreparePacket>
 8002882:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800288c:	220b      	movs	r2, #11
 800288e:	6839      	ldr	r1, [r7, #0]
 8002890:	6838      	ldr	r0, [r7, #0]
 8002892:	f7ff fd57 	bl	8002344 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f383 8811 	msr	BASEPRI, r3
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20015260 	.word	0x20015260
 80028b0:	20015230 	.word	0x20015230

080028b4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08c      	sub	sp, #48	; 0x30
 80028b8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80028ba:	f3ef 8311 	mrs	r3, BASEPRI
 80028be:	f04f 0120 	mov.w	r1, #32
 80028c2:	f381 8811 	msr	BASEPRI, r1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	4845      	ldr	r0, [pc, #276]	; (80029e0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80028ca:	f7ff fc62 	bl	8002192 <_PreparePacket>
 80028ce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d8:	4b42      	ldr	r3, [pc, #264]	; (80029e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028de:	e00b      	b.n	80028f8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e6:	1c59      	adds	r1, r3, #1
 80028e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80028ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	09db      	lsrs	r3, r3, #7
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	2b7f      	cmp	r3, #127	; 0x7f
 80028fc:	d8f0      	bhi.n	80028e0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
 8002912:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	623b      	str	r3, [r7, #32]
 8002918:	e00b      	b.n	8002932 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	1c59      	adds	r1, r3, #1
 8002922:	6279      	str	r1, [r7, #36]	; 0x24
 8002924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	09db      	lsrs	r3, r3, #7
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	2b7f      	cmp	r3, #127	; 0x7f
 8002936:	d8f0      	bhi.n	800291a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	627a      	str	r2, [r7, #36]	; 0x24
 800293e:	6a3a      	ldr	r2, [r7, #32]
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	e00b      	b.n	800296c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	b2da      	uxtb	r2, r3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	1c59      	adds	r1, r3, #1
 800295c:	61f9      	str	r1, [r7, #28]
 800295e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	09db      	lsrs	r3, r3, #7
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b7f      	cmp	r3, #127	; 0x7f
 8002970:	d8f0      	bhi.n	8002954 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	61fa      	str	r2, [r7, #28]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	2302      	movs	r3, #2
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	e00b      	b.n	80029a4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	6179      	str	r1, [r7, #20]
 8002996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	09db      	lsrs	r3, r3, #7
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b7f      	cmp	r3, #127	; 0x7f
 80029a8:	d8f0      	bhi.n	800298c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	617a      	str	r2, [r7, #20]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80029ba:	2218      	movs	r2, #24
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	68b8      	ldr	r0, [r7, #8]
 80029c0:	f7ff fcc0 	bl	8002344 <_SendPacket>
  RECORD_END();
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	4798      	blx	r3
  }
}
 80029d8:	bf00      	nop
 80029da:	3730      	adds	r7, #48	; 0x30
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20015260 	.word	0x20015260
 80029e4:	20015230 	.word	0x20015230

080029e8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b092      	sub	sp, #72	; 0x48
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80029f0:	f3ef 8311 	mrs	r3, BASEPRI
 80029f4:	f04f 0120 	mov.w	r1, #32
 80029f8:	f381 8811 	msr	BASEPRI, r1
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	486b      	ldr	r0, [pc, #428]	; (8002bac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002a00:	f7ff fbc7 	bl	8002192 <_PreparePacket>
 8002a04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a1c:	e00b      	b.n	8002a36 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a24:	1c59      	adds	r1, r3, #1
 8002a26:	6479      	str	r1, [r7, #68]	; 0x44
 8002a28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a32:	09db      	lsrs	r3, r3, #7
 8002a34:	643b      	str	r3, [r7, #64]	; 0x40
 8002a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a38:	2b7f      	cmp	r3, #127	; 0x7f
 8002a3a:	d8f0      	bhi.n	8002a1e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	647a      	str	r2, [r7, #68]	; 0x44
 8002a42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a56:	e00b      	b.n	8002a70 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5e:	1c59      	adds	r1, r3, #1
 8002a60:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002a62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	09db      	lsrs	r3, r3, #7
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	2b7f      	cmp	r3, #127	; 0x7f
 8002a74:	d8f0      	bhi.n	8002a58 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8002a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a84:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff fb32 	bl	80020f8 <_EncodeStr>
 8002a94:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002a96:	2209      	movs	r2, #9
 8002a98:	68f9      	ldr	r1, [r7, #12]
 8002a9a:	6938      	ldr	r0, [r7, #16]
 8002a9c:	f7ff fc52 	bl	8002344 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ab6:	e00b      	b.n	8002ad0 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abe:	1c59      	adds	r1, r3, #1
 8002ac0:	6379      	str	r1, [r7, #52]	; 0x34
 8002ac2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	09db      	lsrs	r3, r3, #7
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ad4:	d8f0      	bhi.n	8002ab8 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8002ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	637a      	str	r2, [r7, #52]	; 0x34
 8002adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af0:	e00b      	b.n	8002b0a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	1c59      	adds	r1, r3, #1
 8002afa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	09db      	lsrs	r3, r3, #7
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8002b0e:	d8f0      	bhi.n	8002af2 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	623b      	str	r3, [r7, #32]
 8002b2a:	e00b      	b.n	8002b44 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	1c59      	adds	r1, r3, #1
 8002b34:	6279      	str	r1, [r7, #36]	; 0x24
 8002b36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	09db      	lsrs	r3, r3, #7
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	2b7f      	cmp	r3, #127	; 0x7f
 8002b48:	d8f0      	bhi.n	8002b2c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	627a      	str	r2, [r7, #36]	; 0x24
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e00b      	b.n	8002b7c <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	1c59      	adds	r1, r3, #1
 8002b6c:	61f9      	str	r1, [r7, #28]
 8002b6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	09db      	lsrs	r3, r3, #7
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b80:	d8f0      	bhi.n	8002b64 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	61fa      	str	r2, [r7, #28]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002b92:	2215      	movs	r2, #21
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	6938      	ldr	r0, [r7, #16]
 8002b98:	f7ff fbd4 	bl	8002344 <_SendPacket>
  RECORD_END();
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f383 8811 	msr	BASEPRI, r3
}
 8002ba2:	bf00      	nop
 8002ba4:	3748      	adds	r7, #72	; 0x48
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20015260 	.word	0x20015260
 8002bb0:	20015230 	.word	0x20015230

08002bb4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002bca:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4798      	blx	r3
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20015230 	.word	0x20015230

08002bdc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002be4:	f3ef 8311 	mrs	r3, BASEPRI
 8002be8:	f04f 0120 	mov.w	r1, #32
 8002bec:	f381 8811 	msr	BASEPRI, r1
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	480b      	ldr	r0, [pc, #44]	; (8002c20 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002bf4:	f7ff facd 	bl	8002192 <_PreparePacket>
 8002bf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002bfa:	2280      	movs	r2, #128	; 0x80
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	6938      	ldr	r0, [r7, #16]
 8002c00:	f7ff fa7a 	bl	80020f8 <_EncodeStr>
 8002c04:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002c06:	220e      	movs	r2, #14
 8002c08:	68f9      	ldr	r1, [r7, #12]
 8002c0a:	6938      	ldr	r0, [r7, #16]
 8002c0c:	f7ff fb9a 	bl	8002344 <_SendPacket>
  RECORD_END();
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f383 8811 	msr	BASEPRI, r3
}
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20015260 	.word	0x20015260

08002c24 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d019      	beq.n	8002c66 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d014      	beq.n	8002c66 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4798      	blx	r3
 8002c44:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002c48:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002c4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	f04f 0400 	mov.w	r4, #0
 8002c56:	0013      	movs	r3, r2
 8002c58:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4601      	mov	r1, r0
 8002c5e:	200d      	movs	r0, #13
 8002c60:	f7ff fcec 	bl	800263c <SEGGER_SYSVIEW_RecordU32x2>
 8002c64:	e005      	b.n	8002c72 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	200c      	movs	r0, #12
 8002c6e:	f7ff fca9 	bl	80025c4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20015230 	.word	0x20015230
 8002c80:	e0001004 	.word	0xe0001004

08002c84 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8002c8e:	f04f 0120 	mov.w	r1, #32
 8002c92:	f381 8811 	msr	BASEPRI, r1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	4819      	ldr	r0, [pc, #100]	; (8002d00 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002c9a:	f7ff fa7a 	bl	8002192 <_PreparePacket>
 8002c9e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cac:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	e00b      	b.n	8002cd0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	1c59      	adds	r1, r3, #1
 8002cc0:	6179      	str	r1, [r7, #20]
 8002cc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	09db      	lsrs	r3, r3, #7
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8002cd4:	d8f0      	bhi.n	8002cb8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	617a      	str	r2, [r7, #20]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	68b8      	ldr	r0, [r7, #8]
 8002cec:	f7ff fb2a 	bl	8002344 <_SendPacket>
  RECORD_END();
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f383 8811 	msr	BASEPRI, r3
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20015260 	.word	0x20015260
 8002d04:	e000ed04 	.word	0xe000ed04

08002d08 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d12:	f04f 0120 	mov.w	r1, #32
 8002d16:	f381 8811 	msr	BASEPRI, r1
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	4807      	ldr	r0, [pc, #28]	; (8002d3c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002d1e:	f7ff fa38 	bl	8002192 <_PreparePacket>
 8002d22:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002d24:	2203      	movs	r2, #3
 8002d26:	6839      	ldr	r1, [r7, #0]
 8002d28:	6838      	ldr	r0, [r7, #0]
 8002d2a:	f7ff fb0b 	bl	8002344 <_SendPacket>
  RECORD_END();
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f383 8811 	msr	BASEPRI, r3
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20015260 	.word	0x20015260

08002d40 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002d46:	f3ef 8311 	mrs	r3, BASEPRI
 8002d4a:	f04f 0120 	mov.w	r1, #32
 8002d4e:	f381 8811 	msr	BASEPRI, r1
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	4807      	ldr	r0, [pc, #28]	; (8002d74 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002d56:	f7ff fa1c 	bl	8002192 <_PreparePacket>
 8002d5a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002d5c:	2212      	movs	r2, #18
 8002d5e:	6839      	ldr	r1, [r7, #0]
 8002d60:	6838      	ldr	r0, [r7, #0]
 8002d62:	f7ff faef 	bl	8002344 <_SendPacket>
  RECORD_END();
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f383 8811 	msr	BASEPRI, r3
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20015260 	.word	0x20015260

08002d78 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002d7e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d82:	f04f 0120 	mov.w	r1, #32
 8002d86:	f381 8811 	msr	BASEPRI, r1
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	4807      	ldr	r0, [pc, #28]	; (8002dac <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002d8e:	f7ff fa00 	bl	8002192 <_PreparePacket>
 8002d92:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002d94:	2211      	movs	r2, #17
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	6838      	ldr	r0, [r7, #0]
 8002d9a:	f7ff fad3 	bl	8002344 <_SendPacket>
  RECORD_END();
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f383 8811 	msr	BASEPRI, r3
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20015260 	.word	0x20015260

08002db0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002db8:	f3ef 8311 	mrs	r3, BASEPRI
 8002dbc:	f04f 0120 	mov.w	r1, #32
 8002dc0:	f381 8811 	msr	BASEPRI, r1
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	481a      	ldr	r0, [pc, #104]	; (8002e30 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002dc8:	f7ff f9e3 	bl	8002192 <_PreparePacket>
 8002dcc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	e00b      	b.n	8002e00 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	1c59      	adds	r1, r3, #1
 8002df0:	61f9      	str	r1, [r7, #28]
 8002df2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	09db      	lsrs	r3, r3, #7
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b7f      	cmp	r3, #127	; 0x7f
 8002e04:	d8f0      	bhi.n	8002de8 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	61fa      	str	r2, [r7, #28]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8002e16:	2208      	movs	r2, #8
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	6938      	ldr	r0, [r7, #16]
 8002e1c:	f7ff fa92 	bl	8002344 <_SendPacket>
  RECORD_END();
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f383 8811 	msr	BASEPRI, r3
}
 8002e26:	bf00      	nop
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20015260 	.word	0x20015260
 8002e34:	20015230 	.word	0x20015230

08002e38 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002e40:	f3ef 8311 	mrs	r3, BASEPRI
 8002e44:	f04f 0120 	mov.w	r1, #32
 8002e48:	f381 8811 	msr	BASEPRI, r1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	481a      	ldr	r0, [pc, #104]	; (8002eb8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002e50:	f7ff f99f 	bl	8002192 <_PreparePacket>
 8002e54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002e5a:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	e00b      	b.n	8002e88 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	1c59      	adds	r1, r3, #1
 8002e78:	61f9      	str	r1, [r7, #28]
 8002e7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	09db      	lsrs	r3, r3, #7
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e8c:	d8f0      	bhi.n	8002e70 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	61fa      	str	r2, [r7, #28]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	68f9      	ldr	r1, [r7, #12]
 8002ea2:	6938      	ldr	r0, [r7, #16]
 8002ea4:	f7ff fa4e 	bl	8002344 <_SendPacket>
  RECORD_END();
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f383 8811 	msr	BASEPRI, r3
}
 8002eae:	bf00      	nop
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20015260 	.word	0x20015260
 8002ebc:	20015230 	.word	0x20015230

08002ec0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8002ecc:	f04f 0120 	mov.w	r1, #32
 8002ed0:	f381 8811 	msr	BASEPRI, r1
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	481a      	ldr	r0, [pc, #104]	; (8002f40 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002ed8:	f7ff f95b 	bl	8002192 <_PreparePacket>
 8002edc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e00b      	b.n	8002f10 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	1c59      	adds	r1, r3, #1
 8002f00:	61f9      	str	r1, [r7, #28]
 8002f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	09db      	lsrs	r3, r3, #7
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b7f      	cmp	r3, #127	; 0x7f
 8002f14:	d8f0      	bhi.n	8002ef8 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	61fa      	str	r2, [r7, #28]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8002f26:	2206      	movs	r2, #6
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	6938      	ldr	r0, [r7, #16]
 8002f2c:	f7ff fa0a 	bl	8002344 <_SendPacket>
  RECORD_END();
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f383 8811 	msr	BASEPRI, r3
}
 8002f36:	bf00      	nop
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20015260 	.word	0x20015260
 8002f44:	20015230 	.word	0x20015230

08002f48 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08c      	sub	sp, #48	; 0x30
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8002f52:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d06d      	beq.n	8003036 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8002f5a:	4b39      	ldr	r3, [pc, #228]	; (8003040 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8002f60:	2300      	movs	r3, #0
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f64:	e008      	b.n	8002f78 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	3301      	adds	r3, #1
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d3f2      	bcc.n	8002f66 <SEGGER_SYSVIEW_SendModule+0x1e>
 8002f80:	e000      	b.n	8002f84 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8002f82:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d055      	beq.n	8003036 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f8e:	f04f 0120 	mov.w	r1, #32
 8002f92:	f381 8811 	msr	BASEPRI, r1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	482a      	ldr	r0, [pc, #168]	; (8003044 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002f9a:	f7ff f8fa 	bl	8002192 <_PreparePacket>
 8002f9e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	e00b      	b.n	8002fc6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	1c59      	adds	r1, r3, #1
 8002fb6:	6279      	str	r1, [r7, #36]	; 0x24
 8002fb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	09db      	lsrs	r3, r3, #7
 8002fc4:	623b      	str	r3, [r7, #32]
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8002fca:	d8f0      	bhi.n	8002fae <SEGGER_SYSVIEW_SendModule+0x66>
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	627a      	str	r2, [r7, #36]	; 0x24
 8002fd2:	6a3a      	ldr	r2, [r7, #32]
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e00b      	b.n	8003000 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	1c59      	adds	r1, r3, #1
 8002ff0:	61f9      	str	r1, [r7, #28]
 8002ff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	09db      	lsrs	r3, r3, #7
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b7f      	cmp	r3, #127	; 0x7f
 8003004:	d8f0      	bhi.n	8002fe8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	61fa      	str	r2, [r7, #28]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2280      	movs	r2, #128	; 0x80
 800301c:	4619      	mov	r1, r3
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7ff f86a 	bl	80020f8 <_EncodeStr>
 8003024:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003026:	2216      	movs	r2, #22
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	6938      	ldr	r0, [r7, #16]
 800302c:	f7ff f98a 	bl	8002344 <_SendPacket>
      RECORD_END();
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003036:	bf00      	nop
 8003038:	3730      	adds	r7, #48	; 0x30
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20015258 	.word	0x20015258
 8003044:	20015260 	.word	0x20015260

08003048 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00f      	beq.n	8003076 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f2      	bne.n	800305c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20015258 	.word	0x20015258

08003084 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800308a:	f3ef 8311 	mrs	r3, BASEPRI
 800308e:	f04f 0120 	mov.w	r1, #32
 8003092:	f381 8811 	msr	BASEPRI, r1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	4817      	ldr	r0, [pc, #92]	; (80030f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800309a:	f7ff f87a 	bl	8002192 <_PreparePacket>
 800309e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	4b14      	ldr	r3, [pc, #80]	; (80030fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	e00b      	b.n	80030c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	1c59      	adds	r1, r3, #1
 80030b8:	6179      	str	r1, [r7, #20]
 80030ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	09db      	lsrs	r3, r3, #7
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b7f      	cmp	r3, #127	; 0x7f
 80030cc:	d8f0      	bhi.n	80030b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	617a      	str	r2, [r7, #20]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80030de:	221b      	movs	r2, #27
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	68b8      	ldr	r0, [r7, #8]
 80030e4:	f7ff f92e 	bl	8002344 <_SendPacket>
  RECORD_END();
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f383 8811 	msr	BASEPRI, r3
}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20015260 	.word	0x20015260
 80030fc:	2001525c 	.word	0x2001525c

08003100 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003108:	f3ef 8311 	mrs	r3, BASEPRI
 800310c:	f04f 0120 	mov.w	r1, #32
 8003110:	f381 8811 	msr	BASEPRI, r1
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	4827      	ldr	r0, [pc, #156]	; (80031b4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003118:	f7ff f83b 	bl	8002192 <_PreparePacket>
 800311c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	6938      	ldr	r0, [r7, #16]
 8003124:	f7fe ffe8 	bl	80020f8 <_EncodeStr>
 8003128:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	2301      	movs	r3, #1
 8003130:	623b      	str	r3, [r7, #32]
 8003132:	e00b      	b.n	800314c <SEGGER_SYSVIEW_Warn+0x4c>
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	1c59      	adds	r1, r3, #1
 800313c:	6279      	str	r1, [r7, #36]	; 0x24
 800313e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	09db      	lsrs	r3, r3, #7
 800314a:	623b      	str	r3, [r7, #32]
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	2b7f      	cmp	r3, #127	; 0x7f
 8003150:	d8f0      	bhi.n	8003134 <SEGGER_SYSVIEW_Warn+0x34>
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	627a      	str	r2, [r7, #36]	; 0x24
 8003158:	6a3a      	ldr	r2, [r7, #32]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e00b      	b.n	8003184 <SEGGER_SYSVIEW_Warn+0x84>
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	1c59      	adds	r1, r3, #1
 8003174:	61f9      	str	r1, [r7, #28]
 8003176:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	09db      	lsrs	r3, r3, #7
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b7f      	cmp	r3, #127	; 0x7f
 8003188:	d8f0      	bhi.n	800316c <SEGGER_SYSVIEW_Warn+0x6c>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	61fa      	str	r2, [r7, #28]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800319a:	221a      	movs	r2, #26
 800319c:	68f9      	ldr	r1, [r7, #12]
 800319e:	6938      	ldr	r0, [r7, #16]
 80031a0:	f7ff f8d0 	bl	8002344 <_SendPacket>
  RECORD_END();
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f383 8811 	msr	BASEPRI, r3
}
 80031aa:	bf00      	nop
 80031ac:	3728      	adds	r7, #40	; 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20015260 	.word	0x20015260

080031b8 <main>:
#ifdef USE_SEMIHOSTING
extern void initialise_monitor_handles();
#endif

int main(void)
{
 80031b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
    printf("Its a hello world application\r\n");
#endif

    DWT->CTRL |= (1<<0);//Data watch point trace->cyccnt(cycle count) in arm technical rm,it keeps time stamp
 80031be:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <main+0x80>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <main+0x80>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6013      	str	r3, [r2, #0]

    //reset the RCC clock cconfiguration to default reset state
	//reset state is hsi=on,pll=off,hse=off, sysclk=16MHz

    RCC_DeInit();
 80031ca:	f7fd f901 	bl	80003d0 <RCC_DeInit>

    //update the system core clock variable
    SystemCoreClockUpdate();
 80031ce:	f000 f937 	bl	8003440 <SystemCoreClockUpdate>

    pvtHardwareSetup();
 80031d2:	f000 f8d1 	bl	8003378 <pvtHardwareSetup>

    sprintf(user_msg,"\rthis is the beginning of hello world project\r\n");
 80031d6:	4b19      	ldr	r3, [pc, #100]	; (800323c <main+0x84>)
 80031d8:	4a19      	ldr	r2, [pc, #100]	; (8003240 <main+0x88>)
 80031da:	4614      	mov	r4, r2
 80031dc:	469c      	mov	ip, r3
 80031de:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80031e2:	4665      	mov	r5, ip
 80031e4:	4626      	mov	r6, r4
 80031e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80031e8:	6028      	str	r0, [r5, #0]
 80031ea:	6069      	str	r1, [r5, #4]
 80031ec:	60aa      	str	r2, [r5, #8]
 80031ee:	60eb      	str	r3, [r5, #12]
 80031f0:	3410      	adds	r4, #16
 80031f2:	f10c 0c10 	add.w	ip, ip, #16
 80031f6:	4574      	cmp	r4, lr
 80031f8:	d1f3      	bne.n	80031e2 <main+0x2a>
    printmsg(user_msg);
 80031fa:	4810      	ldr	r0, [pc, #64]	; (800323c <main+0x84>)
 80031fc:	f000 f8c2 	bl	8003384 <printmsg>

    //Start recording
    SEGGER_SYSVIEW_Conf();
 8003200:	f7fe fc18 	bl	8001a34 <SEGGER_SYSVIEW_Conf>
    SEGGER_SYSVIEW_Start();
 8003204:	f7ff fa74 	bl	80026f0 <SEGGER_SYSVIEW_Start>

    //create two tasks:task-1 and task-2
    xTaskCreate(vTask1_handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 2, &xTask1Handle);
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <main+0x8c>)
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	2302      	movs	r3, #2
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2300      	movs	r3, #0
 8003212:	2282      	movs	r2, #130	; 0x82
 8003214:	490c      	ldr	r1, [pc, #48]	; (8003248 <main+0x90>)
 8003216:	480d      	ldr	r0, [pc, #52]	; (800324c <main+0x94>)
 8003218:	f7fd fbcf 	bl	80009ba <xTaskCreate>
    xTaskCreate(vTask2_handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2, &xTask2Handle);
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <main+0x98>)
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	2302      	movs	r3, #2
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2300      	movs	r3, #0
 8003226:	2282      	movs	r2, #130	; 0x82
 8003228:	490a      	ldr	r1, [pc, #40]	; (8003254 <main+0x9c>)
 800322a:	480b      	ldr	r0, [pc, #44]	; (8003258 <main+0xa0>)
 800322c:	f7fd fbc5 	bl	80009ba <xTaskCreate>
    //start the scheduler
    vTaskStartScheduler();
 8003230:	f7fd fd10 	bl	8000c54 <vTaskStartScheduler>
	for(;;);
 8003234:	e7fe      	b.n	8003234 <main+0x7c>
 8003236:	bf00      	nop
 8003238:	e0001000 	.word	0xe0001000
 800323c:	200153f4 	.word	0x200153f4
 8003240:	080038cc 	.word	0x080038cc
 8003244:	20015344 	.word	0x20015344
 8003248:	080038fc 	.word	0x080038fc
 800324c:	0800325d 	.word	0x0800325d
 8003250:	20015348 	.word	0x20015348
 8003254:	08003904 	.word	0x08003904
 8003258:	0800329d 	.word	0x0800329d

0800325c <vTask1_handler>:
}

void vTask1_handler(void* params){
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	while(1){
		if(UART_ACCESS_KEY==AVAILABLE){
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <vTask1_handler+0x34>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d1fb      	bne.n	8003264 <vTask1_handler+0x8>
			UART_ACCESS_KEY=NOT_AVAILABLE;
 800326c:	4b08      	ldr	r3, [pc, #32]	; (8003290 <vTask1_handler+0x34>)
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
			printmsg("UART message from task-1\r\n");
 8003272:	4808      	ldr	r0, [pc, #32]	; (8003294 <vTask1_handler+0x38>)
 8003274:	f000 f886 	bl	8003384 <printmsg>
			UART_ACCESS_KEY=AVAILABLE;
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <vTask1_handler+0x34>)
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <vTask1_handler+0x3c>)
 8003280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	f3bf 8f6f 	isb	sy
		if(UART_ACCESS_KEY==AVAILABLE){
 800328e:	e7e9      	b.n	8003264 <vTask1_handler+0x8>
 8003290:	20000014 	.word	0x20000014
 8003294:	0800390c 	.word	0x0800390c
 8003298:	e000ed04 	.word	0xe000ed04

0800329c <vTask2_handler>:
		}

	}

}
void vTask2_handler(void* params){
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
	while(1){
		if(UART_ACCESS_KEY==AVAILABLE){
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <vTask2_handler+0x34>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d1fb      	bne.n	80032a4 <vTask2_handler+0x8>
					UART_ACCESS_KEY=NOT_AVAILABLE;
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <vTask2_handler+0x34>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
					printmsg("UART message from task-2\r\n");
 80032b2:	4808      	ldr	r0, [pc, #32]	; (80032d4 <vTask2_handler+0x38>)
 80032b4:	f000 f866 	bl	8003384 <printmsg>
					UART_ACCESS_KEY=AVAILABLE;
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <vTask2_handler+0x34>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
					taskYIELD();
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <vTask2_handler+0x3c>)
 80032c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	f3bf 8f6f 	isb	sy
		if(UART_ACCESS_KEY==AVAILABLE){
 80032ce:	e7e9      	b.n	80032a4 <vTask2_handler+0x8>
 80032d0:	20000014 	.word	0x20000014
 80032d4:	08003928 	.word	0x08003928
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <UART_Setup>:

		}
	}
}
static void UART_Setup(void){
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef UART_Gpio;
		memset(&UART_Gpio,0,sizeof(UART_Gpio));
 80032e2:	f107 0310 	add.w	r3, r7, #16
 80032e6:	2208      	movs	r2, #8
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fa74 	bl	80037d8 <memset>
		USART_InitTypeDef UART_Handle;
		memset(&UART_Handle,0,sizeof(UART_Handle));
 80032f0:	463b      	mov	r3, r7
 80032f2:	2210      	movs	r2, #16
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fa6e 	bl	80037d8 <memset>

	//enable clock for uart peripheral and gpioa peripheral
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 80032fc:	2101      	movs	r1, #1
 80032fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003302:	f7fd f9b7 	bl	8000674 <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003306:	2101      	movs	r1, #1
 8003308:	2001      	movs	r0, #1
 800330a:	f7fd f993 	bl	8000634 <RCC_AHB1PeriphClockCmd>

		//configure pa2 as uart_tx and pa3 as uart_rx

		UART_Gpio.GPIO_Pin=GPIO_Pin_2 | GPIO_Pin_3;
 800330e:	230c      	movs	r3, #12
 8003310:	613b      	str	r3, [r7, #16]
		UART_Gpio.GPIO_Mode=GPIO_Mode_AF;
 8003312:	2302      	movs	r3, #2
 8003314:	753b      	strb	r3, [r7, #20]
		UART_Gpio.GPIO_PuPd=GPIO_PuPd_UP;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
		GPIO_Init(GPIOA, &UART_Gpio);
 800331a:	f107 0310 	add.w	r3, r7, #16
 800331e:	4619      	mov	r1, r3
 8003320:	4813      	ldr	r0, [pc, #76]	; (8003370 <UART_Setup+0x94>)
 8003322:	f7fc ff7d 	bl	8000220 <GPIO_Init>

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);//PA2 CONFIG AF7
 8003326:	2207      	movs	r2, #7
 8003328:	2102      	movs	r1, #2
 800332a:	4811      	ldr	r0, [pc, #68]	; (8003370 <UART_Setup+0x94>)
 800332c:	f7fd f806 	bl	800033c <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);//PA3 CONFIG AF7
 8003330:	2207      	movs	r2, #7
 8003332:	2103      	movs	r1, #3
 8003334:	480e      	ldr	r0, [pc, #56]	; (8003370 <UART_Setup+0x94>)
 8003336:	f7fd f801 	bl	800033c <GPIO_PinAFConfig>

		//UART PERIPHERAL CONFIGURATION
		UART_Handle.USART_BaudRate=115200;
 800333a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800333e:	603b      	str	r3, [r7, #0]
		UART_Handle.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 8003340:	2300      	movs	r3, #0
 8003342:	81bb      	strh	r3, [r7, #12]
		UART_Handle.USART_Mode=USART_Mode_Tx | USART_Mode_Rx;
 8003344:	230c      	movs	r3, #12
 8003346:	817b      	strh	r3, [r7, #10]
		UART_Handle.USART_Parity=USART_Parity_No;
 8003348:	2300      	movs	r3, #0
 800334a:	813b      	strh	r3, [r7, #8]
		UART_Handle.USART_StopBits=USART_StopBits_1;
 800334c:	2300      	movs	r3, #0
 800334e:	80fb      	strh	r3, [r7, #6]
		UART_Handle.USART_WordLength=USART_WordLength_8b;
 8003350:	2300      	movs	r3, #0
 8003352:	80bb      	strh	r3, [r7, #4]

		USART_Init(USART2, &UART_Handle);
 8003354:	463b      	mov	r3, r7
 8003356:	4619      	mov	r1, r3
 8003358:	4806      	ldr	r0, [pc, #24]	; (8003374 <UART_Setup+0x98>)
 800335a:	f7fd f9ab 	bl	80006b4 <USART_Init>
		USART_Cmd(USART2, ENABLE);
 800335e:	2101      	movs	r1, #1
 8003360:	4804      	ldr	r0, [pc, #16]	; (8003374 <UART_Setup+0x98>)
 8003362:	f7fd fa61 	bl	8000828 <USART_Cmd>

}
 8003366:	bf00      	nop
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40020000 	.word	0x40020000
 8003374:	40004400 	.word	0x40004400

08003378 <pvtHardwareSetup>:

static void pvtHardwareSetup(void){
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
	UART_Setup();
 800337c:	f7ff ffae 	bl	80032dc <UART_Setup>


}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}

08003384 <printmsg>:

void printmsg(char* msg){
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

	for(uint32_t i=0;i<strlen(msg);i++){
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e013      	b.n	80033ba <printmsg+0x36>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)==RESET);
 8003392:	bf00      	nop
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	480e      	ldr	r0, [pc, #56]	; (80033d0 <printmsg+0x4c>)
 8003398:	f7fd fa78 	bl	800088c <USART_GetFlagStatus>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f8      	beq.n	8003394 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	4619      	mov	r1, r3
 80033ae:	4808      	ldr	r0, [pc, #32]	; (80033d0 <printmsg+0x4c>)
 80033b0:	f7fd fa5a 	bl	8000868 <USART_SendData>
	for(uint32_t i=0;i<strlen(msg);i++){
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fc ff28 	bl	8000210 <strlen>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d3e4      	bcc.n	8003392 <printmsg+0xe>
	}

}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40004400 	.word	0x40004400

080033d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <SystemInit+0x60>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	4a15      	ldr	r2, [pc, #84]	; (8003434 <SystemInit+0x60>)
 80033e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80033e8:	4b13      	ldr	r3, [pc, #76]	; (8003438 <SystemInit+0x64>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a12      	ldr	r2, [pc, #72]	; (8003438 <SystemInit+0x64>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <SystemInit+0x64>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80033fa:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <SystemInit+0x64>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a0e      	ldr	r2, [pc, #56]	; (8003438 <SystemInit+0x64>)
 8003400:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <SystemInit+0x64>)
 800340c:	4a0b      	ldr	r2, [pc, #44]	; (800343c <SystemInit+0x68>)
 800340e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003410:	4b09      	ldr	r3, [pc, #36]	; (8003438 <SystemInit+0x64>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a08      	ldr	r2, [pc, #32]	; (8003438 <SystemInit+0x64>)
 8003416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <SystemInit+0x64>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003422:	f000 f8db 	bl	80035dc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003426:	4b03      	ldr	r3, [pc, #12]	; (8003434 <SystemInit+0x60>)
 8003428:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800342c:	609a      	str	r2, [r3, #8]
#endif
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	e000ed00 	.word	0xe000ed00
 8003438:	40023800 	.word	0x40023800
 800343c:	24003010 	.word	0x24003010

08003440 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	2302      	movs	r3, #2
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	2302      	movs	r3, #2
 8003458:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 800345a:	2302      	movs	r3, #2
 800345c:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800345e:	4b5a      	ldr	r3, [pc, #360]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b0c      	cmp	r3, #12
 800346c:	f200 8092 	bhi.w	8003594 <SystemCoreClockUpdate+0x154>
 8003470:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <SystemCoreClockUpdate+0x38>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	080034ad 	.word	0x080034ad
 800347c:	08003595 	.word	0x08003595
 8003480:	08003595 	.word	0x08003595
 8003484:	08003595 	.word	0x08003595
 8003488:	080034b5 	.word	0x080034b5
 800348c:	08003595 	.word	0x08003595
 8003490:	08003595 	.word	0x08003595
 8003494:	08003595 	.word	0x08003595
 8003498:	080034bd 	.word	0x080034bd
 800349c:	08003595 	.word	0x08003595
 80034a0:	08003595 	.word	0x08003595
 80034a4:	08003595 	.word	0x08003595
 80034a8:	08003529 	.word	0x08003529
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80034ac:	4b47      	ldr	r3, [pc, #284]	; (80035cc <SystemCoreClockUpdate+0x18c>)
 80034ae:	4a48      	ldr	r2, [pc, #288]	; (80035d0 <SystemCoreClockUpdate+0x190>)
 80034b0:	601a      	str	r2, [r3, #0]
      break;
 80034b2:	e073      	b.n	800359c <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80034b4:	4b45      	ldr	r3, [pc, #276]	; (80035cc <SystemCoreClockUpdate+0x18c>)
 80034b6:	4a47      	ldr	r2, [pc, #284]	; (80035d4 <SystemCoreClockUpdate+0x194>)
 80034b8:	601a      	str	r2, [r3, #0]
      break;
 80034ba:	e06f      	b.n	800359c <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80034bc:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	0d9b      	lsrs	r3, r3, #22
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c8:	4b3f      	ldr	r3, [pc, #252]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d0:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00c      	beq.n	80034f2 <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80034d8:	4a3e      	ldr	r2, [pc, #248]	; (80035d4 <SystemCoreClockUpdate+0x194>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	4a39      	ldr	r2, [pc, #228]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 80034e2:	6852      	ldr	r2, [r2, #4]
 80034e4:	0992      	lsrs	r2, r2, #6
 80034e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e00b      	b.n	800350a <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80034f2:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <SystemCoreClockUpdate+0x190>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	4a33      	ldr	r2, [pc, #204]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 80034fc:	6852      	ldr	r2, [r2, #4]
 80034fe:	0992      	lsrs	r2, r2, #6
 8003500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800350a:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	3301      	adds	r3, #1
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	4a2a      	ldr	r2, [pc, #168]	; (80035cc <SystemCoreClockUpdate+0x18c>)
 8003524:	6013      	str	r3, [r2, #0]
      break;
 8003526:	e039      	b.n	800359c <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003528:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0d9b      	lsrs	r3, r3, #22
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353c:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00c      	beq.n	800355e <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003544:	4a23      	ldr	r2, [pc, #140]	; (80035d4 <SystemCoreClockUpdate+0x194>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	4a1e      	ldr	r2, [pc, #120]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 800354e:	6852      	ldr	r2, [r2, #4]
 8003550:	0992      	lsrs	r2, r2, #6
 8003552:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e00b      	b.n	8003576 <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800355e:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <SystemCoreClockUpdate+0x190>)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 8003568:	6852      	ldr	r2, [r2, #4]
 800356a:	0992      	lsrs	r2, r2, #6
 800356c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8003576:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0f1b      	lsrs	r3, r3, #28
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	3301      	adds	r3, #1
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	4a0f      	ldr	r2, [pc, #60]	; (80035cc <SystemCoreClockUpdate+0x18c>)
 8003590:	6013      	str	r3, [r2, #0]
      break;
 8003592:	e003      	b.n	800359c <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8003594:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <SystemCoreClockUpdate+0x18c>)
 8003596:	4a0e      	ldr	r2, [pc, #56]	; (80035d0 <SystemCoreClockUpdate+0x190>)
 8003598:	601a      	str	r2, [r3, #0]
      break;
 800359a:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <SystemCoreClockUpdate+0x188>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <SystemCoreClockUpdate+0x198>)
 80035a8:	5cd3      	ldrb	r3, [r2, r3]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80035ae:	4b07      	ldr	r3, [pc, #28]	; (80035cc <SystemCoreClockUpdate+0x18c>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <SystemCoreClockUpdate+0x18c>)
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40023800 	.word	0x40023800
 80035cc:	20000018 	.word	0x20000018
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	007a1200 	.word	0x007a1200
 80035d8:	2000001c 	.word	0x2000001c

080035dc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	2300      	movs	r3, #0
 80035e8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80035ea:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <SetSysClock+0x11c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a42      	ldr	r2, [pc, #264]	; (80036f8 <SetSysClock+0x11c>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80035f6:	4b40      	ldr	r3, [pc, #256]	; (80036f8 <SetSysClock+0x11c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3301      	adds	r3, #1
 8003604:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d103      	bne.n	8003614 <SetSysClock+0x38>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003612:	d1f0      	bne.n	80035f6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003614:	4b38      	ldr	r3, [pc, #224]	; (80036f8 <SetSysClock+0x11c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003620:	2301      	movs	r3, #1
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	e001      	b.n	800362a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003626:	2300      	movs	r3, #0
 8003628:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d15c      	bne.n	80036ea <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003630:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <SetSysClock+0x11c>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	4a30      	ldr	r2, [pc, #192]	; (80036f8 <SetSysClock+0x11c>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800363c:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <SetSysClock+0x120>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a2e      	ldr	r2, [pc, #184]	; (80036fc <SetSysClock+0x120>)
 8003642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003646:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003648:	4b2b      	ldr	r3, [pc, #172]	; (80036f8 <SetSysClock+0x11c>)
 800364a:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <SetSysClock+0x11c>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003650:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <SetSysClock+0x11c>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a28      	ldr	r2, [pc, #160]	; (80036f8 <SetSysClock+0x11c>)
 8003656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800365c:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <SetSysClock+0x11c>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <SetSysClock+0x11c>)
 8003662:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003666:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003668:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <SetSysClock+0x11c>)
 800366a:	4a25      	ldr	r2, [pc, #148]	; (8003700 <SetSysClock+0x124>)
 800366c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <SetSysClock+0x11c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <SetSysClock+0x11c>)
 8003674:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003678:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800367a:	bf00      	nop
 800367c:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <SetSysClock+0x11c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f9      	beq.n	800367c <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <SetSysClock+0x120>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <SetSysClock+0x120>)
 800368e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003692:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8003694:	bf00      	nop
 8003696:	4b19      	ldr	r3, [pc, #100]	; (80036fc <SetSysClock+0x120>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f9      	beq.n	8003696 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <SetSysClock+0x120>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a15      	ldr	r2, [pc, #84]	; (80036fc <SetSysClock+0x120>)
 80036a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ac:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 80036ae:	bf00      	nop
 80036b0:	4b12      	ldr	r3, [pc, #72]	; (80036fc <SetSysClock+0x120>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f9      	beq.n	80036b0 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <SetSysClock+0x128>)
 80036be:	f240 7205 	movw	r2, #1797	; 0x705
 80036c2:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <SetSysClock+0x11c>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <SetSysClock+0x11c>)
 80036ca:	f023 0303 	bic.w	r3, r3, #3
 80036ce:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <SetSysClock+0x11c>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <SetSysClock+0x11c>)
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80036dc:	bf00      	nop
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <SetSysClock+0x11c>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d1f9      	bne.n	80036de <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40007000 	.word	0x40007000
 8003700:	77405a08 	.word	0x77405a08
 8003704:	40023c00 	.word	0x40023c00

08003708 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003708:	480d      	ldr	r0, [pc, #52]	; (8003740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800370a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800370c:	480d      	ldr	r0, [pc, #52]	; (8003744 <LoopForever+0x6>)
  ldr r1, =_edata
 800370e:	490e      	ldr	r1, [pc, #56]	; (8003748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003710:	4a0e      	ldr	r2, [pc, #56]	; (800374c <LoopForever+0xe>)
  movs r3, #0
 8003712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003714:	e002      	b.n	800371c <LoopCopyDataInit>

08003716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800371a:	3304      	adds	r3, #4

0800371c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800371c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003720:	d3f9      	bcc.n	8003716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003722:	4a0b      	ldr	r2, [pc, #44]	; (8003750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003724:	4c0b      	ldr	r4, [pc, #44]	; (8003754 <LoopForever+0x16>)
  movs r3, #0
 8003726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003728:	e001      	b.n	800372e <LoopFillZerobss>

0800372a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800372a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800372c:	3204      	adds	r2, #4

0800372e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003730:	d3fb      	bcc.n	800372a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003732:	f7ff fe4f 	bl	80033d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003736:	f000 f811 	bl	800375c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800373a:	f7ff fd3d 	bl	80031b8 <main>

0800373e <LoopForever>:

LoopForever:
    b LoopForever
 800373e:	e7fe      	b.n	800373e <LoopForever>
  ldr   r0, =_estack
 8003740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003748:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800374c:	08003960 	.word	0x08003960
  ldr r2, =_sbss
 8003750:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8003754:	20015458 	.word	0x20015458

08003758 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003758:	e7fe      	b.n	8003758 <ADC_IRQHandler>
	...

0800375c <__libc_init_array>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	4e0d      	ldr	r6, [pc, #52]	; (8003794 <__libc_init_array+0x38>)
 8003760:	4c0d      	ldr	r4, [pc, #52]	; (8003798 <__libc_init_array+0x3c>)
 8003762:	1ba4      	subs	r4, r4, r6
 8003764:	10a4      	asrs	r4, r4, #2
 8003766:	2500      	movs	r5, #0
 8003768:	42a5      	cmp	r5, r4
 800376a:	d109      	bne.n	8003780 <__libc_init_array+0x24>
 800376c:	4e0b      	ldr	r6, [pc, #44]	; (800379c <__libc_init_array+0x40>)
 800376e:	4c0c      	ldr	r4, [pc, #48]	; (80037a0 <__libc_init_array+0x44>)
 8003770:	f000 f83a 	bl	80037e8 <_init>
 8003774:	1ba4      	subs	r4, r4, r6
 8003776:	10a4      	asrs	r4, r4, #2
 8003778:	2500      	movs	r5, #0
 800377a:	42a5      	cmp	r5, r4
 800377c:	d105      	bne.n	800378a <__libc_init_array+0x2e>
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003784:	4798      	blx	r3
 8003786:	3501      	adds	r5, #1
 8003788:	e7ee      	b.n	8003768 <__libc_init_array+0xc>
 800378a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800378e:	4798      	blx	r3
 8003790:	3501      	adds	r5, #1
 8003792:	e7f2      	b.n	800377a <__libc_init_array+0x1e>
 8003794:	08003958 	.word	0x08003958
 8003798:	08003958 	.word	0x08003958
 800379c:	08003958 	.word	0x08003958
 80037a0:	0800395c 	.word	0x0800395c

080037a4 <memcmp>:
 80037a4:	b530      	push	{r4, r5, lr}
 80037a6:	2400      	movs	r4, #0
 80037a8:	42a2      	cmp	r2, r4
 80037aa:	d101      	bne.n	80037b0 <memcmp+0xc>
 80037ac:	2000      	movs	r0, #0
 80037ae:	e007      	b.n	80037c0 <memcmp+0x1c>
 80037b0:	5d03      	ldrb	r3, [r0, r4]
 80037b2:	3401      	adds	r4, #1
 80037b4:	190d      	adds	r5, r1, r4
 80037b6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80037ba:	42ab      	cmp	r3, r5
 80037bc:	d0f4      	beq.n	80037a8 <memcmp+0x4>
 80037be:	1b58      	subs	r0, r3, r5
 80037c0:	bd30      	pop	{r4, r5, pc}

080037c2 <memcpy>:
 80037c2:	b510      	push	{r4, lr}
 80037c4:	1e43      	subs	r3, r0, #1
 80037c6:	440a      	add	r2, r1
 80037c8:	4291      	cmp	r1, r2
 80037ca:	d100      	bne.n	80037ce <memcpy+0xc>
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d6:	e7f7      	b.n	80037c8 <memcpy+0x6>

080037d8 <memset>:
 80037d8:	4402      	add	r2, r0
 80037da:	4603      	mov	r3, r0
 80037dc:	4293      	cmp	r3, r2
 80037de:	d100      	bne.n	80037e2 <memset+0xa>
 80037e0:	4770      	bx	lr
 80037e2:	f803 1b01 	strb.w	r1, [r3], #1
 80037e6:	e7f9      	b.n	80037dc <memset+0x4>

080037e8 <_init>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr

080037f4 <_fini>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	bf00      	nop
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr
