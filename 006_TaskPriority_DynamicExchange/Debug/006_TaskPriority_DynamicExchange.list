
006_TaskPriority_DynamicExchange.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e18  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004168  08004168  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08004168  08004168  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004168  08004168  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08004170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015430  20000028  08004198  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015458  08004198  00025458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e41a  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eb6  00000000  00000000  0002e472  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd8  00000000  00000000  00030328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  00030f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000030e5  00000000  00000000  000319e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acfc  00000000  00000000  00034ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f870  00000000  00000000  0003f7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003264  00000000  00000000  000bf0ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000028 	.word	0x20000028
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003fd0 	.word	0x08003fd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000002c 	.word	0x2000002c
 800020c:	08003fd0 	.word	0x08003fd0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800022c:	4b34      	ldr	r3, [pc, #208]	; (8000300 <EXTI_Init+0xe0>)
 800022e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	799b      	ldrb	r3, [r3, #6]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d04f      	beq.n	80002d8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000238:	4b31      	ldr	r3, [pc, #196]	; (8000300 <EXTI_Init+0xe0>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	43db      	mvns	r3, r3
 8000242:	492f      	ldr	r1, [pc, #188]	; (8000300 <EXTI_Init+0xe0>)
 8000244:	4013      	ands	r3, r2
 8000246:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000248:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <EXTI_Init+0xe0>)
 800024a:	685a      	ldr	r2, [r3, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	43db      	mvns	r3, r3
 8000252:	492b      	ldr	r1, [pc, #172]	; (8000300 <EXTI_Init+0xe0>)
 8000254:	4013      	ands	r3, r2
 8000256:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	461a      	mov	r2, r3
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	4413      	add	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	6819      	ldr	r1, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	430a      	orrs	r2, r1
 8000270:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000272:	4b23      	ldr	r3, [pc, #140]	; (8000300 <EXTI_Init+0xe0>)
 8000274:	689a      	ldr	r2, [r3, #8]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	43db      	mvns	r3, r3
 800027c:	4920      	ldr	r1, [pc, #128]	; (8000300 <EXTI_Init+0xe0>)
 800027e:	4013      	ands	r3, r2
 8000280:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000282:	4b1f      	ldr	r3, [pc, #124]	; (8000300 <EXTI_Init+0xe0>)
 8000284:	68da      	ldr	r2, [r3, #12]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	43db      	mvns	r3, r3
 800028c:	491c      	ldr	r1, [pc, #112]	; (8000300 <EXTI_Init+0xe0>)
 800028e:	4013      	ands	r3, r2
 8000290:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	795b      	ldrb	r3, [r3, #5]
 8000296:	2b10      	cmp	r3, #16
 8000298:	d10e      	bne.n	80002b8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800029a:	4b19      	ldr	r3, [pc, #100]	; (8000300 <EXTI_Init+0xe0>)
 800029c:	689a      	ldr	r2, [r3, #8]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4917      	ldr	r1, [pc, #92]	; (8000300 <EXTI_Init+0xe0>)
 80002a4:	4313      	orrs	r3, r2
 80002a6:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <EXTI_Init+0xe0>)
 80002aa:	68da      	ldr	r2, [r3, #12]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4913      	ldr	r1, [pc, #76]	; (8000300 <EXTI_Init+0xe0>)
 80002b2:	4313      	orrs	r3, r2
 80002b4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002b6:	e01d      	b.n	80002f4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <EXTI_Init+0xe0>)
 80002ba:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	795b      	ldrb	r3, [r3, #5]
 80002c0:	461a      	mov	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	4413      	add	r3, r2
 80002c6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	6819      	ldr	r1, [r3, #0]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	430a      	orrs	r2, r1
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	e00d      	b.n	80002f4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	791b      	ldrb	r3, [r3, #4]
 80002dc:	461a      	mov	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	4413      	add	r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	6819      	ldr	r1, [r3, #0]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	43da      	mvns	r2, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	400a      	ands	r2, r1
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	40013c00 	.word	0x40013c00

08000304 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <EXTI_ClearITPendingBit+0x1c>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	6153      	str	r3, [r2, #20]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40013c00 	.word	0x40013c00

08000324 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]
 8000332:	2300      	movs	r3, #0
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
 800033e:	e076      	b.n	800042e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000340:	2201      	movs	r2, #1
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	fa02 f303 	lsl.w	r3, r2, r3
 8000348:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	4013      	ands	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	429a      	cmp	r2, r3
 800035a:	d165      	bne.n	8000428 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	2103      	movs	r1, #3
 8000366:	fa01 f303 	lsl.w	r3, r1, r3
 800036a:	43db      	mvns	r3, r3
 800036c:	401a      	ands	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	791b      	ldrb	r3, [r3, #4]
 800037a:	4619      	mov	r1, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	fa01 f303 	lsl.w	r3, r1, r3
 8000384:	431a      	orrs	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	791b      	ldrb	r3, [r3, #4]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d003      	beq.n	800039a <GPIO_Init+0x76>
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	2b02      	cmp	r3, #2
 8000398:	d12e      	bne.n	80003f8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	2103      	movs	r1, #3
 80003a4:	fa01 f303 	lsl.w	r3, r1, r3
 80003a8:	43db      	mvns	r3, r3
 80003aa:	401a      	ands	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	689a      	ldr	r2, [r3, #8]
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	795b      	ldrb	r3, [r3, #5]
 80003b8:	4619      	mov	r1, r3
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	fa01 f303 	lsl.w	r3, r1, r3
 80003c2:	431a      	orrs	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	685a      	ldr	r2, [r3, #4]
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	2301      	movs	r3, #1
 80003d4:	408b      	lsls	r3, r1
 80003d6:	43db      	mvns	r3, r3
 80003d8:	401a      	ands	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	683a      	ldr	r2, [r7, #0]
 80003e4:	7992      	ldrb	r2, [r2, #6]
 80003e6:	4611      	mov	r1, r2
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	b292      	uxth	r2, r2
 80003ec:	fa01 f202 	lsl.w	r2, r1, r2
 80003f0:	b292      	uxth	r2, r2
 80003f2:	431a      	orrs	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	68da      	ldr	r2, [r3, #12]
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	b29b      	uxth	r3, r3
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	2103      	movs	r1, #3
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	68da      	ldr	r2, [r3, #12]
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	79db      	ldrb	r3, [r3, #7]
 8000418:	4619      	mov	r1, r3
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	431a      	orrs	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	3301      	adds	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	2b0f      	cmp	r3, #15
 8000432:	d985      	bls.n	8000340 <GPIO_Init+0x1c>
    }
  }
}
 8000434:	bf00      	nop
 8000436:	371c      	adds	r7, #28
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	887b      	ldrh	r3, [r7, #2]
 8000452:	405a      	eors	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	615a      	str	r2, [r3, #20]
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	460b      	mov	r3, r1
 800046e:	807b      	strh	r3, [r7, #2]
 8000470:	4613      	mov	r3, r2
 8000472:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000478:	2300      	movs	r3, #0
 800047a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800047c:	787a      	ldrb	r2, [r7, #1]
 800047e:	887b      	ldrh	r3, [r7, #2]
 8000480:	f003 0307 	and.w	r3, r3, #7
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	fa02 f303 	lsl.w	r3, r2, r3
 800048a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800048c:	887b      	ldrh	r3, [r7, #2]
 800048e:	08db      	lsrs	r3, r3, #3
 8000490:	b29b      	uxth	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3208      	adds	r2, #8
 8000498:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800049c:	887b      	ldrh	r3, [r7, #2]
 800049e:	f003 0307 	and.w	r3, r3, #7
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	210f      	movs	r1, #15
 80004a6:	fa01 f303 	lsl.w	r3, r1, r3
 80004aa:	43db      	mvns	r3, r3
 80004ac:	8879      	ldrh	r1, [r7, #2]
 80004ae:	08c9      	lsrs	r1, r1, #3
 80004b0:	b289      	uxth	r1, r1
 80004b2:	4608      	mov	r0, r1
 80004b4:	ea02 0103 	and.w	r1, r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f100 0208 	add.w	r2, r0, #8
 80004be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80004c2:	887b      	ldrh	r3, [r7, #2]
 80004c4:	08db      	lsrs	r3, r3, #3
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	461a      	mov	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3208      	adds	r2, #8
 80004ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004d8:	887b      	ldrh	r3, [r7, #2]
 80004da:	08db      	lsrs	r3, r3, #3
 80004dc:	b29b      	uxth	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3208      	adds	r2, #8
 80004e4:	68b9      	ldr	r1, [r7, #8]
 80004e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <RCC_DeInit+0x60>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a15      	ldr	r2, [pc, #84]	; (8000558 <RCC_DeInit+0x60>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <RCC_DeInit+0x60>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <RCC_DeInit+0x60>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <RCC_DeInit+0x60>)
 8000514:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000518:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800051c:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <RCC_DeInit+0x60>)
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <RCC_DeInit+0x64>)
 8000522:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <RCC_DeInit+0x60>)
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <RCC_DeInit+0x68>)
 8000528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <RCC_DeInit+0x60>)
 800052e:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <RCC_DeInit+0x6c>)
 8000530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <RCC_DeInit+0x60>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <RCC_DeInit+0x60>)
 800053a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <RCC_DeInit+0x60>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <RCC_DeInit+0x60>)
 8000548:	2200      	movs	r2, #0
 800054a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40023800 	.word	0x40023800
 800055c:	24003010 	.word	0x24003010
 8000560:	20003000 	.word	0x20003000
 8000564:	24003000 	.word	0x24003000

08000568 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000568:	b480      	push	{r7}
 800056a:	b08b      	sub	sp, #44	; 0x2c
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
 8000578:	2300      	movs	r3, #0
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
 800057c:	2302      	movs	r3, #2
 800057e:	61bb      	str	r3, [r7, #24]
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	2302      	movs	r3, #2
 8000586:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000588:	2302      	movs	r3, #2
 800058a:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800058c:	4b6f      	ldr	r3, [pc, #444]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f003 030c 	and.w	r3, r3, #12
 8000594:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000596:	6a3b      	ldr	r3, [r7, #32]
 8000598:	2b0c      	cmp	r3, #12
 800059a:	f200 8091 	bhi.w	80006c0 <RCC_GetClocksFreq+0x158>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <RCC_GetClocksFreq+0x3c>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005d9 	.word	0x080005d9
 80005a8:	080006c1 	.word	0x080006c1
 80005ac:	080006c1 	.word	0x080006c1
 80005b0:	080006c1 	.word	0x080006c1
 80005b4:	080005e1 	.word	0x080005e1
 80005b8:	080006c1 	.word	0x080006c1
 80005bc:	080006c1 	.word	0x080006c1
 80005c0:	080006c1 	.word	0x080006c1
 80005c4:	080005e9 	.word	0x080005e9
 80005c8:	080006c1 	.word	0x080006c1
 80005cc:	080006c1 	.word	0x080006c1
 80005d0:	080006c1 	.word	0x080006c1
 80005d4:	08000655 	.word	0x08000655
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a5d      	ldr	r2, [pc, #372]	; (8000750 <RCC_GetClocksFreq+0x1e8>)
 80005dc:	601a      	str	r2, [r3, #0]
    break;
 80005de:	e073      	b.n	80006c8 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a5c      	ldr	r2, [pc, #368]	; (8000754 <RCC_GetClocksFreq+0x1ec>)
 80005e4:	601a      	str	r2, [r3, #0]
    break;
 80005e6:	e06f      	b.n	80006c8 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005e8:	4b58      	ldr	r3, [pc, #352]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	0d9b      	lsrs	r3, r3, #22
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005f4:	4b55      	ldr	r3, [pc, #340]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005fc:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00c      	beq.n	800061e <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000604:	4a53      	ldr	r2, [pc, #332]	; (8000754 <RCC_GetClocksFreq+0x1ec>)
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	fbb2 f3f3 	udiv	r3, r2, r3
 800060c:	4a4f      	ldr	r2, [pc, #316]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 800060e:	6852      	ldr	r2, [r2, #4]
 8000610:	0992      	lsrs	r2, r2, #6
 8000612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
 800061c:	e00b      	b.n	8000636 <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800061e:	4a4c      	ldr	r2, [pc, #304]	; (8000750 <RCC_GetClocksFreq+0x1e8>)
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	4a49      	ldr	r2, [pc, #292]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 8000628:	6852      	ldr	r2, [r2, #4]
 800062a:	0992      	lsrs	r2, r2, #6
 800062c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000630:	fb02 f303 	mul.w	r3, r2, r3
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000636:	4b45      	ldr	r3, [pc, #276]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	f003 0303 	and.w	r3, r3, #3
 8000640:	3301      	adds	r3, #1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	fbb2 f2f3 	udiv	r2, r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	601a      	str	r2, [r3, #0]
    break;
 8000652:	e039      	b.n	80006c8 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000654:	4b3d      	ldr	r3, [pc, #244]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	0d9b      	lsrs	r3, r3, #22
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000660:	4b3a      	ldr	r3, [pc, #232]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000668:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00c      	beq.n	800068a <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000670:	4a38      	ldr	r2, [pc, #224]	; (8000754 <RCC_GetClocksFreq+0x1ec>)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	fbb2 f3f3 	udiv	r3, r2, r3
 8000678:	4a34      	ldr	r2, [pc, #208]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 800067a:	6852      	ldr	r2, [r2, #4]
 800067c:	0992      	lsrs	r2, r2, #6
 800067e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000682:	fb02 f303 	mul.w	r3, r2, r3
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
 8000688:	e00b      	b.n	80006a2 <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800068a:	4a31      	ldr	r2, [pc, #196]	; (8000750 <RCC_GetClocksFreq+0x1e8>)
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	4a2e      	ldr	r2, [pc, #184]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 8000694:	6852      	ldr	r2, [r2, #4]
 8000696:	0992      	lsrs	r2, r2, #6
 8000698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800069c:	fb02 f303 	mul.w	r3, r2, r3
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	0f1b      	lsrs	r3, r3, #28
 80006a8:	f003 0307 	and.w	r3, r3, #7
 80006ac:	3301      	adds	r3, #1
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 80006b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]
    break;
 80006be:	e003      	b.n	80006c8 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a23      	ldr	r2, [pc, #140]	; (8000750 <RCC_GetClocksFreq+0x1e8>)
 80006c4:	601a      	str	r2, [r3, #0]
    break;
 80006c6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006d0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	091b      	lsrs	r3, r3, #4
 80006d6:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006d8:	4a1f      	ldr	r2, [pc, #124]	; (8000758 <RCC_GetClocksFreq+0x1f0>)
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	40da      	lsrs	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80006f8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	0a9b      	lsrs	r3, r3, #10
 80006fe:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000700:	4a15      	ldr	r2, [pc, #84]	; (8000758 <RCC_GetClocksFreq+0x1f0>)
 8000702:	6a3b      	ldr	r3, [r7, #32]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	40da      	lsrs	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <RCC_GetClocksFreq+0x1e4>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000720:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	0b5b      	lsrs	r3, r3, #13
 8000726:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000728:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <RCC_GetClocksFreq+0x1f0>)
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	40da      	lsrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	60da      	str	r2, [r3, #12]
}
 8000740:	bf00      	nop
 8000742:	372c      	adds	r7, #44	; 0x2c
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	40023800 	.word	0x40023800
 8000750:	00f42400 	.word	0x00f42400
 8000754:	007a1200 	.word	0x007a1200
 8000758:	20000000 	.word	0x20000000

0800075c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d006      	beq.n	800077c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000772:	4909      	ldr	r1, [pc, #36]	; (8000798 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4313      	orrs	r3, r2
 8000778:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800077a:	e006      	b.n	800078a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <RCC_AHB1PeriphClockCmd+0x3c>)
 800077e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	43db      	mvns	r3, r3
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000786:	4013      	ands	r3, r2
 8000788:	630b      	str	r3, [r1, #48]	; 0x30
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d006      	beq.n	80007bc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80007b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80007ba:	e006      	b.n	80007ca <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80007be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	43db      	mvns	r3, r3
 80007c4:	4904      	ldr	r1, [pc, #16]	; (80007d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80007c6:	4013      	ands	r3, r2
 80007c8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d006      	beq.n	80007fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <RCC_APB2PeriphClockCmd+0x3c>)
 80007f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007f2:	4909      	ldr	r1, [pc, #36]	; (8000818 <RCC_APB2PeriphClockCmd+0x3c>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007fa:	e006      	b.n	800080a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <RCC_APB2PeriphClockCmd+0x3c>)
 80007fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	43db      	mvns	r3, r3
 8000804:	4904      	ldr	r1, [pc, #16]	; (8000818 <RCC_APB2PeriphClockCmd+0x3c>)
 8000806:	4013      	ands	r3, r2
 8000808:	644b      	str	r3, [r1, #68]	; 0x44
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	f003 0303 	and.w	r3, r3, #3
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	220f      	movs	r2, #15
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000840:	4a16      	ldr	r2, [pc, #88]	; (800089c <SYSCFG_EXTILineConfig+0x80>)
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	089b      	lsrs	r3, r3, #2
 8000846:	b2db      	uxtb	r3, r3
 8000848:	3302      	adds	r3, #2
 800084a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	43db      	mvns	r3, r3
 8000852:	4812      	ldr	r0, [pc, #72]	; (800089c <SYSCFG_EXTILineConfig+0x80>)
 8000854:	79b9      	ldrb	r1, [r7, #6]
 8000856:	0889      	lsrs	r1, r1, #2
 8000858:	b2c9      	uxtb	r1, r1
 800085a:	401a      	ands	r2, r3
 800085c:	1c8b      	adds	r3, r1, #2
 800085e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <SYSCFG_EXTILineConfig+0x80>)
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	b2db      	uxtb	r3, r3
 800086a:	3302      	adds	r3, #2
 800086c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000870:	79f9      	ldrb	r1, [r7, #7]
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	f003 0303 	and.w	r3, r3, #3
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	4807      	ldr	r0, [pc, #28]	; (800089c <SYSCFG_EXTILineConfig+0x80>)
 8000880:	79b9      	ldrb	r1, [r7, #6]
 8000882:	0889      	lsrs	r1, r1, #2
 8000884:	b2c9      	uxtb	r1, r1
 8000886:	431a      	orrs	r2, r3
 8000888:	1c8b      	adds	r3, r1, #2
 800088a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40013800 	.word	0x40013800

080008a0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	8a1b      	ldrh	r3, [r3, #16]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	88db      	ldrh	r3, [r3, #6]
 80008ce:	461a      	mov	r2, r3
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	4313      	orrs	r3, r2
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	b29a      	uxth	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	899b      	ldrh	r3, [r3, #12]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80008ec:	f023 030c 	bic.w	r3, r3, #12
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	889a      	ldrh	r2, [r3, #4]
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	891b      	ldrh	r3, [r3, #8]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000902:	4313      	orrs	r3, r2
 8000904:	b29b      	uxth	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	4313      	orrs	r3, r2
 800090c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	b29a      	uxth	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	8a9b      	ldrh	r3, [r3, #20]
 800091a:	b29b      	uxth	r3, r3
 800091c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000924:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	899b      	ldrh	r3, [r3, #12]
 800092a:	461a      	mov	r2, r3
 800092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092e:	4313      	orrs	r3, r2
 8000930:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	b29a      	uxth	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fe12 	bl	8000568 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a30      	ldr	r2, [pc, #192]	; (8000a08 <USART_Init+0x168>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d003      	beq.n	8000954 <USART_Init+0xb4>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a2f      	ldr	r2, [pc, #188]	; (8000a0c <USART_Init+0x16c>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d102      	bne.n	800095a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	623b      	str	r3, [r7, #32]
 8000958:	e001      	b.n	800095e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	899b      	ldrh	r3, [r3, #12]
 8000962:	b29b      	uxth	r3, r3
 8000964:	b21b      	sxth	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	da0c      	bge.n	8000984 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800096a:	6a3a      	ldr	r2, [r7, #32]
 800096c:	4613      	mov	r3, r2
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	009a      	lsls	r2, r3, #2
 8000974:	441a      	add	r2, r3
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000980:	61fb      	str	r3, [r7, #28]
 8000982:	e00b      	b.n	800099c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000984:	6a3a      	ldr	r2, [r7, #32]
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	009a      	lsls	r2, r3, #2
 800098e:	441a      	add	r2, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <USART_Init+0x170>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	095b      	lsrs	r3, r3, #5
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	091b      	lsrs	r3, r3, #4
 80009ae:	2264      	movs	r2, #100	; 0x64
 80009b0:	fb02 f303 	mul.w	r3, r2, r3
 80009b4:	69fa      	ldr	r2, [r7, #28]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	899b      	ldrh	r3, [r3, #12]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da0c      	bge.n	80009e0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	3332      	adds	r3, #50	; 0x32
 80009cc:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <USART_Init+0x170>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	f003 0307 	and.w	r3, r3, #7
 80009d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009da:	4313      	orrs	r3, r2
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
 80009de:	e00b      	b.n	80009f8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	011b      	lsls	r3, r3, #4
 80009e4:	3332      	adds	r3, #50	; 0x32
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <USART_Init+0x170>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	095b      	lsrs	r3, r3, #5
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f4:	4313      	orrs	r3, r2
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	811a      	strh	r2, [r3, #8]
}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40011000 	.word	0x40011000
 8000a0c:	40011400 	.word	0x40011400
 8000a10:	51eb851f 	.word	0x51eb851f

08000a14 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d008      	beq.n	8000a38 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	899b      	ldrh	r3, [r3, #12]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a36:	e007      	b.n	8000a48 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	899b      	ldrh	r3, [r3, #12]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	819a      	strh	r2, [r3, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	809a      	strh	r2, [r3, #4]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	887b      	ldrh	r3, [r7, #2]
 8000a90:	4013      	ands	r3, r2
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e001      	b.n	8000aa2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f103 0208 	add.w	r2, r3, #8
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f103 0208 	add.w	r2, r3, #8
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f103 0208 	add.w	r2, r3, #8
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	601a      	str	r2, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	6892      	ldr	r2, [r2, #8]
 8000b68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	6852      	ldr	r2, [r2, #4]
 8000b72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d103      	bne.n	8000b86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	1e5a      	subs	r2, r3, #1
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b08c      	sub	sp, #48	; 0x30
 8000baa:	af04      	add	r7, sp, #16
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 ff70 	bl	8001aa0 <pvPortMalloc>
 8000bc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00e      	beq.n	8000be6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000bc8:	2058      	movs	r0, #88	; 0x58
 8000bca:	f000 ff69 	bl	8001aa0 <pvPortMalloc>
 8000bce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	631a      	str	r2, [r3, #48]	; 0x30
 8000bdc:	e005      	b.n	8000bea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f001 f826 	bl	8001c30 <vPortFree>
 8000be4:	e001      	b.n	8000bea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d013      	beq.n	8000c18 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000bf0:	88fa      	ldrh	r2, [r7, #6]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	9303      	str	r3, [sp, #12]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	9302      	str	r3, [sp, #8]
 8000bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f000 f80e 	bl	8000c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000c0c:	69f8      	ldr	r0, [r7, #28]
 8000c0e:	f000 f899 	bl	8000d44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	e002      	b.n	8000c1e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	461a      	mov	r2, r3
 8000c40:	21a5      	movs	r1, #165	; 0xa5
 8000c42:	f003 f9bd 	bl	8003fc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c50:	3b01      	subs	r3, #1
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	f023 0307 	bic.w	r3, r3, #7
 8000c5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d009      	beq.n	8000c7e <prvInitialiseNewTask+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c6e:	f383 8811 	msr	BASEPRI, r3
 8000c72:	f3bf 8f6f 	isb	sy
 8000c76:	f3bf 8f4f 	dsb	sy
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e7fe      	b.n	8000c7c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d01f      	beq.n	8000cc4 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
 8000c88:	e012      	b.n	8000cb0 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	4413      	add	r3, r2
 8000c90:	7819      	ldrb	r1, [r3, #0]
 8000c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	4413      	add	r3, r2
 8000c98:	3334      	adds	r3, #52	; 0x34
 8000c9a:	460a      	mov	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3301      	adds	r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	2b09      	cmp	r3, #9
 8000cb4:	d9e9      	bls.n	8000c8a <prvInitialiseNewTask+0x62>
 8000cb6:	e000      	b.n	8000cba <prvInitialiseNewTask+0x92>
			{
				break;
 8000cb8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000cc2:	e003      	b.n	8000ccc <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	d901      	bls.n	8000cd6 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ce0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cea:	3304      	adds	r3, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff feff 	bl	8000af0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf4:	3318      	adds	r3, #24
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fefa 	bl	8000af0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d04:	f1c3 0205 	rsb	r2, r3, #5
 8000d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d14:	2200      	movs	r2, #0
 8000d16:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	68f9      	ldr	r1, [r7, #12]
 8000d24:	69b8      	ldr	r0, [r7, #24]
 8000d26:	f000 fc71 	bl	800160c <pxPortInitialiseStack>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000d4c:	f000 fd86 	bl	800185c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000d50:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <prvAddNewTaskToReadyList+0xfc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a3a      	ldr	r2, [pc, #232]	; (8000e40 <prvAddNewTaskToReadyList+0xfc>)
 8000d58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000d5a:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <prvAddNewTaskToReadyList+0x100>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d109      	bne.n	8000d76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000d62:	4a38      	ldr	r2, [pc, #224]	; (8000e44 <prvAddNewTaskToReadyList+0x100>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000d68:	4b35      	ldr	r3, [pc, #212]	; (8000e40 <prvAddNewTaskToReadyList+0xfc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d110      	bne.n	8000d92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000d70:	f000 fbb0 	bl	80014d4 <prvInitialiseTaskLists>
 8000d74:	e00d      	b.n	8000d92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000d76:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <prvAddNewTaskToReadyList+0x104>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d109      	bne.n	8000d92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000d7e:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <prvAddNewTaskToReadyList+0x100>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d802      	bhi.n	8000d92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000d8c:	4a2d      	ldr	r2, [pc, #180]	; (8000e44 <prvAddNewTaskToReadyList+0x100>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <prvAddNewTaskToReadyList+0x108>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	4a2c      	ldr	r2, [pc, #176]	; (8000e4c <prvAddNewTaskToReadyList+0x108>)
 8000d9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <prvAddNewTaskToReadyList+0x108>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d016      	beq.n	8000dd8 <prvAddNewTaskToReadyList+0x94>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 fa91 	bl	80032d4 <SEGGER_SYSVIEW_OnTaskCreate>
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	461c      	mov	r4, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	1ae3      	subs	r3, r4, r3
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	462b      	mov	r3, r5
 8000dd4:	f001 f8f0 	bl	8001fb8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 fb02 	bl	80033e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	2201      	movs	r2, #1
 8000de6:	409a      	lsls	r2, r3
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <prvAddNewTaskToReadyList+0x10c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <prvAddNewTaskToReadyList+0x10c>)
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <prvAddNewTaskToReadyList+0x110>)
 8000e00:	441a      	add	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3304      	adds	r3, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4610      	mov	r0, r2
 8000e0a:	f7ff fe7e 	bl	8000b0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000e0e:	f000 fd53 	bl	80018b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <prvAddNewTaskToReadyList+0x104>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00e      	beq.n	8000e38 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <prvAddNewTaskToReadyList+0x100>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <prvAddNewTaskToReadyList+0x114>)
 8000e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	f3bf 8f4f 	dsb	sy
 8000e34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e40:	2000011c 	.word	0x2000011c
 8000e44:	20000044 	.word	0x20000044
 8000e48:	20000128 	.word	0x20000128
 8000e4c:	20000138 	.word	0x20000138
 8000e50:	20000124 	.word	0x20000124
 8000e54:	20000048 	.word	0x20000048
 8000e58:	e000ed04 	.word	0xe000ed04

08000e5c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8000e64:	f000 fcfa 	bl	800185c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d102      	bne.n	8000e74 <uxTaskPriorityGet+0x18>
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <uxTaskPriorityGet+0x30>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	e000      	b.n	8000e76 <uxTaskPriorityGet+0x1a>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8000e7e:	f000 fd1b 	bl	80018b8 <vPortExitCritical>

		return uxReturn;
 8000e82:	68bb      	ldr	r3, [r7, #8]
	}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000044 	.word	0x20000044

08000e90 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	d909      	bls.n	8000eb8 <vTaskPrioritySet+0x28>
 8000ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea8:	f383 8811 	msr	BASEPRI, r3
 8000eac:	f3bf 8f6f 	isb	sy
 8000eb0:	f3bf 8f4f 	dsb	sy
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	e7fe      	b.n	8000eb6 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d901      	bls.n	8000ec2 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8000ec2:	f000 fccb 	bl	800185c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <vTaskPrioritySet+0x42>
 8000ecc:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <vTaskPrioritySet+0x170>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	e000      	b.n	8000ed4 <vTaskPrioritySet+0x44>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fac7 	bl	800346c <SEGGER_SYSVIEW_ShrinkId>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	2028      	movs	r0, #40	; 0x28
 8000ee6:	f001 fe3b 	bl	8002b60 <SEGGER_SYSVIEW_RecordU32x2>
 8000eea:	69b8      	ldr	r0, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2300      	movs	r3, #0
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	4613      	mov	r3, r2
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	f001 f8c2 	bl	8002088 <SYSVIEW_UpdateTask>

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f08:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d06f      	beq.n	8000ff2 <vTaskPrioritySet+0x162>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d90d      	bls.n	8000f36 <vTaskPrioritySet+0xa6>
				{
					if( pxTCB != pxCurrentTCB )
 8000f1a:	4b39      	ldr	r3, [pc, #228]	; (8001000 <vTaskPrioritySet+0x170>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d00f      	beq.n	8000f44 <vTaskPrioritySet+0xb4>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <vTaskPrioritySet+0x170>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d309      	bcc.n	8000f44 <vTaskPrioritySet+0xb4>
						{
							xYieldRequired = pdTRUE;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	e006      	b.n	8000f44 <vTaskPrioritySet+0xb4>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8000f36:	4b32      	ldr	r3, [pc, #200]	; (8001000 <vTaskPrioritySet+0x170>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d101      	bne.n	8000f44 <vTaskPrioritySet+0xb4>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d102      	bne.n	8000f5c <vTaskPrioritySet+0xcc>
					{
						pxTCB->uxPriority = uxNewPriority;
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db04      	blt.n	8000f74 <vTaskPrioritySet+0xe4>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	f1c3 0205 	rsb	r2, r3, #5
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6959      	ldr	r1, [r3, #20]
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4a20      	ldr	r2, [pc, #128]	; (8001004 <vTaskPrioritySet+0x174>)
 8000f84:	4413      	add	r3, r2
 8000f86:	4299      	cmp	r1, r3
 8000f88:	d128      	bne.n	8000fdc <vTaskPrioritySet+0x14c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fddf 	bl	8000b52 <uxListRemove>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d109      	bne.n	8000fae <vTaskPrioritySet+0x11e>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <vTaskPrioritySet+0x178>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <vTaskPrioritySet+0x178>)
 8000fac:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvReaddTaskToReadyList( pxTCB );
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <vTaskPrioritySet+0x178>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <vTaskPrioritySet+0x178>)
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <vTaskPrioritySet+0x174>)
 8000fce:	441a      	add	r2, r3
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	f7ff fd97 	bl	8000b0a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <vTaskPrioritySet+0x162>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <vTaskPrioritySet+0x17c>)
 8000fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	f3bf 8f4f 	dsb	sy
 8000fee:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8000ff2:	f000 fc61 	bl	80018b8 <vPortExitCritical>
	}
 8000ff6:	bf00      	nop
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000044 	.word	0x20000044
 8001004:	20000048 	.word	0x20000048
 8001008:	20000124 	.word	0x20000124
 800100c:	e000ed04 	.word	0xe000ed04

08001010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <vTaskStartScheduler+0x90>)
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	2300      	movs	r3, #0
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2300      	movs	r3, #0
 8001020:	2282      	movs	r2, #130	; 0x82
 8001022:	4920      	ldr	r1, [pc, #128]	; (80010a4 <vTaskStartScheduler+0x94>)
 8001024:	4820      	ldr	r0, [pc, #128]	; (80010a8 <vTaskStartScheduler+0x98>)
 8001026:	f7ff fdbe 	bl	8000ba6 <xTaskCreate>
 800102a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d123      	bne.n	800107a <vTaskStartScheduler+0x6a>
 8001032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001036:	f383 8811 	msr	BASEPRI, r3
 800103a:	f3bf 8f6f 	isb	sy
 800103e:	f3bf 8f4f 	dsb	sy
 8001042:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <vTaskStartScheduler+0x9c>)
 8001046:	f04f 32ff 	mov.w	r2, #4294967295
 800104a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <vTaskStartScheduler+0xa0>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <vTaskStartScheduler+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <vTaskStartScheduler+0xa8>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <vTaskStartScheduler+0x90>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d102      	bne.n	800106a <vTaskStartScheduler+0x5a>
 8001064:	f002 f91a 	bl	800329c <SEGGER_SYSVIEW_OnIdle>
 8001068:	e004      	b.n	8001074 <vTaskStartScheduler+0x64>
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <vTaskStartScheduler+0xa8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f002 f974 	bl	800335c <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001074:	f000 fb54 	bl	8001720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001078:	e00d      	b.n	8001096 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d109      	bne.n	8001096 <vTaskStartScheduler+0x86>
 8001082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001086:	f383 8811 	msr	BASEPRI, r3
 800108a:	f3bf 8f6f 	isb	sy
 800108e:	f3bf 8f4f 	dsb	sy
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	e7fe      	b.n	8001094 <vTaskStartScheduler+0x84>
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000140 	.word	0x20000140
 80010a4:	08003fe8 	.word	0x08003fe8
 80010a8:	080014a5 	.word	0x080014a5
 80010ac:	2000013c 	.word	0x2000013c
 80010b0:	20000128 	.word	0x20000128
 80010b4:	20000120 	.word	0x20000120
 80010b8:	20000044 	.word	0x20000044

080010bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <vTaskSuspendAll+0x18>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <vTaskSuspendAll+0x18>)
 80010c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20000144 	.word	0x20000144

080010d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80010e6:	4b43      	ldr	r3, [pc, #268]	; (80011f4 <xTaskResumeAll+0x11c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <xTaskResumeAll+0x2a>
 80010ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010f2:	f383 8811 	msr	BASEPRI, r3
 80010f6:	f3bf 8f6f 	isb	sy
 80010fa:	f3bf 8f4f 	dsb	sy
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	e7fe      	b.n	8001100 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001102:	f000 fbab 	bl	800185c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <xTaskResumeAll+0x11c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3b01      	subs	r3, #1
 800110c:	4a39      	ldr	r2, [pc, #228]	; (80011f4 <xTaskResumeAll+0x11c>)
 800110e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001110:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <xTaskResumeAll+0x11c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d165      	bne.n	80011e4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001118:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <xTaskResumeAll+0x120>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d061      	beq.n	80011e4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001120:	e032      	b.n	8001188 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001122:	4b36      	ldr	r3, [pc, #216]	; (80011fc <xTaskResumeAll+0x124>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3318      	adds	r3, #24
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fd0f 	bl	8000b52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3304      	adds	r3, #4
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fd0a 	bl	8000b52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4618      	mov	r0, r3
 8001142:	f002 f94f 	bl	80033e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	2201      	movs	r2, #1
 800114c:	409a      	lsls	r2, r3
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <xTaskResumeAll+0x128>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4313      	orrs	r3, r2
 8001154:	4a2a      	ldr	r2, [pc, #168]	; (8001200 <xTaskResumeAll+0x128>)
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <xTaskResumeAll+0x12c>)
 8001166:	441a      	add	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3304      	adds	r3, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f7ff fccb 	bl	8000b0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <xTaskResumeAll+0x130>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117e:	429a      	cmp	r2, r3
 8001180:	d302      	bcc.n	8001188 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <xTaskResumeAll+0x134>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <xTaskResumeAll+0x124>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1c8      	bne.n	8001122 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001196:	f000 fa19 	bl	80015cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <xTaskResumeAll+0x138>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d010      	beq.n	80011c8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80011a6:	f000 f859 	bl	800125c <xTaskIncrementTick>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <xTaskResumeAll+0x134>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f1      	bne.n	80011a6 <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <xTaskResumeAll+0x138>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <xTaskResumeAll+0x134>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <xTaskResumeAll+0x13c>)
 80011d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	f3bf 8f4f 	dsb	sy
 80011e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80011e4:	f000 fb68 	bl	80018b8 <vPortExitCritical>

	return xAlreadyYielded;
 80011e8:	68bb      	ldr	r3, [r7, #8]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000144 	.word	0x20000144
 80011f8:	2000011c 	.word	0x2000011c
 80011fc:	200000dc 	.word	0x200000dc
 8001200:	20000124 	.word	0x20000124
 8001204:	20000048 	.word	0x20000048
 8001208:	20000044 	.word	0x20000044
 800120c:	20000130 	.word	0x20000130
 8001210:	2000012c 	.word	0x2000012c
 8001214:	e000ed04 	.word	0xe000ed04

08001218 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <xTaskGetTickCount+0x1c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001224:	687b      	ldr	r3, [r7, #4]
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000120 	.word	0x20000120

08001238 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800123e:	f000 fbf1 	bl	8001a24 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <xTaskGetTickCountFromISR+0x20>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800124c:	683b      	ldr	r3, [r7, #0]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000120 	.word	0x20000120

0800125c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001266:	4b50      	ldr	r3, [pc, #320]	; (80013a8 <xTaskIncrementTick+0x14c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 8091 	bne.w	8001392 <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001270:	4b4e      	ldr	r3, [pc, #312]	; (80013ac <xTaskIncrementTick+0x150>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001278:	4a4c      	ldr	r2, [pc, #304]	; (80013ac <xTaskIncrementTick+0x150>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11f      	bne.n	80012c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <xTaskIncrementTick+0x154>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d009      	beq.n	80012a2 <xTaskIncrementTick+0x46>
 800128e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001292:	f383 8811 	msr	BASEPRI, r3
 8001296:	f3bf 8f6f 	isb	sy
 800129a:	f3bf 8f4f 	dsb	sy
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	e7fe      	b.n	80012a0 <xTaskIncrementTick+0x44>
 80012a2:	4b43      	ldr	r3, [pc, #268]	; (80013b0 <xTaskIncrementTick+0x154>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <xTaskIncrementTick+0x158>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a40      	ldr	r2, [pc, #256]	; (80013b0 <xTaskIncrementTick+0x154>)
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4a40      	ldr	r2, [pc, #256]	; (80013b4 <xTaskIncrementTick+0x158>)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <xTaskIncrementTick+0x15c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a3e      	ldr	r2, [pc, #248]	; (80013b8 <xTaskIncrementTick+0x15c>)
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	f000 f984 	bl	80015cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80012c4:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <xTaskIncrementTick+0x160>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d34c      	bcc.n	8001368 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <xTaskIncrementTick+0x154>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d104      	bne.n	80012e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012d8:	4b38      	ldr	r3, [pc, #224]	; (80013bc <xTaskIncrementTick+0x160>)
 80012da:	f04f 32ff 	mov.w	r2, #4294967295
 80012de:	601a      	str	r2, [r3, #0]
					break;
 80012e0:	e042      	b.n	8001368 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <xTaskIncrementTick+0x154>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d203      	bcs.n	8001302 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80012fa:	4a30      	ldr	r2, [pc, #192]	; (80013bc <xTaskIncrementTick+0x160>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001300:	e032      	b.n	8001368 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3304      	adds	r3, #4
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fc23 	bl	8000b52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	3318      	adds	r3, #24
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fc1a 	bl	8000b52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	4618      	mov	r0, r3
 8001322:	f002 f85f 	bl	80033e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	2201      	movs	r2, #1
 800132c:	409a      	lsls	r2, r3
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <xTaskIncrementTick+0x164>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4313      	orrs	r3, r2
 8001334:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <xTaskIncrementTick+0x164>)
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <xTaskIncrementTick+0x168>)
 8001346:	441a      	add	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3304      	adds	r3, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f7ff fbdb 	bl	8000b0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <xTaskIncrementTick+0x16c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135e:	429a      	cmp	r2, r3
 8001360:	d3b5      	bcc.n	80012ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001362:	2301      	movs	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001366:	e7b2      	b.n	80012ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <xTaskIncrementTick+0x16c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136e:	4915      	ldr	r1, [pc, #84]	; (80013c4 <xTaskIncrementTick+0x168>)
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d901      	bls.n	8001384 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8001380:	2301      	movs	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <xTaskIncrementTick+0x170>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 800138c:	2301      	movs	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e004      	b.n	800139c <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <xTaskIncrementTick+0x174>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <xTaskIncrementTick+0x174>)
 800139a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800139c:	697b      	ldr	r3, [r7, #20]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000144 	.word	0x20000144
 80013ac:	20000120 	.word	0x20000120
 80013b0:	200000d4 	.word	0x200000d4
 80013b4:	200000d8 	.word	0x200000d8
 80013b8:	20000134 	.word	0x20000134
 80013bc:	2000013c 	.word	0x2000013c
 80013c0:	20000124 	.word	0x20000124
 80013c4:	20000048 	.word	0x20000048
 80013c8:	20000044 	.word	0x20000044
 80013cc:	20000130 	.word	0x20000130
 80013d0:	2000012c 	.word	0x2000012c

080013d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <vTaskSwitchContext+0xb8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <vTaskSwitchContext+0xbc>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80013e8:	e04c      	b.n	8001484 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 80013ea:	4b29      	ldr	r3, [pc, #164]	; (8001490 <vTaskSwitchContext+0xbc>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <vTaskSwitchContext+0xc0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	fab3 f383 	clz	r3, r3
 80013fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80013fe:	7afb      	ldrb	r3, [r7, #11]
 8001400:	f1c3 031f 	rsb	r3, r3, #31
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	4924      	ldr	r1, [pc, #144]	; (8001498 <vTaskSwitchContext+0xc4>)
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <vTaskSwitchContext+0x5a>
	__asm volatile
 800141a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800141e:	f383 8811 	msr	BASEPRI, r3
 8001422:	f3bf 8f6f 	isb	sy
 8001426:	f3bf 8f4f 	dsb	sy
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	e7fe      	b.n	800142c <vTaskSwitchContext+0x58>
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4a17      	ldr	r2, [pc, #92]	; (8001498 <vTaskSwitchContext+0xc4>)
 800143a:	4413      	add	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	3308      	adds	r3, #8
 8001450:	429a      	cmp	r2, r3
 8001452:	d104      	bne.n	800145e <vTaskSwitchContext+0x8a>
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <vTaskSwitchContext+0xc8>)
 8001466:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <vTaskSwitchContext+0xc8>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <vTaskSwitchContext+0xcc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d102      	bne.n	800147a <vTaskSwitchContext+0xa6>
 8001474:	f001 ff12 	bl	800329c <SEGGER_SYSVIEW_OnIdle>
}
 8001478:	e004      	b.n	8001484 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <vTaskSwitchContext+0xc8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f001 ff6c 	bl	800335c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000144 	.word	0x20000144
 8001490:	20000130 	.word	0x20000130
 8001494:	20000124 	.word	0x20000124
 8001498:	20000048 	.word	0x20000048
 800149c:	20000044 	.word	0x20000044
 80014a0:	20000140 	.word	0x20000140

080014a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80014ac:	f000 f852 	bl	8001554 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <prvIdleTask+0x28>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d9f9      	bls.n	80014ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <prvIdleTask+0x2c>)
 80014ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f3bf 8f4f 	dsb	sy
 80014c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80014c8:	e7f0      	b.n	80014ac <prvIdleTask+0x8>
 80014ca:	bf00      	nop
 80014cc:	20000048 	.word	0x20000048
 80014d0:	e000ed04 	.word	0xe000ed04

080014d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	e00c      	b.n	80014fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <prvInitialiseTaskLists+0x60>)
 80014ec:	4413      	add	r3, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fade 	bl	8000ab0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3301      	adds	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d9ef      	bls.n	80014e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <prvInitialiseTaskLists+0x64>)
 8001502:	f7ff fad5 	bl	8000ab0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001506:	480d      	ldr	r0, [pc, #52]	; (800153c <prvInitialiseTaskLists+0x68>)
 8001508:	f7ff fad2 	bl	8000ab0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <prvInitialiseTaskLists+0x6c>)
 800150e:	f7ff facf 	bl	8000ab0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001512:	480c      	ldr	r0, [pc, #48]	; (8001544 <prvInitialiseTaskLists+0x70>)
 8001514:	f7ff facc 	bl	8000ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <prvInitialiseTaskLists+0x74>)
 800151a:	f7ff fac9 	bl	8000ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <prvInitialiseTaskLists+0x78>)
 8001520:	4a05      	ldr	r2, [pc, #20]	; (8001538 <prvInitialiseTaskLists+0x64>)
 8001522:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <prvInitialiseTaskLists+0x7c>)
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <prvInitialiseTaskLists+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000048 	.word	0x20000048
 8001538:	200000ac 	.word	0x200000ac
 800153c:	200000c0 	.word	0x200000c0
 8001540:	200000dc 	.word	0x200000dc
 8001544:	200000f0 	.word	0x200000f0
 8001548:	20000108 	.word	0x20000108
 800154c:	200000d4 	.word	0x200000d4
 8001550:	200000d8 	.word	0x200000d8

08001554 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800155a:	e019      	b.n	8001590 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800155c:	f000 f97e 	bl	800185c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <prvCheckTasksWaitingTermination+0x4c>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3304      	adds	r3, #4
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff faf0 	bl	8000b52 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <prvCheckTasksWaitingTermination+0x50>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3b01      	subs	r3, #1
 8001578:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <prvCheckTasksWaitingTermination+0x50>)
 800157a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <prvCheckTasksWaitingTermination+0x54>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <prvCheckTasksWaitingTermination+0x54>)
 8001584:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001586:	f000 f997 	bl	80018b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f80e 	bl	80015ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <prvCheckTasksWaitingTermination+0x54>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e1      	bne.n	800155c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200000f0 	.word	0x200000f0
 80015a4:	2000011c 	.word	0x2000011c
 80015a8:	20000104 	.word	0x20000104

080015ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fb39 	bl	8001c30 <vPortFree>
			vPortFree( pxTCB );
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fb36 	bl	8001c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <prvResetNextTaskUnblockTime+0x38>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d104      	bne.n	80015e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <prvResetNextTaskUnblockTime+0x3c>)
 80015de:	f04f 32ff 	mov.w	r2, #4294967295
 80015e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80015e4:	e008      	b.n	80015f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <prvResetNextTaskUnblockTime+0x38>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <prvResetNextTaskUnblockTime+0x3c>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	200000d4 	.word	0x200000d4
 8001608:	2000013c 	.word	0x2000013c

0800160c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3b04      	subs	r3, #4
 800161c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3b04      	subs	r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f023 0201 	bic.w	r2, r3, #1
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3b04      	subs	r3, #4
 800163a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800163c:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <pxPortInitialiseStack+0x64>)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3b14      	subs	r3, #20
 8001646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3b04      	subs	r3, #4
 8001652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f06f 0202 	mvn.w	r2, #2
 800165a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3b20      	subs	r3, #32
 8001660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	08001675 	.word	0x08001675

08001674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <prvTaskExitError+0x50>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001686:	d009      	beq.n	800169c <prvTaskExitError+0x28>
 8001688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800168c:	f383 8811 	msr	BASEPRI, r3
 8001690:	f3bf 8f6f 	isb	sy
 8001694:	f3bf 8f4f 	dsb	sy
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e7fe      	b.n	800169a <prvTaskExitError+0x26>
 800169c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a0:	f383 8811 	msr	BASEPRI, r3
 80016a4:	f3bf 8f6f 	isb	sy
 80016a8:	f3bf 8f4f 	dsb	sy
 80016ac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80016ae:	bf00      	nop
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0fc      	beq.n	80016b0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000010 	.word	0x20000010
	...

080016d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <pxCurrentTCBConst2>)
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	6808      	ldr	r0, [r1, #0]
 80016d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016da:	f380 8809 	msr	PSP, r0
 80016de:	f3bf 8f6f 	isb	sy
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f380 8811 	msr	BASEPRI, r0
 80016ea:	4770      	bx	lr
 80016ec:	f3af 8000 	nop.w

080016f0 <pxCurrentTCBConst2>:
 80016f0:	20000044 	.word	0x20000044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop

080016f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <prvPortStartFirstTask+0x24>)
 80016fa:	6800      	ldr	r0, [r0, #0]
 80016fc:	6800      	ldr	r0, [r0, #0]
 80016fe:	f380 8808 	msr	MSP, r0
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f380 8814 	msr	CONTROL, r0
 800170a:	b662      	cpsie	i
 800170c:	b661      	cpsie	f
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	f3bf 8f6f 	isb	sy
 8001716:	df00      	svc	0
 8001718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800171a:	bf00      	nop
 800171c:	e000ed08 	.word	0xe000ed08

08001720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001726:	4b44      	ldr	r3, [pc, #272]	; (8001838 <xPortStartScheduler+0x118>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a44      	ldr	r2, [pc, #272]	; (800183c <xPortStartScheduler+0x11c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d109      	bne.n	8001744 <xPortStartScheduler+0x24>
 8001730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001734:	f383 8811 	msr	BASEPRI, r3
 8001738:	f3bf 8f6f 	isb	sy
 800173c:	f3bf 8f4f 	dsb	sy
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	e7fe      	b.n	8001742 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001744:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <xPortStartScheduler+0x118>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a3d      	ldr	r2, [pc, #244]	; (8001840 <xPortStartScheduler+0x120>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d109      	bne.n	8001762 <xPortStartScheduler+0x42>
 800174e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001752:	f383 8811 	msr	BASEPRI, r3
 8001756:	f3bf 8f6f 	isb	sy
 800175a:	f3bf 8f4f 	dsb	sy
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	e7fe      	b.n	8001760 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001762:	4b38      	ldr	r3, [pc, #224]	; (8001844 <xPortStartScheduler+0x124>)
 8001764:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	22ff      	movs	r2, #255	; 0xff
 8001772:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <xPortStartScheduler+0x128>)
 8001788:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <xPortStartScheduler+0x12c>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001790:	e009      	b.n	80017a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001792:	4b2e      	ldr	r3, [pc, #184]	; (800184c <xPortStartScheduler+0x12c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3b01      	subs	r3, #1
 8001798:	4a2c      	ldr	r2, [pc, #176]	; (800184c <xPortStartScheduler+0x12c>)
 800179a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ae:	2b80      	cmp	r3, #128	; 0x80
 80017b0:	d0ef      	beq.n	8001792 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <xPortStartScheduler+0x12c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d009      	beq.n	80017d2 <xPortStartScheduler+0xb2>
 80017be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c2:	f383 8811 	msr	BASEPRI, r3
 80017c6:	f3bf 8f6f 	isb	sy
 80017ca:	f3bf 8f4f 	dsb	sy
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	e7fe      	b.n	80017d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	; (800184c <xPortStartScheduler+0x12c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	4a1c      	ldr	r2, [pc, #112]	; (800184c <xPortStartScheduler+0x12c>)
 80017da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <xPortStartScheduler+0x12c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017e4:	4a19      	ldr	r2, [pc, #100]	; (800184c <xPortStartScheduler+0x12c>)
 80017e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80017f0:	4b17      	ldr	r3, [pc, #92]	; (8001850 <xPortStartScheduler+0x130>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a16      	ldr	r2, [pc, #88]	; (8001850 <xPortStartScheduler+0x130>)
 80017f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <xPortStartScheduler+0x130>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a13      	ldr	r2, [pc, #76]	; (8001850 <xPortStartScheduler+0x130>)
 8001802:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001806:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001808:	f000 f8de 	bl	80019c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <xPortStartScheduler+0x134>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001812:	f000 f8fd 	bl	8001a10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <xPortStartScheduler+0x138>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <xPortStartScheduler+0x138>)
 800181c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001820:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001822:	f7ff ff69 	bl	80016f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001826:	f7ff fdd5 	bl	80013d4 <vTaskSwitchContext>
	prvTaskExitError();
 800182a:	f7ff ff23 	bl	8001674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	e000ed00 	.word	0xe000ed00
 800183c:	410fc271 	.word	0x410fc271
 8001840:	410fc270 	.word	0x410fc270
 8001844:	e000e400 	.word	0xe000e400
 8001848:	20000148 	.word	0x20000148
 800184c:	2000014c 	.word	0x2000014c
 8001850:	e000ed20 	.word	0xe000ed20
 8001854:	20000010 	.word	0x20000010
 8001858:	e000ef34 	.word	0xe000ef34

0800185c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001866:	f383 8811 	msr	BASEPRI, r3
 800186a:	f3bf 8f6f 	isb	sy
 800186e:	f3bf 8f4f 	dsb	sy
 8001872:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <vPortEnterCritical+0x54>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <vPortEnterCritical+0x54>)
 800187c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <vPortEnterCritical+0x54>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10e      	bne.n	80018a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <vPortEnterCritical+0x58>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d009      	beq.n	80018a4 <vPortEnterCritical+0x48>
 8001890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001894:	f383 8811 	msr	BASEPRI, r3
 8001898:	f3bf 8f6f 	isb	sy
 800189c:	f3bf 8f4f 	dsb	sy
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	e7fe      	b.n	80018a2 <vPortEnterCritical+0x46>
	}
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	20000010 	.word	0x20000010
 80018b4:	e000ed04 	.word	0xe000ed04

080018b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <vPortExitCritical+0x4c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <vPortExitCritical+0x22>
 80018c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ca:	f383 8811 	msr	BASEPRI, r3
 80018ce:	f3bf 8f6f 	isb	sy
 80018d2:	f3bf 8f4f 	dsb	sy
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	e7fe      	b.n	80018d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <vPortExitCritical+0x4c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3b01      	subs	r3, #1
 80018e0:	4a08      	ldr	r2, [pc, #32]	; (8001904 <vPortExitCritical+0x4c>)
 80018e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <vPortExitCritical+0x4c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d104      	bne.n	80018f6 <vPortExitCritical+0x3e>
 80018ec:	2300      	movs	r3, #0
 80018ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000010 	.word	0x20000010
	...

08001910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001910:	f3ef 8009 	mrs	r0, PSP
 8001914:	f3bf 8f6f 	isb	sy
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <pxCurrentTCBConst>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f01e 0f10 	tst.w	lr, #16
 8001920:	bf08      	it	eq
 8001922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800192a:	6010      	str	r0, [r2, #0]
 800192c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001934:	f380 8811 	msr	BASEPRI, r0
 8001938:	f3bf 8f4f 	dsb	sy
 800193c:	f3bf 8f6f 	isb	sy
 8001940:	f7ff fd48 	bl	80013d4 <vTaskSwitchContext>
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	f380 8811 	msr	BASEPRI, r0
 800194c:	bc09      	pop	{r0, r3}
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	6808      	ldr	r0, [r1, #0]
 8001952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001956:	f01e 0f10 	tst.w	lr, #16
 800195a:	bf08      	it	eq
 800195c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001960:	f380 8809 	msr	PSP, r0
 8001964:	f3bf 8f6f 	isb	sy
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	f3af 8000 	nop.w

08001970 <pxCurrentTCBConst>:
 8001970:	20000044 	.word	0x20000044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop

08001978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
	__asm volatile
 800197e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001982:	f383 8811 	msr	BASEPRI, r3
 8001986:	f3bf 8f6f 	isb	sy
 800198a:	f3bf 8f4f 	dsb	sy
 800198e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8001990:	f001 fc0a 	bl	80031a8 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001994:	f7ff fc62 	bl	800125c <xTaskIncrementTick>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800199e:	f001 fc61 	bl	8003264 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <SysTick_Handler+0x4c>)
 80019a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e001      	b.n	80019b0 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 80019ac:	f001 fc3e 	bl	800322c <SEGGER_SYSVIEW_RecordExitISR>
 80019b0:	2300      	movs	r3, #0
 80019b2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000ed04 	.word	0xe000ed04

080019c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <vPortSetupTimerInterrupt+0x34>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <vPortSetupTimerInterrupt+0x38>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <vPortSetupTimerInterrupt+0x3c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <vPortSetupTimerInterrupt+0x40>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	099b      	lsrs	r3, r3, #6
 80019e4:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <vPortSetupTimerInterrupt+0x44>)
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <vPortSetupTimerInterrupt+0x34>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010
 8001a00:	e000e018 	.word	0xe000e018
 8001a04:	20000014 	.word	0x20000014
 8001a08:	10624dd3 	.word	0x10624dd3
 8001a0c:	e000e014 	.word	0xe000e014

08001a10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001a10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001a20 <vPortEnableVFP+0x10>
 8001a14:	6801      	ldr	r1, [r0, #0]
 8001a16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001a1a:	6001      	str	r1, [r0, #0]
 8001a1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001a1e:	bf00      	nop
 8001a20:	e000ed88 	.word	0xe000ed88

08001a24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001a2a:	f3ef 8305 	mrs	r3, IPSR
 8001a2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	d913      	bls.n	8001a5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001a36:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <vPortValidateInterruptPriority+0x6c>)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <vPortValidateInterruptPriority+0x70>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	7afa      	ldrb	r2, [r7, #11]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d209      	bcs.n	8001a5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4e:	f383 8811 	msr	BASEPRI, r3
 8001a52:	f3bf 8f6f 	isb	sy
 8001a56:	f3bf 8f4f 	dsb	sy
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	e7fe      	b.n	8001a5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <vPortValidateInterruptPriority+0x74>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <vPortValidateInterruptPriority+0x78>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d909      	bls.n	8001a82 <vPortValidateInterruptPriority+0x5e>
 8001a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a72:	f383 8811 	msr	BASEPRI, r3
 8001a76:	f3bf 8f6f 	isb	sy
 8001a7a:	f3bf 8f4f 	dsb	sy
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	e7fe      	b.n	8001a80 <vPortValidateInterruptPriority+0x5c>
	}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e3f0 	.word	0xe000e3f0
 8001a94:	20000148 	.word	0x20000148
 8001a98:	e000ed0c 	.word	0xe000ed0c
 8001a9c:	2000014c 	.word	0x2000014c

08001aa0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001aac:	f7ff fb06 	bl	80010bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001ab0:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <pvPortMalloc+0x178>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001ab8:	f000 f91a 	bl	8001cf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001abc:	4b57      	ldr	r3, [pc, #348]	; (8001c1c <pvPortMalloc+0x17c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 8091 	bne.w	8001bec <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01c      	beq.n	8001b0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d013      	beq.n	8001b0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f023 0307 	bic.w	r3, r3, #7
 8001ae8:	3308      	adds	r3, #8
 8001aea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <pvPortMalloc+0x6a>
 8001af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afa:	f383 8811 	msr	BASEPRI, r3
 8001afe:	f3bf 8f6f 	isb	sy
 8001b02:	f3bf 8f4f 	dsb	sy
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e7fe      	b.n	8001b08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d06d      	beq.n	8001bec <pvPortMalloc+0x14c>
 8001b10:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <pvPortMalloc+0x180>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d868      	bhi.n	8001bec <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001b1a:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <pvPortMalloc+0x184>)
 8001b1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <pvPortMalloc+0x184>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b24:	e004      	b.n	8001b30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d903      	bls.n	8001b42 <pvPortMalloc+0xa2>
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f1      	bne.n	8001b26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001b42:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <pvPortMalloc+0x178>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d04f      	beq.n	8001bec <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2208      	movs	r2, #8
 8001b52:	4413      	add	r3, r2
 8001b54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	1ad2      	subs	r2, r2, r3
 8001b66:	2308      	movs	r3, #8
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d91e      	bls.n	8001bac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d009      	beq.n	8001b94 <pvPortMalloc+0xf4>
 8001b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b84:	f383 8811 	msr	BASEPRI, r3
 8001b88:	f3bf 8f6f 	isb	sy
 8001b8c:	f3bf 8f4f 	dsb	sy
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	e7fe      	b.n	8001b92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	1ad2      	subs	r2, r2, r3
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001ba6:	69b8      	ldr	r0, [r7, #24]
 8001ba8:	f000 f904 	bl	8001db4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001bac:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <pvPortMalloc+0x180>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <pvPortMalloc+0x180>)
 8001bb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <pvPortMalloc+0x180>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <pvPortMalloc+0x188>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d203      	bcs.n	8001bce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <pvPortMalloc+0x180>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <pvPortMalloc+0x188>)
 8001bcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <pvPortMalloc+0x17c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <pvPortMalloc+0x18c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <pvPortMalloc+0x18c>)
 8001bea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001bec:	f7ff fa74 	bl	80010d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <pvPortMalloc+0x16e>
 8001bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfe:	f383 8811 	msr	BASEPRI, r3
 8001c02:	f3bf 8f6f 	isb	sy
 8001c06:	f3bf 8f4f 	dsb	sy
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e7fe      	b.n	8001c0c <pvPortMalloc+0x16c>
	return pvReturn;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3728      	adds	r7, #40	; 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20012d58 	.word	0x20012d58
 8001c1c:	20012d6c 	.word	0x20012d6c
 8001c20:	20012d5c 	.word	0x20012d5c
 8001c24:	20012d50 	.word	0x20012d50
 8001c28:	20012d60 	.word	0x20012d60
 8001c2c:	20012d64 	.word	0x20012d64

08001c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d04b      	beq.n	8001cda <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001c42:	2308      	movs	r3, #8
 8001c44:	425b      	negs	r3, r3
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4413      	add	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <vPortFree+0xb4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <vPortFree+0x42>
 8001c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c62:	f383 8811 	msr	BASEPRI, r3
 8001c66:	f3bf 8f6f 	isb	sy
 8001c6a:	f3bf 8f4f 	dsb	sy
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e7fe      	b.n	8001c70 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <vPortFree+0x5e>
 8001c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7e:	f383 8811 	msr	BASEPRI, r3
 8001c82:	f3bf 8f6f 	isb	sy
 8001c86:	f3bf 8f4f 	dsb	sy
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	e7fe      	b.n	8001c8c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <vPortFree+0xb4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01e      	beq.n	8001cda <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d11a      	bne.n	8001cda <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <vPortFree+0xb4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001cb4:	f7ff fa02 	bl	80010bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <vPortFree+0xb8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <vPortFree+0xb8>)
 8001cc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001cc6:	6938      	ldr	r0, [r7, #16]
 8001cc8:	f000 f874 	bl	8001db4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <vPortFree+0xbc>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	4a06      	ldr	r2, [pc, #24]	; (8001cec <vPortFree+0xbc>)
 8001cd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8001cd6:	f7ff f9ff 	bl	80010d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20012d6c 	.word	0x20012d6c
 8001ce8:	20012d5c 	.word	0x20012d5c
 8001cec:	20012d68 	.word	0x20012d68

08001cf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001cf6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001cfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <prvHeapInit+0xac>)
 8001cfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00c      	beq.n	8001d24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3307      	adds	r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f023 0307 	bic.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	4a1f      	ldr	r2, [pc, #124]	; (8001d9c <prvHeapInit+0xac>)
 8001d20:	4413      	add	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <prvHeapInit+0xb0>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <prvHeapInit+0xb0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	4413      	add	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 0307 	bic.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <prvHeapInit+0xb4>)
 8001d50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <prvHeapInit+0xb4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <prvHeapInit+0xb4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	1ad2      	subs	r2, r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <prvHeapInit+0xb4>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <prvHeapInit+0xb8>)
 8001d7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4a09      	ldr	r2, [pc, #36]	; (8001dac <prvHeapInit+0xbc>)
 8001d86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <prvHeapInit+0xc0>)
 8001d8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d8e:	601a      	str	r2, [r3, #0]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	20000150 	.word	0x20000150
 8001da0:	20012d50 	.word	0x20012d50
 8001da4:	20012d58 	.word	0x20012d58
 8001da8:	20012d60 	.word	0x20012d60
 8001dac:	20012d5c 	.word	0x20012d5c
 8001db0:	20012d6c 	.word	0x20012d6c

08001db4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <prvInsertBlockIntoFreeList+0xac>)
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e002      	b.n	8001dc8 <prvInsertBlockIntoFreeList+0x14>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d8f7      	bhi.n	8001dc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	4413      	add	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d108      	bne.n	8001df6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	441a      	add	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	441a      	add	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d118      	bne.n	8001e3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <prvInsertBlockIntoFreeList+0xb0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d00d      	beq.n	8001e32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	441a      	add	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e008      	b.n	8001e44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <prvInsertBlockIntoFreeList+0xb0>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e003      	b.n	8001e44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d002      	beq.n	8001e52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20012d50 	.word	0x20012d50
 8001e64:	20012d58 	.word	0x20012d58

08001e68 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <_cbSendSystemDesc+0x14>)
 8001e6e:	f001 f947 	bl	8003100 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001e72:	4803      	ldr	r0, [pc, #12]	; (8001e80 <_cbSendSystemDesc+0x18>)
 8001e74:	f001 f944 	bl	8003100 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	08003ff0 	.word	0x08003ff0
 8001e80:	0800402c 	.word	0x0800402c

08001e84 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001e8e:	6819      	ldr	r1, [r3, #0]
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <SEGGER_SYSVIEW_Conf+0x24>)
 8001e92:	4a06      	ldr	r2, [pc, #24]	; (8001eac <SEGGER_SYSVIEW_Conf+0x28>)
 8001e94:	f000 fdbc 	bl	8002a10 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001e98:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001e9c:	f000 fdf6 	bl	8002a8c <SEGGER_SYSVIEW_SetRAMBase>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000014 	.word	0x20000014
 8001ea8:	08001e69 	.word	0x08001e69
 8001eac:	08004154 	.word	0x08004154

08001eb0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	e034      	b.n	8001f26 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001ebc:	491e      	ldr	r1, [pc, #120]	; (8001f38 <_cbSendTaskList+0x88>)
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	491a      	ldr	r1, [pc, #104]	; (8001f38 <_cbSendTaskList+0x88>)
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	3304      	adds	r3, #4
 8001edc:	681c      	ldr	r4, [r3, #0]
 8001ede:	4916      	ldr	r1, [pc, #88]	; (8001f38 <_cbSendTaskList+0x88>)
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	3308      	adds	r3, #8
 8001eee:	681d      	ldr	r5, [r3, #0]
 8001ef0:	4911      	ldr	r1, [pc, #68]	; (8001f38 <_cbSendTaskList+0x88>)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	330c      	adds	r3, #12
 8001f00:	681e      	ldr	r6, [r3, #0]
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <_cbSendTaskList+0x88>)
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	3310      	adds	r3, #16
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	4633      	mov	r3, r6
 8001f18:	462a      	mov	r2, r5
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	f000 f924 	bl	8002168 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3301      	adds	r3, #1
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <_cbSendTaskList+0x8c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3c5      	bcc.n	8001ebc <_cbSendTaskList+0xc>
  }
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f38:	20012d70 	.word	0x20012d70
 8001f3c:	20012e10 	.word	0x20012e10

08001f40 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001f46:	f7ff f977 	bl	8001238 <xTaskGetTickCountFromISR>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f04f 0400 	mov.w	r4, #0
 8001f50:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001f54:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001f58:	462b      	mov	r3, r5
 8001f5a:	4634      	mov	r4, r6
 8001f5c:	f04f 0100 	mov.w	r1, #0
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	0162      	lsls	r2, r4, #5
 8001f66:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001f6a:	0159      	lsls	r1, r3, #5
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4614      	mov	r4, r2
 8001f70:	1b5b      	subs	r3, r3, r5
 8001f72:	eb64 0406 	sbc.w	r4, r4, r6
 8001f76:	f04f 0100 	mov.w	r1, #0
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	00a2      	lsls	r2, r4, #2
 8001f80:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001f84:	0099      	lsls	r1, r3, #2
 8001f86:	460b      	mov	r3, r1
 8001f88:	4614      	mov	r4, r2
 8001f8a:	195b      	adds	r3, r3, r5
 8001f8c:	eb44 0406 	adc.w	r4, r4, r6
 8001f90:	f04f 0100 	mov.w	r1, #0
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	00e2      	lsls	r2, r4, #3
 8001f9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f9e:	00d9      	lsls	r1, r3, #3
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4614      	mov	r4, r2
 8001fa4:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8001fa8:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	4621      	mov	r1, r4
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001fb8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	492b      	ldr	r1, [pc, #172]	; (8002078 <SYSVIEW_AddTask+0xc0>)
 8001fca:	68b8      	ldr	r0, [r7, #8]
 8001fcc:	f001 ffde 	bl	8003f8c <memcmp>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d04b      	beq.n	800206e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <SYSVIEW_AddTask+0xc4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b07      	cmp	r3, #7
 8001fdc:	d903      	bls.n	8001fe6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001fde:	4828      	ldr	r0, [pc, #160]	; (8002080 <SYSVIEW_AddTask+0xc8>)
 8001fe0:	f001 fb32 	bl	8003648 <SEGGER_SYSVIEW_Warn>
    return;
 8001fe4:	e044      	b.n	8002070 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001fe6:	4b25      	ldr	r3, [pc, #148]	; (800207c <SYSVIEW_AddTask+0xc4>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4926      	ldr	r1, [pc, #152]	; (8002084 <SYSVIEW_AddTask+0xcc>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <SYSVIEW_AddTask+0xc4>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4921      	ldr	r1, [pc, #132]	; (8002084 <SYSVIEW_AddTask+0xcc>)
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	3304      	adds	r3, #4
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <SYSVIEW_AddTask+0xc4>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	491b      	ldr	r1, [pc, #108]	; (8002084 <SYSVIEW_AddTask+0xcc>)
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3308      	adds	r3, #8
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <SYSVIEW_AddTask+0xc4>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4916      	ldr	r1, [pc, #88]	; (8002084 <SYSVIEW_AddTask+0xcc>)
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	330c      	adds	r3, #12
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <SYSVIEW_AddTask+0xc4>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4910      	ldr	r1, [pc, #64]	; (8002084 <SYSVIEW_AddTask+0xcc>)
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3310      	adds	r3, #16
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <SYSVIEW_AddTask+0xc4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	4a08      	ldr	r2, [pc, #32]	; (800207c <SYSVIEW_AddTask+0xc4>)
 800205a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f87e 	bl	8002168 <SYSVIEW_SendTaskInfo>
 800206c:	e000      	b.n	8002070 <SYSVIEW_AddTask+0xb8>
    return;
 800206e:	bf00      	nop

}
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	0800403c 	.word	0x0800403c
 800207c:	20012e10 	.word	0x20012e10
 8002080:	08004044 	.word	0x08004044
 8002084:	20012d70 	.word	0x20012d70

08002088 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002096:	2205      	movs	r2, #5
 8002098:	4930      	ldr	r1, [pc, #192]	; (800215c <SYSVIEW_UpdateTask+0xd4>)
 800209a:	68b8      	ldr	r0, [r7, #8]
 800209c:	f001 ff76 	bl	8003f8c <memcmp>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d056      	beq.n	8002154 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e00d      	b.n	80020c8 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 80020ac:	492c      	ldr	r1, [pc, #176]	; (8002160 <SYSVIEW_UpdateTask+0xd8>)
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d008      	beq.n	80020d4 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	4b26      	ldr	r3, [pc, #152]	; (8002164 <SYSVIEW_UpdateTask+0xdc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d3ec      	bcc.n	80020ac <SYSVIEW_UpdateTask+0x24>
 80020d2:	e000      	b.n	80020d6 <SYSVIEW_UpdateTask+0x4e>
      break;
 80020d4:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <SYSVIEW_UpdateTask+0xdc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d230      	bcs.n	8002142 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 80020e0:	491f      	ldr	r1, [pc, #124]	; (8002160 <SYSVIEW_UpdateTask+0xd8>)
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3304      	adds	r3, #4
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 80020f4:	491a      	ldr	r1, [pc, #104]	; (8002160 <SYSVIEW_UpdateTask+0xd8>)
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3308      	adds	r3, #8
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8002108:	4915      	ldr	r1, [pc, #84]	; (8002160 <SYSVIEW_UpdateTask+0xd8>)
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	330c      	adds	r3, #12
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 800211c:	4910      	ldr	r1, [pc, #64]	; (8002160 <SYSVIEW_UpdateTask+0xd8>)
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	3310      	adds	r3, #16
 800212c:	6a3a      	ldr	r2, [r7, #32]
 800212e:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f814 	bl	8002168 <SYSVIEW_SendTaskInfo>
 8002140:	e009      	b.n	8002156 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f7ff ff33 	bl	8001fb8 <SYSVIEW_AddTask>
 8002152:	e000      	b.n	8002156 <SYSVIEW_UpdateTask+0xce>
    return;
 8002154:	bf00      	nop
  }
}
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	0800403c 	.word	0x0800403c
 8002160:	20012d70 	.word	0x20012d70
 8002164:	20012e10 	.word	0x20012e10

08002168 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	2214      	movs	r2, #20
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f001 ff1e 	bl	8003fc0 <memset>
  TaskInfo.TaskID     = TaskID;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4618      	mov	r0, r3
 800219e:	f000 feb5 	bl	8002f0c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80021a2:	bf00      	nop
 80021a4:	3728      	adds	r7, #40	; 0x28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <_DoInit+0x8c>)
 80021b4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2203      	movs	r2, #3
 80021c0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a1d      	ldr	r2, [pc, #116]	; (800223c <_DoInit+0x90>)
 80021c6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <_DoInit+0x94>)
 80021cc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a14      	ldr	r2, [pc, #80]	; (800223c <_DoInit+0x90>)
 80021ec:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <_DoInit+0x98>)
 80021f2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2210      	movs	r2, #16
 80021f8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3307      	adds	r3, #7
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <_DoInit+0x9c>)
 8002212:	6810      	ldr	r0, [r2, #0]
 8002214:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a0c      	ldr	r2, [pc, #48]	; (800224c <_DoInit+0xa0>)
 800221a:	6810      	ldr	r0, [r2, #0]
 800221c:	6018      	str	r0, [r3, #0]
 800221e:	8891      	ldrh	r1, [r2, #4]
 8002220:	7992      	ldrb	r2, [r2, #6]
 8002222:	8099      	strh	r1, [r3, #4]
 8002224:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2220      	movs	r2, #32
 800222a:	719a      	strb	r2, [r3, #6]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	2001534c 	.word	0x2001534c
 800223c:	08004094 	.word	0x08004094
 8002240:	20012e14 	.word	0x20012e14
 8002244:	20013214 	.word	0x20013214
 8002248:	080040a0 	.word	0x080040a0
 800224c:	080040a4 	.word	0x080040a4

08002250 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800225c:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <SEGGER_RTT_ReadNoLock+0x100>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <SEGGER_RTT_ReadNoLock+0x18>
 8002264:	f7ff ffa2 	bl	80021ac <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	3360      	adds	r3, #96	; 0x60
 8002274:	4a36      	ldr	r2, [pc, #216]	; (8002350 <SEGGER_RTT_ReadNoLock+0x100>)
 8002276:	4413      	add	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800228e:	6a3a      	ldr	r2, [r7, #32]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	429a      	cmp	r2, r3
 8002294:	d92a      	bls.n	80022ec <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4293      	cmp	r3, r2
 80022a6:	bf28      	it	cs
 80022a8:	4613      	movcs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	4413      	add	r3, r2
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4619      	mov	r1, r3
 80022b8:	69f8      	ldr	r0, [r7, #28]
 80022ba:	f001 fe76 	bl	8003faa <memcpy>
    NumBytesRead += NumBytesRem;
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80022d6:	6a3a      	ldr	r2, [r7, #32]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	6a3a      	ldr	r2, [r7, #32]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d101      	bne.n	80022ec <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4293      	cmp	r3, r2
 80022fa:	bf28      	it	cs
 80022fc:	4613      	movcs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d018      	beq.n	8002338 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	4413      	add	r3, r2
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4619      	mov	r1, r3
 8002312:	69f8      	ldr	r0, [r7, #28]
 8002314:	f001 fe49 	bl	8003faa <memcpy>
    NumBytesRead += NumBytesRem;
 8002318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002346:	4618      	mov	r0, r3
 8002348:	3728      	adds	r7, #40	; 0x28
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	2001534c 	.word	0x2001534c

08002354 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4a3f      	ldr	r2, [pc, #252]	; (8002470 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002372:	4413      	add	r3, r2
 8002374:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	429a      	cmp	r2, r3
 8002388:	d854      	bhi.n	8002434 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	429a      	cmp	r2, r3
 800239c:	d30f      	bcc.n	80023be <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4413      	add	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023aa:	4618      	mov	r0, r3
 80023ac:	f001 fdfd 	bl	8003faa <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	441a      	add	r2, r3
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e054      	b.n	8002468 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	4413      	add	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d34b      	bcc.n	8002466 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d90e      	bls.n	80023fe <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4413      	add	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 fddc 	bl	8003faa <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	441a      	add	r2, r3
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	e018      	b.n	8002430 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240a:	4618      	mov	r0, r3
 800240c:	f001 fdcd 	bl	8003faa <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	6858      	ldr	r0, [r3, #4]
 8002414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	18d1      	adds	r1, r2, r3
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	461a      	mov	r2, r3
 8002422:	f001 fdc2 	bl	8003faa <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad2      	subs	r2, r2, r3
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002430:	2301      	movs	r3, #1
 8002432:	e019      	b.n	8002468 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	d30f      	bcc.n	8002466 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4413      	add	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002452:	4618      	mov	r0, r3
 8002454:	f001 fda9 	bl	8003faa <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	441a      	add	r2, r3
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	2001534c 	.word	0x2001534c

08002474 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800248a:	f7ff fe8f 	bl	80021ac <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4293      	cmp	r3, r2
 8002498:	d24c      	bcs.n	8002534 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800249a:	f3ef 8311 	mrs	r3, BASEPRI
 800249e:	f04f 0120 	mov.w	r1, #32
 80024a2:	f381 8811 	msr	BASEPRI, r1
 80024a6:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d032      	beq.n	8002514 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80024ae:	4925      	ldr	r1, [pc, #148]	; (8002544 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80024c2:	4920      	ldr	r1, [pc, #128]	; (8002544 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	440b      	add	r3, r1
 80024d2:	3304      	adds	r3, #4
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80024d8:	491a      	ldr	r1, [pc, #104]	; (8002544 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	440b      	add	r3, r1
 80024e6:	3320      	adds	r3, #32
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80024ec:	4915      	ldr	r1, [pc, #84]	; (8002544 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	3328      	adds	r3, #40	; 0x28
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002500:	4910      	ldr	r1, [pc, #64]	; (8002544 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	3324      	adds	r3, #36	; 0x24
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002514:	490b      	ldr	r1, [pc, #44]	; (8002544 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	332c      	adds	r3, #44	; 0x2c
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	e002      	b.n	800253a <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002534:	f04f 33ff 	mov.w	r3, #4294967295
 8002538:	617b      	str	r3, [r7, #20]
  }
  return r;
 800253a:	697b      	ldr	r3, [r7, #20]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2001534c 	.word	0x2001534c

08002548 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002556:	4b30      	ldr	r3, [pc, #192]	; (8002618 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800255e:	f7ff fe25 	bl	80021ac <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4293      	cmp	r3, r2
 800256c:	d24b      	bcs.n	8002606 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800256e:	f3ef 8311 	mrs	r3, BASEPRI
 8002572:	f04f 0120 	mov.w	r1, #32
 8002576:	f381 8811 	msr	BASEPRI, r1
 800257a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d031      	beq.n	80025e6 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002582:	4925      	ldr	r1, [pc, #148]	; (8002618 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	3360      	adds	r3, #96	; 0x60
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002596:	4920      	ldr	r1, [pc, #128]	; (8002618 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	3364      	adds	r3, #100	; 0x64
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80025aa:	491b      	ldr	r1, [pc, #108]	; (8002618 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	3368      	adds	r3, #104	; 0x68
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80025be:	4916      	ldr	r1, [pc, #88]	; (8002618 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	3370      	adds	r3, #112	; 0x70
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 80025d2:	4911      	ldr	r1, [pc, #68]	; (8002618 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	336c      	adds	r3, #108	; 0x6c
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80025e6:	490c      	ldr	r1, [pc, #48]	; (8002618 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	3374      	adds	r3, #116	; 0x74
 80025f6:	6a3a      	ldr	r2, [r7, #32]
 80025f8:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e002      	b.n	800260c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800260c:	697b      	ldr	r3, [r7, #20]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2001534c 	.word	0x2001534c

0800261c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800262c:	e002      	b.n	8002634 <_EncodeStr+0x18>
    Len++;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	3301      	adds	r3, #1
 8002632:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f6      	bne.n	800262e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	d901      	bls.n	800264c <_EncodeStr+0x30>
    Len = Limit;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2bfe      	cmp	r3, #254	; 0xfe
 8002650:	d806      	bhi.n	8002660 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	60fa      	str	r2, [r7, #12]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	e011      	b.n	8002684 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	60fa      	str	r2, [r7, #12]
 8002666:	22ff      	movs	r2, #255	; 0xff
 8002668:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	60fa      	str	r2, [r7, #12]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	0a19      	lsrs	r1, r3, #8
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	60fa      	str	r2, [r7, #12]
 8002680:	b2ca      	uxtb	r2, r1
 8002682:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002688:	e00a      	b.n	80026a0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	1c53      	adds	r3, r2, #1
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1c59      	adds	r1, r3, #1
 8002694:	60f9      	str	r1, [r7, #12]
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	701a      	strb	r2, [r3, #0]
    n++;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3301      	adds	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3f0      	bcc.n	800268a <_EncodeStr+0x6e>
  }
  return pPayload;
 80026a8:	68fb      	ldr	r3, [r7, #12]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80026d4:	1cfb      	adds	r3, r7, #3
 80026d6:	2201      	movs	r2, #1
 80026d8:	4619      	mov	r1, r3
 80026da:	2001      	movs	r0, #1
 80026dc:	f7ff fdb8 	bl	8002250 <SEGGER_RTT_ReadNoLock>
 80026e0:	4603      	mov	r3, r0
 80026e2:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	dd44      	ble.n	8002774 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d01a      	beq.n	8002726 <_HandleIncomingPacket+0x58>
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	dc06      	bgt.n	8002702 <_HandleIncomingPacket+0x34>
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d010      	beq.n	800271a <_HandleIncomingPacket+0x4c>
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	dc11      	bgt.n	8002720 <_HandleIncomingPacket+0x52>
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d009      	beq.n	8002714 <_HandleIncomingPacket+0x46>
 8002700:	e02d      	b.n	800275e <_HandleIncomingPacket+0x90>
 8002702:	2b06      	cmp	r3, #6
 8002704:	d015      	beq.n	8002732 <_HandleIncomingPacket+0x64>
 8002706:	2b06      	cmp	r3, #6
 8002708:	db10      	blt.n	800272c <_HandleIncomingPacket+0x5e>
 800270a:	2b07      	cmp	r3, #7
 800270c:	d014      	beq.n	8002738 <_HandleIncomingPacket+0x6a>
 800270e:	2b80      	cmp	r3, #128	; 0x80
 8002710:	d015      	beq.n	800273e <_HandleIncomingPacket+0x70>
 8002712:	e024      	b.n	800275e <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002714:	f000 fa7e 	bl	8002c14 <SEGGER_SYSVIEW_Start>
      break;
 8002718:	e031      	b.n	800277e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800271a:	f000 fb37 	bl	8002d8c <SEGGER_SYSVIEW_Stop>
      break;
 800271e:	e02e      	b.n	800277e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002720:	f000 fd12 	bl	8003148 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002724:	e02b      	b.n	800277e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002726:	f000 fcd7 	bl	80030d8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800272a:	e028      	b.n	800277e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800272c:	f000 fb54 	bl	8002dd8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002730:	e025      	b.n	800277e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002732:	f000 ff4b 	bl	80035cc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002736:	e022      	b.n	800277e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002738:	f000 ff2a 	bl	8003590 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800273c:	e01f      	b.n	800277e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800273e:	1cfb      	adds	r3, r7, #3
 8002740:	2201      	movs	r2, #1
 8002742:	4619      	mov	r1, r3
 8002744:	2001      	movs	r0, #1
 8002746:	f7ff fd83 	bl	8002250 <SEGGER_RTT_ReadNoLock>
 800274a:	4603      	mov	r3, r0
 800274c:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	dd11      	ble.n	8002778 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fe9a 	bl	8003490 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800275c:	e00c      	b.n	8002778 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	b25b      	sxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	da0a      	bge.n	800277c <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002766:	1cfb      	adds	r3, r7, #3
 8002768:	2201      	movs	r2, #1
 800276a:	4619      	mov	r1, r3
 800276c:	2001      	movs	r0, #1
 800276e:	f7ff fd6f 	bl	8002250 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002772:	e003      	b.n	800277c <_HandleIncomingPacket+0xae>
    }
  }
 8002774:	bf00      	nop
 8002776:	e002      	b.n	800277e <_HandleIncomingPacket+0xb0>
      break;
 8002778:	bf00      	nop
 800277a:	e000      	b.n	800277e <_HandleIncomingPacket+0xb0>
      break;
 800277c:	bf00      	nop
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	; 0x30
 800278c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800278e:	2301      	movs	r3, #1
 8002790:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279c:	4b30      	ldr	r3, [pc, #192]	; (8002860 <_TrySendOverflowPacket+0xd8>)
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a2:	e00b      	b.n	80027bc <_TrySendOverflowPacket+0x34>
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	1c59      	adds	r1, r3, #1
 80027ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	09db      	lsrs	r3, r3, #7
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80027bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027be:	2b7f      	cmp	r3, #127	; 0x7f
 80027c0:	d8f0      	bhi.n	80027a4 <_TrySendOverflowPacket+0x1c>
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80027d2:	4b24      	ldr	r3, [pc, #144]	; (8002864 <_TrySendOverflowPacket+0xdc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <_TrySendOverflowPacket+0xd8>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	623b      	str	r3, [r7, #32]
 80027ea:	e00b      	b.n	8002804 <_TrySendOverflowPacket+0x7c>
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	1c59      	adds	r1, r3, #1
 80027f4:	6279      	str	r1, [r7, #36]	; 0x24
 80027f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	09db      	lsrs	r3, r3, #7
 8002802:	623b      	str	r3, [r7, #32]
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	2b7f      	cmp	r3, #127	; 0x7f
 8002808:	d8f0      	bhi.n	80027ec <_TrySendOverflowPacket+0x64>
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	627a      	str	r2, [r7, #36]	; 0x24
 8002810:	6a3a      	ldr	r2, [r7, #32]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	461a      	mov	r2, r3
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4619      	mov	r1, r3
 8002826:	2001      	movs	r0, #1
 8002828:	f7ff fd94 	bl	8002354 <SEGGER_RTT_WriteSkipNoLock>
 800282c:	4603      	mov	r3, r0
 800282e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <_TrySendOverflowPacket+0xd8>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <_TrySendOverflowPacket+0xd8>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	3b01      	subs	r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <_TrySendOverflowPacket+0xd8>)
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e004      	b.n	8002854 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <_TrySendOverflowPacket+0xd8>)
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	3301      	adds	r3, #1
 8002850:	4a03      	ldr	r2, [pc, #12]	; (8002860 <_TrySendOverflowPacket+0xd8>)
 8002852:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002854:	693b      	ldr	r3, [r7, #16]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3730      	adds	r7, #48	; 0x30
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	2001522c 	.word	0x2001522c
 8002864:	e0001004 	.word	0xe0001004

08002868 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002874:	4b63      	ldr	r3, [pc, #396]	; (8002a04 <_SendPacket+0x19c>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d010      	beq.n	800289e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800287c:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <_SendPacket+0x19c>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a1 	beq.w	80029c8 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002886:	4b5f      	ldr	r3, [pc, #380]	; (8002a04 <_SendPacket+0x19c>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d109      	bne.n	80028a2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800288e:	f7ff ff7b 	bl	8002788 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002892:	4b5c      	ldr	r3, [pc, #368]	; (8002a04 <_SendPacket+0x19c>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	f040 8098 	bne.w	80029cc <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800289c:	e001      	b.n	80028a2 <_SendPacket+0x3a>
    goto Send;
 800289e:	bf00      	nop
 80028a0:	e000      	b.n	80028a4 <_SendPacket+0x3c>
Send:
 80028a2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b1f      	cmp	r3, #31
 80028a8:	d809      	bhi.n	80028be <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80028aa:	4b56      	ldr	r3, [pc, #344]	; (8002a04 <_SendPacket+0x19c>)
 80028ac:	69da      	ldr	r2, [r3, #28]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f040 8089 	bne.w	80029d0 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b17      	cmp	r3, #23
 80028c2:	d807      	bhi.n	80028d4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e03d      	b.n	8002950 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b7f      	cmp	r3, #127	; 0x7f
 80028e0:	d912      	bls.n	8002908 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	09da      	lsrs	r2, r3, #7
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	3a01      	subs	r2, #1
 80028fa:	60fa      	str	r2, [r7, #12]
 80028fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e006      	b.n	8002916 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3b01      	subs	r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b7f      	cmp	r3, #127	; 0x7f
 800291a:	d912      	bls.n	8002942 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	09da      	lsrs	r2, r3, #7
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3b01      	subs	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	3a01      	subs	r2, #1
 8002934:	60fa      	str	r2, [r7, #12]
 8002936:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e006      	b.n	8002950 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3b01      	subs	r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002950:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <_SendPacket+0x1a0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002956:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <_SendPacket+0x19c>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	e00b      	b.n	8002982 <_SendPacket+0x11a>
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	1c59      	adds	r1, r3, #1
 8002972:	6279      	str	r1, [r7, #36]	; 0x24
 8002974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	09db      	lsrs	r3, r3, #7
 8002980:	623b      	str	r3, [r7, #32]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2b7f      	cmp	r3, #127	; 0x7f
 8002986:	d8f0      	bhi.n	800296a <_SendPacket+0x102>
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	627a      	str	r2, [r7, #36]	; 0x24
 800298e:	6a3a      	ldr	r2, [r7, #32]
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	701a      	strb	r2, [r3, #0]
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	68f9      	ldr	r1, [r7, #12]
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7ff fcd6 	bl	8002354 <SEGGER_RTT_WriteSkipNoLock>
 80029a8:	4603      	mov	r3, r0
 80029aa:	613b      	str	r3, [r7, #16]
  if (Status) {
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80029b2:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <_SendPacket+0x19c>)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	60d3      	str	r3, [r2, #12]
 80029b8:	e00b      	b.n	80029d2 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <_SendPacket+0x19c>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <_SendPacket+0x19c>)
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e004      	b.n	80029d2 <_SendPacket+0x16a>
    goto SendDone;
 80029c8:	bf00      	nop
 80029ca:	e002      	b.n	80029d2 <_SendPacket+0x16a>
      goto SendDone;
 80029cc:	bf00      	nop
 80029ce:	e000      	b.n	80029d2 <_SendPacket+0x16a>
      goto SendDone;
 80029d0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <_SendPacket+0x1a4>)
 80029d4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <_SendPacket+0x1a4>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	429a      	cmp	r2, r3
 80029e0:	d00b      	beq.n	80029fa <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <_SendPacket+0x19c>)
 80029e4:	789b      	ldrb	r3, [r3, #2]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d107      	bne.n	80029fa <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <_SendPacket+0x19c>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80029f0:	f7ff fe6d 	bl	80026ce <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <_SendPacket+0x19c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2001522c 	.word	0x2001522c
 8002a08:	e0001004 	.word	0xe0001004
 8002a0c:	2001534c 	.word	0x2001534c

08002a10 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a26:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <SEGGER_SYSVIEW_Init+0x68>)
 8002a28:	4914      	ldr	r1, [pc, #80]	; (8002a7c <SEGGER_SYSVIEW_Init+0x6c>)
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f7ff fd22 	bl	8002474 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002a30:	2300      	movs	r3, #0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2308      	movs	r3, #8
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <SEGGER_SYSVIEW_Init+0x70>)
 8002a38:	4910      	ldr	r1, [pc, #64]	; (8002a7c <SEGGER_SYSVIEW_Init+0x6c>)
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff fd84 	bl	8002548 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <SEGGER_SYSVIEW_Init+0x74>)
 8002a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a46:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <SEGGER_SYSVIEW_Init+0x78>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <SEGGER_SYSVIEW_Init+0x74>)
 8002a4e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002a50:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <SEGGER_SYSVIEW_Init+0x74>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002a56:	4a0b      	ldr	r2, [pc, #44]	; (8002a84 <SEGGER_SYSVIEW_Init+0x74>)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002a5c:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <SEGGER_SYSVIEW_Init+0x74>)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <SEGGER_SYSVIEW_Init+0x74>)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <SEGGER_SYSVIEW_Init+0x74>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20013224 	.word	0x20013224
 8002a7c:	080040ac 	.word	0x080040ac
 8002a80:	20015224 	.word	0x20015224
 8002a84:	2001522c 	.word	0x2001522c
 8002a88:	e0001004 	.word	0xe0001004

08002a8c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6113      	str	r3, [r2, #16]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	2001522c 	.word	0x2001522c

08002aac <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8002ab8:	f04f 0120 	mov.w	r1, #32
 8002abc:	f381 8811 	msr	BASEPRI, r1
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4808      	ldr	r0, [pc, #32]	; (8002ae4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002ac4:	f7ff fdf7 	bl	80026b6 <_PreparePacket>
 8002ac8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	68b8      	ldr	r0, [r7, #8]
 8002ad0:	f7ff feca 	bl	8002868 <_SendPacket>
  RECORD_END();
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f383 8811 	msr	BASEPRI, r3
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2001525c 	.word	0x2001525c

08002ae8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002af2:	f3ef 8311 	mrs	r3, BASEPRI
 8002af6:	f04f 0120 	mov.w	r1, #32
 8002afa:	f381 8811 	msr	BASEPRI, r1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	4816      	ldr	r0, [pc, #88]	; (8002b5c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002b02:	f7ff fdd8 	bl	80026b6 <_PreparePacket>
 8002b06:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	e00b      	b.n	8002b2e <SEGGER_SYSVIEW_RecordU32+0x46>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	1c59      	adds	r1, r3, #1
 8002b1e:	61f9      	str	r1, [r7, #28]
 8002b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	09db      	lsrs	r3, r3, #7
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b7f      	cmp	r3, #127	; 0x7f
 8002b32:	d8f0      	bhi.n	8002b16 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	61fa      	str	r2, [r7, #28]
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68f9      	ldr	r1, [r7, #12]
 8002b48:	6938      	ldr	r0, [r7, #16]
 8002b4a:	f7ff fe8d 	bl	8002868 <_SendPacket>
  RECORD_END();
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f383 8811 	msr	BASEPRI, r3
}
 8002b54:	bf00      	nop
 8002b56:	3720      	adds	r7, #32
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	2001525c 	.word	0x2001525c

08002b60 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8002b70:	f04f 0120 	mov.w	r1, #32
 8002b74:	f381 8811 	msr	BASEPRI, r1
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	4825      	ldr	r0, [pc, #148]	; (8002c10 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002b7c:	f7ff fd9b 	bl	80026b6 <_PreparePacket>
 8002b80:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8e:	e00b      	b.n	8002ba8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	1c59      	adds	r1, r3, #1
 8002b98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	09db      	lsrs	r3, r3, #7
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	2b7f      	cmp	r3, #127	; 0x7f
 8002bac:	d8f0      	bhi.n	8002b90 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	623b      	str	r3, [r7, #32]
 8002bc6:	e00b      	b.n	8002be0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	1c59      	adds	r1, r3, #1
 8002bd0:	6279      	str	r1, [r7, #36]	; 0x24
 8002bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	09db      	lsrs	r3, r3, #7
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	2b7f      	cmp	r3, #127	; 0x7f
 8002be4:	d8f0      	bhi.n	8002bc8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	627a      	str	r2, [r7, #36]	; 0x24
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	6979      	ldr	r1, [r7, #20]
 8002bfa:	69b8      	ldr	r0, [r7, #24]
 8002bfc:	f7ff fe34 	bl	8002868 <_SendPacket>
  RECORD_END();
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f383 8811 	msr	BASEPRI, r3
}
 8002c06:	bf00      	nop
 8002c08:	3730      	adds	r7, #48	; 0x30
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	2001525c 	.word	0x2001525c

08002c14 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002c1a:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <SEGGER_SYSVIEW_Start+0x16c>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 80aa 	bne.w	8002d78 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002c24:	4b56      	ldr	r3, [pc, #344]	; (8002d80 <SEGGER_SYSVIEW_Start+0x16c>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002c2a:	f3ef 8311 	mrs	r3, BASEPRI
 8002c2e:	f04f 0120 	mov.w	r1, #32
 8002c32:	f381 8811 	msr	BASEPRI, r1
 8002c36:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002c38:	220a      	movs	r2, #10
 8002c3a:	4952      	ldr	r1, [pc, #328]	; (8002d84 <SEGGER_SYSVIEW_Start+0x170>)
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7ff fb89 	bl	8002354 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002c48:	200a      	movs	r0, #10
 8002c4a:	f7ff ff2f 	bl	8002aac <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c4e:	f3ef 8311 	mrs	r3, BASEPRI
 8002c52:	f04f 0120 	mov.w	r1, #32
 8002c56:	f381 8811 	msr	BASEPRI, r1
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	484a      	ldr	r0, [pc, #296]	; (8002d88 <SEGGER_SYSVIEW_Start+0x174>)
 8002c5e:	f7ff fd2a 	bl	80026b6 <_PreparePacket>
 8002c62:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6c:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <SEGGER_SYSVIEW_Start+0x16c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c72:	e00b      	b.n	8002c8c <SEGGER_SYSVIEW_Start+0x78>
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	1c59      	adds	r1, r3, #1
 8002c7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	09db      	lsrs	r3, r3, #7
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c90:	d8f0      	bhi.n	8002c74 <SEGGER_SYSVIEW_Start+0x60>
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <SEGGER_SYSVIEW_Start+0x16c>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	e00b      	b.n	8002cc6 <SEGGER_SYSVIEW_Start+0xb2>
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1c59      	adds	r1, r3, #1
 8002cb6:	6279      	str	r1, [r7, #36]	; 0x24
 8002cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	09db      	lsrs	r3, r3, #7
 8002cc4:	623b      	str	r3, [r7, #32]
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cca:	d8f0      	bhi.n	8002cae <SEGGER_SYSVIEW_Start+0x9a>
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8002cd2:	6a3a      	ldr	r2, [r7, #32]
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <SEGGER_SYSVIEW_Start+0x16c>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e00b      	b.n	8002d00 <SEGGER_SYSVIEW_Start+0xec>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	1c59      	adds	r1, r3, #1
 8002cf0:	61f9      	str	r1, [r7, #28]
 8002cf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	09db      	lsrs	r3, r3, #7
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b7f      	cmp	r3, #127	; 0x7f
 8002d04:	d8f0      	bhi.n	8002ce8 <SEGGER_SYSVIEW_Start+0xd4>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	61fa      	str	r2, [r7, #28]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e00b      	b.n	8002d38 <SEGGER_SYSVIEW_Start+0x124>
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	1c59      	adds	r1, r3, #1
 8002d28:	6179      	str	r1, [r7, #20]
 8002d2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	09db      	lsrs	r3, r3, #7
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8002d3c:	d8f0      	bhi.n	8002d20 <SEGGER_SYSVIEW_Start+0x10c>
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	617a      	str	r2, [r7, #20]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002d4e:	2218      	movs	r2, #24
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fd88 	bl	8002868 <_SendPacket>
      RECORD_END();
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002d6c:	f000 f9ec 	bl	8003148 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002d70:	f000 f9b2 	bl	80030d8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002d74:	f000 fc2a 	bl	80035cc <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002d78:	bf00      	nop
 8002d7a:	3730      	adds	r7, #48	; 0x30
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	2001522c 	.word	0x2001522c
 8002d84:	0800415c 	.word	0x0800415c
 8002d88:	2001525c 	.word	0x2001525c

08002d8c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002d92:	f3ef 8311 	mrs	r3, BASEPRI
 8002d96:	f04f 0120 	mov.w	r1, #32
 8002d9a:	f381 8811 	msr	BASEPRI, r1
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <SEGGER_SYSVIEW_Stop+0x44>)
 8002da2:	f7ff fc88 	bl	80026b6 <_PreparePacket>
 8002da6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <SEGGER_SYSVIEW_Stop+0x48>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d007      	beq.n	8002dc0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002db0:	220b      	movs	r2, #11
 8002db2:	6839      	ldr	r1, [r7, #0]
 8002db4:	6838      	ldr	r0, [r7, #0]
 8002db6:	f7ff fd57 	bl	8002868 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <SEGGER_SYSVIEW_Stop+0x48>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f383 8811 	msr	BASEPRI, r3
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	2001525c 	.word	0x2001525c
 8002dd4:	2001522c 	.word	0x2001522c

08002dd8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	; 0x30
 8002ddc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002dde:	f3ef 8311 	mrs	r3, BASEPRI
 8002de2:	f04f 0120 	mov.w	r1, #32
 8002de6:	f381 8811 	msr	BASEPRI, r1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	4845      	ldr	r0, [pc, #276]	; (8002f04 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002dee:	f7ff fc62 	bl	80026b6 <_PreparePacket>
 8002df2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfc:	4b42      	ldr	r3, [pc, #264]	; (8002f08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e02:	e00b      	b.n	8002e1c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	1c59      	adds	r1, r3, #1
 8002e0c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	09db      	lsrs	r3, r3, #7
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8002e20:	d8f0      	bhi.n	8002e04 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
 8002e36:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	623b      	str	r3, [r7, #32]
 8002e3c:	e00b      	b.n	8002e56 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	1c59      	adds	r1, r3, #1
 8002e46:	6279      	str	r1, [r7, #36]	; 0x24
 8002e48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	09db      	lsrs	r3, r3, #7
 8002e54:	623b      	str	r3, [r7, #32]
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	2b7f      	cmp	r3, #127	; 0x7f
 8002e5a:	d8f0      	bhi.n	8002e3e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	627a      	str	r2, [r7, #36]	; 0x24
 8002e62:	6a3a      	ldr	r2, [r7, #32]
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	e00b      	b.n	8002e90 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	1c59      	adds	r1, r3, #1
 8002e80:	61f9      	str	r1, [r7, #28]
 8002e82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	09db      	lsrs	r3, r3, #7
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b7f      	cmp	r3, #127	; 0x7f
 8002e94:	d8f0      	bhi.n	8002e78 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	61fa      	str	r2, [r7, #28]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	2302      	movs	r3, #2
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	e00b      	b.n	8002ec8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	1c59      	adds	r1, r3, #1
 8002eb8:	6179      	str	r1, [r7, #20]
 8002eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	09db      	lsrs	r3, r3, #7
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b7f      	cmp	r3, #127	; 0x7f
 8002ecc:	d8f0      	bhi.n	8002eb0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	617a      	str	r2, [r7, #20]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002ede:	2218      	movs	r2, #24
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	68b8      	ldr	r0, [r7, #8]
 8002ee4:	f7ff fcc0 	bl	8002868 <_SendPacket>
  RECORD_END();
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	4798      	blx	r3
  }
}
 8002efc:	bf00      	nop
 8002efe:	3730      	adds	r7, #48	; 0x30
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	2001525c 	.word	0x2001525c
 8002f08:	2001522c 	.word	0x2001522c

08002f0c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b092      	sub	sp, #72	; 0x48
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002f14:	f3ef 8311 	mrs	r3, BASEPRI
 8002f18:	f04f 0120 	mov.w	r1, #32
 8002f1c:	f381 8811 	msr	BASEPRI, r1
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	486b      	ldr	r0, [pc, #428]	; (80030d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002f24:	f7ff fbc7 	bl	80026b6 <_PreparePacket>
 8002f28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	647b      	str	r3, [r7, #68]	; 0x44
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f40:	e00b      	b.n	8002f5a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f48:	1c59      	adds	r1, r3, #1
 8002f4a:	6479      	str	r1, [r7, #68]	; 0x44
 8002f4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f56:	09db      	lsrs	r3, r3, #7
 8002f58:	643b      	str	r3, [r7, #64]	; 0x40
 8002f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f5e:	d8f0      	bhi.n	8002f42 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	647a      	str	r2, [r7, #68]	; 0x44
 8002f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f7a:	e00b      	b.n	8002f94 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002f86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	09db      	lsrs	r3, r3, #7
 8002f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f96:	2b7f      	cmp	r3, #127	; 0x7f
 8002f98:	d8f0      	bhi.n	8002f7c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8002f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa8:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7ff fb32 	bl	800261c <_EncodeStr>
 8002fb8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002fba:	2209      	movs	r2, #9
 8002fbc:	68f9      	ldr	r1, [r7, #12]
 8002fbe:	6938      	ldr	r0, [r7, #16]
 8002fc0:	f7ff fc52 	bl	8002868 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	637b      	str	r3, [r7, #52]	; 0x34
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fda:	e00b      	b.n	8002ff4 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe2:	1c59      	adds	r1, r3, #1
 8002fe4:	6379      	str	r1, [r7, #52]	; 0x34
 8002fe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	09db      	lsrs	r3, r3, #7
 8002ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff8:	d8f0      	bhi.n	8002fdc <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8002ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	637a      	str	r2, [r7, #52]	; 0x34
 8003000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
 8003014:	e00b      	b.n	800302e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	b2da      	uxtb	r2, r3
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	1c59      	adds	r1, r3, #1
 800301e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003020:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	09db      	lsrs	r3, r3, #7
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	2b7f      	cmp	r3, #127	; 0x7f
 8003032:	d8f0      	bhi.n	8003016 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	62fa      	str	r2, [r7, #44]	; 0x2c
 800303a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	623b      	str	r3, [r7, #32]
 800304e:	e00b      	b.n	8003068 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	1c59      	adds	r1, r3, #1
 8003058:	6279      	str	r1, [r7, #36]	; 0x24
 800305a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	09db      	lsrs	r3, r3, #7
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	2b7f      	cmp	r3, #127	; 0x7f
 800306c:	d8f0      	bhi.n	8003050 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	627a      	str	r2, [r7, #36]	; 0x24
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	e00b      	b.n	80030a0 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	61f9      	str	r1, [r7, #28]
 8003092:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	09db      	lsrs	r3, r3, #7
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b7f      	cmp	r3, #127	; 0x7f
 80030a4:	d8f0      	bhi.n	8003088 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	61fa      	str	r2, [r7, #28]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80030b6:	2215      	movs	r2, #21
 80030b8:	68f9      	ldr	r1, [r7, #12]
 80030ba:	6938      	ldr	r0, [r7, #16]
 80030bc:	f7ff fbd4 	bl	8002868 <_SendPacket>
  RECORD_END();
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f383 8811 	msr	BASEPRI, r3
}
 80030c6:	bf00      	nop
 80030c8:	3748      	adds	r7, #72	; 0x48
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2001525c 	.word	0x2001525c
 80030d4:	2001522c 	.word	0x2001522c

080030d8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80030ee:	4b03      	ldr	r3, [pc, #12]	; (80030fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4798      	blx	r3
  }
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	2001522c 	.word	0x2001522c

08003100 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003108:	f3ef 8311 	mrs	r3, BASEPRI
 800310c:	f04f 0120 	mov.w	r1, #32
 8003110:	f381 8811 	msr	BASEPRI, r1
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	480b      	ldr	r0, [pc, #44]	; (8003144 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003118:	f7ff facd 	bl	80026b6 <_PreparePacket>
 800311c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	6938      	ldr	r0, [r7, #16]
 8003124:	f7ff fa7a 	bl	800261c <_EncodeStr>
 8003128:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800312a:	220e      	movs	r2, #14
 800312c:	68f9      	ldr	r1, [r7, #12]
 800312e:	6938      	ldr	r0, [r7, #16]
 8003130:	f7ff fb9a 	bl	8002868 <_SendPacket>
  RECORD_END();
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f383 8811 	msr	BASEPRI, r3
}
 800313a:	bf00      	nop
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	2001525c 	.word	0x2001525c

08003148 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800314e:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d019      	beq.n	800318a <SEGGER_SYSVIEW_RecordSystime+0x42>
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d014      	beq.n	800318a <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4798      	blx	r3
 8003168:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800316c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800316e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	f04f 0400 	mov.w	r4, #0
 800317a:	0013      	movs	r3, r2
 800317c:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800317e:	461a      	mov	r2, r3
 8003180:	4601      	mov	r1, r0
 8003182:	200d      	movs	r0, #13
 8003184:	f7ff fcec 	bl	8002b60 <SEGGER_SYSVIEW_RecordU32x2>
 8003188:	e005      	b.n	8003196 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
 8003190:	200c      	movs	r0, #12
 8003192:	f7ff fca9 	bl	8002ae8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	bf00      	nop
 80031a0:	2001522c 	.word	0x2001522c
 80031a4:	e0001004 	.word	0xe0001004

080031a8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80031ae:	f3ef 8311 	mrs	r3, BASEPRI
 80031b2:	f04f 0120 	mov.w	r1, #32
 80031b6:	f381 8811 	msr	BASEPRI, r1
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	4819      	ldr	r0, [pc, #100]	; (8003224 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80031be:	f7ff fa7a 	bl	80026b6 <_PreparePacket>
 80031c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80031c8:	4b17      	ldr	r3, [pc, #92]	; (8003228 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	e00b      	b.n	80031f4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	6179      	str	r1, [r7, #20]
 80031e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	09db      	lsrs	r3, r3, #7
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b7f      	cmp	r3, #127	; 0x7f
 80031f8:	d8f0      	bhi.n	80031dc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	617a      	str	r2, [r7, #20]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800320a:	2202      	movs	r2, #2
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	68b8      	ldr	r0, [r7, #8]
 8003210:	f7ff fb2a 	bl	8002868 <_SendPacket>
  RECORD_END();
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f383 8811 	msr	BASEPRI, r3
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2001525c 	.word	0x2001525c
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003232:	f3ef 8311 	mrs	r3, BASEPRI
 8003236:	f04f 0120 	mov.w	r1, #32
 800323a:	f381 8811 	msr	BASEPRI, r1
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	4807      	ldr	r0, [pc, #28]	; (8003260 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003242:	f7ff fa38 	bl	80026b6 <_PreparePacket>
 8003246:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003248:	2203      	movs	r2, #3
 800324a:	6839      	ldr	r1, [r7, #0]
 800324c:	6838      	ldr	r0, [r7, #0]
 800324e:	f7ff fb0b 	bl	8002868 <_SendPacket>
  RECORD_END();
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f383 8811 	msr	BASEPRI, r3
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	2001525c 	.word	0x2001525c

08003264 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800326a:	f3ef 8311 	mrs	r3, BASEPRI
 800326e:	f04f 0120 	mov.w	r1, #32
 8003272:	f381 8811 	msr	BASEPRI, r1
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	4807      	ldr	r0, [pc, #28]	; (8003298 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800327a:	f7ff fa1c 	bl	80026b6 <_PreparePacket>
 800327e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003280:	2212      	movs	r2, #18
 8003282:	6839      	ldr	r1, [r7, #0]
 8003284:	6838      	ldr	r0, [r7, #0]
 8003286:	f7ff faef 	bl	8002868 <_SendPacket>
  RECORD_END();
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f383 8811 	msr	BASEPRI, r3
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	2001525c 	.word	0x2001525c

0800329c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80032a2:	f3ef 8311 	mrs	r3, BASEPRI
 80032a6:	f04f 0120 	mov.w	r1, #32
 80032aa:	f381 8811 	msr	BASEPRI, r1
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	4807      	ldr	r0, [pc, #28]	; (80032d0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80032b2:	f7ff fa00 	bl	80026b6 <_PreparePacket>
 80032b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80032b8:	2211      	movs	r2, #17
 80032ba:	6839      	ldr	r1, [r7, #0]
 80032bc:	6838      	ldr	r0, [r7, #0]
 80032be:	f7ff fad3 	bl	8002868 <_SendPacket>
  RECORD_END();
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f383 8811 	msr	BASEPRI, r3
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	2001525c 	.word	0x2001525c

080032d4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80032dc:	f3ef 8311 	mrs	r3, BASEPRI
 80032e0:	f04f 0120 	mov.w	r1, #32
 80032e4:	f381 8811 	msr	BASEPRI, r1
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	481a      	ldr	r0, [pc, #104]	; (8003354 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80032ec:	f7ff f9e3 	bl	80026b6 <_PreparePacket>
 80032f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	e00b      	b.n	8003324 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	1c59      	adds	r1, r3, #1
 8003314:	61f9      	str	r1, [r7, #28]
 8003316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	09db      	lsrs	r3, r3, #7
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b7f      	cmp	r3, #127	; 0x7f
 8003328:	d8f0      	bhi.n	800330c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	61fa      	str	r2, [r7, #28]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800333a:	2208      	movs	r2, #8
 800333c:	68f9      	ldr	r1, [r7, #12]
 800333e:	6938      	ldr	r0, [r7, #16]
 8003340:	f7ff fa92 	bl	8002868 <_SendPacket>
  RECORD_END();
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f383 8811 	msr	BASEPRI, r3
}
 800334a:	bf00      	nop
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	2001525c 	.word	0x2001525c
 8003358:	2001522c 	.word	0x2001522c

0800335c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003364:	f3ef 8311 	mrs	r3, BASEPRI
 8003368:	f04f 0120 	mov.w	r1, #32
 800336c:	f381 8811 	msr	BASEPRI, r1
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	481a      	ldr	r0, [pc, #104]	; (80033dc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003374:	f7ff f99f 	bl	80026b6 <_PreparePacket>
 8003378:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800337e:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e00b      	b.n	80033ac <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	1c59      	adds	r1, r3, #1
 800339c:	61f9      	str	r1, [r7, #28]
 800339e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	09db      	lsrs	r3, r3, #7
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b7f      	cmp	r3, #127	; 0x7f
 80033b0:	d8f0      	bhi.n	8003394 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	61fa      	str	r2, [r7, #28]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80033c2:	2204      	movs	r2, #4
 80033c4:	68f9      	ldr	r1, [r7, #12]
 80033c6:	6938      	ldr	r0, [r7, #16]
 80033c8:	f7ff fa4e 	bl	8002868 <_SendPacket>
  RECORD_END();
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f383 8811 	msr	BASEPRI, r3
}
 80033d2:	bf00      	nop
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	2001525c 	.word	0x2001525c
 80033e0:	2001522c 	.word	0x2001522c

080033e4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80033ec:	f3ef 8311 	mrs	r3, BASEPRI
 80033f0:	f04f 0120 	mov.w	r1, #32
 80033f4:	f381 8811 	msr	BASEPRI, r1
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	481a      	ldr	r0, [pc, #104]	; (8003464 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80033fc:	f7ff f95b 	bl	80026b6 <_PreparePacket>
 8003400:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003406:	4b18      	ldr	r3, [pc, #96]	; (8003468 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	e00b      	b.n	8003434 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	61f9      	str	r1, [r7, #28]
 8003426:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	09db      	lsrs	r3, r3, #7
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b7f      	cmp	r3, #127	; 0x7f
 8003438:	d8f0      	bhi.n	800341c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	61fa      	str	r2, [r7, #28]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800344a:	2206      	movs	r2, #6
 800344c:	68f9      	ldr	r1, [r7, #12]
 800344e:	6938      	ldr	r0, [r7, #16]
 8003450:	f7ff fa0a 	bl	8002868 <_SendPacket>
  RECORD_END();
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f383 8811 	msr	BASEPRI, r3
}
 800345a:	bf00      	nop
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	2001525c 	.word	0x2001525c
 8003468:	2001522c 	.word	0x2001522c

0800346c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	089b      	lsrs	r3, r3, #2
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	2001522c 	.word	0x2001522c

08003490 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b08c      	sub	sp, #48	; 0x30
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d06d      	beq.n	800357e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80034a2:	4b39      	ldr	r3, [pc, #228]	; (8003588 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80034a8:	2300      	movs	r3, #0
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ac:	e008      	b.n	80034c0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	3301      	adds	r3, #1
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3f2      	bcc.n	80034ae <SEGGER_SYSVIEW_SendModule+0x1e>
 80034c8:	e000      	b.n	80034cc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80034ca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d055      	beq.n	800357e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80034d2:	f3ef 8311 	mrs	r3, BASEPRI
 80034d6:	f04f 0120 	mov.w	r1, #32
 80034da:	f381 8811 	msr	BASEPRI, r1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	482a      	ldr	r0, [pc, #168]	; (800358c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80034e2:	f7ff f8e8 	bl	80026b6 <_PreparePacket>
 80034e6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	e00b      	b.n	800350e <SEGGER_SYSVIEW_SendModule+0x7e>
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	1c59      	adds	r1, r3, #1
 80034fe:	6279      	str	r1, [r7, #36]	; 0x24
 8003500:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	09db      	lsrs	r3, r3, #7
 800350c:	623b      	str	r3, [r7, #32]
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	2b7f      	cmp	r3, #127	; 0x7f
 8003512:	d8f0      	bhi.n	80034f6 <SEGGER_SYSVIEW_SendModule+0x66>
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	627a      	str	r2, [r7, #36]	; 0x24
 800351a:	6a3a      	ldr	r2, [r7, #32]
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e00b      	b.n	8003548 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	b2da      	uxtb	r2, r3
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	1c59      	adds	r1, r3, #1
 8003538:	61f9      	str	r1, [r7, #28]
 800353a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	09db      	lsrs	r3, r3, #7
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b7f      	cmp	r3, #127	; 0x7f
 800354c:	d8f0      	bhi.n	8003530 <SEGGER_SYSVIEW_SendModule+0xa0>
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	61fa      	str	r2, [r7, #28]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	4619      	mov	r1, r3
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff f858 	bl	800261c <_EncodeStr>
 800356c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800356e:	2216      	movs	r2, #22
 8003570:	68f9      	ldr	r1, [r7, #12]
 8003572:	6938      	ldr	r0, [r7, #16]
 8003574:	f7ff f978 	bl	8002868 <_SendPacket>
      RECORD_END();
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800357e:	bf00      	nop
 8003580:	3730      	adds	r7, #48	; 0x30
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20015254 	.word	0x20015254
 800358c:	2001525c 	.word	0x2001525c

08003590 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00f      	beq.n	80035be <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f2      	bne.n	80035a4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20015254 	.word	0x20015254

080035cc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80035d2:	f3ef 8311 	mrs	r3, BASEPRI
 80035d6:	f04f 0120 	mov.w	r1, #32
 80035da:	f381 8811 	msr	BASEPRI, r1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	4817      	ldr	r0, [pc, #92]	; (8003640 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80035e2:	f7ff f868 	bl	80026b6 <_PreparePacket>
 80035e6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	e00b      	b.n	8003610 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	1c59      	adds	r1, r3, #1
 8003600:	6179      	str	r1, [r7, #20]
 8003602:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	09db      	lsrs	r3, r3, #7
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b7f      	cmp	r3, #127	; 0x7f
 8003614:	d8f0      	bhi.n	80035f8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	617a      	str	r2, [r7, #20]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003626:	221b      	movs	r2, #27
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	68b8      	ldr	r0, [r7, #8]
 800362c:	f7ff f91c 	bl	8002868 <_SendPacket>
  RECORD_END();
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f383 8811 	msr	BASEPRI, r3
}
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	2001525c 	.word	0x2001525c
 8003644:	20015258 	.word	0x20015258

08003648 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003650:	f3ef 8311 	mrs	r3, BASEPRI
 8003654:	f04f 0120 	mov.w	r1, #32
 8003658:	f381 8811 	msr	BASEPRI, r1
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	4827      	ldr	r0, [pc, #156]	; (80036fc <SEGGER_SYSVIEW_Warn+0xb4>)
 8003660:	f7ff f829 	bl	80026b6 <_PreparePacket>
 8003664:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003666:	2280      	movs	r2, #128	; 0x80
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	6938      	ldr	r0, [r7, #16]
 800366c:	f7fe ffd6 	bl	800261c <_EncodeStr>
 8003670:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	2301      	movs	r3, #1
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	e00b      	b.n	8003694 <SEGGER_SYSVIEW_Warn+0x4c>
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	1c59      	adds	r1, r3, #1
 8003684:	6279      	str	r1, [r7, #36]	; 0x24
 8003686:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	09db      	lsrs	r3, r3, #7
 8003692:	623b      	str	r3, [r7, #32]
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	2b7f      	cmp	r3, #127	; 0x7f
 8003698:	d8f0      	bhi.n	800367c <SEGGER_SYSVIEW_Warn+0x34>
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	627a      	str	r2, [r7, #36]	; 0x24
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	e00b      	b.n	80036cc <SEGGER_SYSVIEW_Warn+0x84>
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	1c59      	adds	r1, r3, #1
 80036bc:	61f9      	str	r1, [r7, #28]
 80036be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	09db      	lsrs	r3, r3, #7
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b7f      	cmp	r3, #127	; 0x7f
 80036d0:	d8f0      	bhi.n	80036b4 <SEGGER_SYSVIEW_Warn+0x6c>
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	61fa      	str	r2, [r7, #28]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80036e2:	221a      	movs	r2, #26
 80036e4:	68f9      	ldr	r1, [r7, #12]
 80036e6:	6938      	ldr	r0, [r7, #16]
 80036e8:	f7ff f8be 	bl	8002868 <_SendPacket>
  RECORD_END();
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f383 8811 	msr	BASEPRI, r3
}
 80036f2:	bf00      	nop
 80036f4:	3728      	adds	r7, #40	; 0x28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	2001525c 	.word	0x2001525c

08003700 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	4907      	ldr	r1, [pc, #28]	; (8003730 <NVIC_EnableIRQ+0x30>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2001      	movs	r0, #1
 800371a:	fa00 f202 	lsl.w	r2, r0, r2
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000e100 	.word	0xe000e100

08003734 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003744:	2b00      	cmp	r3, #0
 8003746:	da0b      	bge.n	8003760 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	490c      	ldr	r1, [pc, #48]	; (8003780 <NVIC_SetPriority+0x4c>)
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	3b04      	subs	r3, #4
 8003756:	0112      	lsls	r2, r2, #4
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	440b      	add	r3, r1
 800375c:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800375e:	e009      	b.n	8003774 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	4907      	ldr	r1, [pc, #28]	; (8003784 <NVIC_SetPriority+0x50>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	0112      	lsls	r2, r2, #4
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	440b      	add	r3, r1
 8003770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000ed00 	.word	0xe000ed00
 8003784:	e000e100 	.word	0xe000e100

08003788 <main>:
#ifdef USE_SEMIHOSTING
extern void initialise_monitor_handles();
#endif

int main(void)
{
 8003788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378a:	b083      	sub	sp, #12
 800378c:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
    printf("Its a hello world application\r\n");
#endif

    DWT->CTRL |= (1<<0);//Data watch point trace->cyccnt(cycle count) in arm technical rm,it keeps time stamp
 800378e:	4b23      	ldr	r3, [pc, #140]	; (800381c <main+0x94>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a22      	ldr	r2, [pc, #136]	; (800381c <main+0x94>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6013      	str	r3, [r2, #0]

    //reset the RCC clock cconfiguration to default reset state
	//reset state is hsi=on,pll=off,hse=off, sysclk=16MHz

    RCC_DeInit();
 800379a:	f7fc fead 	bl	80004f8 <RCC_DeInit>

    //update the system core clock variable
    SystemCoreClockUpdate();
 800379e:	f000 fa43 	bl	8003c28 <SystemCoreClockUpdate>

    pvtHardwareSetup();
 80037a2:	f000 f903 	bl	80039ac <pvtHardwareSetup>

    sprintf(user_msg,"\rthis is demo of task delete project\r\n");
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <main+0x98>)
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <main+0x9c>)
 80037aa:	4614      	mov	r4, r2
 80037ac:	469c      	mov	ip, r3
 80037ae:	f104 0e20 	add.w	lr, r4, #32
 80037b2:	4665      	mov	r5, ip
 80037b4:	4626      	mov	r6, r4
 80037b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80037b8:	6028      	str	r0, [r5, #0]
 80037ba:	6069      	str	r1, [r5, #4]
 80037bc:	60aa      	str	r2, [r5, #8]
 80037be:	60eb      	str	r3, [r5, #12]
 80037c0:	3410      	adds	r4, #16
 80037c2:	f10c 0c10 	add.w	ip, ip, #16
 80037c6:	4574      	cmp	r4, lr
 80037c8:	d1f3      	bne.n	80037b2 <main+0x2a>
 80037ca:	4663      	mov	r3, ip
 80037cc:	4622      	mov	r2, r4
 80037ce:	6810      	ldr	r0, [r2, #0]
 80037d0:	6018      	str	r0, [r3, #0]
 80037d2:	8891      	ldrh	r1, [r2, #4]
 80037d4:	7992      	ldrb	r2, [r2, #6]
 80037d6:	8099      	strh	r1, [r3, #4]
 80037d8:	719a      	strb	r2, [r3, #6]
    printmsg(user_msg);
 80037da:	4811      	ldr	r0, [pc, #68]	; (8003820 <main+0x98>)
 80037dc:	f000 f994 	bl	8003b08 <printmsg>

    //Start recording
    SEGGER_SYSVIEW_Conf();
 80037e0:	f7fe fb50 	bl	8001e84 <SEGGER_SYSVIEW_Conf>
    SEGGER_SYSVIEW_Start();
 80037e4:	f7ff fa16 	bl	8002c14 <SEGGER_SYSVIEW_Start>

    //create two tasks:LED-TASK and BUTTON-TASK
    xTaskCreate(vTask1_handler, "TASK-1", 500, NULL, 2, &xTask1Handle);//stack size:500*4=~2kb
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <main+0xa0>)
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	2302      	movs	r3, #2
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037f6:	490d      	ldr	r1, [pc, #52]	; (800382c <main+0xa4>)
 80037f8:	480d      	ldr	r0, [pc, #52]	; (8003830 <main+0xa8>)
 80037fa:	f7fd f9d4 	bl	8000ba6 <xTaskCreate>
    xTaskCreate(vTask2_handler, "TASK-2", 500, NULL, 3, &xTask2Handle);
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <main+0xac>)
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	2303      	movs	r3, #3
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2300      	movs	r3, #0
 8003808:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800380c:	490a      	ldr	r1, [pc, #40]	; (8003838 <main+0xb0>)
 800380e:	480b      	ldr	r0, [pc, #44]	; (800383c <main+0xb4>)
 8003810:	f7fd f9c9 	bl	8000ba6 <xTaskCreate>
    //start the scheduler
    vTaskStartScheduler();
 8003814:	f7fd fbfc 	bl	8001010 <vTaskStartScheduler>
	for(;;);
 8003818:	e7fe      	b.n	8003818 <main+0x90>
 800381a:	bf00      	nop
 800381c:	e0001000 	.word	0xe0001000
 8003820:	200153f4 	.word	0x200153f4
 8003824:	080040b4 	.word	0x080040b4
 8003828:	20015340 	.word	0x20015340
 800382c:	080040dc 	.word	0x080040dc
 8003830:	08003841 	.word	0x08003841
 8003834:	20015344 	.word	0x20015344
 8003838:	080040e4 	.word	0x080040e4
 800383c:	080038f5 	.word	0x080038f5

08003840 <vTask1_handler>:
}

void vTask1_handler(void* params){
 8003840:	b5b0      	push	{r4, r5, r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]


	UBaseType_t p1,p2;
    sprintf(user_msg,"task 1 is running\r\n");
 8003848:	4a23      	ldr	r2, [pc, #140]	; (80038d8 <vTask1_handler+0x98>)
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <vTask1_handler+0x9c>)
 800384c:	4615      	mov	r5, r2
 800384e:	461c      	mov	r4, r3
 8003850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003852:	6028      	str	r0, [r5, #0]
 8003854:	6069      	str	r1, [r5, #4]
 8003856:	60aa      	str	r2, [r5, #8]
 8003858:	60eb      	str	r3, [r5, #12]
 800385a:	6820      	ldr	r0, [r4, #0]
 800385c:	6128      	str	r0, [r5, #16]
	printmsg(user_msg);
 800385e:	481e      	ldr	r0, [pc, #120]	; (80038d8 <vTask1_handler+0x98>)
 8003860:	f000 f952 	bl	8003b08 <printmsg>
	while(1){
    if(Button_Status_Flag==NOT_PRESSED){
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <vTask1_handler+0xa0>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <vTask1_handler+0x3c>
		rtos_delay(200);
 800386c:	20c8      	movs	r0, #200	; 0xc8
 800386e:	f000 f973 	bl	8003b58 <rtos_delay>
		//vTaskDelay(200);
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8003872:	2120      	movs	r1, #32
 8003874:	481b      	ldr	r0, [pc, #108]	; (80038e4 <vTask1_handler+0xa4>)
 8003876:	f7fc fde3 	bl	8000440 <GPIO_ToggleBits>
 800387a:	e7f3      	b.n	8003864 <vTask1_handler+0x24>
    }else {
	    Button_Status_Flag=NOT_PRESSED;
 800387c:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <vTask1_handler+0xa0>)
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]

		//button is pressed
		sprintf(user_msg,"task 1 PRIORITY is inversed\r\n");
 8003882:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <vTask1_handler+0x98>)
 8003884:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <vTask1_handler+0xa8>)
 8003886:	4615      	mov	r5, r2
 8003888:	461c      	mov	r4, r3
 800388a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800388c:	6028      	str	r0, [r5, #0]
 800388e:	6069      	str	r1, [r5, #4]
 8003890:	60aa      	str	r2, [r5, #8]
 8003892:	60eb      	str	r3, [r5, #12]
 8003894:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003896:	6128      	str	r0, [r5, #16]
 8003898:	6169      	str	r1, [r5, #20]
 800389a:	61aa      	str	r2, [r5, #24]
 800389c:	8823      	ldrh	r3, [r4, #0]
 800389e:	83ab      	strh	r3, [r5, #28]
		printmsg(user_msg);
 80038a0:	480d      	ldr	r0, [pc, #52]	; (80038d8 <vTask1_handler+0x98>)
 80038a2:	f000 f931 	bl	8003b08 <printmsg>
		p1=uxTaskPriorityGet(xTask1Handle);
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <vTask1_handler+0xac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fad6 	bl	8000e5c <uxTaskPriorityGet>
 80038b0:	60f8      	str	r0, [r7, #12]
		p2=uxTaskPriorityGet(xTask2Handle);
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <vTask1_handler+0xb0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd fad0 	bl	8000e5c <uxTaskPriorityGet>
 80038bc:	60b8      	str	r0, [r7, #8]

		//make this task the low priority and task 1 high priority
		vTaskPrioritySet(xTask2Handle, p1);
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <vTask1_handler+0xb0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68f9      	ldr	r1, [r7, #12]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd fae3 	bl	8000e90 <vTaskPrioritySet>
		vTaskPrioritySet(xTask1Handle, p2);
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <vTask1_handler+0xac>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68b9      	ldr	r1, [r7, #8]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd fadd 	bl	8000e90 <vTaskPrioritySet>
    if(Button_Status_Flag==NOT_PRESSED){
 80038d6:	e7c5      	b.n	8003864 <vTask1_handler+0x24>
 80038d8:	200153f4 	.word	0x200153f4
 80038dc:	080040ec 	.word	0x080040ec
 80038e0:	20015348 	.word	0x20015348
 80038e4:	40020000 	.word	0x40020000
 80038e8:	08004100 	.word	0x08004100
 80038ec:	20015340 	.word	0x20015340
 80038f0:	20015344 	.word	0x20015344

080038f4 <vTask2_handler>:
	}

	}


void vTask2_handler(void* params){
 80038f4:	b5b0      	push	{r4, r5, r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

	sprintf(user_msg,"task 2 is running\r\n");
 80038fc:	4a24      	ldr	r2, [pc, #144]	; (8003990 <vTask2_handler+0x9c>)
 80038fe:	4b25      	ldr	r3, [pc, #148]	; (8003994 <vTask2_handler+0xa0>)
 8003900:	4615      	mov	r5, r2
 8003902:	461c      	mov	r4, r3
 8003904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003906:	6028      	str	r0, [r5, #0]
 8003908:	6069      	str	r1, [r5, #4]
 800390a:	60aa      	str	r2, [r5, #8]
 800390c:	60eb      	str	r3, [r5, #12]
 800390e:	6820      	ldr	r0, [r4, #0]
 8003910:	6128      	str	r0, [r5, #16]
	printmsg(user_msg);
 8003912:	481f      	ldr	r0, [pc, #124]	; (8003990 <vTask2_handler+0x9c>)
 8003914:	f000 f8f8 	bl	8003b08 <printmsg>
	UBaseType_t p1,p2;


	while(1){
		if(Button_Status_Flag==NOT_PRESSED){
 8003918:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <vTask2_handler+0xa4>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d108      	bne.n	8003932 <vTask2_handler+0x3e>
			//button is not pressed
			//1 s delay for led toggling

			rtos_delay(1000);
 8003920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003924:	f000 f918 	bl	8003b58 <rtos_delay>
			//toggle led
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8003928:	2120      	movs	r1, #32
 800392a:	481c      	ldr	r0, [pc, #112]	; (800399c <vTask2_handler+0xa8>)
 800392c:	f7fc fd88 	bl	8000440 <GPIO_ToggleBits>
 8003930:	e7f2      	b.n	8003918 <vTask2_handler+0x24>



		}else {
			Button_Status_Flag=NOT_PRESSED;
 8003932:	4b19      	ldr	r3, [pc, #100]	; (8003998 <vTask2_handler+0xa4>)
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]

			//button is pressed
			sprintf(user_msg,"task 2 PRIORITY is inversed\r\n");
 8003938:	4a15      	ldr	r2, [pc, #84]	; (8003990 <vTask2_handler+0x9c>)
 800393a:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <vTask2_handler+0xac>)
 800393c:	4615      	mov	r5, r2
 800393e:	461c      	mov	r4, r3
 8003940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003942:	6028      	str	r0, [r5, #0]
 8003944:	6069      	str	r1, [r5, #4]
 8003946:	60aa      	str	r2, [r5, #8]
 8003948:	60eb      	str	r3, [r5, #12]
 800394a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800394c:	6128      	str	r0, [r5, #16]
 800394e:	6169      	str	r1, [r5, #20]
 8003950:	61aa      	str	r2, [r5, #24]
 8003952:	8823      	ldrh	r3, [r4, #0]
 8003954:	83ab      	strh	r3, [r5, #28]
			printmsg(user_msg);
 8003956:	480e      	ldr	r0, [pc, #56]	; (8003990 <vTask2_handler+0x9c>)
 8003958:	f000 f8d6 	bl	8003b08 <printmsg>
			p1=uxTaskPriorityGet(xTask1Handle);
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <vTask2_handler+0xb0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fd fa7b 	bl	8000e5c <uxTaskPriorityGet>
 8003966:	60f8      	str	r0, [r7, #12]
			p2=uxTaskPriorityGet(xTask2Handle);
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <vTask2_handler+0xb4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fd fa75 	bl	8000e5c <uxTaskPriorityGet>
 8003972:	60b8      	str	r0, [r7, #8]

			//make this task the low priority and task 1 high priority
			vTaskPrioritySet(xTask2Handle, p1);
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <vTask2_handler+0xb4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68f9      	ldr	r1, [r7, #12]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fa88 	bl	8000e90 <vTaskPrioritySet>
			vTaskPrioritySet(xTask1Handle, p2);
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <vTask2_handler+0xb0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd fa82 	bl	8000e90 <vTaskPrioritySet>
		if(Button_Status_Flag==NOT_PRESSED){
 800398c:	e7c4      	b.n	8003918 <vTask2_handler+0x24>
 800398e:	bf00      	nop
 8003990:	200153f4 	.word	0x200153f4
 8003994:	08004120 	.word	0x08004120
 8003998:	20015348 	.word	0x20015348
 800399c:	40020000 	.word	0x40020000
 80039a0:	08004134 	.word	0x08004134
 80039a4:	20015340 	.word	0x20015340
 80039a8:	20015344 	.word	0x20015344

080039ac <pvtHardwareSetup>:

		}
		}
	}

static void pvtHardwareSetup(void){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
	UART2_Setup();
 80039b0:	f000 f85c 	bl	8003a6c <UART2_Setup>
	//Configure button PC13 and LED PA5
	GPIO_Setup();
 80039b4:	f000 f802 	bl	80039bc <GPIO_Setup>


}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}

080039bc <GPIO_Setup>:



static void GPIO_Setup(void){
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef buttonGPIO,LED_GPIO;
	memset(&buttonGPIO,0,sizeof(buttonGPIO));
 80039c2:	f107 0310 	add.w	r3, r7, #16
 80039c6:	2208      	movs	r2, #8
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 faf8 	bl	8003fc0 <memset>
	memset(&LED_GPIO,0,sizeof(LED_GPIO));
 80039d0:	f107 0308 	add.w	r3, r7, #8
 80039d4:	2208      	movs	r2, #8
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 faf1 	bl	8003fc0 <memset>

	//enable clock for gpioa and gpioc and syscfg
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80039de:	2101      	movs	r1, #1
 80039e0:	2001      	movs	r0, #1
 80039e2:	f7fc febb 	bl	800075c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80039e6:	2101      	movs	r1, #1
 80039e8:	2004      	movs	r0, #4
 80039ea:	f7fc feb7 	bl	800075c <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80039ee:	2101      	movs	r1, #1
 80039f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039f4:	f7fc fef2 	bl	80007dc <RCC_APB2PeriphClockCmd>

	//configure led pin pa5 as output
	LED_GPIO.GPIO_Pin=GPIO_Pin_5;
 80039f8:	2320      	movs	r3, #32
 80039fa:	60bb      	str	r3, [r7, #8]
	LED_GPIO.GPIO_Mode=GPIO_Mode_OUT;
 80039fc:	2301      	movs	r3, #1
 80039fe:	733b      	strb	r3, [r7, #12]
	LED_GPIO.GPIO_OType=GPIO_OType_PP;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73bb      	strb	r3, [r7, #14]
	LED_GPIO.GPIO_PuPd=GPIO_PuPd_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]

	GPIO_Init(GPIOA, &LED_GPIO);
 8003a08:	f107 0308 	add.w	r3, r7, #8
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4815      	ldr	r0, [pc, #84]	; (8003a64 <GPIO_Setup+0xa8>)
 8003a10:	f7fc fc88 	bl	8000324 <GPIO_Init>

	//configure button gpio pc13 as input
	buttonGPIO.GPIO_Pin=GPIO_Pin_13;
 8003a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a18:	613b      	str	r3, [r7, #16]
	buttonGPIO.GPIO_Mode=GPIO_Mode_IN;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	753b      	strb	r3, [r7, #20]

	GPIO_Init(GPIOC, &buttonGPIO);
 8003a1e:	f107 0310 	add.w	r3, r7, #16
 8003a22:	4619      	mov	r1, r3
 8003a24:	4810      	ldr	r0, [pc, #64]	; (8003a68 <GPIO_Setup+0xac>)
 8003a26:	f7fc fc7d 	bl	8000324 <GPIO_Init>
	//interrupt configuration for the button pc13
	//1.system configuration for exti lines
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource13);
 8003a2a:	210d      	movs	r1, #13
 8003a2c:	2002      	movs	r0, #2
 8003a2e:	f7fc fef5 	bl	800081c <SYSCFG_EXTILineConfig>
    //2.exti configuration(peripheral side)-13 th line,interrupt mode,falling edge
	EXTI_InitTypeDef EXTI_pc13;
	EXTI_pc13.EXTI_Mode=EXTI_Mode_Interrupt;
 8003a32:	2300      	movs	r3, #0
 8003a34:	713b      	strb	r3, [r7, #4]
	EXTI_pc13.EXTI_Line=EXTI_Line13;
 8003a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a3a:	603b      	str	r3, [r7, #0]
	EXTI_pc13.EXTI_Trigger=EXTI_Trigger_Falling;
 8003a3c:	230c      	movs	r3, #12
 8003a3e:	717b      	strb	r3, [r7, #5]
	EXTI_pc13.EXTI_LineCmd=ENABLE;
 8003a40:	2301      	movs	r3, #1
 8003a42:	71bb      	strb	r3, [r7, #6]

	EXTI_Init(&EXTI_pc13);
 8003a44:	463b      	mov	r3, r7
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fc fbea 	bl	8000220 <EXTI_Init>
	//3.nvic configuration(processor side),for exti 13 line
	NVIC_SetPriority(EXTI15_10_IRQn, 15);
 8003a4c:	210f      	movs	r1, #15
 8003a4e:	2028      	movs	r0, #40	; 0x28
 8003a50:	f7ff fe70 	bl	8003734 <NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a54:	2028      	movs	r0, #40	; 0x28
 8003a56:	f7ff fe53 	bl	8003700 <NVIC_EnableIRQ>

}
 8003a5a:	bf00      	nop
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40020000 	.word	0x40020000
 8003a68:	40020800 	.word	0x40020800

08003a6c <UART2_Setup>:

static void UART2_Setup(void){
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
	    GPIO_InitTypeDef UART_Gpio;
		memset(&UART_Gpio,0,sizeof(UART_Gpio));
 8003a72:	f107 0310 	add.w	r3, r7, #16
 8003a76:	2208      	movs	r2, #8
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 faa0 	bl	8003fc0 <memset>
		USART_InitTypeDef UART_Handle;
		memset(&UART_Handle,0,sizeof(UART_Handle));
 8003a80:	463b      	mov	r3, r7
 8003a82:	2210      	movs	r2, #16
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fa9a 	bl	8003fc0 <memset>

	//enable clock for uart peripheral and gpioa peripheral
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003a92:	f7fc fe83 	bl	800079c <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003a96:	2101      	movs	r1, #1
 8003a98:	2001      	movs	r0, #1
 8003a9a:	f7fc fe5f 	bl	800075c <RCC_AHB1PeriphClockCmd>

		//configure pa2 as uart_tx and pa3 as uart_rx

		UART_Gpio.GPIO_Pin=GPIO_Pin_2 | GPIO_Pin_3;
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	613b      	str	r3, [r7, #16]
		UART_Gpio.GPIO_Mode=GPIO_Mode_AF;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	753b      	strb	r3, [r7, #20]
		UART_Gpio.GPIO_PuPd=GPIO_PuPd_UP;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
		GPIO_Init(GPIOA, &UART_Gpio);
 8003aaa:	f107 0310 	add.w	r3, r7, #16
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4813      	ldr	r0, [pc, #76]	; (8003b00 <UART2_Setup+0x94>)
 8003ab2:	f7fc fc37 	bl	8000324 <GPIO_Init>

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);//PA2 CONFIG AF7
 8003ab6:	2207      	movs	r2, #7
 8003ab8:	2102      	movs	r1, #2
 8003aba:	4811      	ldr	r0, [pc, #68]	; (8003b00 <UART2_Setup+0x94>)
 8003abc:	f7fc fcd2 	bl	8000464 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);//PA3 CONFIG AF7
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	2103      	movs	r1, #3
 8003ac4:	480e      	ldr	r0, [pc, #56]	; (8003b00 <UART2_Setup+0x94>)
 8003ac6:	f7fc fccd 	bl	8000464 <GPIO_PinAFConfig>

		//UART PERIPHERAL CONFIGURATION
		UART_Handle.USART_BaudRate=115200;
 8003aca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003ace:	603b      	str	r3, [r7, #0]
		UART_Handle.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	81bb      	strh	r3, [r7, #12]
		UART_Handle.USART_Mode=USART_Mode_Tx | USART_Mode_Rx;
 8003ad4:	230c      	movs	r3, #12
 8003ad6:	817b      	strh	r3, [r7, #10]
		UART_Handle.USART_Parity=USART_Parity_No;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	813b      	strh	r3, [r7, #8]
		UART_Handle.USART_StopBits=USART_StopBits_1;
 8003adc:	2300      	movs	r3, #0
 8003ade:	80fb      	strh	r3, [r7, #6]
		UART_Handle.USART_WordLength=USART_WordLength_8b;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	80bb      	strh	r3, [r7, #4]

		USART_Init(USART2, &UART_Handle);
 8003ae4:	463b      	mov	r3, r7
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4806      	ldr	r0, [pc, #24]	; (8003b04 <UART2_Setup+0x98>)
 8003aea:	f7fc fed9 	bl	80008a0 <USART_Init>
		USART_Cmd(USART2, ENABLE);
 8003aee:	2101      	movs	r1, #1
 8003af0:	4804      	ldr	r0, [pc, #16]	; (8003b04 <UART2_Setup+0x98>)
 8003af2:	f7fc ff8f 	bl	8000a14 <USART_Cmd>

}
 8003af6:	bf00      	nop
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40020000 	.word	0x40020000
 8003b04:	40004400 	.word	0x40004400

08003b08 <printmsg>:


void printmsg(char* msg){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

	for(uint32_t i=0;i<strlen(msg);i++){
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e013      	b.n	8003b3e <printmsg+0x36>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)==RESET);
 8003b16:	bf00      	nop
 8003b18:	2180      	movs	r1, #128	; 0x80
 8003b1a:	480e      	ldr	r0, [pc, #56]	; (8003b54 <printmsg+0x4c>)
 8003b1c:	f7fc ffac 	bl	8000a78 <USART_GetFlagStatus>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f8      	beq.n	8003b18 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	4619      	mov	r1, r3
 8003b32:	4808      	ldr	r0, [pc, #32]	; (8003b54 <printmsg+0x4c>)
 8003b34:	f7fc ff8e 	bl	8000a54 <USART_SendData>
	for(uint32_t i=0;i<strlen(msg);i++){
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fc fb66 	bl	8000210 <strlen>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d3e4      	bcc.n	8003b16 <printmsg+0xe>
	}

}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40004400 	.word	0x40004400

08003b58 <rtos_delay>:

void rtos_delay(uint32_t Delay_In_Ms){
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	uint32_t currect_tick_count=xTaskGetTickCount();
 8003b60:	f7fd fb5a 	bl	8001218 <xTaskGetTickCount>
 8003b64:	60f8      	str	r0, [r7, #12]
	//convert from ms to number of ticks
	uint32_t Delay_In_Ticks=(Delay_In_Ms*configTICK_RATE_HZ)/1000;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b6c:	fb02 f303 	mul.w	r3, r2, r3
 8003b70:	4a08      	ldr	r2, [pc, #32]	; (8003b94 <rtos_delay+0x3c>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	099b      	lsrs	r3, r3, #6
 8003b78:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount()<(currect_tick_count+Delay_In_Ticks));
 8003b7a:	bf00      	nop
 8003b7c:	f7fd fb4c 	bl	8001218 <xTaskGetTickCount>
 8003b80:	4601      	mov	r1, r0
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4413      	add	r3, r2
 8003b88:	4299      	cmp	r1, r3
 8003b8a:	d3f7      	bcc.n	8003b7c <rtos_delay+0x24>

}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	10624dd3 	.word	0x10624dd3

08003b98 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8003b9c:	f7ff fb04 	bl	80031a8 <SEGGER_SYSVIEW_RecordEnterISR>
	//1.clear pending bit in exti_Pr, if it is not cleared by writing 1 to it it will produce cont. interrupt
	EXTI_ClearITPendingBit(EXTI_Line13);
 8003ba0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ba4:	f7fc fbae 	bl	8000304 <EXTI_ClearITPendingBit>
	//2.button is pressed update the flag
	Button_Status_Flag=PRESSED;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <EXTI15_10_IRQHandler+0x20>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]

	traceISR_EXIT();
 8003bae:	f7ff fb3d 	bl	800322c <SEGGER_SYSVIEW_RecordExitISR>

}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20015348 	.word	0x20015348

08003bbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <SystemInit+0x60>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <SystemInit+0x60>)
 8003bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <SystemInit+0x64>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <SystemInit+0x64>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <SystemInit+0x64>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <SystemInit+0x64>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <SystemInit+0x64>)
 8003be8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <SystemInit+0x64>)
 8003bf4:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <SystemInit+0x68>)
 8003bf6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <SystemInit+0x64>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <SystemInit+0x64>)
 8003bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <SystemInit+0x64>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003c0a:	f000 f8db 	bl	8003dc4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c0e:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <SystemInit+0x60>)
 8003c10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c14:	609a      	str	r2, [r3, #8]
#endif
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	e000ed00 	.word	0xe000ed00
 8003c20:	40023800 	.word	0x40023800
 8003c24:	24003010 	.word	0x24003010

08003c28 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	2302      	movs	r3, #2
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	2302      	movs	r3, #2
 8003c40:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8003c42:	2302      	movs	r3, #2
 8003c44:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003c46:	4b5a      	ldr	r3, [pc, #360]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b0c      	cmp	r3, #12
 8003c54:	f200 8092 	bhi.w	8003d7c <SystemCoreClockUpdate+0x154>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <SystemCoreClockUpdate+0x38>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003d7d 	.word	0x08003d7d
 8003c68:	08003d7d 	.word	0x08003d7d
 8003c6c:	08003d7d 	.word	0x08003d7d
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	08003d7d 	.word	0x08003d7d
 8003c78:	08003d7d 	.word	0x08003d7d
 8003c7c:	08003d7d 	.word	0x08003d7d
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003d7d 	.word	0x08003d7d
 8003c88:	08003d7d 	.word	0x08003d7d
 8003c8c:	08003d7d 	.word	0x08003d7d
 8003c90:	08003d11 	.word	0x08003d11
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003c94:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <SystemCoreClockUpdate+0x18c>)
 8003c96:	4a48      	ldr	r2, [pc, #288]	; (8003db8 <SystemCoreClockUpdate+0x190>)
 8003c98:	601a      	str	r2, [r3, #0]
      break;
 8003c9a:	e073      	b.n	8003d84 <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003c9c:	4b45      	ldr	r3, [pc, #276]	; (8003db4 <SystemCoreClockUpdate+0x18c>)
 8003c9e:	4a47      	ldr	r2, [pc, #284]	; (8003dbc <SystemCoreClockUpdate+0x194>)
 8003ca0:	601a      	str	r2, [r3, #0]
      break;
 8003ca2:	e06f      	b.n	8003d84 <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003ca4:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	0d9b      	lsrs	r3, r3, #22
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb0:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb8:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00c      	beq.n	8003cda <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003cc0:	4a3e      	ldr	r2, [pc, #248]	; (8003dbc <SystemCoreClockUpdate+0x194>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	4a39      	ldr	r2, [pc, #228]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003cca:	6852      	ldr	r2, [r2, #4]
 8003ccc:	0992      	lsrs	r2, r2, #6
 8003cce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e00b      	b.n	8003cf2 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003cda:	4a37      	ldr	r2, [pc, #220]	; (8003db8 <SystemCoreClockUpdate+0x190>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	4a33      	ldr	r2, [pc, #204]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003ce4:	6852      	ldr	r2, [r2, #4]
 8003ce6:	0992      	lsrs	r2, r2, #6
 8003ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cec:	fb02 f303 	mul.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003cf2:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	0c1b      	lsrs	r3, r3, #16
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0a:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <SystemCoreClockUpdate+0x18c>)
 8003d0c:	6013      	str	r3, [r2, #0]
      break;
 8003d0e:	e039      	b.n	8003d84 <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003d10:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	0d9b      	lsrs	r3, r3, #22
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d1c:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d24:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00c      	beq.n	8003d46 <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003d2c:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <SystemCoreClockUpdate+0x194>)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003d36:	6852      	ldr	r2, [r2, #4]
 8003d38:	0992      	lsrs	r2, r2, #6
 8003d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e00b      	b.n	8003d5e <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003d46:	4a1c      	ldr	r2, [pc, #112]	; (8003db8 <SystemCoreClockUpdate+0x190>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003d50:	6852      	ldr	r2, [r2, #4]
 8003d52:	0992      	lsrs	r2, r2, #6
 8003d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d58:	fb02 f303 	mul.w	r3, r2, r3
 8003d5c:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8003d5e:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	0f1b      	lsrs	r3, r3, #28
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	3301      	adds	r3, #1
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	4a0f      	ldr	r2, [pc, #60]	; (8003db4 <SystemCoreClockUpdate+0x18c>)
 8003d78:	6013      	str	r3, [r2, #0]
      break;
 8003d7a:	e003      	b.n	8003d84 <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <SystemCoreClockUpdate+0x18c>)
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <SystemCoreClockUpdate+0x190>)
 8003d80:	601a      	str	r2, [r3, #0]
      break;
 8003d82:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <SystemCoreClockUpdate+0x188>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	4a0c      	ldr	r2, [pc, #48]	; (8003dc0 <SystemCoreClockUpdate+0x198>)
 8003d90:	5cd3      	ldrb	r3, [r2, r3]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <SystemCoreClockUpdate+0x18c>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003da0:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <SystemCoreClockUpdate+0x18c>)
 8003da2:	6013      	str	r3, [r2, #0]
}
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40023800 	.word	0x40023800
 8003db4:	20000014 	.word	0x20000014
 8003db8:	00f42400 	.word	0x00f42400
 8003dbc:	007a1200 	.word	0x007a1200
 8003dc0:	20000018 	.word	0x20000018

08003dc4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003dd2:	4b43      	ldr	r3, [pc, #268]	; (8003ee0 <SetSysClock+0x11c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a42      	ldr	r2, [pc, #264]	; (8003ee0 <SetSysClock+0x11c>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003dde:	4b40      	ldr	r3, [pc, #256]	; (8003ee0 <SetSysClock+0x11c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3301      	adds	r3, #1
 8003dec:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d103      	bne.n	8003dfc <SetSysClock+0x38>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003dfa:	d1f0      	bne.n	8003dde <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003dfc:	4b38      	ldr	r3, [pc, #224]	; (8003ee0 <SetSysClock+0x11c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	e001      	b.n	8003e12 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d15c      	bne.n	8003ed2 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003e18:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <SetSysClock+0x11c>)
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	4a30      	ldr	r2, [pc, #192]	; (8003ee0 <SetSysClock+0x11c>)
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003e24:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <SetSysClock+0x120>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a2e      	ldr	r2, [pc, #184]	; (8003ee4 <SetSysClock+0x120>)
 8003e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e2e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003e30:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <SetSysClock+0x11c>)
 8003e32:	4a2b      	ldr	r2, [pc, #172]	; (8003ee0 <SetSysClock+0x11c>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003e38:	4b29      	ldr	r3, [pc, #164]	; (8003ee0 <SetSysClock+0x11c>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a28      	ldr	r2, [pc, #160]	; (8003ee0 <SetSysClock+0x11c>)
 8003e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e42:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003e44:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <SetSysClock+0x11c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a25      	ldr	r2, [pc, #148]	; (8003ee0 <SetSysClock+0x11c>)
 8003e4a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003e4e:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003e50:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <SetSysClock+0x11c>)
 8003e52:	4a25      	ldr	r2, [pc, #148]	; (8003ee8 <SetSysClock+0x124>)
 8003e54:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <SetSysClock+0x11c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a21      	ldr	r2, [pc, #132]	; (8003ee0 <SetSysClock+0x11c>)
 8003e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e60:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003e62:	bf00      	nop
 8003e64:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <SetSysClock+0x11c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f9      	beq.n	8003e64 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8003e70:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <SetSysClock+0x120>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <SetSysClock+0x120>)
 8003e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7a:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8003e7c:	bf00      	nop
 8003e7e:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <SetSysClock+0x120>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f9      	beq.n	8003e7e <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <SetSysClock+0x120>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <SetSysClock+0x120>)
 8003e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e94:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8003e96:	bf00      	nop
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <SetSysClock+0x120>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f9      	beq.n	8003e98 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <SetSysClock+0x128>)
 8003ea6:	f240 7205 	movw	r2, #1797	; 0x705
 8003eaa:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003eac:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <SetSysClock+0x11c>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ee0 <SetSysClock+0x11c>)
 8003eb2:	f023 0303 	bic.w	r3, r3, #3
 8003eb6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <SetSysClock+0x11c>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <SetSysClock+0x11c>)
 8003ebe:	f043 0302 	orr.w	r3, r3, #2
 8003ec2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003ec4:	bf00      	nop
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <SetSysClock+0x11c>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d1f9      	bne.n	8003ec6 <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	77405a08 	.word	0x77405a08
 8003eec:	40023c00 	.word	0x40023c00

08003ef0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ef0:	480d      	ldr	r0, [pc, #52]	; (8003f28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ef2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ef4:	480d      	ldr	r0, [pc, #52]	; (8003f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8003ef6:	490e      	ldr	r1, [pc, #56]	; (8003f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ef8:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <LoopForever+0xe>)
  movs r3, #0
 8003efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003efc:	e002      	b.n	8003f04 <LoopCopyDataInit>

08003efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f02:	3304      	adds	r3, #4

08003f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f08:	d3f9      	bcc.n	8003efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f0a:	4a0b      	ldr	r2, [pc, #44]	; (8003f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f0c:	4c0b      	ldr	r4, [pc, #44]	; (8003f3c <LoopForever+0x16>)
  movs r3, #0
 8003f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f10:	e001      	b.n	8003f16 <LoopFillZerobss>

08003f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f14:	3204      	adds	r2, #4

08003f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f18:	d3fb      	bcc.n	8003f12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003f1a:	f7ff fe4f 	bl	8003bbc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003f1e:	f000 f811 	bl	8003f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f22:	f7ff fc31 	bl	8003788 <main>

08003f26 <LoopForever>:

LoopForever:
    b LoopForever
 8003f26:	e7fe      	b.n	8003f26 <LoopForever>
  ldr   r0, =_estack
 8003f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f30:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8003f34:	08004170 	.word	0x08004170
  ldr r2, =_sbss
 8003f38:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8003f3c:	20015458 	.word	0x20015458

08003f40 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f40:	e7fe      	b.n	8003f40 <ADC_IRQHandler>
	...

08003f44 <__libc_init_array>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	4e0d      	ldr	r6, [pc, #52]	; (8003f7c <__libc_init_array+0x38>)
 8003f48:	4c0d      	ldr	r4, [pc, #52]	; (8003f80 <__libc_init_array+0x3c>)
 8003f4a:	1ba4      	subs	r4, r4, r6
 8003f4c:	10a4      	asrs	r4, r4, #2
 8003f4e:	2500      	movs	r5, #0
 8003f50:	42a5      	cmp	r5, r4
 8003f52:	d109      	bne.n	8003f68 <__libc_init_array+0x24>
 8003f54:	4e0b      	ldr	r6, [pc, #44]	; (8003f84 <__libc_init_array+0x40>)
 8003f56:	4c0c      	ldr	r4, [pc, #48]	; (8003f88 <__libc_init_array+0x44>)
 8003f58:	f000 f83a 	bl	8003fd0 <_init>
 8003f5c:	1ba4      	subs	r4, r4, r6
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	2500      	movs	r5, #0
 8003f62:	42a5      	cmp	r5, r4
 8003f64:	d105      	bne.n	8003f72 <__libc_init_array+0x2e>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f6c:	4798      	blx	r3
 8003f6e:	3501      	adds	r5, #1
 8003f70:	e7ee      	b.n	8003f50 <__libc_init_array+0xc>
 8003f72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f76:	4798      	blx	r3
 8003f78:	3501      	adds	r5, #1
 8003f7a:	e7f2      	b.n	8003f62 <__libc_init_array+0x1e>
 8003f7c:	08004168 	.word	0x08004168
 8003f80:	08004168 	.word	0x08004168
 8003f84:	08004168 	.word	0x08004168
 8003f88:	0800416c 	.word	0x0800416c

08003f8c <memcmp>:
 8003f8c:	b530      	push	{r4, r5, lr}
 8003f8e:	2400      	movs	r4, #0
 8003f90:	42a2      	cmp	r2, r4
 8003f92:	d101      	bne.n	8003f98 <memcmp+0xc>
 8003f94:	2000      	movs	r0, #0
 8003f96:	e007      	b.n	8003fa8 <memcmp+0x1c>
 8003f98:	5d03      	ldrb	r3, [r0, r4]
 8003f9a:	3401      	adds	r4, #1
 8003f9c:	190d      	adds	r5, r1, r4
 8003f9e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003fa2:	42ab      	cmp	r3, r5
 8003fa4:	d0f4      	beq.n	8003f90 <memcmp+0x4>
 8003fa6:	1b58      	subs	r0, r3, r5
 8003fa8:	bd30      	pop	{r4, r5, pc}

08003faa <memcpy>:
 8003faa:	b510      	push	{r4, lr}
 8003fac:	1e43      	subs	r3, r0, #1
 8003fae:	440a      	add	r2, r1
 8003fb0:	4291      	cmp	r1, r2
 8003fb2:	d100      	bne.n	8003fb6 <memcpy+0xc>
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fbe:	e7f7      	b.n	8003fb0 <memcpy+0x6>

08003fc0 <memset>:
 8003fc0:	4402      	add	r2, r0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d100      	bne.n	8003fca <memset+0xa>
 8003fc8:	4770      	bx	lr
 8003fca:	f803 1b01 	strb.w	r1, [r3], #1
 8003fce:	e7f9      	b.n	8003fc4 <memset+0x4>

08003fd0 <_init>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	bf00      	nop
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr

08003fdc <_fini>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	bf00      	nop
 8003fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe2:	bc08      	pop	{r3}
 8003fe4:	469e      	mov	lr, r3
 8003fe6:	4770      	bx	lr
