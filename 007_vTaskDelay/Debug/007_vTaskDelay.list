
007_vTaskDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004338  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08004508  08004508  00014508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d4  080046d4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080046d4  080046d4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d4  080046d4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080046dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001543c  20000090  0800476c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200154cc  0800476c  000254cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7b3  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b03  00000000  00000000  0002d873  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b18  00000000  00000000  0002f378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  0002fe90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ae0  00000000  00000000  000308d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009aec  00000000  00000000  000333b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ec96  00000000  00000000  0003ce9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bbb32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003770  00000000  00000000  000bbbb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080044f0 	.word	0x080044f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	080044f0 	.word	0x080044f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	e076      	b.n	80003ca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002dc:	2201      	movs	r2, #1
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	693a      	ldr	r2, [r7, #16]
 80002ec:	4013      	ands	r3, r2
 80002ee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d165      	bne.n	80003c4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43db      	mvns	r3, r3
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	4619      	mov	r1, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d003      	beq.n	8000336 <GPIO_Init+0x76>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d12e      	bne.n	8000394 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689a      	ldr	r2, [r3, #8]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	2103      	movs	r1, #3
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	4619      	mov	r1, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	b29b      	uxth	r3, r3
 800036c:	4619      	mov	r1, r3
 800036e:	2301      	movs	r3, #1
 8000370:	408b      	lsls	r3, r1
 8000372:	43db      	mvns	r3, r3
 8000374:	401a      	ands	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	7992      	ldrb	r2, [r2, #6]
 8000382:	4611      	mov	r1, r2
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	b292      	uxth	r2, r2
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	b292      	uxth	r2, r2
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	b29b      	uxth	r3, r3
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	401a      	ands	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	79db      	ldrb	r3, [r3, #7]
 80003b4:	4619      	mov	r1, r3
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2b0f      	cmp	r3, #15
 80003ce:	d985      	bls.n	80002dc <GPIO_Init+0x1c>
    }
  }
}
 80003d0:	bf00      	nop
 80003d2:	371c      	adds	r7, #28
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003e8:	2300      	movs	r3, #0
 80003ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	887b      	ldrh	r3, [r7, #2]
 80003f2:	4013      	ands	r3, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003f8:	2301      	movs	r3, #1
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e001      	b.n	8000402 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000402:	7bfb      	ldrb	r3, [r7, #15]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	887b      	ldrh	r3, [r7, #2]
 8000422:	405a      	eors	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	615a      	str	r2, [r3, #20]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	807b      	strh	r3, [r7, #2]
 8000440:	4613      	mov	r3, r2
 8000442:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000448:	2300      	movs	r3, #0
 800044a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800044c:	787a      	ldrb	r2, [r7, #1]
 800044e:	887b      	ldrh	r3, [r7, #2]
 8000450:	f003 0307 	and.w	r3, r3, #7
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800045c:	887b      	ldrh	r3, [r7, #2]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b29b      	uxth	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3208      	adds	r2, #8
 8000468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046c:	887b      	ldrh	r3, [r7, #2]
 800046e:	f003 0307 	and.w	r3, r3, #7
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	210f      	movs	r1, #15
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	43db      	mvns	r3, r3
 800047c:	8879      	ldrh	r1, [r7, #2]
 800047e:	08c9      	lsrs	r1, r1, #3
 8000480:	b289      	uxth	r1, r1
 8000482:	4608      	mov	r0, r1
 8000484:	ea02 0103 	and.w	r1, r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f100 0208 	add.w	r2, r0, #8
 800048e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000492:	887b      	ldrh	r3, [r7, #2]
 8000494:	08db      	lsrs	r3, r3, #3
 8000496:	b29b      	uxth	r3, r3
 8000498:	461a      	mov	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3208      	adds	r2, #8
 800049e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004a8:	887b      	ldrh	r3, [r7, #2]
 80004aa:	08db      	lsrs	r3, r3, #3
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3208      	adds	r2, #8
 80004b4:	68b9      	ldr	r1, [r7, #8]
 80004b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <RCC_DeInit+0x60>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <RCC_DeInit+0x60>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <RCC_DeInit+0x60>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <RCC_DeInit+0x60>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <RCC_DeInit+0x60>)
 80004e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004ec:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <RCC_DeInit+0x60>)
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <RCC_DeInit+0x64>)
 80004f2:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <RCC_DeInit+0x60>)
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <RCC_DeInit+0x68>)
 80004f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <RCC_DeInit+0x60>)
 80004fe:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <RCC_DeInit+0x6c>)
 8000500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <RCC_DeInit+0x60>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <RCC_DeInit+0x60>)
 800050a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800050e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <RCC_DeInit+0x60>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <RCC_DeInit+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40023800 	.word	0x40023800
 800052c:	24003010 	.word	0x24003010
 8000530:	20003000 	.word	0x20003000
 8000534:	24003000 	.word	0x24003000

08000538 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000538:	b480      	push	{r7}
 800053a:	b08b      	sub	sp, #44	; 0x2c
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	2300      	movs	r3, #0
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
 800054c:	2302      	movs	r3, #2
 800054e:	61bb      	str	r3, [r7, #24]
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	2302      	movs	r3, #2
 8000556:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000558:	2302      	movs	r3, #2
 800055a:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800055c:	4b6f      	ldr	r3, [pc, #444]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	f003 030c 	and.w	r3, r3, #12
 8000564:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000566:	6a3b      	ldr	r3, [r7, #32]
 8000568:	2b0c      	cmp	r3, #12
 800056a:	f200 8091 	bhi.w	8000690 <RCC_GetClocksFreq+0x158>
 800056e:	a201      	add	r2, pc, #4	; (adr r2, 8000574 <RCC_GetClocksFreq+0x3c>)
 8000570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000574:	080005a9 	.word	0x080005a9
 8000578:	08000691 	.word	0x08000691
 800057c:	08000691 	.word	0x08000691
 8000580:	08000691 	.word	0x08000691
 8000584:	080005b1 	.word	0x080005b1
 8000588:	08000691 	.word	0x08000691
 800058c:	08000691 	.word	0x08000691
 8000590:	08000691 	.word	0x08000691
 8000594:	080005b9 	.word	0x080005b9
 8000598:	08000691 	.word	0x08000691
 800059c:	08000691 	.word	0x08000691
 80005a0:	08000691 	.word	0x08000691
 80005a4:	08000625 	.word	0x08000625
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a5d      	ldr	r2, [pc, #372]	; (8000720 <RCC_GetClocksFreq+0x1e8>)
 80005ac:	601a      	str	r2, [r3, #0]
    break;
 80005ae:	e073      	b.n	8000698 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a5c      	ldr	r2, [pc, #368]	; (8000724 <RCC_GetClocksFreq+0x1ec>)
 80005b4:	601a      	str	r2, [r3, #0]
    break;
 80005b6:	e06f      	b.n	8000698 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005b8:	4b58      	ldr	r3, [pc, #352]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	0d9b      	lsrs	r3, r3, #22
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005c4:	4b55      	ldr	r3, [pc, #340]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005cc:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00c      	beq.n	80005ee <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005d4:	4a53      	ldr	r2, [pc, #332]	; (8000724 <RCC_GetClocksFreq+0x1ec>)
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005dc:	4a4f      	ldr	r2, [pc, #316]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80005de:	6852      	ldr	r2, [r2, #4]
 80005e0:	0992      	lsrs	r2, r2, #6
 80005e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
 80005ec:	e00b      	b.n	8000606 <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005ee:	4a4c      	ldr	r2, [pc, #304]	; (8000720 <RCC_GetClocksFreq+0x1e8>)
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4a49      	ldr	r2, [pc, #292]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80005f8:	6852      	ldr	r2, [r2, #4]
 80005fa:	0992      	lsrs	r2, r2, #6
 80005fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000600:	fb02 f303 	mul.w	r3, r2, r3
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000606:	4b45      	ldr	r3, [pc, #276]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	0c1b      	lsrs	r3, r3, #16
 800060c:	f003 0303 	and.w	r3, r3, #3
 8000610:	3301      	adds	r3, #1
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	fbb2 f2f3 	udiv	r2, r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
    break;
 8000622:	e039      	b.n	8000698 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000624:	4b3d      	ldr	r3, [pc, #244]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	0d9b      	lsrs	r3, r3, #22
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000630:	4b3a      	ldr	r3, [pc, #232]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000638:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00c      	beq.n	800065a <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000640:	4a38      	ldr	r2, [pc, #224]	; (8000724 <RCC_GetClocksFreq+0x1ec>)
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	fbb2 f3f3 	udiv	r3, r2, r3
 8000648:	4a34      	ldr	r2, [pc, #208]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 800064a:	6852      	ldr	r2, [r2, #4]
 800064c:	0992      	lsrs	r2, r2, #6
 800064e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000652:	fb02 f303 	mul.w	r3, r2, r3
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
 8000658:	e00b      	b.n	8000672 <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <RCC_GetClocksFreq+0x1e8>)
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000662:	4a2e      	ldr	r2, [pc, #184]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 8000664:	6852      	ldr	r2, [r2, #4]
 8000666:	0992      	lsrs	r2, r2, #6
 8000668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	0f1b      	lsrs	r3, r3, #28
 8000678:	f003 0307 	and.w	r3, r3, #7
 800067c:	3301      	adds	r3, #1
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 8000682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	fbb2 f2f3 	udiv	r2, r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	601a      	str	r2, [r3, #0]
    break;
 800068e:	e003      	b.n	8000698 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a23      	ldr	r2, [pc, #140]	; (8000720 <RCC_GetClocksFreq+0x1e8>)
 8000694:	601a      	str	r2, [r3, #0]
    break;
 8000696:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006a0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80006a2:	6a3b      	ldr	r3, [r7, #32]
 80006a4:	091b      	lsrs	r3, r3, #4
 80006a6:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006a8:	4a1f      	ldr	r2, [pc, #124]	; (8000728 <RCC_GetClocksFreq+0x1f0>)
 80006aa:	6a3b      	ldr	r3, [r7, #32]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	40da      	lsrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80006c8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	0a9b      	lsrs	r3, r3, #10
 80006ce:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006d0:	4a15      	ldr	r2, [pc, #84]	; (8000728 <RCC_GetClocksFreq+0x1f0>)
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	40da      	lsrs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <RCC_GetClocksFreq+0x1e4>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80006f0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	0b5b      	lsrs	r3, r3, #13
 80006f6:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <RCC_GetClocksFreq+0x1f0>)
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	4413      	add	r3, r2
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	40da      	lsrs	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
}
 8000710:	bf00      	nop
 8000712:	372c      	adds	r7, #44	; 0x2c
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40023800 	.word	0x40023800
 8000720:	00f42400 	.word	0x00f42400
 8000724:	007a1200 	.word	0x007a1200
 8000728:	20000000 	.word	0x20000000

0800072c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d006      	beq.n	800074c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000742:	4909      	ldr	r1, [pc, #36]	; (8000768 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4313      	orrs	r3, r2
 8000748:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800074a:	e006      	b.n	800075a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <RCC_AHB1PeriphClockCmd+0x3c>)
 800074e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	43db      	mvns	r3, r3
 8000754:	4904      	ldr	r1, [pc, #16]	; (8000768 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000756:	4013      	ands	r3, r2
 8000758:	630b      	str	r3, [r1, #48]	; 0x30
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d006      	beq.n	800078c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000782:	4909      	ldr	r1, [pc, #36]	; (80007a8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4313      	orrs	r3, r2
 8000788:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800078a:	e006      	b.n	800079a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <RCC_APB1PeriphClockCmd+0x3c>)
 800078e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	43db      	mvns	r3, r3
 8000794:	4904      	ldr	r1, [pc, #16]	; (80007a8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000796:	4013      	ands	r3, r2
 8000798:	640b      	str	r3, [r1, #64]	; 0x40
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d006      	beq.n	80007cc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007c2:	4909      	ldr	r1, [pc, #36]	; (80007e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007ca:	e006      	b.n	80007da <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	43db      	mvns	r3, r3
 80007d4:	4904      	ldr	r1, [pc, #16]	; (80007e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007d6:	4013      	ands	r3, r2
 80007d8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	8a1b      	ldrh	r3, [r3, #16]
 800080a:	b29b      	uxth	r3, r3
 800080c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000810:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000814:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	88db      	ldrh	r3, [r3, #6]
 800081a:	461a      	mov	r2, r3
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	4313      	orrs	r3, r2
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000824:	b29a      	uxth	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	899b      	ldrh	r3, [r3, #12]
 800082e:	b29b      	uxth	r3, r3
 8000830:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000838:	f023 030c 	bic.w	r3, r3, #12
 800083c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	889a      	ldrh	r2, [r3, #4]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	891b      	ldrh	r3, [r3, #8]
 8000846:	4313      	orrs	r3, r2
 8000848:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800084e:	4313      	orrs	r3, r2
 8000850:	b29b      	uxth	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	4313      	orrs	r3, r2
 8000858:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	b29a      	uxth	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	8a9b      	ldrh	r3, [r3, #20]
 8000866:	b29b      	uxth	r3, r3
 8000868:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000870:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	899b      	ldrh	r3, [r3, #12]
 8000876:	461a      	mov	r2, r3
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	4313      	orrs	r3, r2
 800087c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	b29a      	uxth	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe54 	bl	8000538 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a30      	ldr	r2, [pc, #192]	; (8000954 <USART_Init+0x168>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d003      	beq.n	80008a0 <USART_Init+0xb4>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <USART_Init+0x16c>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d102      	bne.n	80008a6 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	623b      	str	r3, [r7, #32]
 80008a4:	e001      	b.n	80008aa <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	899b      	ldrh	r3, [r3, #12]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da0c      	bge.n	80008d0 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80008b6:	6a3a      	ldr	r2, [r7, #32]
 80008b8:	4613      	mov	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	4413      	add	r3, r2
 80008be:	009a      	lsls	r2, r3, #2
 80008c0:	441a      	add	r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008cc:	61fb      	str	r3, [r7, #28]
 80008ce:	e00b      	b.n	80008e8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80008d0:	6a3a      	ldr	r2, [r7, #32]
 80008d2:	4613      	mov	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4413      	add	r3, r2
 80008d8:	009a      	lsls	r2, r3, #2
 80008da:	441a      	add	r2, r3
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	4a1c      	ldr	r2, [pc, #112]	; (800095c <USART_Init+0x170>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	095b      	lsrs	r3, r3, #5
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	091b      	lsrs	r3, r3, #4
 80008fa:	2264      	movs	r2, #100	; 0x64
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	69fa      	ldr	r2, [r7, #28]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	899b      	ldrh	r3, [r3, #12]
 800090a:	b29b      	uxth	r3, r3
 800090c:	b21b      	sxth	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	da0c      	bge.n	800092c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	3332      	adds	r3, #50	; 0x32
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <USART_Init+0x170>)
 800091a:	fba2 2303 	umull	r2, r3, r2, r3
 800091e:	095b      	lsrs	r3, r3, #5
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000926:	4313      	orrs	r3, r2
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
 800092a:	e00b      	b.n	8000944 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	3332      	adds	r3, #50	; 0x32
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <USART_Init+0x170>)
 8000934:	fba2 2303 	umull	r2, r3, r2, r3
 8000938:	095b      	lsrs	r3, r3, #5
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000940:	4313      	orrs	r3, r2
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	b29a      	uxth	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	811a      	strh	r2, [r3, #8]
}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40011000 	.word	0x40011000
 8000958:	40011400 	.word	0x40011400
 800095c:	51eb851f 	.word	0x51eb851f

08000960 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d008      	beq.n	8000984 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	899b      	ldrh	r3, [r3, #12]
 8000976:	b29b      	uxth	r3, r3
 8000978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800097c:	b29a      	uxth	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000982:	e007      	b.n	8000994 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	899b      	ldrh	r3, [r3, #12]
 8000988:	b29b      	uxth	r3, r3
 800098a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800098e:	b29a      	uxth	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	819a      	strh	r2, [r3, #12]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	809a      	strh	r2, [r3, #4]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	887b      	ldrh	r3, [r7, #2]
 80009dc:	4013      	ands	r3, r2
 80009de:	b29b      	uxth	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80009e4:	2301      	movs	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	e001      	b.n	80009ee <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f103 0208 	add.w	r2, r3, #8
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295
 8000a14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f103 0208 	add.w	r2, r3, #8
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f103 0208 	add.w	r2, r3, #8
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a56:	b480      	push	{r7}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab4:	d103      	bne.n	8000abe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	e00c      	b.n	8000ad8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	e002      	b.n	8000acc <vListInsert+0x2e>
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d2f6      	bcs.n	8000ac6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	6892      	ldr	r2, [r2, #8]
 8000b26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6852      	ldr	r2, [r2, #4]
 8000b30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d103      	bne.n	8000b44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	1e5a      	subs	r2, r3, #1
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	; 0x30
 8000b68:	af04      	add	r7, sp, #16
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	4613      	mov	r3, r2
 8000b72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 ff39 	bl	80019f0 <pvPortMalloc>
 8000b7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00e      	beq.n	8000ba4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000b86:	2058      	movs	r0, #88	; 0x58
 8000b88:	f000 ff32 	bl	80019f0 <pvPortMalloc>
 8000b8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d003      	beq.n	8000b9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	631a      	str	r2, [r3, #48]	; 0x30
 8000b9a:	e005      	b.n	8000ba8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000b9c:	6978      	ldr	r0, [r7, #20]
 8000b9e:	f000 ffef 	bl	8001b80 <vPortFree>
 8000ba2:	e001      	b.n	8000ba8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d013      	beq.n	8000bd6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000bae:	88fa      	ldrh	r2, [r7, #6]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	9303      	str	r3, [sp, #12]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	9302      	str	r3, [sp, #8]
 8000bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f000 f80e 	bl	8000be6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000bca:	69f8      	ldr	r0, [r7, #28]
 8000bcc:	f000 f89a 	bl	8000d04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	e002      	b.n	8000bdc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000bdc:	69bb      	ldr	r3, [r7, #24]
	}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b088      	sub	sp, #32
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	21a5      	movs	r1, #165	; 0xa5
 8000c00:	f003 f848 	bl	8003c94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	f023 0307 	bic.w	r3, r3, #7
 8000c1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	f003 0307 	and.w	r3, r3, #7
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d009      	beq.n	8000c3c <prvInitialiseNewTask+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c2c:	f383 8811 	msr	BASEPRI, r3
 8000c30:	f3bf 8f6f 	isb	sy
 8000c34:	f3bf 8f4f 	dsb	sy
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	e7fe      	b.n	8000c3a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d01f      	beq.n	8000c82 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	e012      	b.n	8000c6e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	7819      	ldrb	r1, [r3, #0]
 8000c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	4413      	add	r3, r2
 8000c56:	3334      	adds	r3, #52	; 0x34
 8000c58:	460a      	mov	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	2b09      	cmp	r3, #9
 8000c72:	d9e9      	bls.n	8000c48 <prvInitialiseNewTask+0x62>
 8000c74:	e000      	b.n	8000c78 <prvInitialiseNewTask+0x92>
			{
				break;
 8000c76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000c80:	e003      	b.n	8000c8a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d901      	bls.n	8000c94 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000c90:	2304      	movs	r3, #4
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c9e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca8:	3304      	adds	r3, #4
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fec6 	bl	8000a3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb2:	3318      	adds	r3, #24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fec1 	bl	8000a3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc2:	f1c3 0205 	rsb	r2, r3, #5
 8000cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	68f9      	ldr	r1, [r7, #12]
 8000ce2:	69b8      	ldr	r0, [r7, #24]
 8000ce4:	f000 fc38 	bl	8001558 <pxPortInitialiseStack>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	3720      	adds	r7, #32
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000d04:	b5b0      	push	{r4, r5, r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000d0c:	f000 fd4e 	bl	80017ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000d10:	4b3b      	ldr	r3, [pc, #236]	; (8000e00 <prvAddNewTaskToReadyList+0xfc>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	4a3a      	ldr	r2, [pc, #232]	; (8000e00 <prvAddNewTaskToReadyList+0xfc>)
 8000d18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000d1a:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <prvAddNewTaskToReadyList+0x100>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d109      	bne.n	8000d36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000d22:	4a38      	ldr	r2, [pc, #224]	; (8000e04 <prvAddNewTaskToReadyList+0x100>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000d28:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <prvAddNewTaskToReadyList+0xfc>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d110      	bne.n	8000d52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000d30:	f000 fafe 	bl	8001330 <prvInitialiseTaskLists>
 8000d34:	e00d      	b.n	8000d52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000d36:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <prvAddNewTaskToReadyList+0x104>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d109      	bne.n	8000d52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000d3e:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <prvAddNewTaskToReadyList+0x100>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d802      	bhi.n	8000d52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000d4c:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <prvAddNewTaskToReadyList+0x100>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000d52:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <prvAddNewTaskToReadyList+0x108>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a2c      	ldr	r2, [pc, #176]	; (8000e0c <prvAddNewTaskToReadyList+0x108>)
 8000d5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <prvAddNewTaskToReadyList+0x108>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d016      	beq.n	8000d98 <prvAddNewTaskToReadyList+0x94>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 f9e9 	bl	8003144 <SEGGER_SYSVIEW_OnTaskCreate>
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	461d      	mov	r5, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	461c      	mov	r4, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	1ae3      	subs	r3, r4, r3
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	462b      	mov	r3, r5
 8000d94:	f001 f8b8 	bl	8001f08 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fa5a 	bl	8003254 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	2201      	movs	r2, #1
 8000da6:	409a      	lsls	r2, r3
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <prvAddNewTaskToReadyList+0x10c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <prvAddNewTaskToReadyList+0x10c>)
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <prvAddNewTaskToReadyList+0x110>)
 8000dc0:	441a      	add	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4610      	mov	r0, r2
 8000dca:	f7ff fe44 	bl	8000a56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000dce:	f000 fd1b 	bl	8001808 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <prvAddNewTaskToReadyList+0x104>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00e      	beq.n	8000df8 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <prvAddNewTaskToReadyList+0x100>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <prvAddNewTaskToReadyList+0x114>)
 8000dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	f3bf 8f4f 	dsb	sy
 8000df4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8000e00:	20000184 	.word	0x20000184
 8000e04:	200000ac 	.word	0x200000ac
 8000e08:	20000190 	.word	0x20000190
 8000e0c:	200001a0 	.word	0x200001a0
 8000e10:	2000018c 	.word	0x2000018c
 8000e14:	200000b0 	.word	0x200000b0
 8000e18:	e000ed04 	.word	0xe000ed04

08000e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d01a      	beq.n	8000e64 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <vTaskDelay+0x68>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d009      	beq.n	8000e4a <vTaskDelay+0x2e>
 8000e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3a:	f383 8811 	msr	BASEPRI, r3
 8000e3e:	f3bf 8f6f 	isb	sy
 8000e42:	f3bf 8f4f 	dsb	sy
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	e7fe      	b.n	8000e48 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8000e4a:	f000 f875 	bl	8000f38 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	2023      	movs	r0, #35	; 0x23
 8000e52:	f001 fd81 	bl	8002958 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000e56:	2100      	movs	r1, #0
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 fb05 	bl	8001468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000e5e:	f000 f879 	bl	8000f54 <xTaskResumeAll>
 8000e62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d107      	bne.n	8000e7a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <vTaskDelay+0x6c>)
 8000e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	f3bf 8f4f 	dsb	sy
 8000e76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001ac 	.word	0x200001ac
 8000e88:	e000ed04 	.word	0xe000ed04

08000e8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <vTaskStartScheduler+0x90>)
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	2300      	movs	r3, #0
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2282      	movs	r2, #130	; 0x82
 8000e9e:	4920      	ldr	r1, [pc, #128]	; (8000f20 <vTaskStartScheduler+0x94>)
 8000ea0:	4820      	ldr	r0, [pc, #128]	; (8000f24 <vTaskStartScheduler+0x98>)
 8000ea2:	f7ff fe5f 	bl	8000b64 <xTaskCreate>
 8000ea6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d123      	bne.n	8000ef6 <vTaskStartScheduler+0x6a>
 8000eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb2:	f383 8811 	msr	BASEPRI, r3
 8000eb6:	f3bf 8f6f 	isb	sy
 8000eba:	f3bf 8f4f 	dsb	sy
 8000ebe:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <vTaskStartScheduler+0x9c>)
 8000ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <vTaskStartScheduler+0xa0>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <vTaskStartScheduler+0xa4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <vTaskStartScheduler+0xa8>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <vTaskStartScheduler+0x90>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d102      	bne.n	8000ee6 <vTaskStartScheduler+0x5a>
 8000ee0:	f002 f914 	bl	800310c <SEGGER_SYSVIEW_OnIdle>
 8000ee4:	e004      	b.n	8000ef0 <vTaskStartScheduler+0x64>
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <vTaskStartScheduler+0xa8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 f96e 	bl	80031cc <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000ef0:	f000 fbbe 	bl	8001670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000ef4:	e00d      	b.n	8000f12 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d109      	bne.n	8000f12 <vTaskStartScheduler+0x86>
 8000efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f02:	f383 8811 	msr	BASEPRI, r3
 8000f06:	f3bf 8f6f 	isb	sy
 8000f0a:	f3bf 8f4f 	dsb	sy
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	e7fe      	b.n	8000f10 <vTaskStartScheduler+0x84>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200001a8 	.word	0x200001a8
 8000f20:	08004508 	.word	0x08004508
 8000f24:	08001301 	.word	0x08001301
 8000f28:	200001a4 	.word	0x200001a4
 8000f2c:	20000190 	.word	0x20000190
 8000f30:	20000188 	.word	0x20000188
 8000f34:	200000ac 	.word	0x200000ac

08000f38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <vTaskSuspendAll+0x18>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <vTaskSuspendAll+0x18>)
 8000f44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	200001ac 	.word	0x200001ac

08000f54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000f62:	4b43      	ldr	r3, [pc, #268]	; (8001070 <xTaskResumeAll+0x11c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d109      	bne.n	8000f7e <xTaskResumeAll+0x2a>
 8000f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f6e:	f383 8811 	msr	BASEPRI, r3
 8000f72:	f3bf 8f6f 	isb	sy
 8000f76:	f3bf 8f4f 	dsb	sy
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	e7fe      	b.n	8000f7c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000f7e:	f000 fc15 	bl	80017ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000f82:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <xTaskResumeAll+0x11c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	4a39      	ldr	r2, [pc, #228]	; (8001070 <xTaskResumeAll+0x11c>)
 8000f8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <xTaskResumeAll+0x11c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d165      	bne.n	8001060 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <xTaskResumeAll+0x120>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d061      	beq.n	8001060 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f9c:	e032      	b.n	8001004 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f9e:	4b36      	ldr	r3, [pc, #216]	; (8001078 <xTaskResumeAll+0x124>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3318      	adds	r3, #24
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fdb0 	bl	8000b10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fdab 	bl	8000b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 f949 	bl	8003254 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <xTaskResumeAll+0x128>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	4a2a      	ldr	r2, [pc, #168]	; (800107c <xTaskResumeAll+0x128>)
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <xTaskResumeAll+0x12c>)
 8000fe2:	441a      	add	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f7ff fd33 	bl	8000a56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <xTaskResumeAll+0x130>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d302      	bcc.n	8001004 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <xTaskResumeAll+0x134>)
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <xTaskResumeAll+0x124>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1c8      	bne.n	8000f9e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001012:	f000 fa09 	bl	8001428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <xTaskResumeAll+0x138>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d010      	beq.n	8001044 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001022:	f000 f849 	bl	80010b8 <xTaskIncrementTick>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <xTaskResumeAll+0x134>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3b01      	subs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f1      	bne.n	8001022 <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <xTaskResumeAll+0x138>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <xTaskResumeAll+0x134>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d009      	beq.n	8001060 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800104c:	2301      	movs	r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <xTaskResumeAll+0x13c>)
 8001052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	f3bf 8f4f 	dsb	sy
 800105c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001060:	f000 fbd2 	bl	8001808 <vPortExitCritical>

	return xAlreadyYielded;
 8001064:	68bb      	ldr	r3, [r7, #8]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001ac 	.word	0x200001ac
 8001074:	20000184 	.word	0x20000184
 8001078:	20000144 	.word	0x20000144
 800107c:	2000018c 	.word	0x2000018c
 8001080:	200000b0 	.word	0x200000b0
 8001084:	200000ac 	.word	0x200000ac
 8001088:	20000198 	.word	0x20000198
 800108c:	20000194 	.word	0x20000194
 8001090:	e000ed04 	.word	0xe000ed04

08001094 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800109a:	f000 fc6b 	bl	8001974 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <xTaskGetTickCountFromISR+0x20>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80010a8:	683b      	ldr	r3, [r7, #0]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000188 	.word	0x20000188

080010b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010c2:	4b50      	ldr	r3, [pc, #320]	; (8001204 <xTaskIncrementTick+0x14c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f040 8091 	bne.w	80011ee <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80010cc:	4b4e      	ldr	r3, [pc, #312]	; (8001208 <xTaskIncrementTick+0x150>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80010d4:	4a4c      	ldr	r2, [pc, #304]	; (8001208 <xTaskIncrementTick+0x150>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d11f      	bne.n	8001120 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80010e0:	4b4a      	ldr	r3, [pc, #296]	; (800120c <xTaskIncrementTick+0x154>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d009      	beq.n	80010fe <xTaskIncrementTick+0x46>
 80010ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ee:	f383 8811 	msr	BASEPRI, r3
 80010f2:	f3bf 8f6f 	isb	sy
 80010f6:	f3bf 8f4f 	dsb	sy
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	e7fe      	b.n	80010fc <xTaskIncrementTick+0x44>
 80010fe:	4b43      	ldr	r3, [pc, #268]	; (800120c <xTaskIncrementTick+0x154>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b42      	ldr	r3, [pc, #264]	; (8001210 <xTaskIncrementTick+0x158>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a40      	ldr	r2, [pc, #256]	; (800120c <xTaskIncrementTick+0x154>)
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4a40      	ldr	r2, [pc, #256]	; (8001210 <xTaskIncrementTick+0x158>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b40      	ldr	r3, [pc, #256]	; (8001214 <xTaskIncrementTick+0x15c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a3e      	ldr	r2, [pc, #248]	; (8001214 <xTaskIncrementTick+0x15c>)
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	f000 f984 	bl	8001428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001120:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <xTaskIncrementTick+0x160>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	429a      	cmp	r2, r3
 8001128:	d34c      	bcc.n	80011c4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <xTaskIncrementTick+0x154>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d104      	bne.n	800113e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001134:	4b38      	ldr	r3, [pc, #224]	; (8001218 <xTaskIncrementTick+0x160>)
 8001136:	f04f 32ff 	mov.w	r2, #4294967295
 800113a:	601a      	str	r2, [r3, #0]
					break;
 800113c:	e042      	b.n	80011c4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <xTaskIncrementTick+0x154>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	d203      	bcs.n	800115e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001156:	4a30      	ldr	r2, [pc, #192]	; (8001218 <xTaskIncrementTick+0x160>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800115c:	e032      	b.n	80011c4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3304      	adds	r3, #4
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fcd4 	bl	8000b10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	2b00      	cmp	r3, #0
 800116e:	d004      	beq.n	800117a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3318      	adds	r3, #24
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fccb 	bl	8000b10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	4618      	mov	r0, r3
 800117e:	f002 f869 	bl	8003254 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	2201      	movs	r2, #1
 8001188:	409a      	lsls	r2, r3
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <xTaskIncrementTick+0x164>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4313      	orrs	r3, r2
 8001190:	4a22      	ldr	r2, [pc, #136]	; (800121c <xTaskIncrementTick+0x164>)
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <xTaskIncrementTick+0x168>)
 80011a2:	441a      	add	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	3304      	adds	r3, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f7ff fc53 	bl	8000a56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <xTaskIncrementTick+0x16c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d3b5      	bcc.n	800112a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80011be:	2301      	movs	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011c2:	e7b2      	b.n	800112a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <xTaskIncrementTick+0x16c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ca:	4915      	ldr	r1, [pc, #84]	; (8001220 <xTaskIncrementTick+0x168>)
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d901      	bls.n	80011e0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80011dc:	2301      	movs	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <xTaskIncrementTick+0x170>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d007      	beq.n	80011f8 <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e004      	b.n	80011f8 <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <xTaskIncrementTick+0x174>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <xTaskIncrementTick+0x174>)
 80011f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80011f8:	697b      	ldr	r3, [r7, #20]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200001ac 	.word	0x200001ac
 8001208:	20000188 	.word	0x20000188
 800120c:	2000013c 	.word	0x2000013c
 8001210:	20000140 	.word	0x20000140
 8001214:	2000019c 	.word	0x2000019c
 8001218:	200001a4 	.word	0x200001a4
 800121c:	2000018c 	.word	0x2000018c
 8001220:	200000b0 	.word	0x200000b0
 8001224:	200000ac 	.word	0x200000ac
 8001228:	20000198 	.word	0x20000198
 800122c:	20000194 	.word	0x20000194

08001230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <vTaskSwitchContext+0xb8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <vTaskSwitchContext+0xbc>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001244:	e04c      	b.n	80012e0 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <vTaskSwitchContext+0xbc>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <vTaskSwitchContext+0xc0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	fab3 f383 	clz	r3, r3
 8001258:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	f1c3 031f 	rsb	r3, r3, #31
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	4924      	ldr	r1, [pc, #144]	; (80012f4 <vTaskSwitchContext+0xc4>)
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	440b      	add	r3, r1
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <vTaskSwitchContext+0x5a>
	__asm volatile
 8001276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800127a:	f383 8811 	msr	BASEPRI, r3
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f3bf 8f4f 	dsb	sy
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	e7fe      	b.n	8001288 <vTaskSwitchContext+0x58>
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <vTaskSwitchContext+0xc4>)
 8001296:	4413      	add	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	3308      	adds	r3, #8
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d104      	bne.n	80012ba <vTaskSwitchContext+0x8a>
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <vTaskSwitchContext+0xc8>)
 80012c2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <vTaskSwitchContext+0xc8>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <vTaskSwitchContext+0xcc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d102      	bne.n	80012d6 <vTaskSwitchContext+0xa6>
 80012d0:	f001 ff1c 	bl	800310c <SEGGER_SYSVIEW_OnIdle>
}
 80012d4:	e004      	b.n	80012e0 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <vTaskSwitchContext+0xc8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 ff76 	bl	80031cc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200001ac 	.word	0x200001ac
 80012ec:	20000198 	.word	0x20000198
 80012f0:	2000018c 	.word	0x2000018c
 80012f4:	200000b0 	.word	0x200000b0
 80012f8:	200000ac 	.word	0x200000ac
 80012fc:	200001a8 	.word	0x200001a8

08001300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001308:	f000 f852 	bl	80013b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <prvIdleTask+0x28>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d9f9      	bls.n	8001308 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <prvIdleTask+0x2c>)
 8001316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001324:	e7f0      	b.n	8001308 <prvIdleTask+0x8>
 8001326:	bf00      	nop
 8001328:	200000b0 	.word	0x200000b0
 800132c:	e000ed04 	.word	0xe000ed04

08001330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	e00c      	b.n	8001356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <prvInitialiseTaskLists+0x60>)
 8001348:	4413      	add	r3, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fb56 	bl	80009fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3301      	adds	r3, #1
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b04      	cmp	r3, #4
 800135a:	d9ef      	bls.n	800133c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <prvInitialiseTaskLists+0x64>)
 800135e:	f7ff fb4d 	bl	80009fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001362:	480d      	ldr	r0, [pc, #52]	; (8001398 <prvInitialiseTaskLists+0x68>)
 8001364:	f7ff fb4a 	bl	80009fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <prvInitialiseTaskLists+0x6c>)
 800136a:	f7ff fb47 	bl	80009fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800136e:	480c      	ldr	r0, [pc, #48]	; (80013a0 <prvInitialiseTaskLists+0x70>)
 8001370:	f7ff fb44 	bl	80009fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <prvInitialiseTaskLists+0x74>)
 8001376:	f7ff fb41 	bl	80009fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <prvInitialiseTaskLists+0x78>)
 800137c:	4a05      	ldr	r2, [pc, #20]	; (8001394 <prvInitialiseTaskLists+0x64>)
 800137e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <prvInitialiseTaskLists+0x7c>)
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <prvInitialiseTaskLists+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000b0 	.word	0x200000b0
 8001394:	20000114 	.word	0x20000114
 8001398:	20000128 	.word	0x20000128
 800139c:	20000144 	.word	0x20000144
 80013a0:	20000158 	.word	0x20000158
 80013a4:	20000170 	.word	0x20000170
 80013a8:	2000013c 	.word	0x2000013c
 80013ac:	20000140 	.word	0x20000140

080013b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013b6:	e019      	b.n	80013ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80013b8:	f000 f9f8 	bl	80017ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <prvCheckTasksWaitingTermination+0x4c>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3304      	adds	r3, #4
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fba1 	bl	8000b10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <prvCheckTasksWaitingTermination+0x50>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <prvCheckTasksWaitingTermination+0x50>)
 80013d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <prvCheckTasksWaitingTermination+0x54>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <prvCheckTasksWaitingTermination+0x54>)
 80013e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80013e2:	f000 fa11 	bl	8001808 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f80e 	bl	8001408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <prvCheckTasksWaitingTermination+0x54>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e1      	bne.n	80013b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000158 	.word	0x20000158
 8001400:	20000184 	.word	0x20000184
 8001404:	2000016c 	.word	0x2000016c

08001408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fbb3 	bl	8001b80 <vPortFree>
			vPortFree( pxTCB );
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fbb0 	bl	8001b80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <prvResetNextTaskUnblockTime+0x38>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d104      	bne.n	8001442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <prvResetNextTaskUnblockTime+0x3c>)
 800143a:	f04f 32ff 	mov.w	r2, #4294967295
 800143e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001440:	e008      	b.n	8001454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <prvResetNextTaskUnblockTime+0x38>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <prvResetNextTaskUnblockTime+0x3c>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	2000013c 	.word	0x2000013c
 8001464:	200001a4 	.word	0x200001a4

08001468 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001472:	4b32      	ldr	r3, [pc, #200]	; (800153c <prvAddCurrentTaskToDelayedList+0xd4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <prvAddCurrentTaskToDelayedList+0xd8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3304      	adds	r3, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fb46 	bl	8000b10 <uxListRemove>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10b      	bne.n	80014a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <prvAddCurrentTaskToDelayedList+0xd8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2201      	movs	r2, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <prvAddCurrentTaskToDelayedList+0xdc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4013      	ands	r3, r2
 800149e:	4a29      	ldr	r2, [pc, #164]	; (8001544 <prvAddCurrentTaskToDelayedList+0xdc>)
 80014a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d110      	bne.n	80014cc <prvAddCurrentTaskToDelayedList+0x64>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00d      	beq.n	80014cc <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <prvAddCurrentTaskToDelayedList+0xd8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	211b      	movs	r1, #27
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 ff10 	bl	80032dc <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <prvAddCurrentTaskToDelayedList+0xd8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3304      	adds	r3, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4820      	ldr	r0, [pc, #128]	; (8001548 <prvAddCurrentTaskToDelayedList+0xe0>)
 80014c6:	f7ff fac6 	bl	8000a56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80014ca:	e032      	b.n	8001532 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <prvAddCurrentTaskToDelayedList+0xd8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d20f      	bcs.n	8001504 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <prvAddCurrentTaskToDelayedList+0xd8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2104      	movs	r1, #4
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 fef6 	bl	80032dc <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <prvAddCurrentTaskToDelayedList+0xe4>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <prvAddCurrentTaskToDelayedList+0xd8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3304      	adds	r3, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4610      	mov	r0, r2
 80014fe:	f7ff face 	bl	8000a9e <vListInsert>
}
 8001502:	e016      	b.n	8001532 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2104      	movs	r1, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fee6 	bl	80032dc <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3304      	adds	r3, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4610      	mov	r0, r2
 800151e:	f7ff fabe 	bl	8000a9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <prvAddCurrentTaskToDelayedList+0xec>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	d202      	bcs.n	8001532 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 800152c:	4a09      	ldr	r2, [pc, #36]	; (8001554 <prvAddCurrentTaskToDelayedList+0xec>)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	6013      	str	r3, [r2, #0]
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000188 	.word	0x20000188
 8001540:	200000ac 	.word	0x200000ac
 8001544:	2000018c 	.word	0x2000018c
 8001548:	20000170 	.word	0x20000170
 800154c:	20000140 	.word	0x20000140
 8001550:	2000013c 	.word	0x2000013c
 8001554:	200001a4 	.word	0x200001a4

08001558 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3b04      	subs	r3, #4
 8001568:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3b04      	subs	r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f023 0201 	bic.w	r2, r3, #1
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3b04      	subs	r3, #4
 8001586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001588:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <pxPortInitialiseStack+0x64>)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3b14      	subs	r3, #20
 8001592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3b04      	subs	r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f06f 0202 	mvn.w	r2, #2
 80015a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3b20      	subs	r3, #32
 80015ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	080015c1 	.word	0x080015c1

080015c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <prvTaskExitError+0x50>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d2:	d009      	beq.n	80015e8 <prvTaskExitError+0x28>
 80015d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d8:	f383 8811 	msr	BASEPRI, r3
 80015dc:	f3bf 8f6f 	isb	sy
 80015e0:	f3bf 8f4f 	dsb	sy
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e7fe      	b.n	80015e6 <prvTaskExitError+0x26>
 80015e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ec:	f383 8811 	msr	BASEPRI, r3
 80015f0:	f3bf 8f6f 	isb	sy
 80015f4:	f3bf 8f4f 	dsb	sy
 80015f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80015fa:	bf00      	nop
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0fc      	beq.n	80015fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000010 	.word	0x20000010
	...

08001620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <pxCurrentTCBConst2>)
 8001622:	6819      	ldr	r1, [r3, #0]
 8001624:	6808      	ldr	r0, [r1, #0]
 8001626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800162a:	f380 8809 	msr	PSP, r0
 800162e:	f3bf 8f6f 	isb	sy
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f380 8811 	msr	BASEPRI, r0
 800163a:	4770      	bx	lr
 800163c:	f3af 8000 	nop.w

08001640 <pxCurrentTCBConst2>:
 8001640:	200000ac 	.word	0x200000ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop

08001648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <prvPortStartFirstTask+0x24>)
 800164a:	6800      	ldr	r0, [r0, #0]
 800164c:	6800      	ldr	r0, [r0, #0]
 800164e:	f380 8808 	msr	MSP, r0
 8001652:	f04f 0000 	mov.w	r0, #0
 8001656:	f380 8814 	msr	CONTROL, r0
 800165a:	b662      	cpsie	i
 800165c:	b661      	cpsie	f
 800165e:	f3bf 8f4f 	dsb	sy
 8001662:	f3bf 8f6f 	isb	sy
 8001666:	df00      	svc	0
 8001668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800166a:	bf00      	nop
 800166c:	e000ed08 	.word	0xe000ed08

08001670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001676:	4b44      	ldr	r3, [pc, #272]	; (8001788 <xPortStartScheduler+0x118>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a44      	ldr	r2, [pc, #272]	; (800178c <xPortStartScheduler+0x11c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d109      	bne.n	8001694 <xPortStartScheduler+0x24>
 8001680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001684:	f383 8811 	msr	BASEPRI, r3
 8001688:	f3bf 8f6f 	isb	sy
 800168c:	f3bf 8f4f 	dsb	sy
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	e7fe      	b.n	8001692 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001694:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <xPortStartScheduler+0x118>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a3d      	ldr	r2, [pc, #244]	; (8001790 <xPortStartScheduler+0x120>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d109      	bne.n	80016b2 <xPortStartScheduler+0x42>
 800169e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a2:	f383 8811 	msr	BASEPRI, r3
 80016a6:	f3bf 8f6f 	isb	sy
 80016aa:	f3bf 8f4f 	dsb	sy
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	e7fe      	b.n	80016b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <xPortStartScheduler+0x124>)
 80016b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	22ff      	movs	r2, #255	; 0xff
 80016c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <xPortStartScheduler+0x128>)
 80016d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <xPortStartScheduler+0x12c>)
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80016e0:	e009      	b.n	80016f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <xPortStartScheduler+0x12c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	4a2c      	ldr	r2, [pc, #176]	; (800179c <xPortStartScheduler+0x12c>)
 80016ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	2b80      	cmp	r3, #128	; 0x80
 8001700:	d0ef      	beq.n	80016e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001702:	4b26      	ldr	r3, [pc, #152]	; (800179c <xPortStartScheduler+0x12c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	d009      	beq.n	8001722 <xPortStartScheduler+0xb2>
 800170e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001712:	f383 8811 	msr	BASEPRI, r3
 8001716:	f3bf 8f6f 	isb	sy
 800171a:	f3bf 8f4f 	dsb	sy
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	e7fe      	b.n	8001720 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001722:	4b1e      	ldr	r3, [pc, #120]	; (800179c <xPortStartScheduler+0x12c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	4a1c      	ldr	r2, [pc, #112]	; (800179c <xPortStartScheduler+0x12c>)
 800172a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <xPortStartScheduler+0x12c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001734:	4a19      	ldr	r2, [pc, #100]	; (800179c <xPortStartScheduler+0x12c>)
 8001736:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <xPortStartScheduler+0x130>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <xPortStartScheduler+0x130>)
 8001746:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <xPortStartScheduler+0x130>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <xPortStartScheduler+0x130>)
 8001752:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001756:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001758:	f000 f8de 	bl	8001918 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <xPortStartScheduler+0x134>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001762:	f000 f8fd 	bl	8001960 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <xPortStartScheduler+0x138>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <xPortStartScheduler+0x138>)
 800176c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001770:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001772:	f7ff ff69 	bl	8001648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001776:	f7ff fd5b 	bl	8001230 <vTaskSwitchContext>
	prvTaskExitError();
 800177a:	f7ff ff21 	bl	80015c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	e000ed00 	.word	0xe000ed00
 800178c:	410fc271 	.word	0x410fc271
 8001790:	410fc270 	.word	0x410fc270
 8001794:	e000e400 	.word	0xe000e400
 8001798:	200001b0 	.word	0x200001b0
 800179c:	200001b4 	.word	0x200001b4
 80017a0:	e000ed20 	.word	0xe000ed20
 80017a4:	20000010 	.word	0x20000010
 80017a8:	e000ef34 	.word	0xe000ef34

080017ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	f3bf 8f4f 	dsb	sy
 80017c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <vPortEnterCritical+0x54>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <vPortEnterCritical+0x54>)
 80017cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <vPortEnterCritical+0x54>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d10e      	bne.n	80017f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <vPortEnterCritical+0x58>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d009      	beq.n	80017f4 <vPortEnterCritical+0x48>
 80017e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e4:	f383 8811 	msr	BASEPRI, r3
 80017e8:	f3bf 8f6f 	isb	sy
 80017ec:	f3bf 8f4f 	dsb	sy
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	e7fe      	b.n	80017f2 <vPortEnterCritical+0x46>
	}
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	20000010 	.word	0x20000010
 8001804:	e000ed04 	.word	0xe000ed04

08001808 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <vPortExitCritical+0x4c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <vPortExitCritical+0x22>
 8001816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181a:	f383 8811 	msr	BASEPRI, r3
 800181e:	f3bf 8f6f 	isb	sy
 8001822:	f3bf 8f4f 	dsb	sy
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	e7fe      	b.n	8001828 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <vPortExitCritical+0x4c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3b01      	subs	r3, #1
 8001830:	4a08      	ldr	r2, [pc, #32]	; (8001854 <vPortExitCritical+0x4c>)
 8001832:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <vPortExitCritical+0x4c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d104      	bne.n	8001846 <vPortExitCritical+0x3e>
 800183c:	2300      	movs	r3, #0
 800183e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000010 	.word	0x20000010
	...

08001860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001860:	f3ef 8009 	mrs	r0, PSP
 8001864:	f3bf 8f6f 	isb	sy
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <pxCurrentTCBConst>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	f01e 0f10 	tst.w	lr, #16
 8001870:	bf08      	it	eq
 8001872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800187a:	6010      	str	r0, [r2, #0]
 800187c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001884:	f380 8811 	msr	BASEPRI, r0
 8001888:	f3bf 8f4f 	dsb	sy
 800188c:	f3bf 8f6f 	isb	sy
 8001890:	f7ff fcce 	bl	8001230 <vTaskSwitchContext>
 8001894:	f04f 0000 	mov.w	r0, #0
 8001898:	f380 8811 	msr	BASEPRI, r0
 800189c:	bc09      	pop	{r0, r3}
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	6808      	ldr	r0, [r1, #0]
 80018a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018a6:	f01e 0f10 	tst.w	lr, #16
 80018aa:	bf08      	it	eq
 80018ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80018b0:	f380 8809 	msr	PSP, r0
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	f3af 8000 	nop.w

080018c0 <pxCurrentTCBConst>:
 80018c0:	200000ac 	.word	0x200000ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop

080018c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
	__asm volatile
 80018ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d2:	f383 8811 	msr	BASEPRI, r3
 80018d6:	f3bf 8f6f 	isb	sy
 80018da:	f3bf 8f4f 	dsb	sy
 80018de:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80018e0:	f001 fb9a 	bl	8003018 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80018e4:	f7ff fbe8 	bl	80010b8 <xTaskIncrementTick>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80018ee:	f001 fbf1 	bl	80030d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <SysTick_Handler+0x4c>)
 80018f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e001      	b.n	8001900 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 80018fc:	f001 fbce 	bl	800309c <SEGGER_SYSVIEW_RecordExitISR>
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000ed04 	.word	0xe000ed04

08001918 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <vPortSetupTimerInterrupt+0x34>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <vPortSetupTimerInterrupt+0x38>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <vPortSetupTimerInterrupt+0x3c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <vPortSetupTimerInterrupt+0x40>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	099b      	lsrs	r3, r3, #6
 8001934:	4a09      	ldr	r2, [pc, #36]	; (800195c <vPortSetupTimerInterrupt+0x44>)
 8001936:	3b01      	subs	r3, #1
 8001938:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <vPortSetupTimerInterrupt+0x34>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010
 8001950:	e000e018 	.word	0xe000e018
 8001954:	20000014 	.word	0x20000014
 8001958:	10624dd3 	.word	0x10624dd3
 800195c:	e000e014 	.word	0xe000e014

08001960 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001960:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001970 <vPortEnableVFP+0x10>
 8001964:	6801      	ldr	r1, [r0, #0]
 8001966:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800196a:	6001      	str	r1, [r0, #0]
 800196c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800196e:	bf00      	nop
 8001970:	e000ed88 	.word	0xe000ed88

08001974 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800197a:	f3ef 8305 	mrs	r3, IPSR
 800197e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b0f      	cmp	r3, #15
 8001984:	d913      	bls.n	80019ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001986:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <vPortValidateInterruptPriority+0x6c>)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <vPortValidateInterruptPriority+0x70>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	7afa      	ldrb	r2, [r7, #11]
 8001996:	429a      	cmp	r2, r3
 8001998:	d209      	bcs.n	80019ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800199a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199e:	f383 8811 	msr	BASEPRI, r3
 80019a2:	f3bf 8f6f 	isb	sy
 80019a6:	f3bf 8f4f 	dsb	sy
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	e7fe      	b.n	80019ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <vPortValidateInterruptPriority+0x74>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <vPortValidateInterruptPriority+0x78>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d909      	bls.n	80019d2 <vPortValidateInterruptPriority+0x5e>
 80019be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c2:	f383 8811 	msr	BASEPRI, r3
 80019c6:	f3bf 8f6f 	isb	sy
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	e7fe      	b.n	80019d0 <vPortValidateInterruptPriority+0x5c>
	}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e3f0 	.word	0xe000e3f0
 80019e4:	200001b0 	.word	0x200001b0
 80019e8:	e000ed0c 	.word	0xe000ed0c
 80019ec:	200001b4 	.word	0x200001b4

080019f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80019fc:	f7ff fa9c 	bl	8000f38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001a00:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <pvPortMalloc+0x178>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001a08:	f000 f91a 	bl	8001c40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001a0c:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <pvPortMalloc+0x17c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f040 8091 	bne.w	8001b3c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01c      	beq.n	8001a5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001a20:	2208      	movs	r2, #8
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d013      	beq.n	8001a5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f023 0307 	bic.w	r3, r3, #7
 8001a38:	3308      	adds	r3, #8
 8001a3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <pvPortMalloc+0x6a>
 8001a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4a:	f383 8811 	msr	BASEPRI, r3
 8001a4e:	f3bf 8f6f 	isb	sy
 8001a52:	f3bf 8f4f 	dsb	sy
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e7fe      	b.n	8001a58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d06d      	beq.n	8001b3c <pvPortMalloc+0x14c>
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <pvPortMalloc+0x180>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d868      	bhi.n	8001b3c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001a6a:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <pvPortMalloc+0x184>)
 8001a6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <pvPortMalloc+0x184>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a74:	e004      	b.n	8001a80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d903      	bls.n	8001a92 <pvPortMalloc+0xa2>
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f1      	bne.n	8001a76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001a92:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <pvPortMalloc+0x178>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d04f      	beq.n	8001b3c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	4413      	add	r3, r2
 8001aa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	1ad2      	subs	r2, r2, r3
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d91e      	bls.n	8001afc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d009      	beq.n	8001ae4 <pvPortMalloc+0xf4>
 8001ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad4:	f383 8811 	msr	BASEPRI, r3
 8001ad8:	f3bf 8f6f 	isb	sy
 8001adc:	f3bf 8f4f 	dsb	sy
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	e7fe      	b.n	8001ae2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	1ad2      	subs	r2, r2, r3
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001af6:	69b8      	ldr	r0, [r7, #24]
 8001af8:	f000 f904 	bl	8001d04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <pvPortMalloc+0x180>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <pvPortMalloc+0x180>)
 8001b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <pvPortMalloc+0x180>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <pvPortMalloc+0x188>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d203      	bcs.n	8001b1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <pvPortMalloc+0x180>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <pvPortMalloc+0x188>)
 8001b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <pvPortMalloc+0x17c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <pvPortMalloc+0x18c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <pvPortMalloc+0x18c>)
 8001b3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001b3c:	f7ff fa0a 	bl	8000f54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <pvPortMalloc+0x16e>
 8001b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4e:	f383 8811 	msr	BASEPRI, r3
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	f3bf 8f4f 	dsb	sy
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e7fe      	b.n	8001b5c <pvPortMalloc+0x16c>
	return pvReturn;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3728      	adds	r7, #40	; 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20012dc0 	.word	0x20012dc0
 8001b6c:	20012dd4 	.word	0x20012dd4
 8001b70:	20012dc4 	.word	0x20012dc4
 8001b74:	20012db8 	.word	0x20012db8
 8001b78:	20012dc8 	.word	0x20012dc8
 8001b7c:	20012dcc 	.word	0x20012dcc

08001b80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d04b      	beq.n	8001c2a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001b92:	2308      	movs	r3, #8
 8001b94:	425b      	negs	r3, r3
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4413      	add	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <vPortFree+0xb4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <vPortFree+0x42>
 8001bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb2:	f383 8811 	msr	BASEPRI, r3
 8001bb6:	f3bf 8f6f 	isb	sy
 8001bba:	f3bf 8f4f 	dsb	sy
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e7fe      	b.n	8001bc0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <vPortFree+0x5e>
 8001bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bce:	f383 8811 	msr	BASEPRI, r3
 8001bd2:	f3bf 8f6f 	isb	sy
 8001bd6:	f3bf 8f4f 	dsb	sy
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	e7fe      	b.n	8001bdc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <vPortFree+0xb4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01e      	beq.n	8001c2a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d11a      	bne.n	8001c2a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <vPortFree+0xb4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	401a      	ands	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001c04:	f7ff f998 	bl	8000f38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <vPortFree+0xb8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <vPortFree+0xb8>)
 8001c14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001c16:	6938      	ldr	r0, [r7, #16]
 8001c18:	f000 f874 	bl	8001d04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <vPortFree+0xbc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	4a06      	ldr	r2, [pc, #24]	; (8001c3c <vPortFree+0xbc>)
 8001c24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8001c26:	f7ff f995 	bl	8000f54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20012dd4 	.word	0x20012dd4
 8001c38:	20012dc4 	.word	0x20012dc4
 8001c3c:	20012dd0 	.word	0x20012dd0

08001c40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001c46:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001c4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <prvHeapInit+0xac>)
 8001c4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3307      	adds	r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f023 0307 	bic.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <prvHeapInit+0xac>)
 8001c70:	4413      	add	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <prvHeapInit+0xb0>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <prvHeapInit+0xb0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4413      	add	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f023 0307 	bic.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <prvHeapInit+0xb4>)
 8001ca0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <prvHeapInit+0xb4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <prvHeapInit+0xb4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	1ad2      	subs	r2, r2, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <prvHeapInit+0xb4>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <prvHeapInit+0xb8>)
 8001cce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <prvHeapInit+0xbc>)
 8001cd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <prvHeapInit+0xc0>)
 8001cda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cde:	601a      	str	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	200001b8 	.word	0x200001b8
 8001cf0:	20012db8 	.word	0x20012db8
 8001cf4:	20012dc0 	.word	0x20012dc0
 8001cf8:	20012dc8 	.word	0x20012dc8
 8001cfc:	20012dc4 	.word	0x20012dc4
 8001d00:	20012dd4 	.word	0x20012dd4

08001d04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <prvInsertBlockIntoFreeList+0xac>)
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e002      	b.n	8001d18 <prvInsertBlockIntoFreeList+0x14>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d8f7      	bhi.n	8001d12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d108      	bne.n	8001d46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	441a      	add	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	441a      	add	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d118      	bne.n	8001d8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <prvInsertBlockIntoFreeList+0xb0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d00d      	beq.n	8001d82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	441a      	add	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e008      	b.n	8001d94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <prvInsertBlockIntoFreeList+0xb0>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e003      	b.n	8001d94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d002      	beq.n	8001da2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20012db8 	.word	0x20012db8
 8001db4:	20012dc0 	.word	0x20012dc0

08001db8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001dbc:	4803      	ldr	r0, [pc, #12]	; (8001dcc <_cbSendSystemDesc+0x14>)
 8001dbe:	f001 f8d7 	bl	8002f70 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <_cbSendSystemDesc+0x18>)
 8001dc4:	f001 f8d4 	bl	8002f70 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	08004510 	.word	0x08004510
 8001dd0:	0800454c 	.word	0x0800454c

08001dd4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SEGGER_SYSVIEW_Conf+0x24>)
 8001de2:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <SEGGER_SYSVIEW_Conf+0x28>)
 8001de4:	f000 fd4c 	bl	8002880 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001de8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001dec:	f000 fd86 	bl	80028fc <SEGGER_SYSVIEW_SetRAMBase>
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000014 	.word	0x20000014
 8001df8:	08001db9 	.word	0x08001db9
 8001dfc:	0800462c 	.word	0x0800462c

08001e00 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	e034      	b.n	8001e76 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001e0c:	491e      	ldr	r1, [pc, #120]	; (8001e88 <_cbSendTaskList+0x88>)
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	491a      	ldr	r1, [pc, #104]	; (8001e88 <_cbSendTaskList+0x88>)
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	681c      	ldr	r4, [r3, #0]
 8001e2e:	4916      	ldr	r1, [pc, #88]	; (8001e88 <_cbSendTaskList+0x88>)
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3308      	adds	r3, #8
 8001e3e:	681d      	ldr	r5, [r3, #0]
 8001e40:	4911      	ldr	r1, [pc, #68]	; (8001e88 <_cbSendTaskList+0x88>)
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	330c      	adds	r3, #12
 8001e50:	681e      	ldr	r6, [r3, #0]
 8001e52:	490d      	ldr	r1, [pc, #52]	; (8001e88 <_cbSendTaskList+0x88>)
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	3310      	adds	r3, #16
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	4633      	mov	r3, r6
 8001e68:	462a      	mov	r2, r5
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	f000 f8b4 	bl	8001fd8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3301      	adds	r3, #1
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <_cbSendTaskList+0x8c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d3c5      	bcc.n	8001e0c <_cbSendTaskList+0xc>
  }
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e88:	20012dd8 	.word	0x20012dd8
 8001e8c:	20012e78 	.word	0x20012e78

08001e90 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001e96:	f7ff f8fd 	bl	8001094 <xTaskGetTickCountFromISR>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f04f 0400 	mov.w	r4, #0
 8001ea0:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001ea4:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	4634      	mov	r4, r6
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	0162      	lsls	r2, r4, #5
 8001eb6:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001eba:	0159      	lsls	r1, r3, #5
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4614      	mov	r4, r2
 8001ec0:	1b5b      	subs	r3, r3, r5
 8001ec2:	eb64 0406 	sbc.w	r4, r4, r6
 8001ec6:	f04f 0100 	mov.w	r1, #0
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	00a2      	lsls	r2, r4, #2
 8001ed0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001ed4:	0099      	lsls	r1, r3, #2
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4614      	mov	r4, r2
 8001eda:	195b      	adds	r3, r3, r5
 8001edc:	eb44 0406 	adc.w	r4, r4, r6
 8001ee0:	f04f 0100 	mov.w	r1, #0
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	00e2      	lsls	r2, r4, #3
 8001eea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001eee:	00d9      	lsls	r1, r3, #3
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4614      	mov	r4, r2
 8001ef4:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8001ef8:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	4621      	mov	r1, r4
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f08 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001f16:	2205      	movs	r2, #5
 8001f18:	492b      	ldr	r1, [pc, #172]	; (8001fc8 <SYSVIEW_AddTask+0xc0>)
 8001f1a:	68b8      	ldr	r0, [r7, #8]
 8001f1c:	f001 fea0 	bl	8003c60 <memcmp>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d04b      	beq.n	8001fbe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <SYSVIEW_AddTask+0xc4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b07      	cmp	r3, #7
 8001f2c:	d903      	bls.n	8001f36 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001f2e:	4828      	ldr	r0, [pc, #160]	; (8001fd0 <SYSVIEW_AddTask+0xc8>)
 8001f30:	f001 fb10 	bl	8003554 <SEGGER_SYSVIEW_Warn>
    return;
 8001f34:	e044      	b.n	8001fc0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001f36:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <SYSVIEW_AddTask+0xc4>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4926      	ldr	r1, [pc, #152]	; (8001fd4 <SYSVIEW_AddTask+0xcc>)
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <SYSVIEW_AddTask+0xc4>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4921      	ldr	r1, [pc, #132]	; (8001fd4 <SYSVIEW_AddTask+0xcc>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <SYSVIEW_AddTask+0xc4>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	491b      	ldr	r1, [pc, #108]	; (8001fd4 <SYSVIEW_AddTask+0xcc>)
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	3308      	adds	r3, #8
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <SYSVIEW_AddTask+0xc4>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4916      	ldr	r1, [pc, #88]	; (8001fd4 <SYSVIEW_AddTask+0xcc>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	330c      	adds	r3, #12
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <SYSVIEW_AddTask+0xc4>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4910      	ldr	r1, [pc, #64]	; (8001fd4 <SYSVIEW_AddTask+0xcc>)
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3310      	adds	r3, #16
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <SYSVIEW_AddTask+0xc4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <SYSVIEW_AddTask+0xc4>)
 8001faa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f80e 	bl	8001fd8 <SYSVIEW_SendTaskInfo>
 8001fbc:	e000      	b.n	8001fc0 <SYSVIEW_AddTask+0xb8>
    return;
 8001fbe:	bf00      	nop

}
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	0800455c 	.word	0x0800455c
 8001fcc:	20012e78 	.word	0x20012e78
 8001fd0:	08004564 	.word	0x08004564
 8001fd4:	20012dd8 	.word	0x20012dd8

08001fd8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	2214      	movs	r2, #20
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 fe50 	bl	8003c94 <memset>
  TaskInfo.TaskID     = TaskID;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4618      	mov	r0, r3
 800200e:	f000 feb5 	bl	8002d7c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002022:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <_DoInit+0x8c>)
 8002024:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2203      	movs	r2, #3
 800202a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2203      	movs	r2, #3
 8002030:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <_DoInit+0x90>)
 8002036:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <_DoInit+0x94>)
 800203c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002044:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a14      	ldr	r2, [pc, #80]	; (80020ac <_DoInit+0x90>)
 800205c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <_DoInit+0x98>)
 8002062:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2210      	movs	r2, #16
 8002068:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3307      	adds	r3, #7
 8002080:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <_DoInit+0x9c>)
 8002082:	6810      	ldr	r0, [r2, #0]
 8002084:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <_DoInit+0xa0>)
 800208a:	6810      	ldr	r0, [r2, #0]
 800208c:	6018      	str	r0, [r3, #0]
 800208e:	8891      	ldrh	r1, [r2, #4]
 8002090:	7992      	ldrb	r2, [r2, #6]
 8002092:	8099      	strh	r1, [r3, #4]
 8002094:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2220      	movs	r2, #32
 800209a:	719a      	strb	r2, [r3, #6]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	200153bc 	.word	0x200153bc
 80020ac:	080045b4 	.word	0x080045b4
 80020b0:	20012e7c 	.word	0x20012e7c
 80020b4:	2001327c 	.word	0x2001327c
 80020b8:	080045c0 	.word	0x080045c0
 80020bc:	080045c4 	.word	0x080045c4

080020c0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80020cc:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <SEGGER_RTT_ReadNoLock+0x100>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <SEGGER_RTT_ReadNoLock+0x18>
 80020d4:	f7ff ffa2 	bl	800201c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	3360      	adds	r3, #96	; 0x60
 80020e4:	4a36      	ldr	r2, [pc, #216]	; (80021c0 <SEGGER_RTT_ReadNoLock+0x100>)
 80020e6:	4413      	add	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80020fe:	6a3a      	ldr	r2, [r7, #32]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	429a      	cmp	r2, r3
 8002104:	d92a      	bls.n	800215c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4293      	cmp	r3, r2
 8002116:	bf28      	it	cs
 8002118:	4613      	movcs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	4413      	add	r3, r2
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4619      	mov	r1, r3
 8002128:	69f8      	ldr	r0, [r7, #28]
 800212a:	f001 fda8 	bl	8003c7e <memcpy>
    NumBytesRead += NumBytesRem;
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002146:	6a3a      	ldr	r2, [r7, #32]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	6a3a      	ldr	r2, [r7, #32]
 8002154:	429a      	cmp	r2, r3
 8002156:	d101      	bne.n	800215c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4293      	cmp	r3, r2
 800216a:	bf28      	it	cs
 800216c:	4613      	movcs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d018      	beq.n	80021a8 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	4413      	add	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4619      	mov	r1, r3
 8002182:	69f8      	ldr	r0, [r7, #28]
 8002184:	f001 fd7b 	bl	8003c7e <memcpy>
    NumBytesRead += NumBytesRem;
 8002188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80021a0:	6a3a      	ldr	r2, [r7, #32]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	6a3a      	ldr	r2, [r7, #32]
 80021b2:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200153bc 	.word	0x200153bc

080021c4 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4a3f      	ldr	r2, [pc, #252]	; (80022e0 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 80021e2:	4413      	add	r3, r2
 80021e4:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d854      	bhi.n	80022a4 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	d30f      	bcc.n	800222e <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221a:	4618      	mov	r0, r3
 800221c:	f001 fd2f 	bl	8003c7e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	441a      	add	r2, r3
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800222a:	2301      	movs	r3, #1
 800222c:	e054      	b.n	80022d8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	4413      	add	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	d34b      	bcc.n	80022d6 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	d90e      	bls.n	800226e <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	4413      	add	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225c:	4618      	mov	r0, r3
 800225e:	f001 fd0e 	bl	8003c7e <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	441a      	add	r2, r3
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	e018      	b.n	80022a0 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4413      	add	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227a:	4618      	mov	r0, r3
 800227c:	f001 fcff 	bl	8003c7e <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	6858      	ldr	r0, [r3, #4]
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	18d1      	adds	r1, r2, r3
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	461a      	mov	r2, r3
 8002292:	f001 fcf4 	bl	8003c7e <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad2      	subs	r2, r2, r3
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e019      	b.n	80022d8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d30f      	bcc.n	80022d6 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	4413      	add	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 fcdb 	bl	8003c7e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	441a      	add	r2, r3
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200153bc 	.word	0x200153bc

080022e4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80022f2:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80022fa:	f7ff fe8f 	bl	800201c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4293      	cmp	r3, r2
 8002308:	d24c      	bcs.n	80023a4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800230a:	f3ef 8311 	mrs	r3, BASEPRI
 800230e:	f04f 0120 	mov.w	r1, #32
 8002312:	f381 8811 	msr	BASEPRI, r1
 8002316:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d032      	beq.n	8002384 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800231e:	4925      	ldr	r1, [pc, #148]	; (80023b4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002332:	4920      	ldr	r1, [pc, #128]	; (80023b4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	440b      	add	r3, r1
 8002342:	3304      	adds	r3, #4
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002348:	491a      	ldr	r1, [pc, #104]	; (80023b4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	440b      	add	r3, r1
 8002356:	3320      	adds	r3, #32
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800235c:	4915      	ldr	r1, [pc, #84]	; (80023b4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	3328      	adds	r3, #40	; 0x28
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002370:	4910      	ldr	r1, [pc, #64]	; (80023b4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	3324      	adds	r3, #36	; 0x24
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002384:	490b      	ldr	r1, [pc, #44]	; (80023b4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	332c      	adds	r3, #44	; 0x2c
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e002      	b.n	80023aa <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295
 80023a8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80023aa:	697b      	ldr	r3, [r7, #20]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	200153bc 	.word	0x200153bc

080023b8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80023c6:	4b30      	ldr	r3, [pc, #192]	; (8002488 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80023ce:	f7ff fe25 	bl	800201c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80023d2:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4293      	cmp	r3, r2
 80023dc:	d24b      	bcs.n	8002476 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80023de:	f3ef 8311 	mrs	r3, BASEPRI
 80023e2:	f04f 0120 	mov.w	r1, #32
 80023e6:	f381 8811 	msr	BASEPRI, r1
 80023ea:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d031      	beq.n	8002456 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80023f2:	4925      	ldr	r1, [pc, #148]	; (8002488 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3360      	adds	r3, #96	; 0x60
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002406:	4920      	ldr	r1, [pc, #128]	; (8002488 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	3364      	adds	r3, #100	; 0x64
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800241a:	491b      	ldr	r1, [pc, #108]	; (8002488 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	3368      	adds	r3, #104	; 0x68
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800242e:	4916      	ldr	r1, [pc, #88]	; (8002488 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	3370      	adds	r3, #112	; 0x70
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002442:	4911      	ldr	r1, [pc, #68]	; (8002488 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	336c      	adds	r3, #108	; 0x6c
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8002456:	490c      	ldr	r1, [pc, #48]	; (8002488 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	3374      	adds	r3, #116	; 0x74
 8002466:	6a3a      	ldr	r2, [r7, #32]
 8002468:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	e002      	b.n	800247c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800247c:	697b      	ldr	r3, [r7, #20]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200153bc 	.word	0x200153bc

0800248c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800249c:	e002      	b.n	80024a4 <_EncodeStr+0x18>
    Len++;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	3301      	adds	r3, #1
 80024a2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f6      	bne.n	800249e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d901      	bls.n	80024bc <_EncodeStr+0x30>
    Len = Limit;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2bfe      	cmp	r3, #254	; 0xfe
 80024c0:	d806      	bhi.n	80024d0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	60fa      	str	r2, [r7, #12]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e011      	b.n	80024f4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	60fa      	str	r2, [r7, #12]
 80024d6:	22ff      	movs	r2, #255	; 0xff
 80024d8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	60fa      	str	r2, [r7, #12]
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	0a19      	lsrs	r1, r3, #8
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	60fa      	str	r2, [r7, #12]
 80024f0:	b2ca      	uxtb	r2, r1
 80024f2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80024f8:	e00a      	b.n	8002510 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	1c53      	adds	r3, r2, #1
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1c59      	adds	r1, r3, #1
 8002504:	60f9      	str	r1, [r7, #12]
 8002506:	7812      	ldrb	r2, [r2, #0]
 8002508:	701a      	strb	r2, [r3, #0]
    n++;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	429a      	cmp	r2, r3
 8002516:	d3f0      	bcc.n	80024fa <_EncodeStr+0x6e>
  }
  return pPayload;
 8002518:	68fb      	ldr	r3, [r7, #12]
}
 800251a:	4618      	mov	r0, r3
 800251c:	371c      	adds	r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002544:	1cfb      	adds	r3, r7, #3
 8002546:	2201      	movs	r2, #1
 8002548:	4619      	mov	r1, r3
 800254a:	2001      	movs	r0, #1
 800254c:	f7ff fdb8 	bl	80020c0 <SEGGER_RTT_ReadNoLock>
 8002550:	4603      	mov	r3, r0
 8002552:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	dd44      	ble.n	80025e4 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d01a      	beq.n	8002596 <_HandleIncomingPacket+0x58>
 8002560:	2b04      	cmp	r3, #4
 8002562:	dc06      	bgt.n	8002572 <_HandleIncomingPacket+0x34>
 8002564:	2b02      	cmp	r3, #2
 8002566:	d010      	beq.n	800258a <_HandleIncomingPacket+0x4c>
 8002568:	2b02      	cmp	r3, #2
 800256a:	dc11      	bgt.n	8002590 <_HandleIncomingPacket+0x52>
 800256c:	2b01      	cmp	r3, #1
 800256e:	d009      	beq.n	8002584 <_HandleIncomingPacket+0x46>
 8002570:	e02d      	b.n	80025ce <_HandleIncomingPacket+0x90>
 8002572:	2b06      	cmp	r3, #6
 8002574:	d015      	beq.n	80025a2 <_HandleIncomingPacket+0x64>
 8002576:	2b06      	cmp	r3, #6
 8002578:	db10      	blt.n	800259c <_HandleIncomingPacket+0x5e>
 800257a:	2b07      	cmp	r3, #7
 800257c:	d014      	beq.n	80025a8 <_HandleIncomingPacket+0x6a>
 800257e:	2b80      	cmp	r3, #128	; 0x80
 8002580:	d015      	beq.n	80025ae <_HandleIncomingPacket+0x70>
 8002582:	e024      	b.n	80025ce <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002584:	f000 fa7e 	bl	8002a84 <SEGGER_SYSVIEW_Start>
      break;
 8002588:	e031      	b.n	80025ee <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800258a:	f000 fb37 	bl	8002bfc <SEGGER_SYSVIEW_Stop>
      break;
 800258e:	e02e      	b.n	80025ee <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002590:	f000 fd12 	bl	8002fb8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002594:	e02b      	b.n	80025ee <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002596:	f000 fcd7 	bl	8002f48 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800259a:	e028      	b.n	80025ee <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800259c:	f000 fb54 	bl	8002c48 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80025a0:	e025      	b.n	80025ee <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80025a2:	f000 ff99 	bl	80034d8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80025a6:	e022      	b.n	80025ee <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80025a8:	f000 ff78 	bl	800349c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80025ac:	e01f      	b.n	80025ee <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80025ae:	1cfb      	adds	r3, r7, #3
 80025b0:	2201      	movs	r2, #1
 80025b2:	4619      	mov	r1, r3
 80025b4:	2001      	movs	r0, #1
 80025b6:	f7ff fd83 	bl	80020c0 <SEGGER_RTT_ReadNoLock>
 80025ba:	4603      	mov	r3, r0
 80025bc:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	dd11      	ble.n	80025e8 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fee8 	bl	800339c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80025cc:	e00c      	b.n	80025e8 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	da0a      	bge.n	80025ec <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80025d6:	1cfb      	adds	r3, r7, #3
 80025d8:	2201      	movs	r2, #1
 80025da:	4619      	mov	r1, r3
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff fd6f 	bl	80020c0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80025e2:	e003      	b.n	80025ec <_HandleIncomingPacket+0xae>
    }
  }
 80025e4:	bf00      	nop
 80025e6:	e002      	b.n	80025ee <_HandleIncomingPacket+0xb0>
      break;
 80025e8:	bf00      	nop
 80025ea:	e000      	b.n	80025ee <_HandleIncomingPacket+0xb0>
      break;
 80025ec:	bf00      	nop
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80025fe:	2301      	movs	r3, #1
 8002600:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	3301      	adds	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800260c:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <_TrySendOverflowPacket+0xd8>)
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
 8002612:	e00b      	b.n	800262c <_TrySendOverflowPacket+0x34>
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002616:	b2da      	uxtb	r2, r3
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	1c59      	adds	r1, r3, #1
 800261c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800261e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	09db      	lsrs	r3, r3, #7
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	2b7f      	cmp	r3, #127	; 0x7f
 8002630:	d8f0      	bhi.n	8002614 <_TrySendOverflowPacket+0x1c>
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <_TrySendOverflowPacket+0xdc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002648:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <_TrySendOverflowPacket+0xd8>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	e00b      	b.n	8002674 <_TrySendOverflowPacket+0x7c>
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	6279      	str	r1, [r7, #36]	; 0x24
 8002666:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	09db      	lsrs	r3, r3, #7
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	2b7f      	cmp	r3, #127	; 0x7f
 8002678:	d8f0      	bhi.n	800265c <_TrySendOverflowPacket+0x64>
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	627a      	str	r2, [r7, #36]	; 0x24
 8002680:	6a3a      	ldr	r2, [r7, #32]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	461a      	mov	r2, r3
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	4619      	mov	r1, r3
 8002696:	2001      	movs	r0, #1
 8002698:	f7ff fd94 	bl	80021c4 <SEGGER_RTT_WriteSkipNoLock>
 800269c:	4603      	mov	r3, r0
 800269e:	613b      	str	r3, [r7, #16]
  if (Status) {
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <_TrySendOverflowPacket+0xd8>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <_TrySendOverflowPacket+0xd8>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <_TrySendOverflowPacket+0xd8>)
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e004      	b.n	80026c4 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <_TrySendOverflowPacket+0xd8>)
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	3301      	adds	r3, #1
 80026c0:	4a03      	ldr	r2, [pc, #12]	; (80026d0 <_TrySendOverflowPacket+0xd8>)
 80026c2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80026c4:	693b      	ldr	r3, [r7, #16]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3730      	adds	r7, #48	; 0x30
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20015294 	.word	0x20015294
 80026d4:	e0001004 	.word	0xe0001004

080026d8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80026e4:	4b63      	ldr	r3, [pc, #396]	; (8002874 <_SendPacket+0x19c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d010      	beq.n	800270e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80026ec:	4b61      	ldr	r3, [pc, #388]	; (8002874 <_SendPacket+0x19c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a1 	beq.w	8002838 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80026f6:	4b5f      	ldr	r3, [pc, #380]	; (8002874 <_SendPacket+0x19c>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d109      	bne.n	8002712 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80026fe:	f7ff ff7b 	bl	80025f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002702:	4b5c      	ldr	r3, [pc, #368]	; (8002874 <_SendPacket+0x19c>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	f040 8098 	bne.w	800283c <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800270c:	e001      	b.n	8002712 <_SendPacket+0x3a>
    goto Send;
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <_SendPacket+0x3c>
Send:
 8002712:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b1f      	cmp	r3, #31
 8002718:	d809      	bhi.n	800272e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800271a:	4b56      	ldr	r3, [pc, #344]	; (8002874 <_SendPacket+0x19c>)
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	f040 8089 	bne.w	8002840 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b17      	cmp	r3, #23
 8002732:	d807      	bhi.n	8002744 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3b01      	subs	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e03d      	b.n	80027c0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b7f      	cmp	r3, #127	; 0x7f
 8002750:	d912      	bls.n	8002778 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	09da      	lsrs	r2, r3, #7
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3b01      	subs	r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	3a01      	subs	r2, #1
 800276a:	60fa      	str	r2, [r7, #12]
 800276c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	e006      	b.n	8002786 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3b01      	subs	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b7f      	cmp	r3, #127	; 0x7f
 800278a:	d912      	bls.n	80027b2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	09da      	lsrs	r2, r3, #7
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3b01      	subs	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	3a01      	subs	r2, #1
 80027a4:	60fa      	str	r2, [r7, #12]
 80027a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e006      	b.n	80027c0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80027c0:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <_SendPacket+0x1a0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80027c6:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <_SendPacket+0x19c>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	623b      	str	r3, [r7, #32]
 80027d8:	e00b      	b.n	80027f2 <_SendPacket+0x11a>
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	1c59      	adds	r1, r3, #1
 80027e2:	6279      	str	r1, [r7, #36]	; 0x24
 80027e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	09db      	lsrs	r3, r3, #7
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2b7f      	cmp	r3, #127	; 0x7f
 80027f6:	d8f0      	bhi.n	80027da <_SendPacket+0x102>
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	627a      	str	r2, [r7, #36]	; 0x24
 80027fe:	6a3a      	ldr	r2, [r7, #32]
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	461a      	mov	r2, r3
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	2001      	movs	r0, #1
 8002814:	f7ff fcd6 	bl	80021c4 <SEGGER_RTT_WriteSkipNoLock>
 8002818:	4603      	mov	r3, r0
 800281a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002822:	4a14      	ldr	r2, [pc, #80]	; (8002874 <_SendPacket+0x19c>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	60d3      	str	r3, [r2, #12]
 8002828:	e00b      	b.n	8002842 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <_SendPacket+0x19c>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	3301      	adds	r3, #1
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <_SendPacket+0x19c>)
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	e004      	b.n	8002842 <_SendPacket+0x16a>
    goto SendDone;
 8002838:	bf00      	nop
 800283a:	e002      	b.n	8002842 <_SendPacket+0x16a>
      goto SendDone;
 800283c:	bf00      	nop
 800283e:	e000      	b.n	8002842 <_SendPacket+0x16a>
      goto SendDone;
 8002840:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <_SendPacket+0x1a4>)
 8002844:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <_SendPacket+0x1a4>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	429a      	cmp	r2, r3
 8002850:	d00b      	beq.n	800286a <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <_SendPacket+0x19c>)
 8002854:	789b      	ldrb	r3, [r3, #2]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <_SendPacket+0x19c>)
 800285c:	2201      	movs	r2, #1
 800285e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002860:	f7ff fe6d 	bl	800253e <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <_SendPacket+0x19c>)
 8002866:	2200      	movs	r2, #0
 8002868:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800286a:	bf00      	nop
 800286c:	3728      	adds	r7, #40	; 0x28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20015294 	.word	0x20015294
 8002878:	e0001004 	.word	0xe0001004
 800287c:	200153bc 	.word	0x200153bc

08002880 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800288e:	2300      	movs	r3, #0
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002896:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <SEGGER_SYSVIEW_Init+0x68>)
 8002898:	4914      	ldr	r1, [pc, #80]	; (80028ec <SEGGER_SYSVIEW_Init+0x6c>)
 800289a:	2001      	movs	r0, #1
 800289c:	f7ff fd22 	bl	80022e4 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80028a0:	2300      	movs	r3, #0
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2308      	movs	r3, #8
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <SEGGER_SYSVIEW_Init+0x70>)
 80028a8:	4910      	ldr	r1, [pc, #64]	; (80028ec <SEGGER_SYSVIEW_Init+0x6c>)
 80028aa:	2001      	movs	r0, #1
 80028ac:	f7ff fd84 	bl	80023b8 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <SEGGER_SYSVIEW_Init+0x74>)
 80028b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b6:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <SEGGER_SYSVIEW_Init+0x78>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <SEGGER_SYSVIEW_Init+0x74>)
 80028be:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80028c0:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <SEGGER_SYSVIEW_Init+0x74>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80028c6:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <SEGGER_SYSVIEW_Init+0x74>)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80028cc:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <SEGGER_SYSVIEW_Init+0x74>)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80028d2:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <SEGGER_SYSVIEW_Init+0x74>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <SEGGER_SYSVIEW_Init+0x74>)
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2001328c 	.word	0x2001328c
 80028ec:	080045cc 	.word	0x080045cc
 80028f0:	2001528c 	.word	0x2001528c
 80028f4:	20015294 	.word	0x20015294
 80028f8:	e0001004 	.word	0xe0001004

080028fc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6113      	str	r3, [r2, #16]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20015294 	.word	0x20015294

0800291c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002924:	f3ef 8311 	mrs	r3, BASEPRI
 8002928:	f04f 0120 	mov.w	r1, #32
 800292c:	f381 8811 	msr	BASEPRI, r1
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4808      	ldr	r0, [pc, #32]	; (8002954 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002934:	f7ff fdf7 	bl	8002526 <_PreparePacket>
 8002938:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	68b8      	ldr	r0, [r7, #8]
 8002940:	f7ff feca 	bl	80026d8 <_SendPacket>
  RECORD_END();
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f383 8811 	msr	BASEPRI, r3
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200152c4 	.word	0x200152c4

08002958 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002962:	f3ef 8311 	mrs	r3, BASEPRI
 8002966:	f04f 0120 	mov.w	r1, #32
 800296a:	f381 8811 	msr	BASEPRI, r1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	4816      	ldr	r0, [pc, #88]	; (80029cc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002972:	f7ff fdd8 	bl	8002526 <_PreparePacket>
 8002976:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	e00b      	b.n	800299e <SEGGER_SYSVIEW_RecordU32+0x46>
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	1c59      	adds	r1, r3, #1
 800298e:	61f9      	str	r1, [r7, #28]
 8002990:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	09db      	lsrs	r3, r3, #7
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b7f      	cmp	r3, #127	; 0x7f
 80029a2:	d8f0      	bhi.n	8002986 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	61fa      	str	r2, [r7, #28]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68f9      	ldr	r1, [r7, #12]
 80029b8:	6938      	ldr	r0, [r7, #16]
 80029ba:	f7ff fe8d 	bl	80026d8 <_SendPacket>
  RECORD_END();
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f383 8811 	msr	BASEPRI, r3
}
 80029c4:	bf00      	nop
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	200152c4 	.word	0x200152c4

080029d0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80029dc:	f3ef 8311 	mrs	r3, BASEPRI
 80029e0:	f04f 0120 	mov.w	r1, #32
 80029e4:	f381 8811 	msr	BASEPRI, r1
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	4825      	ldr	r0, [pc, #148]	; (8002a80 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80029ec:	f7ff fd9b 	bl	8002526 <_PreparePacket>
 80029f0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029fe:	e00b      	b.n	8002a18 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	1c59      	adds	r1, r3, #1
 8002a08:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002a0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	09db      	lsrs	r3, r3, #7
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a1c:	d8f0      	bhi.n	8002a00 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	623b      	str	r3, [r7, #32]
 8002a36:	e00b      	b.n	8002a50 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	1c59      	adds	r1, r3, #1
 8002a40:	6279      	str	r1, [r7, #36]	; 0x24
 8002a42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	09db      	lsrs	r3, r3, #7
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	2b7f      	cmp	r3, #127	; 0x7f
 8002a54:	d8f0      	bhi.n	8002a38 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	627a      	str	r2, [r7, #36]	; 0x24
 8002a5c:	6a3a      	ldr	r2, [r7, #32]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	6979      	ldr	r1, [r7, #20]
 8002a6a:	69b8      	ldr	r0, [r7, #24]
 8002a6c:	f7ff fe34 	bl	80026d8 <_SendPacket>
  RECORD_END();
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f383 8811 	msr	BASEPRI, r3
}
 8002a76:	bf00      	nop
 8002a78:	3730      	adds	r7, #48	; 0x30
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200152c4 	.word	0x200152c4

08002a84 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	; 0x30
 8002a88:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002a8a:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 80aa 	bne.w	8002be8 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002a94:	4b56      	ldr	r3, [pc, #344]	; (8002bf0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8002a9e:	f04f 0120 	mov.w	r1, #32
 8002aa2:	f381 8811 	msr	BASEPRI, r1
 8002aa6:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002aa8:	220a      	movs	r2, #10
 8002aaa:	4952      	ldr	r1, [pc, #328]	; (8002bf4 <SEGGER_SYSVIEW_Start+0x170>)
 8002aac:	2001      	movs	r0, #1
 8002aae:	f7ff fb89 	bl	80021c4 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002ab8:	200a      	movs	r0, #10
 8002aba:	f7ff ff2f 	bl	800291c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002abe:	f3ef 8311 	mrs	r3, BASEPRI
 8002ac2:	f04f 0120 	mov.w	r1, #32
 8002ac6:	f381 8811 	msr	BASEPRI, r1
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	484a      	ldr	r0, [pc, #296]	; (8002bf8 <SEGGER_SYSVIEW_Start+0x174>)
 8002ace:	f7ff fd2a 	bl	8002526 <_PreparePacket>
 8002ad2:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002adc:	4b44      	ldr	r3, [pc, #272]	; (8002bf0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae2:	e00b      	b.n	8002afc <SEGGER_SYSVIEW_Start+0x78>
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	1c59      	adds	r1, r3, #1
 8002aec:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002aee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	09db      	lsrs	r3, r3, #7
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	2b7f      	cmp	r3, #127	; 0x7f
 8002b00:	d8f0      	bhi.n	8002ae4 <SEGGER_SYSVIEW_Start+0x60>
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	e00b      	b.n	8002b36 <SEGGER_SYSVIEW_Start+0xb2>
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	1c59      	adds	r1, r3, #1
 8002b26:	6279      	str	r1, [r7, #36]	; 0x24
 8002b28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	09db      	lsrs	r3, r3, #7
 8002b34:	623b      	str	r3, [r7, #32]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2b7f      	cmp	r3, #127	; 0x7f
 8002b3a:	d8f0      	bhi.n	8002b1e <SEGGER_SYSVIEW_Start+0x9a>
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	627a      	str	r2, [r7, #36]	; 0x24
 8002b42:	6a3a      	ldr	r2, [r7, #32]
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	61fb      	str	r3, [r7, #28]
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	e00b      	b.n	8002b70 <SEGGER_SYSVIEW_Start+0xec>
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	1c59      	adds	r1, r3, #1
 8002b60:	61f9      	str	r1, [r7, #28]
 8002b62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	09db      	lsrs	r3, r3, #7
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b7f      	cmp	r3, #127	; 0x7f
 8002b74:	d8f0      	bhi.n	8002b58 <SEGGER_SYSVIEW_Start+0xd4>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	61fa      	str	r2, [r7, #28]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	e00b      	b.n	8002ba8 <SEGGER_SYSVIEW_Start+0x124>
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1c59      	adds	r1, r3, #1
 8002b98:	6179      	str	r1, [r7, #20]
 8002b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	09db      	lsrs	r3, r3, #7
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b7f      	cmp	r3, #127	; 0x7f
 8002bac:	d8f0      	bhi.n	8002b90 <SEGGER_SYSVIEW_Start+0x10c>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	617a      	str	r2, [r7, #20]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002bbe:	2218      	movs	r2, #24
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff fd88 	bl	80026d8 <_SendPacket>
      RECORD_END();
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002bdc:	f000 f9ec 	bl	8002fb8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002be0:	f000 f9b2 	bl	8002f48 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002be4:	f000 fc78 	bl	80034d8 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002be8:	bf00      	nop
 8002bea:	3730      	adds	r7, #48	; 0x30
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20015294 	.word	0x20015294
 8002bf4:	08004634 	.word	0x08004634
 8002bf8:	200152c4 	.word	0x200152c4

08002bfc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002c02:	f3ef 8311 	mrs	r3, BASEPRI
 8002c06:	f04f 0120 	mov.w	r1, #32
 8002c0a:	f381 8811 	msr	BASEPRI, r1
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	480b      	ldr	r0, [pc, #44]	; (8002c40 <SEGGER_SYSVIEW_Stop+0x44>)
 8002c12:	f7ff fc88 	bl	8002526 <_PreparePacket>
 8002c16:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <SEGGER_SYSVIEW_Stop+0x48>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002c20:	220b      	movs	r2, #11
 8002c22:	6839      	ldr	r1, [r7, #0]
 8002c24:	6838      	ldr	r0, [r7, #0]
 8002c26:	f7ff fd57 	bl	80026d8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <SEGGER_SYSVIEW_Stop+0x48>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f383 8811 	msr	BASEPRI, r3
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200152c4 	.word	0x200152c4
 8002c44:	20015294 	.word	0x20015294

08002c48 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08c      	sub	sp, #48	; 0x30
 8002c4c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c4e:	f3ef 8311 	mrs	r3, BASEPRI
 8002c52:	f04f 0120 	mov.w	r1, #32
 8002c56:	f381 8811 	msr	BASEPRI, r1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	4845      	ldr	r0, [pc, #276]	; (8002d74 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002c5e:	f7ff fc62 	bl	8002526 <_PreparePacket>
 8002c62:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6c:	4b42      	ldr	r3, [pc, #264]	; (8002d78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c72:	e00b      	b.n	8002c8c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	1c59      	adds	r1, r3, #1
 8002c7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	09db      	lsrs	r3, r3, #7
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c90:	d8f0      	bhi.n	8002c74 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	e00b      	b.n	8002cc6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1c59      	adds	r1, r3, #1
 8002cb6:	6279      	str	r1, [r7, #36]	; 0x24
 8002cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	09db      	lsrs	r3, r3, #7
 8002cc4:	623b      	str	r3, [r7, #32]
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cca:	d8f0      	bhi.n	8002cae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8002cd2:	6a3a      	ldr	r2, [r7, #32]
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e00b      	b.n	8002d00 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	1c59      	adds	r1, r3, #1
 8002cf0:	61f9      	str	r1, [r7, #28]
 8002cf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	09db      	lsrs	r3, r3, #7
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b7f      	cmp	r3, #127	; 0x7f
 8002d04:	d8f0      	bhi.n	8002ce8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	61fa      	str	r2, [r7, #28]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e00b      	b.n	8002d38 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	1c59      	adds	r1, r3, #1
 8002d28:	6179      	str	r1, [r7, #20]
 8002d2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	09db      	lsrs	r3, r3, #7
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8002d3c:	d8f0      	bhi.n	8002d20 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	617a      	str	r2, [r7, #20]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002d4e:	2218      	movs	r2, #24
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	68b8      	ldr	r0, [r7, #8]
 8002d54:	f7ff fcc0 	bl	80026d8 <_SendPacket>
  RECORD_END();
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	4798      	blx	r3
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	3730      	adds	r7, #48	; 0x30
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200152c4 	.word	0x200152c4
 8002d78:	20015294 	.word	0x20015294

08002d7c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b092      	sub	sp, #72	; 0x48
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002d84:	f3ef 8311 	mrs	r3, BASEPRI
 8002d88:	f04f 0120 	mov.w	r1, #32
 8002d8c:	f381 8811 	msr	BASEPRI, r1
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	486b      	ldr	r0, [pc, #428]	; (8002f40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002d94:	f7ff fbc7 	bl	8002526 <_PreparePacket>
 8002d98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	647b      	str	r3, [r7, #68]	; 0x44
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4b67      	ldr	r3, [pc, #412]	; (8002f44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	643b      	str	r3, [r7, #64]	; 0x40
 8002db0:	e00b      	b.n	8002dca <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db8:	1c59      	adds	r1, r3, #1
 8002dba:	6479      	str	r1, [r7, #68]	; 0x44
 8002dbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc6:	09db      	lsrs	r3, r3, #7
 8002dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8002dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8002dce:	d8f0      	bhi.n	8002db2 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	647a      	str	r2, [r7, #68]	; 0x44
 8002dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dea:	e00b      	b.n	8002e04 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	09db      	lsrs	r3, r3, #7
 8002e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	2b7f      	cmp	r3, #127	; 0x7f
 8002e08:	d8f0      	bhi.n	8002dec <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8002e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e18:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	4619      	mov	r1, r3
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff fb32 	bl	800248c <_EncodeStr>
 8002e28:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002e2a:	2209      	movs	r2, #9
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	6938      	ldr	r0, [r7, #16]
 8002e30:	f7ff fc52 	bl	80026d8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b40      	ldr	r3, [pc, #256]	; (8002f44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
 8002e4a:	e00b      	b.n	8002e64 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e52:	1c59      	adds	r1, r3, #1
 8002e54:	6379      	str	r1, [r7, #52]	; 0x34
 8002e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	09db      	lsrs	r3, r3, #7
 8002e62:	633b      	str	r3, [r7, #48]	; 0x30
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	2b7f      	cmp	r3, #127	; 0x7f
 8002e68:	d8f0      	bhi.n	8002e4c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	637a      	str	r2, [r7, #52]	; 0x34
 8002e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e84:	e00b      	b.n	8002e9e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	1c59      	adds	r1, r3, #1
 8002e8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	09db      	lsrs	r3, r3, #7
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ea2:	d8f0      	bhi.n	8002e86 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	e00b      	b.n	8002ed8 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	1c59      	adds	r1, r3, #1
 8002ec8:	6279      	str	r1, [r7, #36]	; 0x24
 8002eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	09db      	lsrs	r3, r3, #7
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	2b7f      	cmp	r3, #127	; 0x7f
 8002edc:	d8f0      	bhi.n	8002ec0 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	627a      	str	r2, [r7, #36]	; 0x24
 8002ee4:	6a3a      	ldr	r2, [r7, #32]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e00b      	b.n	8002f10 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	1c59      	adds	r1, r3, #1
 8002f00:	61f9      	str	r1, [r7, #28]
 8002f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	09db      	lsrs	r3, r3, #7
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b7f      	cmp	r3, #127	; 0x7f
 8002f14:	d8f0      	bhi.n	8002ef8 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	61fa      	str	r2, [r7, #28]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002f26:	2215      	movs	r2, #21
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	6938      	ldr	r0, [r7, #16]
 8002f2c:	f7ff fbd4 	bl	80026d8 <_SendPacket>
  RECORD_END();
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f383 8811 	msr	BASEPRI, r3
}
 8002f36:	bf00      	nop
 8002f38:	3748      	adds	r7, #72	; 0x48
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200152c4 	.word	0x200152c4
 8002f44:	20015294 	.word	0x20015294

08002f48 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002f5e:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4798      	blx	r3
  }
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20015294 	.word	0x20015294

08002f70 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002f78:	f3ef 8311 	mrs	r3, BASEPRI
 8002f7c:	f04f 0120 	mov.w	r1, #32
 8002f80:	f381 8811 	msr	BASEPRI, r1
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	480b      	ldr	r0, [pc, #44]	; (8002fb4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002f88:	f7ff facd 	bl	8002526 <_PreparePacket>
 8002f8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6938      	ldr	r0, [r7, #16]
 8002f94:	f7ff fa7a 	bl	800248c <_EncodeStr>
 8002f98:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002f9a:	220e      	movs	r2, #14
 8002f9c:	68f9      	ldr	r1, [r7, #12]
 8002f9e:	6938      	ldr	r0, [r7, #16]
 8002fa0:	f7ff fb9a 	bl	80026d8 <_SendPacket>
  RECORD_END();
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f383 8811 	msr	BASEPRI, r3
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200152c4 	.word	0x200152c4

08002fb8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002fbe:	4b14      	ldr	r3, [pc, #80]	; (8003010 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d019      	beq.n	8002ffa <SEGGER_SYSVIEW_RecordSystime+0x42>
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d014      	beq.n	8002ffa <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4798      	blx	r3
 8002fd8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002fdc:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002fde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	f04f 0400 	mov.w	r4, #0
 8002fea:	0013      	movs	r3, r2
 8002fec:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4601      	mov	r1, r0
 8002ff2:	200d      	movs	r0, #13
 8002ff4:	f7ff fcec 	bl	80029d0 <SEGGER_SYSVIEW_RecordU32x2>
 8002ff8:	e005      	b.n	8003006 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4619      	mov	r1, r3
 8003000:	200c      	movs	r0, #12
 8003002:	f7ff fca9 	bl	8002958 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}
 800300e:	bf00      	nop
 8003010:	20015294 	.word	0x20015294
 8003014:	e0001004 	.word	0xe0001004

08003018 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800301e:	f3ef 8311 	mrs	r3, BASEPRI
 8003022:	f04f 0120 	mov.w	r1, #32
 8003026:	f381 8811 	msr	BASEPRI, r1
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	4819      	ldr	r0, [pc, #100]	; (8003094 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800302e:	f7ff fa7a 	bl	8002526 <_PreparePacket>
 8003032:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003038:	4b17      	ldr	r3, [pc, #92]	; (8003098 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003040:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	e00b      	b.n	8003064 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	1c59      	adds	r1, r3, #1
 8003054:	6179      	str	r1, [r7, #20]
 8003056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	09db      	lsrs	r3, r3, #7
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b7f      	cmp	r3, #127	; 0x7f
 8003068:	d8f0      	bhi.n	800304c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	617a      	str	r2, [r7, #20]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800307a:	2202      	movs	r2, #2
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	68b8      	ldr	r0, [r7, #8]
 8003080:	f7ff fb2a 	bl	80026d8 <_SendPacket>
  RECORD_END();
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f383 8811 	msr	BASEPRI, r3
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200152c4 	.word	0x200152c4
 8003098:	e000ed04 	.word	0xe000ed04

0800309c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80030a2:	f3ef 8311 	mrs	r3, BASEPRI
 80030a6:	f04f 0120 	mov.w	r1, #32
 80030aa:	f381 8811 	msr	BASEPRI, r1
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	4807      	ldr	r0, [pc, #28]	; (80030d0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80030b2:	f7ff fa38 	bl	8002526 <_PreparePacket>
 80030b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80030b8:	2203      	movs	r2, #3
 80030ba:	6839      	ldr	r1, [r7, #0]
 80030bc:	6838      	ldr	r0, [r7, #0]
 80030be:	f7ff fb0b 	bl	80026d8 <_SendPacket>
  RECORD_END();
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f383 8811 	msr	BASEPRI, r3
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	200152c4 	.word	0x200152c4

080030d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80030da:	f3ef 8311 	mrs	r3, BASEPRI
 80030de:	f04f 0120 	mov.w	r1, #32
 80030e2:	f381 8811 	msr	BASEPRI, r1
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	4807      	ldr	r0, [pc, #28]	; (8003108 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80030ea:	f7ff fa1c 	bl	8002526 <_PreparePacket>
 80030ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80030f0:	2212      	movs	r2, #18
 80030f2:	6839      	ldr	r1, [r7, #0]
 80030f4:	6838      	ldr	r0, [r7, #0]
 80030f6:	f7ff faef 	bl	80026d8 <_SendPacket>
  RECORD_END();
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f383 8811 	msr	BASEPRI, r3
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	200152c4 	.word	0x200152c4

0800310c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003112:	f3ef 8311 	mrs	r3, BASEPRI
 8003116:	f04f 0120 	mov.w	r1, #32
 800311a:	f381 8811 	msr	BASEPRI, r1
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	4807      	ldr	r0, [pc, #28]	; (8003140 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003122:	f7ff fa00 	bl	8002526 <_PreparePacket>
 8003126:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003128:	2211      	movs	r2, #17
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	6838      	ldr	r0, [r7, #0]
 800312e:	f7ff fad3 	bl	80026d8 <_SendPacket>
  RECORD_END();
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f383 8811 	msr	BASEPRI, r3
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	200152c4 	.word	0x200152c4

08003144 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800314c:	f3ef 8311 	mrs	r3, BASEPRI
 8003150:	f04f 0120 	mov.w	r1, #32
 8003154:	f381 8811 	msr	BASEPRI, r1
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	481a      	ldr	r0, [pc, #104]	; (80031c4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800315c:	f7ff f9e3 	bl	8002526 <_PreparePacket>
 8003160:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	e00b      	b.n	8003194 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	b2da      	uxtb	r2, r3
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	1c59      	adds	r1, r3, #1
 8003184:	61f9      	str	r1, [r7, #28]
 8003186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	09db      	lsrs	r3, r3, #7
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b7f      	cmp	r3, #127	; 0x7f
 8003198:	d8f0      	bhi.n	800317c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	61fa      	str	r2, [r7, #28]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80031aa:	2208      	movs	r2, #8
 80031ac:	68f9      	ldr	r1, [r7, #12]
 80031ae:	6938      	ldr	r0, [r7, #16]
 80031b0:	f7ff fa92 	bl	80026d8 <_SendPacket>
  RECORD_END();
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f383 8811 	msr	BASEPRI, r3
}
 80031ba:	bf00      	nop
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	200152c4 	.word	0x200152c4
 80031c8:	20015294 	.word	0x20015294

080031cc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80031d4:	f3ef 8311 	mrs	r3, BASEPRI
 80031d8:	f04f 0120 	mov.w	r1, #32
 80031dc:	f381 8811 	msr	BASEPRI, r1
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	481a      	ldr	r0, [pc, #104]	; (800324c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80031e4:	f7ff f99f 	bl	8002526 <_PreparePacket>
 80031e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	e00b      	b.n	800321c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	1c59      	adds	r1, r3, #1
 800320c:	61f9      	str	r1, [r7, #28]
 800320e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	09db      	lsrs	r3, r3, #7
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b7f      	cmp	r3, #127	; 0x7f
 8003220:	d8f0      	bhi.n	8003204 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	61fa      	str	r2, [r7, #28]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003232:	2204      	movs	r2, #4
 8003234:	68f9      	ldr	r1, [r7, #12]
 8003236:	6938      	ldr	r0, [r7, #16]
 8003238:	f7ff fa4e 	bl	80026d8 <_SendPacket>
  RECORD_END();
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f383 8811 	msr	BASEPRI, r3
}
 8003242:	bf00      	nop
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200152c4 	.word	0x200152c4
 8003250:	20015294 	.word	0x20015294

08003254 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800325c:	f3ef 8311 	mrs	r3, BASEPRI
 8003260:	f04f 0120 	mov.w	r1, #32
 8003264:	f381 8811 	msr	BASEPRI, r1
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	481a      	ldr	r0, [pc, #104]	; (80032d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800326c:	f7ff f95b 	bl	8002526 <_PreparePacket>
 8003270:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	e00b      	b.n	80032a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	1c59      	adds	r1, r3, #1
 8003294:	61f9      	str	r1, [r7, #28]
 8003296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	09db      	lsrs	r3, r3, #7
 80032a2:	61bb      	str	r3, [r7, #24]
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b7f      	cmp	r3, #127	; 0x7f
 80032a8:	d8f0      	bhi.n	800328c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	61fa      	str	r2, [r7, #28]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80032ba:	2206      	movs	r2, #6
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	6938      	ldr	r0, [r7, #16]
 80032c0:	f7ff fa0a 	bl	80026d8 <_SendPacket>
  RECORD_END();
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f383 8811 	msr	BASEPRI, r3
}
 80032ca:	bf00      	nop
 80032cc:	3720      	adds	r7, #32
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200152c4 	.word	0x200152c4
 80032d8:	20015294 	.word	0x20015294

080032dc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80032e6:	f3ef 8311 	mrs	r3, BASEPRI
 80032ea:	f04f 0120 	mov.w	r1, #32
 80032ee:	f381 8811 	msr	BASEPRI, r1
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	4827      	ldr	r0, [pc, #156]	; (8003394 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80032f6:	f7ff f916 	bl	8002526 <_PreparePacket>
 80032fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	623b      	str	r3, [r7, #32]
 8003314:	e00b      	b.n	800332e <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	1c59      	adds	r1, r3, #1
 800331e:	6279      	str	r1, [r7, #36]	; 0x24
 8003320:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	09db      	lsrs	r3, r3, #7
 800332c:	623b      	str	r3, [r7, #32]
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	2b7f      	cmp	r3, #127	; 0x7f
 8003332:	d8f0      	bhi.n	8003316 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	627a      	str	r2, [r7, #36]	; 0x24
 800333a:	6a3a      	ldr	r2, [r7, #32]
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e00b      	b.n	8003366 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	1c59      	adds	r1, r3, #1
 8003356:	61f9      	str	r1, [r7, #28]
 8003358:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	09db      	lsrs	r3, r3, #7
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b7f      	cmp	r3, #127	; 0x7f
 800336a:	d8f0      	bhi.n	800334e <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	61fa      	str	r2, [r7, #28]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800337c:	2207      	movs	r2, #7
 800337e:	68f9      	ldr	r1, [r7, #12]
 8003380:	6938      	ldr	r0, [r7, #16]
 8003382:	f7ff f9a9 	bl	80026d8 <_SendPacket>
  RECORD_END();
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f383 8811 	msr	BASEPRI, r3
}
 800338c:	bf00      	nop
 800338e:	3728      	adds	r7, #40	; 0x28
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200152c4 	.word	0x200152c4
 8003398:	20015294 	.word	0x20015294

0800339c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b08c      	sub	sp, #48	; 0x30
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80033a6:	4b3b      	ldr	r3, [pc, #236]	; (8003494 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d06d      	beq.n	800348a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80033ae:	4b39      	ldr	r3, [pc, #228]	; (8003494 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80033b4:	2300      	movs	r3, #0
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b8:	e008      	b.n	80033cc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	3301      	adds	r3, #1
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3f2      	bcc.n	80033ba <SEGGER_SYSVIEW_SendModule+0x1e>
 80033d4:	e000      	b.n	80033d8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80033d6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d055      	beq.n	800348a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80033de:	f3ef 8311 	mrs	r3, BASEPRI
 80033e2:	f04f 0120 	mov.w	r1, #32
 80033e6:	f381 8811 	msr	BASEPRI, r1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	482a      	ldr	r0, [pc, #168]	; (8003498 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80033ee:	f7ff f89a 	bl	8002526 <_PreparePacket>
 80033f2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	e00b      	b.n	800341a <SEGGER_SYSVIEW_SendModule+0x7e>
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	1c59      	adds	r1, r3, #1
 800340a:	6279      	str	r1, [r7, #36]	; 0x24
 800340c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	09db      	lsrs	r3, r3, #7
 8003418:	623b      	str	r3, [r7, #32]
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	2b7f      	cmp	r3, #127	; 0x7f
 800341e:	d8f0      	bhi.n	8003402 <SEGGER_SYSVIEW_SendModule+0x66>
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	627a      	str	r2, [r7, #36]	; 0x24
 8003426:	6a3a      	ldr	r2, [r7, #32]
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e00b      	b.n	8003454 <SEGGER_SYSVIEW_SendModule+0xb8>
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	1c59      	adds	r1, r3, #1
 8003444:	61f9      	str	r1, [r7, #28]
 8003446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	09db      	lsrs	r3, r3, #7
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b7f      	cmp	r3, #127	; 0x7f
 8003458:	d8f0      	bhi.n	800343c <SEGGER_SYSVIEW_SendModule+0xa0>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	61fa      	str	r2, [r7, #28]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2280      	movs	r2, #128	; 0x80
 8003470:	4619      	mov	r1, r3
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff f80a 	bl	800248c <_EncodeStr>
 8003478:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800347a:	2216      	movs	r2, #22
 800347c:	68f9      	ldr	r1, [r7, #12]
 800347e:	6938      	ldr	r0, [r7, #16]
 8003480:	f7ff f92a 	bl	80026d8 <_SendPacket>
      RECORD_END();
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800348a:	bf00      	nop
 800348c:	3730      	adds	r7, #48	; 0x30
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200152bc 	.word	0x200152bc
 8003498:	200152c4 	.word	0x200152c4

0800349c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00f      	beq.n	80034ca <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f2      	bne.n	80034b0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200152bc 	.word	0x200152bc

080034d8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80034de:	f3ef 8311 	mrs	r3, BASEPRI
 80034e2:	f04f 0120 	mov.w	r1, #32
 80034e6:	f381 8811 	msr	BASEPRI, r1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	4817      	ldr	r0, [pc, #92]	; (800354c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80034ee:	f7ff f81a 	bl	8002526 <_PreparePacket>
 80034f2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	4b14      	ldr	r3, [pc, #80]	; (8003550 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	e00b      	b.n	800351c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	1c59      	adds	r1, r3, #1
 800350c:	6179      	str	r1, [r7, #20]
 800350e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	09db      	lsrs	r3, r3, #7
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b7f      	cmp	r3, #127	; 0x7f
 8003520:	d8f0      	bhi.n	8003504 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	617a      	str	r2, [r7, #20]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003532:	221b      	movs	r2, #27
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	68b8      	ldr	r0, [r7, #8]
 8003538:	f7ff f8ce 	bl	80026d8 <_SendPacket>
  RECORD_END();
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f383 8811 	msr	BASEPRI, r3
}
 8003542:	bf00      	nop
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200152c4 	.word	0x200152c4
 8003550:	200152c0 	.word	0x200152c0

08003554 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800355c:	f3ef 8311 	mrs	r3, BASEPRI
 8003560:	f04f 0120 	mov.w	r1, #32
 8003564:	f381 8811 	msr	BASEPRI, r1
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	4827      	ldr	r0, [pc, #156]	; (8003608 <SEGGER_SYSVIEW_Warn+0xb4>)
 800356c:	f7fe ffdb 	bl	8002526 <_PreparePacket>
 8003570:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	6938      	ldr	r0, [r7, #16]
 8003578:	f7fe ff88 	bl	800248c <_EncodeStr>
 800357c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	2301      	movs	r3, #1
 8003584:	623b      	str	r3, [r7, #32]
 8003586:	e00b      	b.n	80035a0 <SEGGER_SYSVIEW_Warn+0x4c>
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	b2da      	uxtb	r2, r3
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	1c59      	adds	r1, r3, #1
 8003590:	6279      	str	r1, [r7, #36]	; 0x24
 8003592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	09db      	lsrs	r3, r3, #7
 800359e:	623b      	str	r3, [r7, #32]
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	2b7f      	cmp	r3, #127	; 0x7f
 80035a4:	d8f0      	bhi.n	8003588 <SEGGER_SYSVIEW_Warn+0x34>
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	627a      	str	r2, [r7, #36]	; 0x24
 80035ac:	6a3a      	ldr	r2, [r7, #32]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e00b      	b.n	80035d8 <SEGGER_SYSVIEW_Warn+0x84>
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	1c59      	adds	r1, r3, #1
 80035c8:	61f9      	str	r1, [r7, #28]
 80035ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	09db      	lsrs	r3, r3, #7
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b7f      	cmp	r3, #127	; 0x7f
 80035dc:	d8f0      	bhi.n	80035c0 <SEGGER_SYSVIEW_Warn+0x6c>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	61fa      	str	r2, [r7, #28]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80035ee:	221a      	movs	r2, #26
 80035f0:	68f9      	ldr	r1, [r7, #12]
 80035f2:	6938      	ldr	r0, [r7, #16]
 80035f4:	f7ff f870 	bl	80026d8 <_SendPacket>
  RECORD_END();
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f383 8811 	msr	BASEPRI, r3
}
 80035fe:	bf00      	nop
 8003600:	3728      	adds	r7, #40	; 0x28
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200152c4 	.word	0x200152c4

0800360c <main>:
#ifdef USE_SEMIHOSTING
extern void initialise_monitor_handles();
#endif

int main(void)
{
 800360c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360e:	b083      	sub	sp, #12
 8003610:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
    printf("Its a hello world application\r\n");
#endif

    DWT->CTRL |= (1<<0);//Data watch point trace->cyccnt(cycle count) in arm technical rm,it keeps time stamp
 8003612:	4b22      	ldr	r3, [pc, #136]	; (800369c <main+0x90>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a21      	ldr	r2, [pc, #132]	; (800369c <main+0x90>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6013      	str	r3, [r2, #0]

    //reset the RCC clock cconfiguration to default reset state
	//reset state is hsi=on,pll=off,hse=off, sysclk=16MHz

    RCC_DeInit();
 800361e:	f7fc ff53 	bl	80004c8 <RCC_DeInit>

    //update the system core clock variable
    SystemCoreClockUpdate();
 8003622:	f000 f96b 	bl	80038fc <SystemCoreClockUpdate>

    pvtHardwareSetup();
 8003626:	f000 f877 	bl	8003718 <pvtHardwareSetup>

    sprintf(user_msg,"\rthis is demo of task delay project\r\n");
 800362a:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <main+0x94>)
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <main+0x98>)
 800362e:	4614      	mov	r4, r2
 8003630:	469c      	mov	ip, r3
 8003632:	f104 0e20 	add.w	lr, r4, #32
 8003636:	4665      	mov	r5, ip
 8003638:	4626      	mov	r6, r4
 800363a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800363c:	6028      	str	r0, [r5, #0]
 800363e:	6069      	str	r1, [r5, #4]
 8003640:	60aa      	str	r2, [r5, #8]
 8003642:	60eb      	str	r3, [r5, #12]
 8003644:	3410      	adds	r4, #16
 8003646:	f10c 0c10 	add.w	ip, ip, #16
 800364a:	4574      	cmp	r4, lr
 800364c:	d1f3      	bne.n	8003636 <main+0x2a>
 800364e:	4663      	mov	r3, ip
 8003650:	4622      	mov	r2, r4
 8003652:	6810      	ldr	r0, [r2, #0]
 8003654:	6018      	str	r0, [r3, #0]
 8003656:	8892      	ldrh	r2, [r2, #4]
 8003658:	809a      	strh	r2, [r3, #4]
    printmsg(user_msg);
 800365a:	4811      	ldr	r0, [pc, #68]	; (80036a0 <main+0x94>)
 800365c:	f000 f8f0 	bl	8003840 <printmsg>

    //Start recording
    SEGGER_SYSVIEW_Conf();
 8003660:	f7fe fbb8 	bl	8001dd4 <SEGGER_SYSVIEW_Conf>
    SEGGER_SYSVIEW_Start();
 8003664:	f7ff fa0e 	bl	8002a84 <SEGGER_SYSVIEW_Start>

    //create two tasks:LED-TASK and BUTTON-TASK
    xTaskCreate(vTask1_handler, "TASK-1", 500, NULL, 2, &xTask1Handle);//stack size:500*4=~2kb
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <main+0x9c>)
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	2302      	movs	r3, #2
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2300      	movs	r3, #0
 8003672:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003676:	490d      	ldr	r1, [pc, #52]	; (80036ac <main+0xa0>)
 8003678:	480d      	ldr	r0, [pc, #52]	; (80036b0 <main+0xa4>)
 800367a:	f7fd fa73 	bl	8000b64 <xTaskCreate>
    xTaskCreate(vTask2_handler, "TASK-2", 500, NULL, 3, &xTask2Handle);
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <main+0xa8>)
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	2303      	movs	r3, #3
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2300      	movs	r3, #0
 8003688:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800368c:	490a      	ldr	r1, [pc, #40]	; (80036b8 <main+0xac>)
 800368e:	480b      	ldr	r0, [pc, #44]	; (80036bc <main+0xb0>)
 8003690:	f7fd fa68 	bl	8000b64 <xTaskCreate>
    //start the scheduler
    vTaskStartScheduler();
 8003694:	f7fd fbfa 	bl	8000e8c <vTaskStartScheduler>
	for(;;);
 8003698:	e7fe      	b.n	8003698 <main+0x8c>
 800369a:	bf00      	nop
 800369c:	e0001000 	.word	0xe0001000
 80036a0:	20015464 	.word	0x20015464
 80036a4:	080045d4 	.word	0x080045d4
 80036a8:	200153a8 	.word	0x200153a8
 80036ac:	080045fc 	.word	0x080045fc
 80036b0:	080036c1 	.word	0x080036c1
 80036b4:	200153ac 	.word	0x200153ac
 80036b8:	08004604 	.word	0x08004604
 80036bc:	080036f9 	.word	0x080036f9

080036c0 <vTask1_handler>:
}

void vTask1_handler(void* params){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]



	while(1){

		sprintf(user_msg,"the status of the led is:%u\r\n",GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_5));
 80036c8:	2120      	movs	r1, #32
 80036ca:	4808      	ldr	r0, [pc, #32]	; (80036ec <vTask1_handler+0x2c>)
 80036cc:	f7fc fe86 	bl	80003dc <GPIO_ReadOutputDataBit>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	4906      	ldr	r1, [pc, #24]	; (80036f0 <vTask1_handler+0x30>)
 80036d6:	4807      	ldr	r0, [pc, #28]	; (80036f4 <vTask1_handler+0x34>)
 80036d8:	f000 fae4 	bl	8003ca4 <siprintf>
        printmsg(user_msg);
 80036dc:	4805      	ldr	r0, [pc, #20]	; (80036f4 <vTask1_handler+0x34>)
 80036de:	f000 f8af 	bl	8003840 <printmsg>
        vTaskDelay(pdMS_TO_TICKS(1000));
 80036e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036e6:	f7fd fb99 	bl	8000e1c <vTaskDelay>
		sprintf(user_msg,"the status of the led is:%u\r\n",GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_5));
 80036ea:	e7ed      	b.n	80036c8 <vTask1_handler+0x8>
 80036ec:	40020000 	.word	0x40020000
 80036f0:	0800460c 	.word	0x0800460c
 80036f4:	20015464 	.word	0x20015464

080036f8 <vTask2_handler>:
    	}

	}


void vTask2_handler(void* params){
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]



	while(1){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8003700:	2120      	movs	r1, #32
 8003702:	4804      	ldr	r0, [pc, #16]	; (8003714 <vTask2_handler+0x1c>)
 8003704:	f7fc fe84 	bl	8000410 <GPIO_ToggleBits>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8003708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800370c:	f7fd fb86 	bl	8000e1c <vTaskDelay>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8003710:	e7f6      	b.n	8003700 <vTask2_handler+0x8>
 8003712:	bf00      	nop
 8003714:	40020000 	.word	0x40020000

08003718 <pvtHardwareSetup>:
        //rtos_delay(1000);//this crude delay won't allow task 1 to run on the cpu

				}
	}

static void pvtHardwareSetup(void){
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
	UART2_Setup();
 800371c:	f000 f842 	bl	80037a4 <UART2_Setup>
	//Configure button PC13 and LED PA5
	GPIO_Setup();
 8003720:	f000 f802 	bl	8003728 <GPIO_Setup>


}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}

08003728 <GPIO_Setup>:



static void GPIO_Setup(void){
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef buttonGPIO,LED_GPIO;
	memset(&buttonGPIO,0,sizeof(buttonGPIO));
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	2208      	movs	r2, #8
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f000 faac 	bl	8003c94 <memset>
	memset(&LED_GPIO,0,sizeof(LED_GPIO));
 800373c:	463b      	mov	r3, r7
 800373e:	2208      	movs	r2, #8
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f000 faa6 	bl	8003c94 <memset>

	//enable clock for gpioa and gpioc and syscfg
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003748:	2101      	movs	r1, #1
 800374a:	2001      	movs	r0, #1
 800374c:	f7fc ffee 	bl	800072c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003750:	2101      	movs	r1, #1
 8003752:	2004      	movs	r0, #4
 8003754:	f7fc ffea 	bl	800072c <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003758:	2101      	movs	r1, #1
 800375a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800375e:	f7fd f825 	bl	80007ac <RCC_APB2PeriphClockCmd>

	//configure led pin pa5 as output
	LED_GPIO.GPIO_Pin=GPIO_Pin_5;
 8003762:	2320      	movs	r3, #32
 8003764:	603b      	str	r3, [r7, #0]
	LED_GPIO.GPIO_Mode=GPIO_Mode_OUT;
 8003766:	2301      	movs	r3, #1
 8003768:	713b      	strb	r3, [r7, #4]
	LED_GPIO.GPIO_OType=GPIO_OType_PP;
 800376a:	2300      	movs	r3, #0
 800376c:	71bb      	strb	r3, [r7, #6]
	LED_GPIO.GPIO_PuPd=GPIO_PuPd_NOPULL;
 800376e:	2300      	movs	r3, #0
 8003770:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOA, &LED_GPIO);
 8003772:	463b      	mov	r3, r7
 8003774:	4619      	mov	r1, r3
 8003776:	4809      	ldr	r0, [pc, #36]	; (800379c <GPIO_Setup+0x74>)
 8003778:	f7fc fda2 	bl	80002c0 <GPIO_Init>

	//configure button gpio pc13 as input
	buttonGPIO.GPIO_Pin=GPIO_Pin_13;
 800377c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003780:	60bb      	str	r3, [r7, #8]
	buttonGPIO.GPIO_Mode=GPIO_Mode_IN;
 8003782:	2300      	movs	r3, #0
 8003784:	733b      	strb	r3, [r7, #12]

	GPIO_Init(GPIOC, &buttonGPIO);
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	4619      	mov	r1, r3
 800378c:	4804      	ldr	r0, [pc, #16]	; (80037a0 <GPIO_Setup+0x78>)
 800378e:	f7fc fd97 	bl	80002c0 <GPIO_Init>

}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40020000 	.word	0x40020000
 80037a0:	40020800 	.word	0x40020800

080037a4 <UART2_Setup>:

static void UART2_Setup(void){
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
	    GPIO_InitTypeDef UART_Gpio;
		memset(&UART_Gpio,0,sizeof(UART_Gpio));
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	2208      	movs	r2, #8
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fa6e 	bl	8003c94 <memset>
		USART_InitTypeDef UART_Handle;
		memset(&UART_Handle,0,sizeof(UART_Handle));
 80037b8:	463b      	mov	r3, r7
 80037ba:	2210      	movs	r2, #16
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fa68 	bl	8003c94 <memset>

	//enable clock for uart peripheral and gpioa peripheral
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 80037c4:	2101      	movs	r1, #1
 80037c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80037ca:	f7fc ffcf 	bl	800076c <RCC_APB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80037ce:	2101      	movs	r1, #1
 80037d0:	2001      	movs	r0, #1
 80037d2:	f7fc ffab 	bl	800072c <RCC_AHB1PeriphClockCmd>

		//configure pa2 as uart_tx and pa3 as uart_rx

		UART_Gpio.GPIO_Pin=GPIO_Pin_2 | GPIO_Pin_3;
 80037d6:	230c      	movs	r3, #12
 80037d8:	613b      	str	r3, [r7, #16]
		UART_Gpio.GPIO_Mode=GPIO_Mode_AF;
 80037da:	2302      	movs	r3, #2
 80037dc:	753b      	strb	r3, [r7, #20]
		UART_Gpio.GPIO_PuPd=GPIO_PuPd_UP;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
		GPIO_Init(GPIOA, &UART_Gpio);
 80037e2:	f107 0310 	add.w	r3, r7, #16
 80037e6:	4619      	mov	r1, r3
 80037e8:	4813      	ldr	r0, [pc, #76]	; (8003838 <UART2_Setup+0x94>)
 80037ea:	f7fc fd69 	bl	80002c0 <GPIO_Init>

		GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);//PA2 CONFIG AF7
 80037ee:	2207      	movs	r2, #7
 80037f0:	2102      	movs	r1, #2
 80037f2:	4811      	ldr	r0, [pc, #68]	; (8003838 <UART2_Setup+0x94>)
 80037f4:	f7fc fe1e 	bl	8000434 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);//PA3 CONFIG AF7
 80037f8:	2207      	movs	r2, #7
 80037fa:	2103      	movs	r1, #3
 80037fc:	480e      	ldr	r0, [pc, #56]	; (8003838 <UART2_Setup+0x94>)
 80037fe:	f7fc fe19 	bl	8000434 <GPIO_PinAFConfig>

		//UART PERIPHERAL CONFIGURATION
		UART_Handle.USART_BaudRate=115200;
 8003802:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003806:	603b      	str	r3, [r7, #0]
		UART_Handle.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 8003808:	2300      	movs	r3, #0
 800380a:	81bb      	strh	r3, [r7, #12]
		UART_Handle.USART_Mode=USART_Mode_Tx | USART_Mode_Rx;
 800380c:	230c      	movs	r3, #12
 800380e:	817b      	strh	r3, [r7, #10]
		UART_Handle.USART_Parity=USART_Parity_No;
 8003810:	2300      	movs	r3, #0
 8003812:	813b      	strh	r3, [r7, #8]
		UART_Handle.USART_StopBits=USART_StopBits_1;
 8003814:	2300      	movs	r3, #0
 8003816:	80fb      	strh	r3, [r7, #6]
		UART_Handle.USART_WordLength=USART_WordLength_8b;
 8003818:	2300      	movs	r3, #0
 800381a:	80bb      	strh	r3, [r7, #4]

		USART_Init(USART2, &UART_Handle);
 800381c:	463b      	mov	r3, r7
 800381e:	4619      	mov	r1, r3
 8003820:	4806      	ldr	r0, [pc, #24]	; (800383c <UART2_Setup+0x98>)
 8003822:	f7fc ffe3 	bl	80007ec <USART_Init>
		USART_Cmd(USART2, ENABLE);
 8003826:	2101      	movs	r1, #1
 8003828:	4804      	ldr	r0, [pc, #16]	; (800383c <UART2_Setup+0x98>)
 800382a:	f7fd f899 	bl	8000960 <USART_Cmd>

}
 800382e:	bf00      	nop
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40020000 	.word	0x40020000
 800383c:	40004400 	.word	0x40004400

08003840 <printmsg>:


void printmsg(char* msg){
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

	for(uint32_t i=0;i<strlen(msg);i++){
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e013      	b.n	8003876 <printmsg+0x36>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)==RESET);
 800384e:	bf00      	nop
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	480e      	ldr	r0, [pc, #56]	; (800388c <printmsg+0x4c>)
 8003854:	f7fd f8b6 	bl	80009c4 <USART_GetFlagStatus>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f8      	beq.n	8003850 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	4619      	mov	r1, r3
 800386a:	4808      	ldr	r0, [pc, #32]	; (800388c <printmsg+0x4c>)
 800386c:	f7fd f898 	bl	80009a0 <USART_SendData>
	for(uint32_t i=0;i<strlen(msg);i++){
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3301      	adds	r3, #1
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fc fcca 	bl	8000210 <strlen>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4293      	cmp	r3, r2
 8003882:	d3e4      	bcc.n	800384e <printmsg+0xe>
	}

}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40004400 	.word	0x40004400

08003890 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003894:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <SystemInit+0x60>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389a:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <SystemInit+0x60>)
 800389c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <SystemInit+0x64>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <SystemInit+0x64>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <SystemInit+0x64>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80038b6:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <SystemInit+0x64>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a0e      	ldr	r2, [pc, #56]	; (80038f4 <SystemInit+0x64>)
 80038bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80038c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <SystemInit+0x64>)
 80038c8:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <SystemInit+0x68>)
 80038ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <SystemInit+0x64>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <SystemInit+0x64>)
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <SystemInit+0x64>)
 80038da:	2200      	movs	r2, #0
 80038dc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80038de:	f000 f8db 	bl	8003a98 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038e2:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <SystemInit+0x60>)
 80038e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038e8:	609a      	str	r2, [r3, #8]
#endif
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	e000ed00 	.word	0xe000ed00
 80038f4:	40023800 	.word	0x40023800
 80038f8:	24003010 	.word	0x24003010

080038fc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	2302      	movs	r3, #2
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	2302      	movs	r3, #2
 8003914:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8003916:	2302      	movs	r3, #2
 8003918:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800391a:	4b5a      	ldr	r3, [pc, #360]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	f200 8092 	bhi.w	8003a50 <SystemCoreClockUpdate+0x154>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <SystemCoreClockUpdate+0x38>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003969 	.word	0x08003969
 8003938:	08003a51 	.word	0x08003a51
 800393c:	08003a51 	.word	0x08003a51
 8003940:	08003a51 	.word	0x08003a51
 8003944:	08003971 	.word	0x08003971
 8003948:	08003a51 	.word	0x08003a51
 800394c:	08003a51 	.word	0x08003a51
 8003950:	08003a51 	.word	0x08003a51
 8003954:	08003979 	.word	0x08003979
 8003958:	08003a51 	.word	0x08003a51
 800395c:	08003a51 	.word	0x08003a51
 8003960:	08003a51 	.word	0x08003a51
 8003964:	080039e5 	.word	0x080039e5
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003968:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <SystemCoreClockUpdate+0x18c>)
 800396a:	4a48      	ldr	r2, [pc, #288]	; (8003a8c <SystemCoreClockUpdate+0x190>)
 800396c:	601a      	str	r2, [r3, #0]
      break;
 800396e:	e073      	b.n	8003a58 <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003970:	4b45      	ldr	r3, [pc, #276]	; (8003a88 <SystemCoreClockUpdate+0x18c>)
 8003972:	4a47      	ldr	r2, [pc, #284]	; (8003a90 <SystemCoreClockUpdate+0x194>)
 8003974:	601a      	str	r2, [r3, #0]
      break;
 8003976:	e06f      	b.n	8003a58 <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003978:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	0d9b      	lsrs	r3, r3, #22
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003984:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800398c:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00c      	beq.n	80039ae <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003994:	4a3e      	ldr	r2, [pc, #248]	; (8003a90 <SystemCoreClockUpdate+0x194>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	4a39      	ldr	r2, [pc, #228]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 800399e:	6852      	ldr	r2, [r2, #4]
 80039a0:	0992      	lsrs	r2, r2, #6
 80039a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	e00b      	b.n	80039c6 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80039ae:	4a37      	ldr	r2, [pc, #220]	; (8003a8c <SystemCoreClockUpdate+0x190>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b6:	4a33      	ldr	r2, [pc, #204]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 80039b8:	6852      	ldr	r2, [r2, #4]
 80039ba:	0992      	lsrs	r2, r2, #6
 80039bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
 80039c4:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039c6:	4b2f      	ldr	r3, [pc, #188]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	0c1b      	lsrs	r3, r3, #16
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	3301      	adds	r3, #1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <SystemCoreClockUpdate+0x18c>)
 80039e0:	6013      	str	r3, [r2, #0]
      break;
 80039e2:	e039      	b.n	8003a58 <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80039e4:	4b27      	ldr	r3, [pc, #156]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	0d9b      	lsrs	r3, r3, #22
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f0:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f8:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00c      	beq.n	8003a1a <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003a00:	4a23      	ldr	r2, [pc, #140]	; (8003a90 <SystemCoreClockUpdate+0x194>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	4a1e      	ldr	r2, [pc, #120]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 8003a0a:	6852      	ldr	r2, [r2, #4]
 8003a0c:	0992      	lsrs	r2, r2, #6
 8003a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e00b      	b.n	8003a32 <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <SystemCoreClockUpdate+0x190>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 8003a24:	6852      	ldr	r2, [r2, #4]
 8003a26:	0992      	lsrs	r2, r2, #6
 8003a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a2c:	fb02 f303 	mul.w	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	0f1b      	lsrs	r3, r3, #28
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <SystemCoreClockUpdate+0x18c>)
 8003a4c:	6013      	str	r3, [r2, #0]
      break;
 8003a4e:	e003      	b.n	8003a58 <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <SystemCoreClockUpdate+0x18c>)
 8003a52:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <SystemCoreClockUpdate+0x190>)
 8003a54:	601a      	str	r2, [r3, #0]
      break;
 8003a56:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <SystemCoreClockUpdate+0x188>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <SystemCoreClockUpdate+0x198>)
 8003a64:	5cd3      	ldrb	r3, [r2, r3]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <SystemCoreClockUpdate+0x18c>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
 8003a74:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <SystemCoreClockUpdate+0x18c>)
 8003a76:	6013      	str	r3, [r2, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40023800 	.word	0x40023800
 8003a88:	20000014 	.word	0x20000014
 8003a8c:	00f42400 	.word	0x00f42400
 8003a90:	007a1200 	.word	0x007a1200
 8003a94:	20000018 	.word	0x20000018

08003a98 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003aa6:	4b43      	ldr	r3, [pc, #268]	; (8003bb4 <SetSysClock+0x11c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a42      	ldr	r2, [pc, #264]	; (8003bb4 <SetSysClock+0x11c>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003ab2:	4b40      	ldr	r3, [pc, #256]	; (8003bb4 <SetSysClock+0x11c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <SetSysClock+0x38>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003ace:	d1f0      	bne.n	8003ab2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003ad0:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <SetSysClock+0x11c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003adc:	2301      	movs	r3, #1
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	e001      	b.n	8003ae6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d15c      	bne.n	8003ba6 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003aec:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <SetSysClock+0x11c>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	4a30      	ldr	r2, [pc, #192]	; (8003bb4 <SetSysClock+0x11c>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <SetSysClock+0x120>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2e      	ldr	r2, [pc, #184]	; (8003bb8 <SetSysClock+0x120>)
 8003afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b02:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003b04:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <SetSysClock+0x11c>)
 8003b06:	4a2b      	ldr	r2, [pc, #172]	; (8003bb4 <SetSysClock+0x11c>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003b0c:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <SetSysClock+0x11c>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <SetSysClock+0x11c>)
 8003b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b16:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003b18:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <SetSysClock+0x11c>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a25      	ldr	r2, [pc, #148]	; (8003bb4 <SetSysClock+0x11c>)
 8003b1e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003b22:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003b24:	4b23      	ldr	r3, [pc, #140]	; (8003bb4 <SetSysClock+0x11c>)
 8003b26:	4a25      	ldr	r2, [pc, #148]	; (8003bbc <SetSysClock+0x124>)
 8003b28:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003b2a:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <SetSysClock+0x11c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <SetSysClock+0x11c>)
 8003b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b34:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003b36:	bf00      	nop
 8003b38:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <SetSysClock+0x11c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f9      	beq.n	8003b38 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8003b44:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <SetSysClock+0x120>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <SetSysClock+0x120>)
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4e:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8003b50:	bf00      	nop
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <SetSysClock+0x120>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f9      	beq.n	8003b52 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <SetSysClock+0x120>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <SetSysClock+0x120>)
 8003b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b68:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8003b6a:	bf00      	nop
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <SetSysClock+0x120>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f9      	beq.n	8003b6c <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <SetSysClock+0x128>)
 8003b7a:	f240 7205 	movw	r2, #1797	; 0x705
 8003b7e:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <SetSysClock+0x11c>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <SetSysClock+0x11c>)
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <SetSysClock+0x11c>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <SetSysClock+0x11c>)
 8003b92:	f043 0302 	orr.w	r3, r3, #2
 8003b96:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003b98:	bf00      	nop
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <SetSysClock+0x11c>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d1f9      	bne.n	8003b9a <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40007000 	.word	0x40007000
 8003bbc:	77405a08 	.word	0x77405a08
 8003bc0:	40023c00 	.word	0x40023c00

08003bc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003bc4:	480d      	ldr	r0, [pc, #52]	; (8003bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003bc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bc8:	480d      	ldr	r0, [pc, #52]	; (8003c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8003bca:	490e      	ldr	r1, [pc, #56]	; (8003c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003bcc:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <LoopForever+0xe>)
  movs r3, #0
 8003bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bd0:	e002      	b.n	8003bd8 <LoopCopyDataInit>

08003bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bd6:	3304      	adds	r3, #4

08003bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bdc:	d3f9      	bcc.n	8003bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bde:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003be0:	4c0b      	ldr	r4, [pc, #44]	; (8003c10 <LoopForever+0x16>)
  movs r3, #0
 8003be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003be4:	e001      	b.n	8003bea <LoopFillZerobss>

08003be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003be8:	3204      	adds	r2, #4

08003bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bec:	d3fb      	bcc.n	8003be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003bee:	f7ff fe4f 	bl	8003890 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003bf2:	f000 f811 	bl	8003c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bf6:	f7ff fd09 	bl	800360c <main>

08003bfa <LoopForever>:

LoopForever:
    b LoopForever
 8003bfa:	e7fe      	b.n	8003bfa <LoopForever>
  ldr   r0, =_estack
 8003bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c04:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003c08:	080046dc 	.word	0x080046dc
  ldr r2, =_sbss
 8003c0c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003c10:	200154cc 	.word	0x200154cc

08003c14 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c14:	e7fe      	b.n	8003c14 <ADC_IRQHandler>
	...

08003c18 <__libc_init_array>:
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	4e0d      	ldr	r6, [pc, #52]	; (8003c50 <__libc_init_array+0x38>)
 8003c1c:	4c0d      	ldr	r4, [pc, #52]	; (8003c54 <__libc_init_array+0x3c>)
 8003c1e:	1ba4      	subs	r4, r4, r6
 8003c20:	10a4      	asrs	r4, r4, #2
 8003c22:	2500      	movs	r5, #0
 8003c24:	42a5      	cmp	r5, r4
 8003c26:	d109      	bne.n	8003c3c <__libc_init_array+0x24>
 8003c28:	4e0b      	ldr	r6, [pc, #44]	; (8003c58 <__libc_init_array+0x40>)
 8003c2a:	4c0c      	ldr	r4, [pc, #48]	; (8003c5c <__libc_init_array+0x44>)
 8003c2c:	f000 fc60 	bl	80044f0 <_init>
 8003c30:	1ba4      	subs	r4, r4, r6
 8003c32:	10a4      	asrs	r4, r4, #2
 8003c34:	2500      	movs	r5, #0
 8003c36:	42a5      	cmp	r5, r4
 8003c38:	d105      	bne.n	8003c46 <__libc_init_array+0x2e>
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c40:	4798      	blx	r3
 8003c42:	3501      	adds	r5, #1
 8003c44:	e7ee      	b.n	8003c24 <__libc_init_array+0xc>
 8003c46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c4a:	4798      	blx	r3
 8003c4c:	3501      	adds	r5, #1
 8003c4e:	e7f2      	b.n	8003c36 <__libc_init_array+0x1e>
 8003c50:	080046d4 	.word	0x080046d4
 8003c54:	080046d4 	.word	0x080046d4
 8003c58:	080046d4 	.word	0x080046d4
 8003c5c:	080046d8 	.word	0x080046d8

08003c60 <memcmp>:
 8003c60:	b530      	push	{r4, r5, lr}
 8003c62:	2400      	movs	r4, #0
 8003c64:	42a2      	cmp	r2, r4
 8003c66:	d101      	bne.n	8003c6c <memcmp+0xc>
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e007      	b.n	8003c7c <memcmp+0x1c>
 8003c6c:	5d03      	ldrb	r3, [r0, r4]
 8003c6e:	3401      	adds	r4, #1
 8003c70:	190d      	adds	r5, r1, r4
 8003c72:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003c76:	42ab      	cmp	r3, r5
 8003c78:	d0f4      	beq.n	8003c64 <memcmp+0x4>
 8003c7a:	1b58      	subs	r0, r3, r5
 8003c7c:	bd30      	pop	{r4, r5, pc}

08003c7e <memcpy>:
 8003c7e:	b510      	push	{r4, lr}
 8003c80:	1e43      	subs	r3, r0, #1
 8003c82:	440a      	add	r2, r1
 8003c84:	4291      	cmp	r1, r2
 8003c86:	d100      	bne.n	8003c8a <memcpy+0xc>
 8003c88:	bd10      	pop	{r4, pc}
 8003c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c92:	e7f7      	b.n	8003c84 <memcpy+0x6>

08003c94 <memset>:
 8003c94:	4402      	add	r2, r0
 8003c96:	4603      	mov	r3, r0
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d100      	bne.n	8003c9e <memset+0xa>
 8003c9c:	4770      	bx	lr
 8003c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca2:	e7f9      	b.n	8003c98 <memset+0x4>

08003ca4 <siprintf>:
 8003ca4:	b40e      	push	{r1, r2, r3}
 8003ca6:	b500      	push	{lr}
 8003ca8:	b09c      	sub	sp, #112	; 0x70
 8003caa:	ab1d      	add	r3, sp, #116	; 0x74
 8003cac:	9002      	str	r0, [sp, #8]
 8003cae:	9006      	str	r0, [sp, #24]
 8003cb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cb4:	4809      	ldr	r0, [pc, #36]	; (8003cdc <siprintf+0x38>)
 8003cb6:	9107      	str	r1, [sp, #28]
 8003cb8:	9104      	str	r1, [sp, #16]
 8003cba:	4909      	ldr	r1, [pc, #36]	; (8003ce0 <siprintf+0x3c>)
 8003cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cc0:	9105      	str	r1, [sp, #20]
 8003cc2:	6800      	ldr	r0, [r0, #0]
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	a902      	add	r1, sp, #8
 8003cc8:	f000 f866 	bl	8003d98 <_svfiprintf_r>
 8003ccc:	9b02      	ldr	r3, [sp, #8]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	b01c      	add	sp, #112	; 0x70
 8003cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cd8:	b003      	add	sp, #12
 8003cda:	4770      	bx	lr
 8003cdc:	20000028 	.word	0x20000028
 8003ce0:	ffff0208 	.word	0xffff0208

08003ce4 <__ssputs_r>:
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	688e      	ldr	r6, [r1, #8]
 8003cea:	429e      	cmp	r6, r3
 8003cec:	4682      	mov	sl, r0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	4690      	mov	r8, r2
 8003cf2:	4699      	mov	r9, r3
 8003cf4:	d837      	bhi.n	8003d66 <__ssputs_r+0x82>
 8003cf6:	898a      	ldrh	r2, [r1, #12]
 8003cf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cfc:	d031      	beq.n	8003d62 <__ssputs_r+0x7e>
 8003cfe:	6825      	ldr	r5, [r4, #0]
 8003d00:	6909      	ldr	r1, [r1, #16]
 8003d02:	1a6f      	subs	r7, r5, r1
 8003d04:	6965      	ldr	r5, [r4, #20]
 8003d06:	2302      	movs	r3, #2
 8003d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d10:	f109 0301 	add.w	r3, r9, #1
 8003d14:	443b      	add	r3, r7
 8003d16:	429d      	cmp	r5, r3
 8003d18:	bf38      	it	cc
 8003d1a:	461d      	movcc	r5, r3
 8003d1c:	0553      	lsls	r3, r2, #21
 8003d1e:	d530      	bpl.n	8003d82 <__ssputs_r+0x9e>
 8003d20:	4629      	mov	r1, r5
 8003d22:	f000 fb21 	bl	8004368 <_malloc_r>
 8003d26:	4606      	mov	r6, r0
 8003d28:	b950      	cbnz	r0, 8003d40 <__ssputs_r+0x5c>
 8003d2a:	230c      	movs	r3, #12
 8003d2c:	f8ca 3000 	str.w	r3, [sl]
 8003d30:	89a3      	ldrh	r3, [r4, #12]
 8003d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d36:	81a3      	strh	r3, [r4, #12]
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d40:	463a      	mov	r2, r7
 8003d42:	6921      	ldr	r1, [r4, #16]
 8003d44:	f7ff ff9b 	bl	8003c7e <memcpy>
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d52:	81a3      	strh	r3, [r4, #12]
 8003d54:	6126      	str	r6, [r4, #16]
 8003d56:	6165      	str	r5, [r4, #20]
 8003d58:	443e      	add	r6, r7
 8003d5a:	1bed      	subs	r5, r5, r7
 8003d5c:	6026      	str	r6, [r4, #0]
 8003d5e:	60a5      	str	r5, [r4, #8]
 8003d60:	464e      	mov	r6, r9
 8003d62:	454e      	cmp	r6, r9
 8003d64:	d900      	bls.n	8003d68 <__ssputs_r+0x84>
 8003d66:	464e      	mov	r6, r9
 8003d68:	4632      	mov	r2, r6
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	6820      	ldr	r0, [r4, #0]
 8003d6e:	f000 fa93 	bl	8004298 <memmove>
 8003d72:	68a3      	ldr	r3, [r4, #8]
 8003d74:	1b9b      	subs	r3, r3, r6
 8003d76:	60a3      	str	r3, [r4, #8]
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	441e      	add	r6, r3
 8003d7c:	6026      	str	r6, [r4, #0]
 8003d7e:	2000      	movs	r0, #0
 8003d80:	e7dc      	b.n	8003d3c <__ssputs_r+0x58>
 8003d82:	462a      	mov	r2, r5
 8003d84:	f000 fb4a 	bl	800441c <_realloc_r>
 8003d88:	4606      	mov	r6, r0
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	d1e2      	bne.n	8003d54 <__ssputs_r+0x70>
 8003d8e:	6921      	ldr	r1, [r4, #16]
 8003d90:	4650      	mov	r0, sl
 8003d92:	f000 fa9b 	bl	80042cc <_free_r>
 8003d96:	e7c8      	b.n	8003d2a <__ssputs_r+0x46>

08003d98 <_svfiprintf_r>:
 8003d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9c:	461d      	mov	r5, r3
 8003d9e:	898b      	ldrh	r3, [r1, #12]
 8003da0:	061f      	lsls	r7, r3, #24
 8003da2:	b09d      	sub	sp, #116	; 0x74
 8003da4:	4680      	mov	r8, r0
 8003da6:	460c      	mov	r4, r1
 8003da8:	4616      	mov	r6, r2
 8003daa:	d50f      	bpl.n	8003dcc <_svfiprintf_r+0x34>
 8003dac:	690b      	ldr	r3, [r1, #16]
 8003dae:	b96b      	cbnz	r3, 8003dcc <_svfiprintf_r+0x34>
 8003db0:	2140      	movs	r1, #64	; 0x40
 8003db2:	f000 fad9 	bl	8004368 <_malloc_r>
 8003db6:	6020      	str	r0, [r4, #0]
 8003db8:	6120      	str	r0, [r4, #16]
 8003dba:	b928      	cbnz	r0, 8003dc8 <_svfiprintf_r+0x30>
 8003dbc:	230c      	movs	r3, #12
 8003dbe:	f8c8 3000 	str.w	r3, [r8]
 8003dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc6:	e0c8      	b.n	8003f5a <_svfiprintf_r+0x1c2>
 8003dc8:	2340      	movs	r3, #64	; 0x40
 8003dca:	6163      	str	r3, [r4, #20]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dd6:	2330      	movs	r3, #48	; 0x30
 8003dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ddc:	9503      	str	r5, [sp, #12]
 8003dde:	f04f 0b01 	mov.w	fp, #1
 8003de2:	4637      	mov	r7, r6
 8003de4:	463d      	mov	r5, r7
 8003de6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003dea:	b10b      	cbz	r3, 8003df0 <_svfiprintf_r+0x58>
 8003dec:	2b25      	cmp	r3, #37	; 0x25
 8003dee:	d13e      	bne.n	8003e6e <_svfiprintf_r+0xd6>
 8003df0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003df4:	d00b      	beq.n	8003e0e <_svfiprintf_r+0x76>
 8003df6:	4653      	mov	r3, sl
 8003df8:	4632      	mov	r2, r6
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	4640      	mov	r0, r8
 8003dfe:	f7ff ff71 	bl	8003ce4 <__ssputs_r>
 8003e02:	3001      	adds	r0, #1
 8003e04:	f000 80a4 	beq.w	8003f50 <_svfiprintf_r+0x1b8>
 8003e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e0a:	4453      	add	r3, sl
 8003e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e0e:	783b      	ldrb	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 809d 	beq.w	8003f50 <_svfiprintf_r+0x1b8>
 8003e16:	2300      	movs	r3, #0
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e20:	9304      	str	r3, [sp, #16]
 8003e22:	9307      	str	r3, [sp, #28]
 8003e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e28:	931a      	str	r3, [sp, #104]	; 0x68
 8003e2a:	462f      	mov	r7, r5
 8003e2c:	2205      	movs	r2, #5
 8003e2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003e32:	4850      	ldr	r0, [pc, #320]	; (8003f74 <_svfiprintf_r+0x1dc>)
 8003e34:	f7fc f9f4 	bl	8000220 <memchr>
 8003e38:	9b04      	ldr	r3, [sp, #16]
 8003e3a:	b9d0      	cbnz	r0, 8003e72 <_svfiprintf_r+0xda>
 8003e3c:	06d9      	lsls	r1, r3, #27
 8003e3e:	bf44      	itt	mi
 8003e40:	2220      	movmi	r2, #32
 8003e42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e46:	071a      	lsls	r2, r3, #28
 8003e48:	bf44      	itt	mi
 8003e4a:	222b      	movmi	r2, #43	; 0x2b
 8003e4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e50:	782a      	ldrb	r2, [r5, #0]
 8003e52:	2a2a      	cmp	r2, #42	; 0x2a
 8003e54:	d015      	beq.n	8003e82 <_svfiprintf_r+0xea>
 8003e56:	9a07      	ldr	r2, [sp, #28]
 8003e58:	462f      	mov	r7, r5
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	250a      	movs	r5, #10
 8003e5e:	4639      	mov	r1, r7
 8003e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e64:	3b30      	subs	r3, #48	; 0x30
 8003e66:	2b09      	cmp	r3, #9
 8003e68:	d94d      	bls.n	8003f06 <_svfiprintf_r+0x16e>
 8003e6a:	b1b8      	cbz	r0, 8003e9c <_svfiprintf_r+0x104>
 8003e6c:	e00f      	b.n	8003e8e <_svfiprintf_r+0xf6>
 8003e6e:	462f      	mov	r7, r5
 8003e70:	e7b8      	b.n	8003de4 <_svfiprintf_r+0x4c>
 8003e72:	4a40      	ldr	r2, [pc, #256]	; (8003f74 <_svfiprintf_r+0x1dc>)
 8003e74:	1a80      	subs	r0, r0, r2
 8003e76:	fa0b f000 	lsl.w	r0, fp, r0
 8003e7a:	4318      	orrs	r0, r3
 8003e7c:	9004      	str	r0, [sp, #16]
 8003e7e:	463d      	mov	r5, r7
 8003e80:	e7d3      	b.n	8003e2a <_svfiprintf_r+0x92>
 8003e82:	9a03      	ldr	r2, [sp, #12]
 8003e84:	1d11      	adds	r1, r2, #4
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	9103      	str	r1, [sp, #12]
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	db01      	blt.n	8003e92 <_svfiprintf_r+0xfa>
 8003e8e:	9207      	str	r2, [sp, #28]
 8003e90:	e004      	b.n	8003e9c <_svfiprintf_r+0x104>
 8003e92:	4252      	negs	r2, r2
 8003e94:	f043 0302 	orr.w	r3, r3, #2
 8003e98:	9207      	str	r2, [sp, #28]
 8003e9a:	9304      	str	r3, [sp, #16]
 8003e9c:	783b      	ldrb	r3, [r7, #0]
 8003e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003ea0:	d10c      	bne.n	8003ebc <_svfiprintf_r+0x124>
 8003ea2:	787b      	ldrb	r3, [r7, #1]
 8003ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea6:	d133      	bne.n	8003f10 <_svfiprintf_r+0x178>
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	9203      	str	r2, [sp, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bfb8      	it	lt
 8003eb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eb8:	3702      	adds	r7, #2
 8003eba:	9305      	str	r3, [sp, #20]
 8003ebc:	4d2e      	ldr	r5, [pc, #184]	; (8003f78 <_svfiprintf_r+0x1e0>)
 8003ebe:	7839      	ldrb	r1, [r7, #0]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f7fc f9ac 	bl	8000220 <memchr>
 8003ec8:	b138      	cbz	r0, 8003eda <_svfiprintf_r+0x142>
 8003eca:	2340      	movs	r3, #64	; 0x40
 8003ecc:	1b40      	subs	r0, r0, r5
 8003ece:	fa03 f000 	lsl.w	r0, r3, r0
 8003ed2:	9b04      	ldr	r3, [sp, #16]
 8003ed4:	4303      	orrs	r3, r0
 8003ed6:	3701      	adds	r7, #1
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	7839      	ldrb	r1, [r7, #0]
 8003edc:	4827      	ldr	r0, [pc, #156]	; (8003f7c <_svfiprintf_r+0x1e4>)
 8003ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ee2:	2206      	movs	r2, #6
 8003ee4:	1c7e      	adds	r6, r7, #1
 8003ee6:	f7fc f99b 	bl	8000220 <memchr>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d038      	beq.n	8003f60 <_svfiprintf_r+0x1c8>
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <_svfiprintf_r+0x1e8>)
 8003ef0:	bb13      	cbnz	r3, 8003f38 <_svfiprintf_r+0x1a0>
 8003ef2:	9b03      	ldr	r3, [sp, #12]
 8003ef4:	3307      	adds	r3, #7
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	3308      	adds	r3, #8
 8003efc:	9303      	str	r3, [sp, #12]
 8003efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f00:	444b      	add	r3, r9
 8003f02:	9309      	str	r3, [sp, #36]	; 0x24
 8003f04:	e76d      	b.n	8003de2 <_svfiprintf_r+0x4a>
 8003f06:	fb05 3202 	mla	r2, r5, r2, r3
 8003f0a:	2001      	movs	r0, #1
 8003f0c:	460f      	mov	r7, r1
 8003f0e:	e7a6      	b.n	8003e5e <_svfiprintf_r+0xc6>
 8003f10:	2300      	movs	r3, #0
 8003f12:	3701      	adds	r7, #1
 8003f14:	9305      	str	r3, [sp, #20]
 8003f16:	4619      	mov	r1, r3
 8003f18:	250a      	movs	r5, #10
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f20:	3a30      	subs	r2, #48	; 0x30
 8003f22:	2a09      	cmp	r2, #9
 8003f24:	d903      	bls.n	8003f2e <_svfiprintf_r+0x196>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0c8      	beq.n	8003ebc <_svfiprintf_r+0x124>
 8003f2a:	9105      	str	r1, [sp, #20]
 8003f2c:	e7c6      	b.n	8003ebc <_svfiprintf_r+0x124>
 8003f2e:	fb05 2101 	mla	r1, r5, r1, r2
 8003f32:	2301      	movs	r3, #1
 8003f34:	4607      	mov	r7, r0
 8003f36:	e7f0      	b.n	8003f1a <_svfiprintf_r+0x182>
 8003f38:	ab03      	add	r3, sp, #12
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <_svfiprintf_r+0x1ec>)
 8003f40:	a904      	add	r1, sp, #16
 8003f42:	4640      	mov	r0, r8
 8003f44:	f3af 8000 	nop.w
 8003f48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f4c:	4681      	mov	r9, r0
 8003f4e:	d1d6      	bne.n	8003efe <_svfiprintf_r+0x166>
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	065b      	lsls	r3, r3, #25
 8003f54:	f53f af35 	bmi.w	8003dc2 <_svfiprintf_r+0x2a>
 8003f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f5a:	b01d      	add	sp, #116	; 0x74
 8003f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f60:	ab03      	add	r3, sp, #12
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	4622      	mov	r2, r4
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <_svfiprintf_r+0x1ec>)
 8003f68:	a904      	add	r1, sp, #16
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	f000 f882 	bl	8004074 <_printf_i>
 8003f70:	e7ea      	b.n	8003f48 <_svfiprintf_r+0x1b0>
 8003f72:	bf00      	nop
 8003f74:	0800463e 	.word	0x0800463e
 8003f78:	08004644 	.word	0x08004644
 8003f7c:	08004648 	.word	0x08004648
 8003f80:	00000000 	.word	0x00000000
 8003f84:	08003ce5 	.word	0x08003ce5

08003f88 <_printf_common>:
 8003f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	4691      	mov	r9, r2
 8003f8e:	461f      	mov	r7, r3
 8003f90:	688a      	ldr	r2, [r1, #8]
 8003f92:	690b      	ldr	r3, [r1, #16]
 8003f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	bfb8      	it	lt
 8003f9c:	4613      	movlt	r3, r2
 8003f9e:	f8c9 3000 	str.w	r3, [r9]
 8003fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	460c      	mov	r4, r1
 8003faa:	b112      	cbz	r2, 8003fb2 <_printf_common+0x2a>
 8003fac:	3301      	adds	r3, #1
 8003fae:	f8c9 3000 	str.w	r3, [r9]
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	0699      	lsls	r1, r3, #26
 8003fb6:	bf42      	ittt	mi
 8003fb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003fbc:	3302      	addmi	r3, #2
 8003fbe:	f8c9 3000 	strmi.w	r3, [r9]
 8003fc2:	6825      	ldr	r5, [r4, #0]
 8003fc4:	f015 0506 	ands.w	r5, r5, #6
 8003fc8:	d107      	bne.n	8003fda <_printf_common+0x52>
 8003fca:	f104 0a19 	add.w	sl, r4, #25
 8003fce:	68e3      	ldr	r3, [r4, #12]
 8003fd0:	f8d9 2000 	ldr.w	r2, [r9]
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	42ab      	cmp	r3, r5
 8003fd8:	dc28      	bgt.n	800402c <_printf_common+0xa4>
 8003fda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	3300      	adds	r3, #0
 8003fe2:	bf18      	it	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	0692      	lsls	r2, r2, #26
 8003fe8:	d42d      	bmi.n	8004046 <_printf_common+0xbe>
 8003fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fee:	4639      	mov	r1, r7
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	47c0      	blx	r8
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d020      	beq.n	800403a <_printf_common+0xb2>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	68e5      	ldr	r5, [r4, #12]
 8003ffc:	f8d9 2000 	ldr.w	r2, [r9]
 8004000:	f003 0306 	and.w	r3, r3, #6
 8004004:	2b04      	cmp	r3, #4
 8004006:	bf08      	it	eq
 8004008:	1aad      	subeq	r5, r5, r2
 800400a:	68a3      	ldr	r3, [r4, #8]
 800400c:	6922      	ldr	r2, [r4, #16]
 800400e:	bf0c      	ite	eq
 8004010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004014:	2500      	movne	r5, #0
 8004016:	4293      	cmp	r3, r2
 8004018:	bfc4      	itt	gt
 800401a:	1a9b      	subgt	r3, r3, r2
 800401c:	18ed      	addgt	r5, r5, r3
 800401e:	f04f 0900 	mov.w	r9, #0
 8004022:	341a      	adds	r4, #26
 8004024:	454d      	cmp	r5, r9
 8004026:	d11a      	bne.n	800405e <_printf_common+0xd6>
 8004028:	2000      	movs	r0, #0
 800402a:	e008      	b.n	800403e <_printf_common+0xb6>
 800402c:	2301      	movs	r3, #1
 800402e:	4652      	mov	r2, sl
 8004030:	4639      	mov	r1, r7
 8004032:	4630      	mov	r0, r6
 8004034:	47c0      	blx	r8
 8004036:	3001      	adds	r0, #1
 8004038:	d103      	bne.n	8004042 <_printf_common+0xba>
 800403a:	f04f 30ff 	mov.w	r0, #4294967295
 800403e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004042:	3501      	adds	r5, #1
 8004044:	e7c3      	b.n	8003fce <_printf_common+0x46>
 8004046:	18e1      	adds	r1, r4, r3
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	2030      	movs	r0, #48	; 0x30
 800404c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004050:	4422      	add	r2, r4
 8004052:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004056:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800405a:	3302      	adds	r3, #2
 800405c:	e7c5      	b.n	8003fea <_printf_common+0x62>
 800405e:	2301      	movs	r3, #1
 8004060:	4622      	mov	r2, r4
 8004062:	4639      	mov	r1, r7
 8004064:	4630      	mov	r0, r6
 8004066:	47c0      	blx	r8
 8004068:	3001      	adds	r0, #1
 800406a:	d0e6      	beq.n	800403a <_printf_common+0xb2>
 800406c:	f109 0901 	add.w	r9, r9, #1
 8004070:	e7d8      	b.n	8004024 <_printf_common+0x9c>
	...

08004074 <_printf_i>:
 8004074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004078:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800407c:	460c      	mov	r4, r1
 800407e:	7e09      	ldrb	r1, [r1, #24]
 8004080:	b085      	sub	sp, #20
 8004082:	296e      	cmp	r1, #110	; 0x6e
 8004084:	4617      	mov	r7, r2
 8004086:	4606      	mov	r6, r0
 8004088:	4698      	mov	r8, r3
 800408a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800408c:	f000 80b3 	beq.w	80041f6 <_printf_i+0x182>
 8004090:	d822      	bhi.n	80040d8 <_printf_i+0x64>
 8004092:	2963      	cmp	r1, #99	; 0x63
 8004094:	d036      	beq.n	8004104 <_printf_i+0x90>
 8004096:	d80a      	bhi.n	80040ae <_printf_i+0x3a>
 8004098:	2900      	cmp	r1, #0
 800409a:	f000 80b9 	beq.w	8004210 <_printf_i+0x19c>
 800409e:	2958      	cmp	r1, #88	; 0x58
 80040a0:	f000 8083 	beq.w	80041aa <_printf_i+0x136>
 80040a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80040ac:	e032      	b.n	8004114 <_printf_i+0xa0>
 80040ae:	2964      	cmp	r1, #100	; 0x64
 80040b0:	d001      	beq.n	80040b6 <_printf_i+0x42>
 80040b2:	2969      	cmp	r1, #105	; 0x69
 80040b4:	d1f6      	bne.n	80040a4 <_printf_i+0x30>
 80040b6:	6820      	ldr	r0, [r4, #0]
 80040b8:	6813      	ldr	r3, [r2, #0]
 80040ba:	0605      	lsls	r5, r0, #24
 80040bc:	f103 0104 	add.w	r1, r3, #4
 80040c0:	d52a      	bpl.n	8004118 <_printf_i+0xa4>
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6011      	str	r1, [r2, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	da03      	bge.n	80040d2 <_printf_i+0x5e>
 80040ca:	222d      	movs	r2, #45	; 0x2d
 80040cc:	425b      	negs	r3, r3
 80040ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80040d2:	486f      	ldr	r0, [pc, #444]	; (8004290 <_printf_i+0x21c>)
 80040d4:	220a      	movs	r2, #10
 80040d6:	e039      	b.n	800414c <_printf_i+0xd8>
 80040d8:	2973      	cmp	r1, #115	; 0x73
 80040da:	f000 809d 	beq.w	8004218 <_printf_i+0x1a4>
 80040de:	d808      	bhi.n	80040f2 <_printf_i+0x7e>
 80040e0:	296f      	cmp	r1, #111	; 0x6f
 80040e2:	d020      	beq.n	8004126 <_printf_i+0xb2>
 80040e4:	2970      	cmp	r1, #112	; 0x70
 80040e6:	d1dd      	bne.n	80040a4 <_printf_i+0x30>
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	f043 0320 	orr.w	r3, r3, #32
 80040ee:	6023      	str	r3, [r4, #0]
 80040f0:	e003      	b.n	80040fa <_printf_i+0x86>
 80040f2:	2975      	cmp	r1, #117	; 0x75
 80040f4:	d017      	beq.n	8004126 <_printf_i+0xb2>
 80040f6:	2978      	cmp	r1, #120	; 0x78
 80040f8:	d1d4      	bne.n	80040a4 <_printf_i+0x30>
 80040fa:	2378      	movs	r3, #120	; 0x78
 80040fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004100:	4864      	ldr	r0, [pc, #400]	; (8004294 <_printf_i+0x220>)
 8004102:	e055      	b.n	80041b0 <_printf_i+0x13c>
 8004104:	6813      	ldr	r3, [r2, #0]
 8004106:	1d19      	adds	r1, r3, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6011      	str	r1, [r2, #0]
 800410c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004114:	2301      	movs	r3, #1
 8004116:	e08c      	b.n	8004232 <_printf_i+0x1be>
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6011      	str	r1, [r2, #0]
 800411c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004120:	bf18      	it	ne
 8004122:	b21b      	sxthne	r3, r3
 8004124:	e7cf      	b.n	80040c6 <_printf_i+0x52>
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	6825      	ldr	r5, [r4, #0]
 800412a:	1d18      	adds	r0, r3, #4
 800412c:	6010      	str	r0, [r2, #0]
 800412e:	0628      	lsls	r0, r5, #24
 8004130:	d501      	bpl.n	8004136 <_printf_i+0xc2>
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	e002      	b.n	800413c <_printf_i+0xc8>
 8004136:	0668      	lsls	r0, r5, #25
 8004138:	d5fb      	bpl.n	8004132 <_printf_i+0xbe>
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	4854      	ldr	r0, [pc, #336]	; (8004290 <_printf_i+0x21c>)
 800413e:	296f      	cmp	r1, #111	; 0x6f
 8004140:	bf14      	ite	ne
 8004142:	220a      	movne	r2, #10
 8004144:	2208      	moveq	r2, #8
 8004146:	2100      	movs	r1, #0
 8004148:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800414c:	6865      	ldr	r5, [r4, #4]
 800414e:	60a5      	str	r5, [r4, #8]
 8004150:	2d00      	cmp	r5, #0
 8004152:	f2c0 8095 	blt.w	8004280 <_printf_i+0x20c>
 8004156:	6821      	ldr	r1, [r4, #0]
 8004158:	f021 0104 	bic.w	r1, r1, #4
 800415c:	6021      	str	r1, [r4, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d13d      	bne.n	80041de <_printf_i+0x16a>
 8004162:	2d00      	cmp	r5, #0
 8004164:	f040 808e 	bne.w	8004284 <_printf_i+0x210>
 8004168:	4665      	mov	r5, ip
 800416a:	2a08      	cmp	r2, #8
 800416c:	d10b      	bne.n	8004186 <_printf_i+0x112>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	07db      	lsls	r3, r3, #31
 8004172:	d508      	bpl.n	8004186 <_printf_i+0x112>
 8004174:	6923      	ldr	r3, [r4, #16]
 8004176:	6862      	ldr	r2, [r4, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	bfde      	ittt	le
 800417c:	2330      	movle	r3, #48	; 0x30
 800417e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004182:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004186:	ebac 0305 	sub.w	r3, ip, r5
 800418a:	6123      	str	r3, [r4, #16]
 800418c:	f8cd 8000 	str.w	r8, [sp]
 8004190:	463b      	mov	r3, r7
 8004192:	aa03      	add	r2, sp, #12
 8004194:	4621      	mov	r1, r4
 8004196:	4630      	mov	r0, r6
 8004198:	f7ff fef6 	bl	8003f88 <_printf_common>
 800419c:	3001      	adds	r0, #1
 800419e:	d14d      	bne.n	800423c <_printf_i+0x1c8>
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295
 80041a4:	b005      	add	sp, #20
 80041a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041aa:	4839      	ldr	r0, [pc, #228]	; (8004290 <_printf_i+0x21c>)
 80041ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80041b0:	6813      	ldr	r3, [r2, #0]
 80041b2:	6821      	ldr	r1, [r4, #0]
 80041b4:	1d1d      	adds	r5, r3, #4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6015      	str	r5, [r2, #0]
 80041ba:	060a      	lsls	r2, r1, #24
 80041bc:	d50b      	bpl.n	80041d6 <_printf_i+0x162>
 80041be:	07ca      	lsls	r2, r1, #31
 80041c0:	bf44      	itt	mi
 80041c2:	f041 0120 	orrmi.w	r1, r1, #32
 80041c6:	6021      	strmi	r1, [r4, #0]
 80041c8:	b91b      	cbnz	r3, 80041d2 <_printf_i+0x15e>
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	f022 0220 	bic.w	r2, r2, #32
 80041d0:	6022      	str	r2, [r4, #0]
 80041d2:	2210      	movs	r2, #16
 80041d4:	e7b7      	b.n	8004146 <_printf_i+0xd2>
 80041d6:	064d      	lsls	r5, r1, #25
 80041d8:	bf48      	it	mi
 80041da:	b29b      	uxthmi	r3, r3
 80041dc:	e7ef      	b.n	80041be <_printf_i+0x14a>
 80041de:	4665      	mov	r5, ip
 80041e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80041e4:	fb02 3311 	mls	r3, r2, r1, r3
 80041e8:	5cc3      	ldrb	r3, [r0, r3]
 80041ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80041ee:	460b      	mov	r3, r1
 80041f0:	2900      	cmp	r1, #0
 80041f2:	d1f5      	bne.n	80041e0 <_printf_i+0x16c>
 80041f4:	e7b9      	b.n	800416a <_printf_i+0xf6>
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	6825      	ldr	r5, [r4, #0]
 80041fa:	6961      	ldr	r1, [r4, #20]
 80041fc:	1d18      	adds	r0, r3, #4
 80041fe:	6010      	str	r0, [r2, #0]
 8004200:	0628      	lsls	r0, r5, #24
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	d501      	bpl.n	800420a <_printf_i+0x196>
 8004206:	6019      	str	r1, [r3, #0]
 8004208:	e002      	b.n	8004210 <_printf_i+0x19c>
 800420a:	066a      	lsls	r2, r5, #25
 800420c:	d5fb      	bpl.n	8004206 <_printf_i+0x192>
 800420e:	8019      	strh	r1, [r3, #0]
 8004210:	2300      	movs	r3, #0
 8004212:	6123      	str	r3, [r4, #16]
 8004214:	4665      	mov	r5, ip
 8004216:	e7b9      	b.n	800418c <_printf_i+0x118>
 8004218:	6813      	ldr	r3, [r2, #0]
 800421a:	1d19      	adds	r1, r3, #4
 800421c:	6011      	str	r1, [r2, #0]
 800421e:	681d      	ldr	r5, [r3, #0]
 8004220:	6862      	ldr	r2, [r4, #4]
 8004222:	2100      	movs	r1, #0
 8004224:	4628      	mov	r0, r5
 8004226:	f7fb fffb 	bl	8000220 <memchr>
 800422a:	b108      	cbz	r0, 8004230 <_printf_i+0x1bc>
 800422c:	1b40      	subs	r0, r0, r5
 800422e:	6060      	str	r0, [r4, #4]
 8004230:	6863      	ldr	r3, [r4, #4]
 8004232:	6123      	str	r3, [r4, #16]
 8004234:	2300      	movs	r3, #0
 8004236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800423a:	e7a7      	b.n	800418c <_printf_i+0x118>
 800423c:	6923      	ldr	r3, [r4, #16]
 800423e:	462a      	mov	r2, r5
 8004240:	4639      	mov	r1, r7
 8004242:	4630      	mov	r0, r6
 8004244:	47c0      	blx	r8
 8004246:	3001      	adds	r0, #1
 8004248:	d0aa      	beq.n	80041a0 <_printf_i+0x12c>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	079b      	lsls	r3, r3, #30
 800424e:	d413      	bmi.n	8004278 <_printf_i+0x204>
 8004250:	68e0      	ldr	r0, [r4, #12]
 8004252:	9b03      	ldr	r3, [sp, #12]
 8004254:	4298      	cmp	r0, r3
 8004256:	bfb8      	it	lt
 8004258:	4618      	movlt	r0, r3
 800425a:	e7a3      	b.n	80041a4 <_printf_i+0x130>
 800425c:	2301      	movs	r3, #1
 800425e:	464a      	mov	r2, r9
 8004260:	4639      	mov	r1, r7
 8004262:	4630      	mov	r0, r6
 8004264:	47c0      	blx	r8
 8004266:	3001      	adds	r0, #1
 8004268:	d09a      	beq.n	80041a0 <_printf_i+0x12c>
 800426a:	3501      	adds	r5, #1
 800426c:	68e3      	ldr	r3, [r4, #12]
 800426e:	9a03      	ldr	r2, [sp, #12]
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	42ab      	cmp	r3, r5
 8004274:	dcf2      	bgt.n	800425c <_printf_i+0x1e8>
 8004276:	e7eb      	b.n	8004250 <_printf_i+0x1dc>
 8004278:	2500      	movs	r5, #0
 800427a:	f104 0919 	add.w	r9, r4, #25
 800427e:	e7f5      	b.n	800426c <_printf_i+0x1f8>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ac      	bne.n	80041de <_printf_i+0x16a>
 8004284:	7803      	ldrb	r3, [r0, #0]
 8004286:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800428a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800428e:	e76c      	b.n	800416a <_printf_i+0xf6>
 8004290:	0800464f 	.word	0x0800464f
 8004294:	08004660 	.word	0x08004660

08004298 <memmove>:
 8004298:	4288      	cmp	r0, r1
 800429a:	b510      	push	{r4, lr}
 800429c:	eb01 0302 	add.w	r3, r1, r2
 80042a0:	d807      	bhi.n	80042b2 <memmove+0x1a>
 80042a2:	1e42      	subs	r2, r0, #1
 80042a4:	4299      	cmp	r1, r3
 80042a6:	d00a      	beq.n	80042be <memmove+0x26>
 80042a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80042b0:	e7f8      	b.n	80042a4 <memmove+0xc>
 80042b2:	4283      	cmp	r3, r0
 80042b4:	d9f5      	bls.n	80042a2 <memmove+0xa>
 80042b6:	1881      	adds	r1, r0, r2
 80042b8:	1ad2      	subs	r2, r2, r3
 80042ba:	42d3      	cmn	r3, r2
 80042bc:	d100      	bne.n	80042c0 <memmove+0x28>
 80042be:	bd10      	pop	{r4, pc}
 80042c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80042c8:	e7f7      	b.n	80042ba <memmove+0x22>
	...

080042cc <_free_r>:
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	4605      	mov	r5, r0
 80042d0:	2900      	cmp	r1, #0
 80042d2:	d045      	beq.n	8004360 <_free_r+0x94>
 80042d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042d8:	1f0c      	subs	r4, r1, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bfb8      	it	lt
 80042de:	18e4      	addlt	r4, r4, r3
 80042e0:	f000 f8d2 	bl	8004488 <__malloc_lock>
 80042e4:	4a1f      	ldr	r2, [pc, #124]	; (8004364 <_free_r+0x98>)
 80042e6:	6813      	ldr	r3, [r2, #0]
 80042e8:	4610      	mov	r0, r2
 80042ea:	b933      	cbnz	r3, 80042fa <_free_r+0x2e>
 80042ec:	6063      	str	r3, [r4, #4]
 80042ee:	6014      	str	r4, [r2, #0]
 80042f0:	4628      	mov	r0, r5
 80042f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042f6:	f000 b8c8 	b.w	800448a <__malloc_unlock>
 80042fa:	42a3      	cmp	r3, r4
 80042fc:	d90c      	bls.n	8004318 <_free_r+0x4c>
 80042fe:	6821      	ldr	r1, [r4, #0]
 8004300:	1862      	adds	r2, r4, r1
 8004302:	4293      	cmp	r3, r2
 8004304:	bf04      	itt	eq
 8004306:	681a      	ldreq	r2, [r3, #0]
 8004308:	685b      	ldreq	r3, [r3, #4]
 800430a:	6063      	str	r3, [r4, #4]
 800430c:	bf04      	itt	eq
 800430e:	1852      	addeq	r2, r2, r1
 8004310:	6022      	streq	r2, [r4, #0]
 8004312:	6004      	str	r4, [r0, #0]
 8004314:	e7ec      	b.n	80042f0 <_free_r+0x24>
 8004316:	4613      	mov	r3, r2
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	b10a      	cbz	r2, 8004320 <_free_r+0x54>
 800431c:	42a2      	cmp	r2, r4
 800431e:	d9fa      	bls.n	8004316 <_free_r+0x4a>
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	1858      	adds	r0, r3, r1
 8004324:	42a0      	cmp	r0, r4
 8004326:	d10b      	bne.n	8004340 <_free_r+0x74>
 8004328:	6820      	ldr	r0, [r4, #0]
 800432a:	4401      	add	r1, r0
 800432c:	1858      	adds	r0, r3, r1
 800432e:	4282      	cmp	r2, r0
 8004330:	6019      	str	r1, [r3, #0]
 8004332:	d1dd      	bne.n	80042f0 <_free_r+0x24>
 8004334:	6810      	ldr	r0, [r2, #0]
 8004336:	6852      	ldr	r2, [r2, #4]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	4401      	add	r1, r0
 800433c:	6019      	str	r1, [r3, #0]
 800433e:	e7d7      	b.n	80042f0 <_free_r+0x24>
 8004340:	d902      	bls.n	8004348 <_free_r+0x7c>
 8004342:	230c      	movs	r3, #12
 8004344:	602b      	str	r3, [r5, #0]
 8004346:	e7d3      	b.n	80042f0 <_free_r+0x24>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	1821      	adds	r1, r4, r0
 800434c:	428a      	cmp	r2, r1
 800434e:	bf04      	itt	eq
 8004350:	6811      	ldreq	r1, [r2, #0]
 8004352:	6852      	ldreq	r2, [r2, #4]
 8004354:	6062      	str	r2, [r4, #4]
 8004356:	bf04      	itt	eq
 8004358:	1809      	addeq	r1, r1, r0
 800435a:	6021      	streq	r1, [r4, #0]
 800435c:	605c      	str	r4, [r3, #4]
 800435e:	e7c7      	b.n	80042f0 <_free_r+0x24>
 8004360:	bd38      	pop	{r3, r4, r5, pc}
 8004362:	bf00      	nop
 8004364:	200153b0 	.word	0x200153b0

08004368 <_malloc_r>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	1ccd      	adds	r5, r1, #3
 800436c:	f025 0503 	bic.w	r5, r5, #3
 8004370:	3508      	adds	r5, #8
 8004372:	2d0c      	cmp	r5, #12
 8004374:	bf38      	it	cc
 8004376:	250c      	movcc	r5, #12
 8004378:	2d00      	cmp	r5, #0
 800437a:	4606      	mov	r6, r0
 800437c:	db01      	blt.n	8004382 <_malloc_r+0x1a>
 800437e:	42a9      	cmp	r1, r5
 8004380:	d903      	bls.n	800438a <_malloc_r+0x22>
 8004382:	230c      	movs	r3, #12
 8004384:	6033      	str	r3, [r6, #0]
 8004386:	2000      	movs	r0, #0
 8004388:	bd70      	pop	{r4, r5, r6, pc}
 800438a:	f000 f87d 	bl	8004488 <__malloc_lock>
 800438e:	4a21      	ldr	r2, [pc, #132]	; (8004414 <_malloc_r+0xac>)
 8004390:	6814      	ldr	r4, [r2, #0]
 8004392:	4621      	mov	r1, r4
 8004394:	b991      	cbnz	r1, 80043bc <_malloc_r+0x54>
 8004396:	4c20      	ldr	r4, [pc, #128]	; (8004418 <_malloc_r+0xb0>)
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	b91b      	cbnz	r3, 80043a4 <_malloc_r+0x3c>
 800439c:	4630      	mov	r0, r6
 800439e:	f000 f863 	bl	8004468 <_sbrk_r>
 80043a2:	6020      	str	r0, [r4, #0]
 80043a4:	4629      	mov	r1, r5
 80043a6:	4630      	mov	r0, r6
 80043a8:	f000 f85e 	bl	8004468 <_sbrk_r>
 80043ac:	1c43      	adds	r3, r0, #1
 80043ae:	d124      	bne.n	80043fa <_malloc_r+0x92>
 80043b0:	230c      	movs	r3, #12
 80043b2:	6033      	str	r3, [r6, #0]
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 f868 	bl	800448a <__malloc_unlock>
 80043ba:	e7e4      	b.n	8004386 <_malloc_r+0x1e>
 80043bc:	680b      	ldr	r3, [r1, #0]
 80043be:	1b5b      	subs	r3, r3, r5
 80043c0:	d418      	bmi.n	80043f4 <_malloc_r+0x8c>
 80043c2:	2b0b      	cmp	r3, #11
 80043c4:	d90f      	bls.n	80043e6 <_malloc_r+0x7e>
 80043c6:	600b      	str	r3, [r1, #0]
 80043c8:	50cd      	str	r5, [r1, r3]
 80043ca:	18cc      	adds	r4, r1, r3
 80043cc:	4630      	mov	r0, r6
 80043ce:	f000 f85c 	bl	800448a <__malloc_unlock>
 80043d2:	f104 000b 	add.w	r0, r4, #11
 80043d6:	1d23      	adds	r3, r4, #4
 80043d8:	f020 0007 	bic.w	r0, r0, #7
 80043dc:	1ac3      	subs	r3, r0, r3
 80043de:	d0d3      	beq.n	8004388 <_malloc_r+0x20>
 80043e0:	425a      	negs	r2, r3
 80043e2:	50e2      	str	r2, [r4, r3]
 80043e4:	e7d0      	b.n	8004388 <_malloc_r+0x20>
 80043e6:	428c      	cmp	r4, r1
 80043e8:	684b      	ldr	r3, [r1, #4]
 80043ea:	bf16      	itet	ne
 80043ec:	6063      	strne	r3, [r4, #4]
 80043ee:	6013      	streq	r3, [r2, #0]
 80043f0:	460c      	movne	r4, r1
 80043f2:	e7eb      	b.n	80043cc <_malloc_r+0x64>
 80043f4:	460c      	mov	r4, r1
 80043f6:	6849      	ldr	r1, [r1, #4]
 80043f8:	e7cc      	b.n	8004394 <_malloc_r+0x2c>
 80043fa:	1cc4      	adds	r4, r0, #3
 80043fc:	f024 0403 	bic.w	r4, r4, #3
 8004400:	42a0      	cmp	r0, r4
 8004402:	d005      	beq.n	8004410 <_malloc_r+0xa8>
 8004404:	1a21      	subs	r1, r4, r0
 8004406:	4630      	mov	r0, r6
 8004408:	f000 f82e 	bl	8004468 <_sbrk_r>
 800440c:	3001      	adds	r0, #1
 800440e:	d0cf      	beq.n	80043b0 <_malloc_r+0x48>
 8004410:	6025      	str	r5, [r4, #0]
 8004412:	e7db      	b.n	80043cc <_malloc_r+0x64>
 8004414:	200153b0 	.word	0x200153b0
 8004418:	200153b4 	.word	0x200153b4

0800441c <_realloc_r>:
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	4607      	mov	r7, r0
 8004420:	4614      	mov	r4, r2
 8004422:	460e      	mov	r6, r1
 8004424:	b921      	cbnz	r1, 8004430 <_realloc_r+0x14>
 8004426:	4611      	mov	r1, r2
 8004428:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800442c:	f7ff bf9c 	b.w	8004368 <_malloc_r>
 8004430:	b922      	cbnz	r2, 800443c <_realloc_r+0x20>
 8004432:	f7ff ff4b 	bl	80042cc <_free_r>
 8004436:	4625      	mov	r5, r4
 8004438:	4628      	mov	r0, r5
 800443a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800443c:	f000 f826 	bl	800448c <_malloc_usable_size_r>
 8004440:	42a0      	cmp	r0, r4
 8004442:	d20f      	bcs.n	8004464 <_realloc_r+0x48>
 8004444:	4621      	mov	r1, r4
 8004446:	4638      	mov	r0, r7
 8004448:	f7ff ff8e 	bl	8004368 <_malloc_r>
 800444c:	4605      	mov	r5, r0
 800444e:	2800      	cmp	r0, #0
 8004450:	d0f2      	beq.n	8004438 <_realloc_r+0x1c>
 8004452:	4631      	mov	r1, r6
 8004454:	4622      	mov	r2, r4
 8004456:	f7ff fc12 	bl	8003c7e <memcpy>
 800445a:	4631      	mov	r1, r6
 800445c:	4638      	mov	r0, r7
 800445e:	f7ff ff35 	bl	80042cc <_free_r>
 8004462:	e7e9      	b.n	8004438 <_realloc_r+0x1c>
 8004464:	4635      	mov	r5, r6
 8004466:	e7e7      	b.n	8004438 <_realloc_r+0x1c>

08004468 <_sbrk_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4c06      	ldr	r4, [pc, #24]	; (8004484 <_sbrk_r+0x1c>)
 800446c:	2300      	movs	r3, #0
 800446e:	4605      	mov	r5, r0
 8004470:	4608      	mov	r0, r1
 8004472:	6023      	str	r3, [r4, #0]
 8004474:	f000 f812 	bl	800449c <_sbrk>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d102      	bne.n	8004482 <_sbrk_r+0x1a>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	b103      	cbz	r3, 8004482 <_sbrk_r+0x1a>
 8004480:	602b      	str	r3, [r5, #0]
 8004482:	bd38      	pop	{r3, r4, r5, pc}
 8004484:	200154c8 	.word	0x200154c8

08004488 <__malloc_lock>:
 8004488:	4770      	bx	lr

0800448a <__malloc_unlock>:
 800448a:	4770      	bx	lr

0800448c <_malloc_usable_size_r>:
 800448c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004490:	1f18      	subs	r0, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	bfbc      	itt	lt
 8004496:	580b      	ldrlt	r3, [r1, r0]
 8004498:	18c0      	addlt	r0, r0, r3
 800449a:	4770      	bx	lr

0800449c <_sbrk>:
 800449c:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <_sbrk+0x38>)
 800449e:	6819      	ldr	r1, [r3, #0]
 80044a0:	b510      	push	{r4, lr}
 80044a2:	4602      	mov	r2, r0
 80044a4:	b909      	cbnz	r1, 80044aa <_sbrk+0xe>
 80044a6:	490c      	ldr	r1, [pc, #48]	; (80044d8 <_sbrk+0x3c>)
 80044a8:	6019      	str	r1, [r3, #0]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	4669      	mov	r1, sp
 80044ae:	4402      	add	r2, r0
 80044b0:	428a      	cmp	r2, r1
 80044b2:	d806      	bhi.n	80044c2 <_sbrk+0x26>
 80044b4:	4909      	ldr	r1, [pc, #36]	; (80044dc <_sbrk+0x40>)
 80044b6:	4c0a      	ldr	r4, [pc, #40]	; (80044e0 <_sbrk+0x44>)
 80044b8:	6809      	ldr	r1, [r1, #0]
 80044ba:	42a1      	cmp	r1, r4
 80044bc:	d008      	beq.n	80044d0 <_sbrk+0x34>
 80044be:	428a      	cmp	r2, r1
 80044c0:	d906      	bls.n	80044d0 <_sbrk+0x34>
 80044c2:	f000 f80f 	bl	80044e4 <__errno>
 80044c6:	230c      	movs	r3, #12
 80044c8:	6003      	str	r3, [r0, #0]
 80044ca:	f04f 30ff 	mov.w	r0, #4294967295
 80044ce:	bd10      	pop	{r4, pc}
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e7fc      	b.n	80044ce <_sbrk+0x32>
 80044d4:	200153b8 	.word	0x200153b8
 80044d8:	200154d0 	.word	0x200154d0
 80044dc:	2000008c 	.word	0x2000008c
 80044e0:	cafedead 	.word	0xcafedead

080044e4 <__errno>:
 80044e4:	4b01      	ldr	r3, [pc, #4]	; (80044ec <__errno+0x8>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000028 	.word	0x20000028

080044f0 <_init>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	bf00      	nop
 80044f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f6:	bc08      	pop	{r3}
 80044f8:	469e      	mov	lr, r3
 80044fa:	4770      	bx	lr

080044fc <_fini>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	bf00      	nop
 8004500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004502:	bc08      	pop	{r3}
 8004504:	469e      	mov	lr, r3
 8004506:	4770      	bx	lr
